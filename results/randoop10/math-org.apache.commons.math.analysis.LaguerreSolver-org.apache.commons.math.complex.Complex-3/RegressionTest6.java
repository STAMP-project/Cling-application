import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double26 = laguerreSolver7.solve((double) (-1), (double) (short) 1, 0.7853981633974483d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.7853981633974483d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        int int10 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int13 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        double double19 = laguerreSolver7.solve((double) 20, 1.0d, 97.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 20.0d + "'", double19 == 20.0d);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        int int91 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) ' ', (double) '4');
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double92 = laguerreSolver7.solve((double) (byte) 100, (double) '4');
        laguerreSolver7.setMaximalIterationCount(100);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double96 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0E-14d + "'", double96 == 1.0E-14d);
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        double double38 = complex37.getReal();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = complex40.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z();
        boolean boolean3 = complex1.isNaN();
        double double4 = complex1.abs();
        double[] doubleArray7 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        laguerreSolver12.setAbsoluteAccuracy((double) '#');
        laguerreSolver12.resetAbsoluteAccuracy();
        laguerreSolver12.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24);
        org.apache.commons.math.complex.Complex complex29 = complex24.sin();
        org.apache.commons.math.complex.Complex complex30 = complex24.tan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex24, complex31 };
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver12.solveAll(complexArray32, complex34);
        laguerreSolver12.resetRelativeAccuracy();
        double double38 = laguerreSolver12.getAbsoluteAccuracy();
        double[] doubleArray41 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        double double44 = polynomialFunction42.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = polynomialFunction42.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver46 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction45);
        laguerreSolver46.setAbsoluteAccuracy((double) '#');
        laguerreSolver46.resetAbsoluteAccuracy();
        laguerreSolver46.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = complex53.multiply(complex58);
        org.apache.commons.math.complex.Complex complex63 = complex58.sin();
        org.apache.commons.math.complex.Complex complex64 = complex58.tan();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex58, complex65 };
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.log();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = laguerreSolver46.solveAll(complexArray66, complex68);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.log();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex78.add(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex82.conjugate();
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex74.subtract(complex85);
        org.apache.commons.math.complex.Complex[] complexArray87 = laguerreSolver12.solveAll(complexArray66, complex85);
        double double88 = laguerreSolver12.getResult();
        double double89 = laguerreSolver12.getFunctionValueAccuracy();
        laguerreSolver12.setFunctionValueAccuracy((double) (short) 100);
        boolean boolean92 = complex1.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0E-6d + "'", double38 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction45);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 52.0d + "'", double89 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        java.lang.Object[] objArray10 = new java.lang.Object[] { convergenceException4, complex6, true };
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray10);
        int int18 = maxIterationsExceededException17.getMaxIterations();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException17);
        java.lang.Object[] objArray20 = maxIterationsExceededException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException17);
        java.lang.String str22 = maxIterationsExceededException17.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: hi!" + "'", str22, "org.apache.commons.math.MaxIterationsExceededException: hi!");
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex25 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex28.tan();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex44.tan();
        org.apache.commons.math.complex.Complex complex48 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex49.log();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.tan();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex58.log();
        org.apache.commons.math.complex.Complex complex60 = complex52.subtract(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex48.add(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex42.add(complex48);
        org.apache.commons.math.complex.Complex complex63 = complex31.divide(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        double double65 = complex64.getReal();
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = complex26.divide(complex64);
        boolean boolean68 = complex26.isInfinite();
        java.lang.Class<?> wildcardClass69 = complex26.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math.complex.Complex complex10 = complex8.sin();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        double double45 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.0E-15d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex0.sin();
        java.lang.Class<?> wildcardClass3 = complex0.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) -1);
        double double14 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        double double20 = laguerreSolver17.getRelativeAccuracy();
        laguerreSolver17.resetMaximalIterationCount();
        laguerreSolver17.setRelativeAccuracy((-1.0d));
        double double24 = laguerreSolver17.getFunctionValueAccuracy();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex60.atan();
        org.apache.commons.math.complex.Complex complex62 = complex61.atan();
        org.apache.commons.math.complex.Complex complex63 = complex62.sin();
        org.apache.commons.math.complex.Complex complex64 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex62.asin();
        org.apache.commons.math.complex.Complex complex66 = laguerreSolver17.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.log();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex70.add(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex76.tanh();
        org.apache.commons.math.complex.Complex complex79 = complex76.cosh();
        double double80 = complex79.abs();
        org.apache.commons.math.complex.Complex complex81 = complex79.tanh();
        org.apache.commons.math.complex.Complex complex82 = laguerreSolver7.solve(complexArray54, complex81);
        laguerreSolver7.setFunctionValueAccuracy(4.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-14d + "'", double20 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-15d + "'", double24 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray7 = functionEvaluationException6.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", objArray7);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "", objArray7);
        java.lang.Throwable[] throwableArray10 = maxIterationsExceededException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException9);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        boolean boolean19 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex23.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = complex23.cos();
        org.apache.commons.math.complex.Complex complex30 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex23.tanh();
        boolean boolean32 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex33 = complex16.multiply(complex23);
        double double34 = complex33.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray7 = functionEvaluationException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray18);
        int int26 = maxIterationsExceededException25.getMaxIterations();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) mathException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException34);
        java.lang.Throwable[] throwableArray36 = mathException34.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) convergenceException37);
        java.lang.Object[] objArray39 = convergenceException37.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray39);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray9 = functionEvaluationException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", objArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", objArray9, (java.lang.Throwable) mathException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray9);
        java.lang.Object[] objArray29 = convergenceException28.getArguments();
        java.lang.String str30 = convergenceException28.getPattern();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str30, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = laguerreSolver7.solve(complexArray49, complex61);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 1);
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double41 = laguerreSolver7.getFunctionValueAccuracy();
        double double42 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double44 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        double double20 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount(10);
        double double23 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex10.exp();
        org.apache.commons.math.complex.Complex complex14 = complex10.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        double double33 = laguerreSolver7.getResult();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(1.2314965134057307d);
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        laguerreSolver19.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex31.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex31, complex38 };
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver19.solveAll(complexArray39, complex41);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean45 = complex44.isInfinite();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex46.tan();
        boolean boolean50 = complex44.equals((java.lang.Object) complex49);
        boolean boolean51 = complex49.isNaN();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = complex57.log();
        org.apache.commons.math.complex.Complex complex61 = complex55.pow(complex57);
        org.apache.commons.math.complex.Complex complex62 = complex57.cos();
        org.apache.commons.math.complex.Complex complex63 = complex57.atan();
        org.apache.commons.math.complex.Complex complex64 = complex57.tan();
        org.apache.commons.math.complex.Complex complex65 = complex49.add(complex57);
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver7.solveAll(complexArray39, complex49);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setFunctionValueAccuracy(10.0d);
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        double double46 = laguerreSolver7.getResult();
        double double50 = laguerreSolver7.solve((double) (short) -1, (double) 52, (double) 35);
        laguerreSolver7.resetMaximalIterationCount();
        double[] doubleArray54 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray54);
        double double57 = polynomialFunction55.value((double) 10.0f);
        int int58 = polynomialFunction55.degree();
        double[] doubleArray59 = polynomialFunction55.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction60 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray59);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray59);
        double[] doubleArray62 = polynomialFunction61.getCoefficients();
        int int63 = polynomialFunction61.degree();
        double[] doubleArray64 = polynomialFunction61.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver7.solveAll(doubleArray64, 1.4440009959998334d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 0.0]");
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver8.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 1);
        double[] doubleArray19 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver7.solveAll(doubleArray19, 1.0E-14d);
        laguerreSolver7.setRelativeAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.setAbsoluteAccuracy(97.0d);
        double double33 = laguerreSolver7.solve(2.718281828459045d, (double) 0.0f, 1.557407724654902d);
        double double34 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.718281828459045d + "'", double33 == 2.718281828459045d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 97.0d + "'", double34 == 97.0d);
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex25 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray10 = functionEvaluationException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray13, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        java.lang.Object[] objArray23 = new java.lang.Object[] { convergenceException17, complex19, true };
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException27);
        convergenceException15.addSuppressed((java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray30 = convergenceException28.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10, (java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray32 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        java.lang.Object[] objArray45 = new java.lang.Object[] { convergenceException39, complex41, true };
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray47, throwable48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray45, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", objArray45);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray45);
        java.lang.Throwable[] throwableArray53 = maxIterationsExceededException52.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray53, (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException61);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.atan();
        java.lang.Object[] objArray74 = new java.lang.Object[] { convergenceException68, complex70, true };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray76, throwable77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray74, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("", objArray74);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException81 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray74);
        int int82 = maxIterationsExceededException81.getMaxIterations();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str87 = functionEvaluationException86.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException86);
        java.lang.String str89 = functionEvaluationException86.getPattern();
        mathException83.addSuppressed((java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException83);
        double double93 = functionEvaluationException92.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(1.1432116289313778d, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) functionEvaluationException92);
        double double95 = functionEvaluationException94.getArgument();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 32.0d + "'", double93 == 32.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.1432116289313778d + "'", double95 == 1.1432116289313778d);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.cos();
        org.apache.commons.math.complex.Complex complex25 = complex19.atan();
        org.apache.commons.math.complex.Complex complex26 = complex11.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        boolean boolean32 = complex28.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex33 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex28.asin();
        boolean boolean35 = complex34.isNaN();
        org.apache.commons.math.complex.Complex complex36 = complex11.pow(complex34);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.atan();
        org.apache.commons.math.complex.Complex complex39 = complex38.atan();
        org.apache.commons.math.complex.Complex complex40 = complex34.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex34.asin();
        org.apache.commons.math.complex.Complex complex42 = complex8.divide(complex41);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver7.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException25);
        functionEvaluationException7.addSuppressed((java.lang.Throwable) mathException25);
        java.lang.Object[] objArray28 = mathException25.getArguments();
        java.lang.String str29 = mathException25.toString();
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.math.MathException: " + "'", str29, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        boolean boolean11 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex12.tan();
        boolean boolean14 = complex2.equals((java.lang.Object) complex13);
        boolean boolean15 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = complex2.acos();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.tan();
        boolean boolean23 = complex22.isNaN();
        boolean boolean24 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex25 = complex16.multiply(complex22);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray12);
        int int20 = maxIterationsExceededException19.getMaxIterations();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException21);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray24, throwable25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        java.lang.Object[] objArray34 = new java.lang.Object[] { convergenceException28, complex30, true };
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray36, throwable37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray34, (java.lang.Throwable) convergenceException38);
        convergenceException26.addSuppressed((java.lang.Throwable) convergenceException39);
        java.lang.Throwable[] throwableArray41 = convergenceException39.getSuppressed();
        mathException21.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException39);
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        double double15 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 10);
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        java.lang.Class<?> wildcardClass21 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.5403023058681398d, 3.141592653589793d);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (byte) 10);
        double double25 = laguerreSolver7.getAbsoluteAccuracy();
        double double26 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-6d + "'", double25 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0E-6d + "'", double26 == 1.0E-6d);
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        org.apache.commons.math.complex.Complex complex59 = complex43.negate();
        org.apache.commons.math.complex.Complex complex60 = complex43.log();
        org.apache.commons.math.complex.Complex complex61 = complex43.log();
        org.apache.commons.math.complex.Complex complex62 = complex43.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        org.apache.commons.math.complex.Complex complex16 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = complex11.pow(complex13);
        org.apache.commons.math.complex.Complex complex18 = complex13.cos();
        org.apache.commons.math.complex.Complex complex19 = complex13.atan();
        org.apache.commons.math.complex.Complex complex20 = complex13.tan();
        org.apache.commons.math.complex.Complex complex21 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex22 = complex13.sin();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex26.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex22.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex22.tanh();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex(0.0d, (double) 4);
        org.apache.commons.math.complex.Complex complex39 = complex35.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "");
        convergenceException6.addSuppressed((java.lang.Throwable) functionEvaluationException9);
        java.lang.Throwable[] throwableArray11 = convergenceException6.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) maxIterationsExceededException15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) functionEvaluationException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.761594155955765d, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) mathException7);
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        org.apache.commons.math.complex.Complex complex59 = complex43.negate();
        org.apache.commons.math.complex.Complex complex60 = complex43.log();
        org.apache.commons.math.complex.Complex complex61 = complex43.sqrt();
        double double62 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex64 = complex43.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray11, throwable12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        java.lang.Object[] objArray21 = new java.lang.Object[] { convergenceException15, complex17, true };
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException26);
        java.lang.Throwable[] throwableArray28 = convergenceException26.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray8, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("", objArray2, throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.MaxIterationsExceededException: hi!");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray2, (java.lang.Throwable) functionEvaluationException7);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        double double8 = polynomialFunction4.value((double) 10L);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        double double11 = polynomialFunction4.value((double) (short) 100);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean5 = complex1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex1.asin();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex7.exp();
        boolean boolean11 = complex7.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.0d) + "'", double8 == (-0.0d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = laguerreSolver7.solve(complexArray49, complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.tanh();
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        double double65 = complex64.getImaginary();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex18.pow(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.cos();
        org.apache.commons.math.complex.Complex complex26 = complex20.atan();
        org.apache.commons.math.complex.Complex complex27 = complex12.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean29 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex30.tan();
        boolean boolean34 = complex28.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex33.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex27.subtract(complex40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException44);
        boolean boolean46 = complex27.equals((java.lang.Object) "");
        org.apache.commons.math.complex.Complex complex47 = complex4.multiply(complex27);
        org.apache.commons.math.complex.Complex complex48 = complex47.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) convergenceException3);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex12.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.conjugate();
        java.lang.Object[] objArray19 = new java.lang.Object[] { complex18 };
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        java.lang.Object[] objArray28 = new java.lang.Object[] { convergenceException22, complex24, true };
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray30, throwable31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray19, (java.lang.Throwable) mathException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "", objArray19);
        java.lang.String str37 = functionEvaluationException36.getPattern();
        functionEvaluationException4.addSuppressed((java.lang.Throwable) functionEvaluationException36);
        double double39 = functionEvaluationException36.getArgument();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray3, throwable4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException18);
        java.lang.Throwable[] throwableArray20 = convergenceException18.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Throwable) convergenceException29);
        java.lang.Throwable[] throwableArray31 = convergenceException29.getSuppressed();
        java.lang.Class<?> wildcardClass32 = convergenceException29.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int48 = laguerreSolver7.getIterationCount();
        int int49 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        boolean boolean8 = complex4.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex4.asin();
        org.apache.commons.math.complex.Complex complex11 = complex4.cos();
        boolean boolean12 = complex1.equals((java.lang.Object) complex11);
        boolean boolean13 = complex11.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex4.tan();
        org.apache.commons.math.complex.Complex complex8 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.tan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex12.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex8.add(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        double double24 = complex22.getReal();
        org.apache.commons.math.complex.Complex complex25 = complex22.atan();
        org.apache.commons.math.complex.Complex complex26 = complex3.subtract(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        double[] doubleArray19 = new double[] { (byte) -1, (-0.0d), (byte) 0, 1.0E-15d, (byte) 10 };
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver7.solveAll(doubleArray19, 100.0d);
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(97.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 0);
        laguerreSolver7.resetMaximalIterationCount();
        int int28 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double30 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -0.0, 0.0, 1.0E-15, 10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0E-14d + "'", double30 == 1.0E-14d);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("hi!");
        java.lang.Object[] objArray8 = convergenceException7.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", objArray8);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: hi!", objArray8);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        java.lang.Object[] objArray21 = convergenceException20.getArguments();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "hi!", (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray21, (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray8, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException36);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.tan();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.apache.commons.math.complex.Complex complex32 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex33 = complex28.sin();
        org.apache.commons.math.complex.Complex complex34 = complex28.tan();
        org.apache.commons.math.complex.Complex complex35 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex38.tan();
        org.apache.commons.math.complex.Complex complex42 = complex37.subtract(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex46.add(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex54.tan();
        org.apache.commons.math.complex.Complex complex58 = complex54.sinh();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex59.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.tan();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex62.subtract(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex58.add(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex52.add(complex58);
        org.apache.commons.math.complex.Complex complex73 = complex41.divide(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex72.tan();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt1z();
        org.apache.commons.math.complex.Complex complex76 = complex35.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex78 = complex21.pow(complex77);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex3.negate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        boolean boolean11 = complex7.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean23 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex24.tan();
        boolean boolean28 = complex22.equals((java.lang.Object) complex27);
        boolean boolean29 = complex27.isNaN();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = complex35.log();
        org.apache.commons.math.complex.Complex complex39 = complex33.pow(complex35);
        org.apache.commons.math.complex.Complex complex40 = complex35.cos();
        org.apache.commons.math.complex.Complex complex41 = complex35.atan();
        org.apache.commons.math.complex.Complex complex42 = complex35.tan();
        org.apache.commons.math.complex.Complex complex43 = complex27.add(complex35);
        org.apache.commons.math.complex.Complex complex44 = complex35.sin();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex48.add(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex44.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex44.sqrt1z();
        org.apache.commons.math.complex.Complex complex58 = complex19.subtract(complex44);
        org.apache.commons.math.complex.Complex complex59 = complex19.tan();
        org.apache.commons.math.complex.Complex complex60 = complex10.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex60.sin();
        boolean boolean62 = complex60.isNaN();
        double double63 = complex60.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) 1, 10.0d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean4 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        boolean boolean9 = complex3.equals((java.lang.Object) complex8);
        boolean boolean10 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex16.cos();
        org.apache.commons.math.complex.Complex complex22 = complex16.atan();
        org.apache.commons.math.complex.Complex complex23 = complex16.tan();
        org.apache.commons.math.complex.Complex complex24 = complex8.add(complex16);
        org.apache.commons.math.complex.Complex complex25 = complex16.sin();
        org.apache.commons.math.complex.Complex complex26 = complex2.divide(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math.complex.Complex complex31 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex35.subtract(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex31.add(complex43);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex46.tan();
        org.apache.commons.math.complex.Complex complex50 = complex45.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex52 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex52.tan();
        boolean boolean54 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex55 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex56 = complex53.sqrt1z();
        org.apache.commons.math.complex.Complex complex57 = complex26.divide(complex56);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex11.acos();
        org.apache.commons.math.complex.Complex complex14 = complex11.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        java.lang.Object[] objArray25 = convergenceException24.getArguments();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray13, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1);
        int int30 = maxIterationsExceededException29.getMaxIterations();
        int int31 = maxIterationsExceededException29.getMaxIterations();
        int int32 = maxIterationsExceededException29.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", objArray13, (java.lang.Throwable) maxIterationsExceededException29);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double90 = laguerreSolver7.solve((double) 0, (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy(97.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException6);
        java.lang.String str9 = mathException8.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str9, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        double double13 = laguerreSolver7.getFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(0.8414709848078965d, (-1.0d), 1.0E-14d);
        laguerreSolver7.resetFunctionValueAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.8414709848078965d + "'", double17 == 0.8414709848078965d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        double[] doubleArray3 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        double double6 = polynomialFunction4.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        laguerreSolver8.setAbsoluteAccuracy((double) '#');
        laguerreSolver8.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver8.getPolynomialFunction();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        laguerreSolver20.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = complex27.multiply(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex32.sin();
        org.apache.commons.math.complex.Complex complex38 = complex32.tan();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex32, complex39 };
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver20.solveAll(complexArray40, complex42);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = complex48.pow(complex50);
        org.apache.commons.math.complex.Complex complex55 = laguerreSolver8.solve(complexArray40, complex48);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        java.lang.Object[] objArray66 = new java.lang.Object[] { convergenceException60, complex62, true };
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray68, throwable69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray66, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray40, (java.lang.Throwable) functionEvaluationException73);
        java.lang.Class<?> wildcardClass75 = mathException74.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction46.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = polynomialFunction47.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver49 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction47);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction50 = polynomialFunction47.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertNotNull(polynomialFunction48);
        org.junit.Assert.assertNotNull(univariateRealFunction50);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.cos();
        org.apache.commons.math.complex.Complex complex40 = complex38.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        double double38 = complex37.getReal();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = complex37.atan();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex41.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        double[] doubleArray6 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver11.setAbsoluteAccuracy((double) '#');
        laguerreSolver11.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver11.getPolynomialFunction();
        double double16 = laguerreSolver11.getRelativeAccuracy();
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        laguerreSolver36.resetAbsoluteAccuracy();
        laguerreSolver36.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex48);
        org.apache.commons.math.complex.Complex complex53 = complex48.sin();
        org.apache.commons.math.complex.Complex complex54 = complex48.tan();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex48, complex55 };
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver36.solveAll(complexArray56, complex58);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex65.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex66.log();
        org.apache.commons.math.complex.Complex complex70 = complex64.pow(complex66);
        org.apache.commons.math.complex.Complex complex71 = laguerreSolver24.solve(complexArray56, complex64);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex76.log();
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex83 = complex81.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex79.add(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.conjugate();
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex75.subtract(complex86);
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver11.solveAll(complexArray56, complex87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray88);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException91 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 1);
        int int16 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double22 = laguerreSolver7.solve(1.557407724654902d, 100.0d, 3.141592653589793d);
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.557407724654902d + "'", double22 == 1.557407724654902d);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex16.tan();
        org.apache.commons.math.complex.Complex complex20 = complex15.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex24.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex32.tan();
        org.apache.commons.math.complex.Complex complex36 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.tan();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = complex40.subtract(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex36.add(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex30.add(complex36);
        org.apache.commons.math.complex.Complex complex51 = complex19.divide(complex50);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex19.subtract(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex19.atan();
        org.apache.commons.math.complex.Complex complex55 = complex19.tan();
        org.apache.commons.math.complex.Complex complex56 = complex11.divide(complex19);
        org.apache.commons.math.complex.Complex complex57 = complex56.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray17);
        int int25 = maxIterationsExceededException24.getMaxIterations();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException24);
        java.lang.Object[] objArray28 = convergenceException27.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        double double33 = functionEvaluationException32.getArgument();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray28, (java.lang.Throwable) functionEvaluationException32);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray42, throwable43);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        java.lang.Object[] objArray52 = new java.lang.Object[] { convergenceException46, complex48, true };
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray54, throwable55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray52, (java.lang.Throwable) convergenceException56);
        convergenceException44.addSuppressed((java.lang.Throwable) convergenceException57);
        java.lang.Throwable[] throwableArray59 = convergenceException57.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray59, (java.lang.Throwable) functionEvaluationException67);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException69 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "hi!", (java.lang.Object[]) throwableArray59);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray59);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException((int) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray59);
        java.lang.Object[] objArray72 = maxIterationsExceededException71.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray28, (java.lang.Throwable) maxIterationsExceededException71);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException74 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", objArray28);
        int int75 = maxIterationsExceededException74.getMaxIterations();
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray14 = functionEvaluationException13.getArguments();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray14);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray17, throwable18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        java.lang.Object[] objArray27 = new java.lang.Object[] { convergenceException21, complex23, true };
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        convergenceException19.addSuppressed((java.lang.Throwable) convergenceException32);
        java.lang.Throwable[] throwableArray34 = convergenceException32.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray14, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        java.lang.Object[] objArray46 = new java.lang.Object[] { convergenceException40, complex42, true };
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray48, throwable49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException50);
        convergenceException36.addSuppressed((java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray6, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) mathException54);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double88 = laguerreSolver7.getResult();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        double[] doubleArray40 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction41.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        laguerreSolver45.setAbsoluteAccuracy((double) '#');
        laguerreSolver45.resetAbsoluteAccuracy();
        laguerreSolver45.resetRelativeAccuracy();
        laguerreSolver45.setRelativeAccuracy(0.0d);
        boolean boolean52 = complex36.equals((java.lang.Object) 0.0d);
        org.apache.commons.math.complex.Complex complex53 = complex36.asin();
        boolean boolean54 = complex53.isInfinite();
        org.apache.commons.math.complex.Complex complex55 = complex53.cosh();
        double double56 = complex55.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex16.multiply(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.sin();
        org.apache.commons.math.complex.Complex complex27 = complex21.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex21, complex28 };
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver9.solveAll(complexArray29, complex31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        java.lang.Object[] objArray52 = new java.lang.Object[] { convergenceException46, complex48, true };
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray54, throwable55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray52, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", objArray52);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException59 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray52);
        int int60 = maxIterationsExceededException59.getMaxIterations();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException59);
        java.lang.Object[] objArray63 = convergenceException62.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException64 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: ", objArray63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.MathException: ", objArray63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException65);
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray29, (java.lang.Throwable) functionEvaluationException66);
        java.lang.Class<?> wildcardClass68 = complexArray29.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex14.add(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.asin();
        double double22 = complex19.abs();
        org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex(1.0E-14d, (double) 10);
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex19.add(complex26);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex18.pow(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.cos();
        org.apache.commons.math.complex.Complex complex26 = complex20.atan();
        org.apache.commons.math.complex.Complex complex27 = complex12.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean29 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex30.tan();
        boolean boolean34 = complex28.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex33.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex27.subtract(complex40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException44);
        boolean boolean46 = complex27.equals((java.lang.Object) "");
        org.apache.commons.math.complex.Complex complex47 = complex4.multiply(complex27);
        double double48 = complex47.abs();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex49.log();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex50.tan();
        org.apache.commons.math.complex.Complex complex53 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex50.atan();
        boolean boolean55 = complex50.isInfinite();
        org.apache.commons.math.complex.Complex complex56 = complex50.sqrt1z();
        org.apache.commons.math.complex.Complex complex57 = complex56.tan();
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex47.subtract(complex57);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = complex7.atan();
        org.apache.commons.math.complex.Complex complex13 = complex7.negate();
        double double14 = complex7.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.add(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex26.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex33.log();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = complex33.multiply(complex38);
        org.apache.commons.math.complex.Complex complex43 = complex30.multiply(complex38);
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex15.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex15.acos();
        org.apache.commons.math.complex.Complex complex47 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex48 = complex15.acos();
        boolean boolean49 = complex1.equals((java.lang.Object) complex15);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tan();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        laguerreSolver20.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = complex27.multiply(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex32.sin();
        org.apache.commons.math.complex.Complex complex38 = complex32.tan();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex32, complex39 };
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver20.solveAll(complexArray40, complex42);
        laguerreSolver20.resetRelativeAccuracy();
        double double46 = laguerreSolver20.getAbsoluteAccuracy();
        laguerreSolver20.resetRelativeAccuracy();
        double double48 = laguerreSolver20.getResult();
        double double52 = laguerreSolver20.solve(100.0d, 35.0d, (double) (byte) 1);
        double double53 = laguerreSolver20.getRelativeAccuracy();
        double double57 = laguerreSolver20.solve((double) 'a', 0.0d, 100.0d);
        double double58 = laguerreSolver20.getFunctionValueAccuracy();
        boolean boolean59 = complex10.equals((java.lang.Object) double58);
        java.lang.Class<?> wildcardClass60 = complex10.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-6d + "'", double46 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0E-14d + "'", double53 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 97.0d + "'", double57 == 97.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double[] doubleArray35 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction38 = polynomialFunction37.derivative();
        double[] doubleArray39 = polynomialFunction37.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray41 = laguerreSolver7.solveAll(doubleArray39, 0.7853981633974483d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        double[] doubleArray43 = polynomialFunction42.getCoefficients();
        double[] doubleArray44 = polynomialFunction42.getCoefficients();
        double double46 = polynomialFunction42.value((double) 52);
        double double48 = polynomialFunction42.value((double) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        double double76 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) -1);
        double double79 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0E-6d + "'", double76 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0E-6d + "'", double79 == 1.0E-6d);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex10.tan();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex10);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.atan();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex24.tan();
        org.apache.commons.math.complex.Complex complex28 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex23.pow(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        boolean boolean38 = complex32.equals((java.lang.Object) complex37);
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex45.cos();
        org.apache.commons.math.complex.Complex complex51 = complex45.atan();
        org.apache.commons.math.complex.Complex complex52 = complex45.tan();
        org.apache.commons.math.complex.Complex complex53 = complex37.add(complex45);
        org.apache.commons.math.complex.Complex complex54 = complex45.sin();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex58.add(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex65 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex54.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex54.sqrt1z();
        org.apache.commons.math.complex.Complex complex70 = new org.apache.commons.math.complex.Complex((double) (byte) 1, (double) 'a');
        org.apache.commons.math.complex.Complex complex71 = complex67.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex31.add(complex70);
        boolean boolean73 = complex10.equals((java.lang.Object) complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex74.exp();
        org.apache.commons.math.complex.Complex complex76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex77 = complex74.subtract(complex76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        int int10 = laguerreSolver7.getMaximalIterationCount();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.38535742648327137d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex16.multiply(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.sin();
        org.apache.commons.math.complex.Complex complex27 = complex21.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex21, complex28 };
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver9.solveAll(complexArray29, complex31);
        laguerreSolver9.setRelativeAccuracy((double) 1.0f);
        int int36 = laguerreSolver9.getIterationCount();
        laguerreSolver9.setFunctionValueAccuracy((double) 10L);
        double double39 = laguerreSolver9.getAbsoluteAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double47 = polynomialFunction45.value((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = polynomialFunction45.polynomialDerivative();
        double[] doubleArray49 = polynomialFunction45.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver9.solveAll(doubleArray49, 1.557407724654902d);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) complexArray51);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-6d + "'", double39 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray51);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "org.apache.commons.math.MathException: hi!");
        java.lang.Object[] objArray4 = functionEvaluationException3.getArguments();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        double[] doubleArray13 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        laguerreSolver18.setAbsoluteAccuracy((double) '#');
        laguerreSolver18.resetAbsoluteAccuracy();
        laguerreSolver18.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = complex30.log();
        org.apache.commons.math.complex.Complex complex34 = complex25.multiply(complex30);
        org.apache.commons.math.complex.Complex complex35 = complex30.sin();
        org.apache.commons.math.complex.Complex complex36 = complex30.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex30, complex37 };
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver18.solveAll(complexArray38, complex40);
        laguerreSolver18.resetRelativeAccuracy();
        double double44 = laguerreSolver18.getAbsoluteAccuracy();
        laguerreSolver18.resetFunctionValueAccuracy();
        boolean boolean46 = complex10.equals((java.lang.Object) laguerreSolver18);
        int int47 = laguerreSolver18.getMaximalIterationCount();
        laguerreSolver18.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex3.cos();
        org.apache.commons.math.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex3.sin();
        org.apache.commons.math.complex.Complex complex12 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex12.tan();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex20.sin();
        org.apache.commons.math.complex.Complex complex23 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex13.multiply(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(Double.POSITIVE_INFINITY, (double) (byte) -1);
        org.apache.commons.math.complex.Complex complex3 = complex2.log();
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        laguerreSolver13.resetAbsoluteAccuracy();
        double double17 = laguerreSolver13.solve((double) 0L, (double) 52);
        laguerreSolver13.setMaximalIterationCount((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = laguerreSolver13.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex3.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.cos();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex6.tan();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex2.pow(complex14);
        double double17 = complex2.abs();
        org.apache.commons.math.complex.Complex complex18 = complex2.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        double double25 = laguerreSolver7.solve((double) (-1), (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        boolean boolean5 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray16);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        java.lang.Object[] objArray28 = convergenceException27.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray16, (java.lang.Throwable) convergenceException27);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray16, throwable31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = complex34.multiply(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex39.sin();
        org.apache.commons.math.complex.Complex complex45 = complex39.tan();
        java.lang.Object[] objArray46 = new java.lang.Object[] { throwable31, complex45 };
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        java.lang.Object[] objArray58 = new java.lang.Object[] { convergenceException52, complex54, true };
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray60, throwable61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray58, (java.lang.Throwable) convergenceException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", objArray58);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException65 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException66);
        java.lang.String str68 = mathException67.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) mathException67);
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray46, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("", objArray46);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        int int14 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) '#', 0.0d);
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray20 = polynomialFunction19.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        int int21 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException22);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        java.lang.Object[] objArray35 = new java.lang.Object[] { convergenceException29, complex31, true };
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray35, (java.lang.Throwable) convergenceException39);
        convergenceException27.addSuppressed((java.lang.Throwable) convergenceException40);
        java.lang.Throwable[] throwableArray42 = convergenceException40.getSuppressed();
        mathException22.addSuppressed((java.lang.Throwable) convergenceException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(0.38535742648327137d, "Evaluation failed for argument = {0}", (java.lang.Throwable) mathException22);
        java.lang.String str45 = mathException22.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str45, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy((double) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double18 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-6d + "'", double18 == 1.0E-6d);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 100);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        laguerreSolver7.setRelativeAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.setRelativeAccuracy(100.0d);
        double double53 = laguerreSolver7.solve(0.0d, 35.0d, 3.141592653589793d);
        double double57 = laguerreSolver7.solve(4.0d, (double) (short) 100, 35.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 4.0d + "'", double57 == 4.0d);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray7, throwable8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray18 = functionEvaluationException17.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        java.lang.Object[] objArray29 = new java.lang.Object[] { convergenceException23, complex25, true };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray31, throwable32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray29, (java.lang.Throwable) convergenceException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray29);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray29);
        int int37 = maxIterationsExceededException36.getMaxIterations();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException36);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) mathException38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) mathException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) convergenceException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray7, (java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray48, throwable49);
        java.lang.Object[] objArray51 = convergenceException50.getArguments();
        java.lang.Throwable[] throwableArray52 = convergenceException50.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray52);
        java.lang.Throwable[] throwableArray54 = functionEvaluationException53.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", objArray7, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(2.0d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException57);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(3.9518054509189455d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        int int10 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 0);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.6679493967289549d, 1.1752011936438014d);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        double double85 = laguerreSolver7.getFunctionValueAccuracy();
        double double86 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double88 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(4.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0E-15d + "'", double85 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-15d + "'", double86 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-15d + "'", double88 == 1.0E-15d);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.cos();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex6.tan();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex2.pow(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex2.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex3.asin();
        org.apache.commons.math.complex.Complex complex5 = complex4.conjugate();
        double double6 = complex4.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex10.cos();
        org.apache.commons.math.complex.Complex complex16 = complex10.atan();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        boolean boolean23 = complex19.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex24 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex19.asin();
        boolean boolean26 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex27 = complex2.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.atan();
        org.apache.commons.math.complex.Complex complex30 = complex29.atan();
        org.apache.commons.math.complex.Complex complex31 = complex25.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex25.asin();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex37.add(complex38);
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.atan();
        org.apache.commons.math.complex.Complex complex44 = complex33.subtract(complex42);
        boolean boolean45 = complex33.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 'a', Double.NEGATIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex3 = complex2.asin();
        org.apache.commons.math.complex.Complex complex4 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex10);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double double10 = polynomialFunction3.value(32.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        double[] doubleArray13 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        laguerreSolver18.setAbsoluteAccuracy((double) '#');
        laguerreSolver18.resetAbsoluteAccuracy();
        laguerreSolver18.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = complex30.log();
        org.apache.commons.math.complex.Complex complex34 = complex25.multiply(complex30);
        org.apache.commons.math.complex.Complex complex35 = complex30.sin();
        org.apache.commons.math.complex.Complex complex36 = complex30.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex30, complex37 };
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver18.solveAll(complexArray38, complex40);
        laguerreSolver18.resetRelativeAccuracy();
        double double44 = laguerreSolver18.getAbsoluteAccuracy();
        double[] doubleArray47 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray47);
        double double50 = polynomialFunction48.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = polynomialFunction48.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver52 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction51);
        laguerreSolver52.setAbsoluteAccuracy((double) '#');
        laguerreSolver52.resetAbsoluteAccuracy();
        laguerreSolver52.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.atan();
        org.apache.commons.math.complex.Complex complex62 = complex59.log();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex59.multiply(complex64);
        org.apache.commons.math.complex.Complex complex69 = complex64.sin();
        org.apache.commons.math.complex.Complex complex70 = complex64.tan();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex64, complex71 };
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex73.log();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray76 = laguerreSolver52.solveAll(complexArray72, complex74);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex81.log();
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex85 = complex83.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex88 = complex86.multiply(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex84.add(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex88.conjugate();
        org.apache.commons.math.complex.Complex complex91 = complex90.cosh();
        org.apache.commons.math.complex.Complex complex92 = complex80.subtract(complex91);
        org.apache.commons.math.complex.Complex[] complexArray93 = laguerreSolver18.solveAll(complexArray72, complex91);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException94 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException95 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException98 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException99 = new org.apache.commons.math.FunctionEvaluationException((-0.1838722778432016d), "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray93);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8, throwable9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        convergenceException10.addSuppressed((java.lang.Throwable) convergenceException23);
        java.lang.Throwable[] throwableArray25 = convergenceException23.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "hi!", (java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) 97, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) functionEvaluationException43);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray51, throwable52);
        java.lang.Object[] objArray54 = convergenceException53.getArguments();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray64 = functionEvaluationException63.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, "hi!", objArray64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException67 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray64);
        int int68 = maxIterationsExceededException67.getMaxIterations();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray54, (java.lang.Throwable) maxIterationsExceededException67);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) mathException69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray25);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        double double20 = polynomialFunction18.value((double) 1L);
        double double22 = polynomialFunction18.value((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        double double10 = complex7.abs();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex7.add(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex17.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex1.pow(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex10.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        double double16 = complex14.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(4.0d, (double) (short) 10);
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double20 = laguerreSolver7.solve(4.0d, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4.0d + "'", double20 == 4.0d);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) ' ');
        laguerreSolver7.resetRelativeAccuracy();
        double double40 = laguerreSolver7.solve((double) 10L, 4.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        int int13 = laguerreSolver7.getMaximalIterationCount();
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1, 20.0d);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        double double8 = polynomialFunction4.value((double) 0.0f);
        double double10 = polynomialFunction4.value(35.0d);
        double double12 = polynomialFunction4.value((double) 1L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction4.polynomialDerivative();
        int int14 = polynomialFunction4.degree();
        double double16 = polynomialFunction4.value((double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        double double7 = polynomialFunction3.value((double) 100L);
        double double9 = polynomialFunction3.value((double) (short) 1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray8 = functionEvaluationException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        java.lang.Object[] objArray19 = new java.lang.Object[] { convergenceException13, complex15, true };
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray21, throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray19);
        int int27 = maxIterationsExceededException26.getMaxIterations();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException28);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        java.lang.Object[] objArray40 = convergenceException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray40, (java.lang.Throwable) maxIterationsExceededException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException46);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException49 = new org.apache.commons.math.MaxIterationsExceededException((int) '#');
        int int50 = maxIterationsExceededException49.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) maxIterationsExceededException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException49);
        int int53 = maxIterationsExceededException49.getMaxIterations();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double18 = laguerreSolver7.solve((double) '4', (double) 'a');
        double double19 = laguerreSolver7.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.negate();
        boolean boolean11 = complex10.isNaN();
        double double12 = complex10.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.0d) + "'", double12 == (-0.0d));
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double52 = laguerreSolver7.solve((double) 10.0f, 32.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        double double21 = laguerreSolver7.solve(97.0d, 52.0d);
        double double22 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 97.0d + "'", double21 == 97.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        double double33 = laguerreSolver7.getResult();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(1.2314965134057307d);
        laguerreSolver7.setRelativeAccuracy((double) 8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex16.add(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex20.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex24.atan();
        org.apache.commons.math.complex.Complex complex26 = complex24.asin();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean28 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex29.tan();
        boolean boolean33 = complex27.equals((java.lang.Object) complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex24.add(complex32);
        org.apache.commons.math.complex.Complex complex36 = complex9.add(complex24);
        org.apache.commons.math.complex.Complex complex37 = complex9.sqrt();
        double double38 = complex37.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-0.0d) + "'", double38 == (-0.0d));
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        java.lang.Object[] objArray23 = new java.lang.Object[] { convergenceException17, complex19, true };
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray23);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray23);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray32, throwable33);
        java.lang.Object[] objArray35 = convergenceException34.getArguments();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray23, (java.lang.Throwable) convergenceException34);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", objArray23, throwable38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        java.lang.Object[] objArray53 = new java.lang.Object[] { throwable38, complex52 };
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        java.lang.Object[] objArray65 = new java.lang.Object[] { convergenceException59, complex61, true };
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray67, throwable68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray65, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("", objArray65);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException72 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException73);
        java.lang.String str75 = mathException74.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray53, (java.lang.Throwable) mathException74);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) convergenceException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray53, (java.lang.Throwable) convergenceException79);
        java.lang.Object[] objArray87 = new java.lang.Object[] {};
        java.lang.Throwable throwable88 = null;
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("", objArray87, throwable88);
        java.lang.Object[] objArray90 = convergenceException89.getArguments();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("hi!", objArray90);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException92 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray90);
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "", objArray53, (java.lang.Throwable) convergenceException93);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException95 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray53);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException96 = new org.apache.commons.math.MaxIterationsExceededException(97, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", objArray53);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException97 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1", objArray53);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        java.lang.Object[] objArray11 = new java.lang.Object[] { convergenceException5, complex7, true };
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray13, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray11);
        int int19 = maxIterationsExceededException18.getMaxIterations();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        java.lang.Object[] objArray33 = new java.lang.Object[] { convergenceException27, complex29, true };
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray35, throwable36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray33, (java.lang.Throwable) convergenceException37);
        convergenceException25.addSuppressed((java.lang.Throwable) convergenceException38);
        java.lang.Throwable[] throwableArray40 = convergenceException38.getSuppressed();
        mathException20.addSuppressed((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException38);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.lang.String str44 = mathException42.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        double double23 = laguerreSolver7.solve((double) (-1), 0.7853981633974483d, (double) 97);
        double double26 = laguerreSolver7.solve((double) 20, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 20.0d + "'", double26 == 20.0d);
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(100.0d);
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 100L);
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double double18 = laguerreSolver7.solve((double) 100L, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (byte) 10);
        double double12 = polynomialFunction6.value(0.0d);
        double[] doubleArray13 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double[] doubleArray15 = polynomialFunction14.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException6 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException12);
        mathException7.addSuppressed((java.lang.Throwable) functionEvaluationException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray16 = mathException7.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray16, (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        java.lang.Object[] objArray42 = new java.lang.Object[] { convergenceException36, complex38, true };
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray44, throwable45);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray42, (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException49);
        functionEvaluationException31.addSuppressed((java.lang.Throwable) mathException49);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) mathException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(1.0E-14d, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) mathException49);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.5430806348152437d, 10.0d);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        double double16 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-6d + "'", double16 == 1.0E-6d);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getResult();
        laguerreSolver7.setRelativeAccuracy((double) 10L);
        laguerreSolver7.setRelativeAccuracy((-0.0d));
        laguerreSolver7.resetRelativeAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.761594155955765d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        double double59 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex21.pow(complex62);
        org.apache.commons.math.complex.Complex complex65 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.cos();
        org.apache.commons.math.complex.Complex complex67 = complex66.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        int int90 = laguerreSolver7.getMaximalIterationCount();
        double double91 = laguerreSolver7.getFunctionValueAccuracy();
        double double92 = laguerreSolver7.getRelativeAccuracy();
        double double96 = laguerreSolver7.solve((double) 32, 1.557407724654902d, 0.38535742648327137d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0E-15d + "'", double91 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0E-14d + "'", double92 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 32.0d + "'", double96 == 32.0d);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        double double40 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        int int21 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException20);
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        java.lang.Object[] objArray38 = new java.lang.Object[] { complex37 };
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        java.lang.Object[] objArray47 = new java.lang.Object[] { convergenceException41, complex43, true };
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray49, throwable50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray47, (java.lang.Throwable) convergenceException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", objArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray38, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray38);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) maxIterationsExceededException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException56);
        java.lang.Object[] objArray58 = mathException56.getArguments();
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray64, throwable65);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.atan();
        java.lang.Object[] objArray74 = new java.lang.Object[] { convergenceException68, complex70, true };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray76, throwable77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray74, (java.lang.Throwable) convergenceException78);
        convergenceException66.addSuppressed((java.lang.Throwable) convergenceException79);
        java.lang.Throwable[] throwableArray81 = convergenceException79.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray81, (java.lang.Throwable) functionEvaluationException89);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException91 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "hi!", (java.lang.Object[]) throwableArray81);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray81);
        java.lang.String str93 = convergenceException92.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray58, (java.lang.Throwable) convergenceException92);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!" + "'", str93, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy(10.0d);
        laguerreSolver7.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver7.resetRelativeAccuracy();
        double double13 = laguerreSolver7.getRelativeAccuracy();
        int int14 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction11);
        double double14 = univariateRealFunction11.value((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex3.cos();
        org.apache.commons.math.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex3.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        int int12 = laguerreSolver7.getMaximalIterationCount();
        int int13 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        double double23 = laguerreSolver7.solve((double) (-1), 0.7853981633974483d, (double) 97);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction24);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) '4');
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray18);
        java.lang.Throwable[] throwableArray26 = maxIterationsExceededException25.getSuppressed();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str38 = functionEvaluationException37.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) functionEvaluationException37);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException40);
        boolean boolean42 = complex4.equals((java.lang.Object) convergenceException40);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        int int7 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction4.derivative();
        int int10 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver11.setFunctionValueAccuracy(2.0d);
        double double14 = laguerreSolver11.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex16.multiply(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.sin();
        org.apache.commons.math.complex.Complex complex27 = complex21.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex21, complex28 };
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver9.solveAll(complexArray29, complex31);
        laguerreSolver9.resetRelativeAccuracy();
        double[] doubleArray37 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction40 = polynomialFunction39.derivative();
        double[] doubleArray41 = polynomialFunction39.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver9.solveAll(doubleArray41, 0.7853981633974483d);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex49.log();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex52.add(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.conjugate();
        java.lang.Object[] objArray59 = new java.lang.Object[] { complex58 };
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        java.lang.Object[] objArray68 = new java.lang.Object[] { convergenceException62, complex64, true };
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("", objArray70, throwable71);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray68, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", objArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray59, (java.lang.Throwable) mathException74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray43, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException80 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray43, (java.lang.Throwable) maxIterationsExceededException80);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean5 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex6.tan();
        boolean boolean10 = complex4.equals((java.lang.Object) complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.negate();
        org.apache.commons.math.complex.Complex complex12 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex3.subtract(complex9);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex11.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex11.exp();
        double double33 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex34 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException27);
        functionEvaluationException9.addSuppressed((java.lang.Throwable) mathException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(52.0d, (java.lang.Throwable) mathException27);
        java.lang.Object[] objArray31 = functionEvaluationException30.getArguments();
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray39, throwable40);
        java.lang.Object[] objArray42 = convergenceException41.getArguments();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "hi!", (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray42, (java.lang.Throwable) functionEvaluationException54);
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray61, throwable62);
        java.lang.Object[] objArray64 = convergenceException63.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray64, (java.lang.Throwable) functionEvaluationException69);
        java.lang.String str71 = convergenceException70.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray42, (java.lang.Throwable) convergenceException70);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray78, throwable79);
        java.lang.Object[] objArray81 = convergenceException80.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray81);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException83 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray81, (java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", objArray42, (java.lang.Throwable) convergenceException87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray31, (java.lang.Throwable) convergenceException87);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException87);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str71, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        double double13 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        boolean boolean16 = complex14.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.0d) + "'", double13 == (-0.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex3.cos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex13.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex9.add(complex20);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex23.tan();
        org.apache.commons.math.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex32.add(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex28.pow(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex43 = complex20.add(complex42);
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex(0.761594155955765d, (double) (short) 10);
        org.apache.commons.math.complex.Complex complex47 = complex42.pow(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = laguerreSolver7.solve(complexArray49, complex61);
        boolean boolean63 = complex62.isInfinite();
        java.lang.Class<?> wildcardClass64 = complex62.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        int int10 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int13 = laguerreSolver7.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction14.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        double[] doubleArray3 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        int int9 = polynomialFunction7.degree();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double38 = laguerreSolver7.solve((double) '4', 100.0d);
        double double39 = laguerreSolver7.getResult();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 0);
        double double44 = laguerreSolver7.solve(Double.NEGATIVE_INFINITY, 4.0d);
        double double45 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.NEGATIVE_INFINITY + "'", double44 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setMaximalIterationCount(0);
        int int21 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray10 = functionEvaluationException9.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        java.lang.Object[] objArray21 = new java.lang.Object[] { convergenceException15, complex17, true };
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", objArray21);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray21);
        int int29 = maxIterationsExceededException28.getMaxIterations();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) mathException30);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray39, throwable40);
        java.lang.Object[] objArray42 = convergenceException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray42);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException45 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray42, (java.lang.Throwable) maxIterationsExceededException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException54);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        laguerreSolver7.resetRelativeAccuracy();
        double double16 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        int int10 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.38535742648327137d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double25 = laguerreSolver7.solve((double) 10L, (double) (byte) 0);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 1);
        double double31 = laguerreSolver7.solve(0.6679493967289549d, 1.4440009959998334d, 3.9518054509189455d);
        double double32 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6679493967289549d + "'", double31 == 0.6679493967289549d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-6d + "'", double32 == 1.0E-6d);
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex11.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex11.exp();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex37.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex33.subtract(complex47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean50 = complex49.isInfinite();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex51.tan();
        boolean boolean55 = complex49.equals((java.lang.Object) complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.negate();
        double double57 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = complex56.cos();
        org.apache.commons.math.complex.Complex complex59 = complex33.subtract(complex56);
        org.apache.commons.math.complex.Complex complex60 = complex33.tan();
        org.apache.commons.math.complex.Complex complex61 = complex60.acos();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt1z();
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-0.0d) + "'", double57 == (-0.0d));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        java.lang.Object[] objArray10 = new java.lang.Object[] { convergenceException4, complex6, true };
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException15);
        java.lang.String str18 = convergenceException15.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException15);
        java.lang.Throwable[] throwableArray20 = convergenceException15.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException22);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(2.718281828459045d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double89 = laguerreSolver7.getAbsoluteAccuracy();
        int int90 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2.718281828459045d + "'", double89 == 2.718281828459045d);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        double[] doubleArray6 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver11.setAbsoluteAccuracy((double) '#');
        laguerreSolver11.resetAbsoluteAccuracy();
        laguerreSolver11.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex18.log();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = complex18.multiply(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex23.sin();
        org.apache.commons.math.complex.Complex complex29 = complex23.tan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex23, complex30 };
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver11.solveAll(complexArray31, complex33);
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray42, throwable43);
        java.lang.Object[] objArray45 = convergenceException44.getArguments();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", objArray45);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException47 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray45);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray45);
        java.lang.Throwable[] throwableArray49 = convergenceException48.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.atan();
        java.lang.Object[] objArray63 = new java.lang.Object[] { convergenceException57, complex59, true };
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("", objArray65, throwable66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray63, (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("", objArray63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException70 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray63);
        java.lang.Object[] objArray72 = new java.lang.Object[] {};
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray72, throwable73);
        java.lang.Object[] objArray75 = convergenceException74.getArguments();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray63, (java.lang.Throwable) convergenceException74);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("hi!", objArray63, throwable78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray49, (java.lang.Throwable) convergenceException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray35, (java.lang.Throwable) convergenceException79);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("", (java.lang.Throwable) convergenceException81);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction9.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction10);
        double double14 = laguerreSolver11.solve((double) (byte) 0, 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.multiply(complex8);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) ' ');
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double19 = laguerreSolver7.solve((double) (byte) 10, 0.0d, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray4, throwable5);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        convergenceException6.addSuppressed((java.lang.Throwable) convergenceException19);
        java.lang.Throwable[] throwableArray21 = convergenceException19.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) functionEvaluationException29);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray21, throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) mathException40);
        java.lang.String str42 = mathException41.getPattern();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: ", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.FunctionEvaluationException: ", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str34 = functionEvaluationException33.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException();
        convergenceException35.addSuppressed((java.lang.Throwable) mathException36);
        java.lang.Object[] objArray38 = mathException36.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray38);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        java.lang.Object[] objArray51 = new java.lang.Object[] { convergenceException45, complex47, true };
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray53, throwable54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray51, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException58 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException59);
        java.lang.String str61 = mathException60.getPattern();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray38, (java.lang.Throwable) mathException60);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray38, (java.lang.Throwable) maxIterationsExceededException66);
        double double69 = functionEvaluationException68.getArgument();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray17, (java.lang.Throwable) functionEvaluationException68);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: ", objArray17);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray17);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0E-15d + "'", double69 == 1.0E-15d);
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        double[] doubleArray9 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double double12 = polynomialFunction10.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction13);
        laguerreSolver14.setAbsoluteAccuracy((double) '#');
        laguerreSolver14.resetAbsoluteAccuracy();
        laguerreSolver14.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = complex21.multiply(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex26.sin();
        org.apache.commons.math.complex.Complex complex32 = complex26.tan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex26, complex33 };
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray38 = laguerreSolver14.solveAll(complexArray34, complex36);
        laguerreSolver14.resetRelativeAccuracy();
        double double40 = laguerreSolver14.getAbsoluteAccuracy();
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction44.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver48 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction47);
        laguerreSolver48.setAbsoluteAccuracy((double) '#');
        laguerreSolver48.resetAbsoluteAccuracy();
        laguerreSolver48.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.atan();
        org.apache.commons.math.complex.Complex complex63 = complex60.log();
        org.apache.commons.math.complex.Complex complex64 = complex55.multiply(complex60);
        org.apache.commons.math.complex.Complex complex65 = complex60.sin();
        org.apache.commons.math.complex.Complex complex66 = complex60.tan();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex60, complex67 };
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex69.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray72 = laguerreSolver48.solveAll(complexArray68, complex70);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex77.log();
        org.apache.commons.math.complex.Complex complex79 = complex78.sqrt();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = complex82.multiply(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex80.add(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.conjugate();
        org.apache.commons.math.complex.Complex complex87 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex88 = complex76.subtract(complex87);
        org.apache.commons.math.complex.Complex[] complexArray89 = laguerreSolver14.solveAll(complexArray68, complex87);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException90 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray89);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException91 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray89);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray89);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray89);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("Maximal number of iterations (97) exceeded", (java.lang.Throwable) mathException93);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-6d + "'", double40 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((double) 'a');
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray7 = functionEvaluationException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray18);
        int int26 = maxIterationsExceededException25.getMaxIterations();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) mathException27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double20 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 0);
        double double23 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray26 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction27.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        laguerreSolver31.setAbsoluteAccuracy((double) '#');
        laguerreSolver31.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = laguerreSolver31.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = polynomialFunction35.polynomialDerivative();
        double[] doubleArray37 = polynomialFunction35.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver7.solveAll(doubleArray37, (double) 20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        int int41 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(polynomialFunction9);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex8 = complex4.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex12.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.cos();
        org.apache.commons.math.complex.Complex complex19 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        double double21 = complex19.abs();
        boolean boolean22 = complex7.equals((java.lang.Object) complex19);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.1752011936438014d + "'", double21 == 1.1752011936438014d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        double double8 = univariateRealFunction6.value((double) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction6);
        laguerreSolver9.setMaximalIterationCount(100);
        double double14 = laguerreSolver9.solve(2.718281828459045d, Double.NaN);
        laguerreSolver9.setAbsoluteAccuracy(0.0d);
        laguerreSolver9.setFunctionValueAccuracy((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2.718281828459045d + "'", double14 == 2.718281828459045d);
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.tan();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) (byte) -1, (double) (byte) 10);
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = complex1.add(complex7);
        org.apache.commons.math.complex.Complex complex11 = complex1.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException2);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException5 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException5);
        functionEvaluationException2.addSuppressed((java.lang.Throwable) convergenceException6);
        double double8 = functionEvaluationException2.getArgument();
        double double9 = functionEvaluationException2.getArgument();
        double double10 = functionEvaluationException2.getArgument();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 32.0d + "'", double8 == 32.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        laguerreSolver7.setFunctionValueAccuracy(97.0d);
        laguerreSolver7.setFunctionValueAccuracy((-0.0d));
        laguerreSolver7.resetMaximalIterationCount();
        double double22 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setAbsoluteAccuracy((double) 0.0f);
        laguerreSolver7.setFunctionValueAccuracy(1.0d);
        double double18 = laguerreSolver7.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double94 = laguerreSolver7.solve((double) 10, 2.718281828459045d, (double) '#');
        double double95 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 10.0d + "'", double94 == 10.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1.0d) + "'", double95 == (-1.0d));
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (byte) 10);
        double double12 = polynomialFunction6.value(0.0d);
        double[] doubleArray13 = polynomialFunction6.getCoefficients();
        double double15 = polynomialFunction6.value(35.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException3 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException9);
        mathException4.addSuppressed((java.lang.Throwable) functionEvaluationException10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        java.lang.Object[] objArray13 = mathException4.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException17);
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        java.lang.Object[] objArray25 = convergenceException24.getArguments();
        java.lang.Throwable[] throwableArray26 = convergenceException24.getSuppressed();
        mathException19.addSuppressed((java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException24);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(Double.NaN);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        boolean boolean19 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex23.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = complex23.cos();
        org.apache.commons.math.complex.Complex complex30 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex23.tanh();
        boolean boolean32 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex33 = complex16.multiply(complex23);
        boolean boolean34 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex40.log();
        org.apache.commons.math.complex.Complex complex44 = complex38.pow(complex40);
        org.apache.commons.math.complex.Complex complex45 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = complex45.add(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex50.negate();
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex33.multiply(complex54);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = polynomialFunction17.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction18);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(univariateRealFunction18);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.apache.commons.math.complex.Complex complex9 = complex2.pow(complex6);
        double double10 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex22.sin();
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = complex15.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        boolean boolean38 = complex36.isInfinite();
        org.apache.commons.math.complex.Complex complex39 = complex34.add(complex36);
        org.apache.commons.math.complex.Complex complex40 = complex29.divide(complex34);
        org.apache.commons.math.complex.Complex complex41 = complex34.negate();
        org.apache.commons.math.complex.Complex complex42 = complex12.multiply(complex34);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction87 = laguerreSolver7.getPolynomialFunction();
        int int88 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex10.cos();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex18.atan();
        double double22 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt();
        double double24 = complex23.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7853981633974483d + "'", double22 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.8862269254527579d + "'", double24 == 0.8862269254527579d);
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        double double4 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = complex1.sqrt1z();
        boolean boolean6 = complex1.isNaN();
        double double7 = complex1.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex4.pow(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex4.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.tan();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double[] doubleArray9 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = laguerreSolver10.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double37 = laguerreSolver7.solve(1.1752011936438014d, 1.557407724654902d, 100.0d);
        double double38 = laguerreSolver7.getFunctionValueAccuracy();
        java.lang.Class<?> wildcardClass39 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.1752011936438014d + "'", double37 == 1.1752011936438014d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        double[] doubleArray10 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction11.derivative();
        double double16 = univariateRealFunction14.value((double) 100.0f);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction14);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        double[] doubleArray19 = new double[] { (byte) -1, (-0.0d), (byte) 0, 1.0E-15d, (byte) 10 };
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver7.solveAll(doubleArray19, 100.0d);
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        int int23 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -0.0, 0.0, 1.0E-15, 10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex14.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.conjugate();
        boolean boolean21 = complex20.isInfinite();
        double double22 = complex20.getImaginary();
        boolean boolean23 = complex20.isNaN();
        org.apache.commons.math.complex.Complex complex24 = complex10.add(complex20);
        java.lang.Object obj25 = null;
        boolean boolean26 = complex10.equals(obj25);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.0d) + "'", double22 == (-0.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(35.0d, 2.2360679774997907d);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex5.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction8.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(2.2360679774997907d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        boolean boolean32 = complex29.isInfinite();
        double double33 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex29.sqrt();
        double double36 = complex35.getReal();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.resetFunctionValueAccuracy();
        int int92 = laguerreSolver7.getMaximalIterationCount();
        double double93 = laguerreSolver7.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction94 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction95 = laguerreSolver7.getPolynomialFunction();
        double double97 = polynomialFunction95.value((double) 0L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction98 = polynomialFunction95.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver99 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction95);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.7853981633974483d + "'", double93 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(polynomialFunction94);
        org.junit.Assert.assertNotNull(polynomialFunction95);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction98);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) ' ');
        int int7 = polynomialFunction4.degree();
        double double9 = polynomialFunction4.value((double) 97);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction11);
        laguerreSolver12.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        int int18 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double double20 = laguerreSolver7.getAbsoluteAccuracy();
        double double21 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0E-14d + "'", double21 == 1.0E-14d);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        double double78 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setMaximalIterationCount(0);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        int int23 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException2 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        java.lang.Throwable[] throwableArray3 = maxIterationsExceededException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", (java.lang.Throwable) maxIterationsExceededException2);
        java.lang.String str5 = maxIterationsExceededException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded" + "'", str5, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded");
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        boolean boolean10 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        double double12 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex17.acos();
        org.apache.commons.math.complex.Complex complex25 = complex13.divide(complex17);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.0d) + "'", double12 == (-0.0d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(1.0E-14d);
        int int17 = laguerreSolver7.getMaximalIterationCount();
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray20);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray20, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray6, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(0.761594155955765d, "org.apache.commons.math.FunctionEvaluationException: ", objArray6);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[35.0]");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.557407724654902d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException4);
        double double6 = functionEvaluationException4.getArgument();
        java.lang.Throwable[] throwableArray7 = functionEvaluationException4.getSuppressed();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException1 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1);
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "hi!", objArray12);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException19);
        maxIterationsExceededException1.addSuppressed((java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray22 = maxIterationsExceededException1.getSuppressed();
        java.lang.String str23 = maxIterationsExceededException1.getPattern();
        java.lang.String str24 = maxIterationsExceededException1.getPattern();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Maximal number of iterations ({0}) exceeded" + "'", str23, "Maximal number of iterations ({0}) exceeded");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Maximal number of iterations ({0}) exceeded" + "'", str24, "Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        double double23 = laguerreSolver7.solve((double) 97, 0.0d, (double) (short) 100);
        double double27 = laguerreSolver7.solve((double) 10.0f, (double) (byte) 0, (double) 1.0f);
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 97.0d + "'", double23 == 97.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 1, "hi!", (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException20);
        double double22 = functionEvaluationException20.getArgument();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex1.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.negate();
        boolean boolean11 = complex8.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        double[] doubleArray8 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray8);
        double double11 = polynomialFunction9.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction9.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        laguerreSolver13.setAbsoluteAccuracy((double) '#');
        laguerreSolver13.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver13.getPolynomialFunction();
        double double18 = laguerreSolver13.getRelativeAccuracy();
        double[] doubleArray21 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = polynomialFunction22.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction25);
        laguerreSolver26.setAbsoluteAccuracy((double) '#');
        laguerreSolver26.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver26.getPolynomialFunction();
        double[] doubleArray33 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        double double36 = polynomialFunction34.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = polynomialFunction34.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver38 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction37);
        laguerreSolver38.setAbsoluteAccuracy((double) '#');
        laguerreSolver38.resetAbsoluteAccuracy();
        laguerreSolver38.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = complex45.multiply(complex50);
        org.apache.commons.math.complex.Complex complex55 = complex50.sin();
        org.apache.commons.math.complex.Complex complex56 = complex50.tan();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex50, complex57 };
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex59.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver38.solveAll(complexArray58, complex60);
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex68.atan();
        org.apache.commons.math.complex.Complex complex71 = complex68.log();
        org.apache.commons.math.complex.Complex complex72 = complex66.pow(complex68);
        org.apache.commons.math.complex.Complex complex73 = laguerreSolver26.solve(complexArray58, complex66);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex78.log();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = complex83.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex81.add(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex85.conjugate();
        org.apache.commons.math.complex.Complex complex88 = complex87.cosh();
        org.apache.commons.math.complex.Complex complex89 = complex77.subtract(complex88);
        org.apache.commons.math.complex.Complex[] complexArray90 = laguerreSolver13.solveAll(complexArray58, complex89);
        java.lang.Throwable throwable91 = null;
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) complexArray58, throwable91);
        java.lang.Throwable throwable93 = null;
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray58, throwable93);
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.ConvergenceException convergenceException96 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray58);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (byte) 10);
        double double21 = laguerreSolver7.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        double double15 = laguerreSolver7.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.complex.Complex[] complexArray17 = null;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex19.tan();
        org.apache.commons.math.complex.Complex complex22 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex19.atan();
        boolean boolean24 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex25 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex36.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = complex42.acos();
        boolean boolean45 = complex42.isNaN();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex49.add(complex50);
        org.apache.commons.math.complex.Complex complex54 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex55 = complex49.cos();
        org.apache.commons.math.complex.Complex complex56 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex49.tanh();
        boolean boolean58 = complex49.isNaN();
        org.apache.commons.math.complex.Complex complex59 = complex42.multiply(complex49);
        org.apache.commons.math.complex.Complex complex60 = complex49.tanh();
        org.apache.commons.math.complex.Complex complex61 = complex25.pow(complex60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver7.solveAll(complexArray17, complex25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy((double) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double20 = laguerreSolver7.solve((double) 0.0f, 1.0E-15d);
        laguerreSolver7.resetMaximalIterationCount();
        double double22 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-15d + "'", double22 == 1.0E-15d);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        double double11 = polynomialFunction6.value((double) 0.0f);
        double[] doubleArray12 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction6.derivative();
        int int14 = polynomialFunction6.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex3.asin();
        double double5 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double13 = laguerreSolver7.getRelativeAccuracy();
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        int int10 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        int int12 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setRelativeAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction34);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double double18 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double12 = laguerreSolver7.getAbsoluteAccuracy();
        double double13 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.solve(1.0E-14d, (double) (-1.0f));
        laguerreSolver7.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray8 = functionEvaluationException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        java.lang.Object[] objArray19 = new java.lang.Object[] { convergenceException13, complex15, true };
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray21, throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray19);
        int int27 = maxIterationsExceededException26.getMaxIterations();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray37 = mathException35.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(0.38535742648327137d, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) convergenceException38);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        double[] doubleArray10 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction11.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException27);
        functionEvaluationException9.addSuppressed((java.lang.Throwable) mathException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(52.0d, (java.lang.Throwable) mathException27);
        java.lang.Object[] objArray31 = functionEvaluationException30.getArguments();
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray39, throwable40);
        java.lang.Object[] objArray42 = convergenceException41.getArguments();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray42);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "hi!", (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray42, (java.lang.Throwable) functionEvaluationException54);
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray61, throwable62);
        java.lang.Object[] objArray64 = convergenceException63.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray64, (java.lang.Throwable) functionEvaluationException69);
        java.lang.String str71 = convergenceException70.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray42, (java.lang.Throwable) convergenceException70);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray78, throwable79);
        java.lang.Object[] objArray81 = convergenceException80.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray81);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException83 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray81, (java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", objArray42, (java.lang.Throwable) convergenceException87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray31, (java.lang.Throwable) convergenceException87);
        java.lang.String str90 = convergenceException89.getPattern();
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str71, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!" + "'", str90, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = polynomialFunction23.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction25);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        laguerreSolver7.setRelativeAccuracy((double) 10L);
        laguerreSolver7.resetFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        int int21 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException23);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray30, throwable31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray33, (java.lang.Throwable) maxIterationsExceededException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) functionEvaluationException37);
        mathException23.addSuppressed((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException38);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray5 = functionEvaluationException4.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        java.lang.Object[] objArray19 = new java.lang.Object[] { convergenceException13, complex15, true };
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray21, throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray19);
        java.lang.Throwable[] throwableArray27 = maxIterationsExceededException26.getSuppressed();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str39 = functionEvaluationException38.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: ", objArray5, (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray5, (java.lang.Throwable) functionEvaluationException44);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        double double59 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex60 = complex21.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str7 = functionEvaluationException6.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException6);
        java.lang.Object[] objArray9 = functionEvaluationException6.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str14 = functionEvaluationException13.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray9, (java.lang.Throwable) functionEvaluationException13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) '#', (java.lang.Throwable) mathException16);
        double double18 = functionEvaluationException17.getArgument();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100);
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        java.lang.Object[] objArray19 = new java.lang.Object[] { convergenceException13, complex15, true };
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray21, throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray6, (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, throwable30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("Maximal number of iterations (97) exceeded", objArray6, (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Throwable) mathException32);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[100.0]");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double41 = laguerreSolver7.getFunctionValueAccuracy();
        double double42 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-6d + "'", double42 == 1.0E-6d);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.tan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math.complex.Complex complex23 = complex18.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex28.add(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex37 = complex23.multiply(complex34);
        org.apache.commons.math.complex.Complex complex38 = complex37.asin();
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex15.add(complex38);
        boolean boolean41 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(0.8862269254527579d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (1) exceeded");
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.solve((double) 0.0f, (double) 97);
        laguerreSolver7.setAbsoluteAccuracy((double) 52);
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double22 = laguerreSolver7.solve((-0.0d), 0.761594155955765d);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.0d) + "'", double22 == (-0.0d));
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        boolean boolean19 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex23.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = complex23.cos();
        org.apache.commons.math.complex.Complex complex30 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex23.tanh();
        boolean boolean32 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex33 = complex16.multiply(complex23);
        org.apache.commons.math.complex.Complex complex34 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex35.tan();
        org.apache.commons.math.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.tan();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = complex49.log();
        org.apache.commons.math.complex.Complex complex51 = complex43.subtract(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex39.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex59.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex56.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex52.multiply(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex23.divide(complex63);
        boolean boolean67 = complex23.isNaN();
        boolean boolean68 = complex23.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        double double14 = laguerreSolver13.getAbsoluteAccuracy();
        double double18 = laguerreSolver13.solve((double) 10L, 1.1432116289313778d, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) '4');
        double double41 = laguerreSolver7.solve((double) 1L, (double) ' ', (double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver7.getPolynomialFunction();
        double double45 = laguerreSolver7.solve(32.0d, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray47 = polynomialFunction46.getCoefficients();
        double double49 = polynomialFunction46.value((double) 2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 32.0d + "'", double45 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        double double33 = laguerreSolver7.getResult();
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(1.0E-6d);
        laguerreSolver7.setRelativeAccuracy(2.2360679774997907d);
        laguerreSolver7.setMaximalIterationCount((int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex21.log();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex27.acos();
        boolean boolean30 = complex27.isNaN();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex34.add(complex35);
        org.apache.commons.math.complex.Complex complex39 = complex34.sqrt1z();
        org.apache.commons.math.complex.Complex complex40 = complex34.cos();
        org.apache.commons.math.complex.Complex complex41 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex34.tanh();
        boolean boolean43 = complex34.isNaN();
        org.apache.commons.math.complex.Complex complex44 = complex27.multiply(complex34);
        org.apache.commons.math.complex.Complex complex45 = complex10.multiply(complex27);
        boolean boolean46 = complex27.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        int int45 = laguerreSolver7.getMaximalIterationCount();
        double double46 = laguerreSolver7.getRelativeAccuracy();
        int int47 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        org.apache.commons.math.complex.Complex complex83 = complex80.sin();
        org.apache.commons.math.complex.Complex complex84 = complex80.tanh();
        double double85 = complex80.getReal();
        org.apache.commons.math.complex.Complex complex86 = complex80.exp();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException4 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        java.lang.Throwable[] throwableArray5 = maxIterationsExceededException4.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) convergenceException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) mathException7);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        int int11 = laguerreSolver10.getMaximalIterationCount();
        laguerreSolver10.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray16);
        int int24 = maxIterationsExceededException23.getMaxIterations();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException23);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException23);
        java.lang.Object[] objArray27 = convergenceException26.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        double double32 = functionEvaluationException31.getArgument();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray27, (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray27);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException35 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray27);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        laguerreSolver7.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = polynomialFunction18.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction20 = polynomialFunction18.derivative();
        double[] doubleArray21 = polynomialFunction18.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction22 = polynomialFunction18.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(univariateRealFunction19);
        org.junit.Assert.assertNotNull(univariateRealFunction20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction22);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "hi!", (java.lang.Throwable) functionEvaluationException4);
        double double6 = functionEvaluationException4.getArgument();
        double double7 = functionEvaluationException4.getArgument();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (0) exceeded");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Throwable) mathException2);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "org.apache.commons.math.ConvergenceException: hi!", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (1) exceeded");
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex10.exp();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        double double16 = complex14.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        double[] doubleArray8 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray8);
        double double11 = polynomialFunction9.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction9.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        laguerreSolver13.setAbsoluteAccuracy((double) '#');
        laguerreSolver13.resetAbsoluteAccuracy();
        laguerreSolver13.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = complex20.multiply(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex25.sin();
        org.apache.commons.math.complex.Complex complex31 = complex25.tan();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex25, complex32 };
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver13.solveAll(complexArray33, complex35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray33);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.atan();
        java.lang.Object[] objArray56 = new java.lang.Object[] { convergenceException50, complex52, true };
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray58, throwable59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray56, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray56);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException63 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray56);
        int int64 = maxIterationsExceededException63.getMaxIterations();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException63);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException63);
        java.lang.Object[] objArray67 = convergenceException66.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException68 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: ", objArray67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.MathException: ", objArray67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray33, (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = convergenceException71.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException73 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "hi!", (java.lang.Throwable) maxIterationsExceededException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException73);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver92 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction91);
        double double94 = polynomialFunction91.value(7.0001840869445076d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) 52);
        boolean boolean5 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        org.apache.commons.math.complex.Complex complex14 = complex11.log();
        org.apache.commons.math.complex.Complex complex15 = complex9.pow(complex11);
        org.apache.commons.math.complex.Complex complex16 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex16.add(complex20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        double double25 = functionEvaluationException24.getArgument();
        java.lang.Throwable[] throwableArray26 = functionEvaluationException24.getSuppressed();
        boolean boolean27 = complex20.equals((java.lang.Object) functionEvaluationException24);
        org.apache.commons.math.complex.Complex complex28 = complex4.multiply(complex20);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = complex32.pow(complex34);
        org.apache.commons.math.complex.Complex complex39 = complex34.cos();
        org.apache.commons.math.complex.Complex complex40 = complex34.atan();
        org.apache.commons.math.complex.Complex complex41 = complex34.atan();
        org.apache.commons.math.complex.Complex complex42 = complex28.pow(complex34);
        org.apache.commons.math.complex.Complex complex43 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex1.divide(complex28);
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex44.negate();
        org.apache.commons.math.complex.Complex complex47 = complex44.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.sinh();
        double double28 = complex25.abs();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex25.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt1z();
        boolean boolean36 = complex35.isNaN();
        org.apache.commons.math.complex.Complex complex37 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex17.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex17.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double91 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double94 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(0.38535742648327137d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0E-14d + "'", double91 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 52.0d + "'", double94 == 52.0d);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = polynomialFunction4.polynomialDerivative();
        double[] doubleArray6 = polynomialFunction4.getCoefficients();
        int int7 = polynomialFunction4.degree();
        double double9 = polynomialFunction4.value(1.557407724654902d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException1 = new org.apache.commons.math.MaxIterationsExceededException(1);
        int int2 = maxIterationsExceededException1.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex1.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex1.asin();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        double double12 = complex10.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        java.lang.String str9 = functionEvaluationException7.getPattern();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException7);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str16 = functionEvaluationException15.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException();
        convergenceException17.addSuppressed((java.lang.Throwable) mathException18);
        java.lang.Object[] objArray20 = mathException18.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(2.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray12, (java.lang.Throwable) mathException18);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", objArray12);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        java.lang.Object[] objArray31 = convergenceException30.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray31, throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.MaxIterationsExceededException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "", objArray31, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "org.apache.commons.math.FunctionEvaluationException: hi!", objArray12, (java.lang.Throwable) functionEvaluationException39);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        double double12 = complex11.abs();
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        org.apache.commons.math.complex.Complex complex14 = complex11.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.7853981633974483d + "'", double12 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex3.cos();
        org.apache.commons.math.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex10.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        boolean boolean25 = complex24.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex18.multiply(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = complex15.atan();
        org.apache.commons.math.complex.Complex complex22 = complex7.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = complex35.add(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        boolean boolean42 = complex30.equals((java.lang.Object) complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex25.pow(complex43);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex45.tan();
        org.apache.commons.math.complex.Complex complex49 = complex48.asin();
        double double50 = complex49.getReal();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex51.log();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex54.add(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex63 = complex49.pow(complex62);
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex44.multiply(complex62);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray9, throwable10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", objArray12, (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", objArray12);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 0L);
        int int36 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(363.89859381747976d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100");
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray7, throwable8);
        java.lang.Object[] objArray10 = convergenceException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10, (java.lang.Throwable) functionEvaluationException15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException15);
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            functionEvaluationException17.addSuppressed(throwable18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double36 = laguerreSolver7.getResult();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = complex29.multiply(complex34);
        org.apache.commons.math.complex.Complex complex39 = complex26.multiply(complex34);
        org.apache.commons.math.complex.Complex complex40 = complex34.atan();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex11.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.atan();
        org.apache.commons.math.complex.Complex complex45 = complex44.atan();
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        boolean boolean47 = complex44.isNaN();
        double double48 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex49 = complex42.divide(complex44);
        org.apache.commons.math.complex.Complex complex50 = complex42.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.add(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        java.lang.Object[] objArray15 = new java.lang.Object[] { complex14 };
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        java.lang.Object[] objArray24 = new java.lang.Object[] { convergenceException18, complex20, true };
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26, throwable27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray24, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray15, (java.lang.Throwable) mathException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException31);
        java.lang.String str33 = functionEvaluationException31.getPattern();
        double double34 = functionEvaluationException31.getArgument();
        java.lang.Throwable[] throwableArray35 = functionEvaluationException31.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException42 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException43);
        java.lang.String str45 = convergenceException44.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) convergenceException44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray35, (java.lang.Throwable) convergenceException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException46);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str33, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.atan();
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex20 = complex13.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex20.tan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex22.tan();
        org.apache.commons.math.complex.Complex complex26 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z();
        org.apache.commons.math.complex.Complex complex28 = complex21.pow(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex10.subtract(complex26);
        double double30 = complex10.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.1752011936438014d + "'", double30 == 1.1752011936438014d);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        boolean boolean25 = complex24.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex18.multiply(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex18.acos();
        double double29 = complex18.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        int int11 = laguerreSolver10.getMaximalIterationCount();
        int int12 = laguerreSolver10.getMaximalIterationCount();
        laguerreSolver10.setFunctionValueAccuracy((double) (byte) 10);
        laguerreSolver10.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver10.solve((-0.0d), (double) (byte) 100, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-0.0,100.0]  Values: [1.0,1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double88 = laguerreSolver7.getResult();
        laguerreSolver7.setFunctionValueAccuracy(1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((double) 0L);
        double double2 = functionEvaluationException1.getArgument();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.sinh();
        double double28 = complex25.abs();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex25.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt1z();
        boolean boolean36 = complex35.isNaN();
        org.apache.commons.math.complex.Complex complex37 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex17.subtract(complex38);
        double double40 = complex38.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.0d) + "'", double40 == (-0.0d));
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.getResult();
        double double39 = laguerreSolver7.solve(100.0d, 35.0d, (double) (byte) 1);
        double double40 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (short) 0);
        double double43 = laguerreSolver7.getResult();
        double double44 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double42 = laguerreSolver7.solve(1.0E-14d, 0.7853981633974483d, (double) 0);
        double double43 = laguerreSolver7.getResult();
        double double44 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100");
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex2.log();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex5.add(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex0.subtract(complex12);
        org.apache.commons.math.complex.Complex complex17 = complex0.atan();
        org.apache.commons.math.complex.Complex complex18 = complex0.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, "hi!", (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        java.lang.Object[] objArray27 = new java.lang.Object[] { convergenceException21, complex23, true };
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", objArray27);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException34);
        java.lang.Throwable[] throwableArray36 = functionEvaluationException35.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) maxIterationsExceededException37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "org.apache.commons.math.MathException: ", (java.lang.Throwable) maxIterationsExceededException37);
        functionEvaluationException8.addSuppressed((java.lang.Throwable) maxIterationsExceededException37);
        java.lang.Object[] objArray41 = maxIterationsExceededException37.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (0) exceeded", (java.lang.Throwable) maxIterationsExceededException37);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 20, (double) 10);
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(1.5430806348152437d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        double double18 = laguerreSolver7.solve((double) 100L, 2.718281828459045d, 1.1752011936438014d);
        laguerreSolver7.setRelativeAccuracy((double) (-1));
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction9.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction9.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        double double4 = complex3.getImaginary();
        boolean boolean5 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        double double39 = laguerreSolver7.solve((double) (-1L), (-0.0d));
        laguerreSolver7.setFunctionValueAccuracy(52.0d);
        double double42 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray45 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double double48 = polynomialFunction46.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = polynomialFunction46.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver50 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction49);
        double double51 = laguerreSolver50.getAbsoluteAccuracy();
        double double52 = laguerreSolver50.getFunctionValueAccuracy();
        laguerreSolver50.setAbsoluteAccuracy(35.0d);
        double double55 = laguerreSolver50.getFunctionValueAccuracy();
        double double56 = laguerreSolver50.getAbsoluteAccuracy();
        laguerreSolver50.setAbsoluteAccuracy((double) 1);
        double[] doubleArray62 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction63 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray62);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction64 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray62);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction65 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray62);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction66 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver50.solveAll(doubleArray62, 1.0E-14d);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex69.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex72.add(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex76.cos();
        org.apache.commons.math.complex.Complex complex79 = complex78.sinh();
        org.apache.commons.math.complex.Complex complex80 = complex79.tanh();
        org.apache.commons.math.complex.Complex complex81 = laguerreSolver7.solve(complexArray68, complex79);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0E-6d + "'", double51 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0E-15d + "'", double52 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0E-15d + "'", double55 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException2 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        java.lang.Throwable[] throwableArray3 = maxIterationsExceededException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray3);
        java.lang.String str5 = convergenceException4.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!" + "'", str5, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.solve((double) 10.0f, (double) 100L, (double) (byte) 100);
        laguerreSolver7.setMaximalIterationCount(0);
        double double21 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0E-14d + "'", double21 == 1.0E-14d);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex14.add(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex1.pow(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex1.atan();
        double double15 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray9);
        java.lang.String str14 = convergenceException13.getPattern();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str14, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        laguerreSolver7.setRelativeAccuracy(1.1752011936438014d);
        double double12 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount(35);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        double double11 = complex10.abs();
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex15 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex16.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex12.add(complex17);
        double double20 = complex12.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7853981633974483d + "'", double20 == 0.7853981633974483d);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex0.multiply(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex7.tan();
        org.apache.commons.math.complex.Complex complex13 = complex12.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.setRelativeAccuracy(0.761594155955765d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        int int93 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(97.0d);
        double double99 = laguerreSolver7.solve((double) 100, (double) 10L, 1.557407724654902d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 100.0d + "'", double99 == 100.0d);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        double double19 = functionEvaluationException18.getArgument();
        java.lang.Throwable[] throwableArray20 = functionEvaluationException18.getSuppressed();
        boolean boolean21 = complex14.equals((java.lang.Object) functionEvaluationException18);
        org.apache.commons.math.complex.Complex complex22 = complex14.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 52);
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex9.sinh();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        java.lang.Object[] objArray27 = new java.lang.Object[] { convergenceException21, complex23, true };
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", objArray27);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray27);
        boolean boolean35 = complex9.equals((java.lang.Object) objArray27);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray27, throwable36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray44 = functionEvaluationException43.getArguments();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", objArray44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray52 = functionEvaluationException51.getArguments();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray55, throwable56);
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        java.lang.Object[] objArray65 = new java.lang.Object[] { convergenceException59, complex61, true };
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray67, throwable68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray65, (java.lang.Throwable) convergenceException69);
        convergenceException57.addSuppressed((java.lang.Throwable) convergenceException70);
        java.lang.Throwable[] throwableArray72 = convergenceException70.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray52, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray52);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex80.atan();
        java.lang.Object[] objArray84 = new java.lang.Object[] { convergenceException78, complex80, true };
        java.lang.Object[] objArray86 = new java.lang.Object[] {};
        java.lang.Throwable throwable87 = null;
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("", objArray86, throwable87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("", objArray84, (java.lang.Throwable) convergenceException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException88);
        convergenceException74.addSuppressed((java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray44, (java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.ConvergenceException convergenceException96 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", objArray44, (java.lang.Throwable) functionEvaluationException95);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", objArray27, (java.lang.Throwable) convergenceException96);
        org.apache.commons.math.ConvergenceException convergenceException98 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException97);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean4 = complex1.isNaN();
        double double5 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex1.sqrt1z();
        double double7 = complex6.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex20.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex26.acos();
        org.apache.commons.math.complex.Complex complex29 = complex9.divide(complex28);
        double[] doubleArray32 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        double double35 = polynomialFunction33.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction36 = polynomialFunction33.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction37 = polynomialFunction33.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction38 = polynomialFunction33.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction39 = polynomialFunction33.derivative();
        double double41 = univariateRealFunction39.value((double) (byte) 10);
        boolean boolean42 = complex9.equals((java.lang.Object) univariateRealFunction39);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction39);
        double double44 = laguerreSolver43.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = laguerreSolver43.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction36);
        org.junit.Assert.assertNotNull(univariateRealFunction37);
        org.junit.Assert.assertNotNull(univariateRealFunction38);
        org.junit.Assert.assertNotNull(univariateRealFunction39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        laguerreSolver7.setRelativeAccuracy((double) 10L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = laguerreSolver7.getPolynomialFunction();
        int int21 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        boolean boolean38 = complex32.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex29.add(complex37);
        double double41 = complex29.abs();
        org.apache.commons.math.complex.Complex complex42 = complex29.cos();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + Double.POSITIVE_INFINITY + "'", double41 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "hi!");
        double double3 = functionEvaluationException2.getArgument();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 10);
        laguerreSolver7.setRelativeAccuracy((double) 'a');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        double double17 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-6d + "'", double17 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount(0);
        double double39 = laguerreSolver7.getResult();
        int int40 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        java.lang.Object[] objArray15 = new java.lang.Object[] { convergenceException9, complex11, true };
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray17, throwable18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray15, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray15);
        int int23 = maxIterationsExceededException22.getMaxIterations();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException22);
        java.lang.Object[] objArray26 = convergenceException25.getArguments();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        double double31 = functionEvaluationException30.getArgument();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray26, (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException33);
        java.lang.Throwable[] throwableArray35 = convergenceException33.getSuppressed();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException22.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, (java.lang.Throwable) maxIterationsExceededException24);
        int int26 = maxIterationsExceededException24.getMaxIterations();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double[] doubleArray9 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        int int12 = polynomialFunction10.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) ' ');
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        double[] doubleArray11 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        double[] doubleArray13 = polynomialFunction12.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver8.solveAll(doubleArray13, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        laguerreSolver7.resetMaximalIterationCount();
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) (-1L));
        laguerreSolver7.resetRelativeAccuracy();
        double double41 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        double double47 = laguerreSolver7.solve((double) (short) 100, (double) 8, (double) ' ');
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double87 = laguerreSolver7.getRelativeAccuracy();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0E-14d + "'", double87 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double double19 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.8414709848078965d + "'", double19 == 0.8414709848078965d);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        laguerreSolver7.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = polynomialFunction18.derivative();
        int int20 = polynomialFunction18.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction21 = polynomialFunction18.derivative();
        double double23 = polynomialFunction18.value(0.8414709848078965d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction24 = polynomialFunction18.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(univariateRealFunction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction24);
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.add(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        java.lang.Object[] objArray15 = new java.lang.Object[] { complex14 };
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        java.lang.Object[] objArray24 = new java.lang.Object[] { convergenceException18, complex20, true };
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26, throwable27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray24, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray15, (java.lang.Throwable) mathException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException31);
        java.lang.String str33 = functionEvaluationException31.getPattern();
        java.lang.Object[] objArray34 = functionEvaluationException31.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException31);
        java.lang.Object[] objArray36 = functionEvaluationException31.getArguments();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray36);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        java.lang.Object[] objArray48 = new java.lang.Object[] { convergenceException42, complex44, true };
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray50, throwable51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray48, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", objArray48);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray48);
        int int56 = maxIterationsExceededException55.getMaxIterations();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException55);
        java.lang.Throwable[] throwableArray58 = maxIterationsExceededException55.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (1) exceeded", objArray36, (java.lang.Throwable) maxIterationsExceededException55);
        int int60 = maxIterationsExceededException55.getMaxIterations();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str33, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double double14 = laguerreSolver13.getRelativeAccuracy();
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        laguerreSolver22.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = complex29.multiply(complex34);
        org.apache.commons.math.complex.Complex complex39 = complex34.sin();
        org.apache.commons.math.complex.Complex complex40 = complex34.tan();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex34, complex41 };
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray46 = laguerreSolver22.solveAll(complexArray42, complex44);
        laguerreSolver22.resetRelativeAccuracy();
        double double48 = laguerreSolver22.getAbsoluteAccuracy();
        laguerreSolver22.resetRelativeAccuracy();
        laguerreSolver22.resetRelativeAccuracy();
        laguerreSolver22.setAbsoluteAccuracy((double) '4');
        double double56 = laguerreSolver22.solve((double) 1L, (double) ' ', (double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = laguerreSolver22.getPolynomialFunction();
        double double60 = laguerreSolver22.solve(32.0d, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray62 = polynomialFunction61.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver13.solveAll(doubleArray62, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0E-6d + "'", double48 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 32.0d + "'", double60 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(1.4440009959998334d, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) functionEvaluationException7);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        int int6 = polynomialFunction3.degree();
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        double double9 = polynomialFunction3.value((double) (short) -1);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver10.resetAbsoluteAccuracy();
        double double12 = laguerreSolver10.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver10.solve((double) 0, 1.5430806348152437d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [0.0,1.5430806348152437]  Values: [1.0,1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-6d + "'", double12 == 1.0E-6d);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 1);
        laguerreSolver7.resetRelativeAccuracy();
        double double20 = laguerreSolver7.solve(0.0d, (double) 10, 1.1432116289313778d);
        laguerreSolver7.setRelativeAccuracy(1.1432116289313778d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray16);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        java.lang.Object[] objArray28 = convergenceException27.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray16, (java.lang.Throwable) convergenceException27);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray16, throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray16, (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str44 = functionEvaluationException43.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException();
        convergenceException45.addSuppressed((java.lang.Throwable) mathException46);
        java.lang.Object[] objArray48 = mathException46.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException49 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray48);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        java.lang.Object[] objArray61 = new java.lang.Object[] { convergenceException55, complex57, true };
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray63, throwable64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray61, (java.lang.Throwable) convergenceException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("", objArray61);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException68 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException69);
        java.lang.String str71 = mathException70.getPattern();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("", objArray48, (java.lang.Throwable) mathException70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.MathException: ", objArray16, (java.lang.Throwable) mathException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException72);
        java.lang.Throwable[] throwableArray75 = convergenceException74.getSuppressed();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException74);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        double double13 = laguerreSolver10.getRelativeAccuracy();
        int int14 = laguerreSolver10.getMaximalIterationCount();
        double double15 = laguerreSolver10.getFunctionValueAccuracy();
        laguerreSolver10.setMaximalIterationCount((int) 'a');
        laguerreSolver10.resetRelativeAccuracy();
        double double19 = laguerreSolver10.getRelativeAccuracy();
        double[] doubleArray22 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        double double25 = polynomialFunction23.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = polynomialFunction23.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        laguerreSolver27.setAbsoluteAccuracy((double) '#');
        laguerreSolver27.resetAbsoluteAccuracy();
        laguerreSolver27.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = complex34.multiply(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex39.sin();
        org.apache.commons.math.complex.Complex complex45 = complex39.tan();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex39, complex46 };
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver27.solveAll(complexArray47, complex49);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex52.log();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex55.add(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = laguerreSolver10.solveAll(complexArray47, complex62);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException64 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(2.4785912770698393d, (java.lang.Throwable) maxIterationsExceededException64);
        java.lang.Class<?> wildcardClass66 = maxIterationsExceededException64.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = laguerreSolver7.getPolynomialFunction();
        double double95 = laguerreSolver7.solve((double) 0L, (-1.0d), (double) 100.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int98 = laguerreSolver7.getMaximalIterationCount();
        double double99 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction91);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.0E-14d + "'", double99 == 1.0E-14d);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = complex6.tan();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex18.add(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex14.divide(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        double double29 = complex28.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(1.5430806348152437d);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex13.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) -1);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        double double20 = laguerreSolver7.solve(20.0d, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 20.0d + "'", double20 == 20.0d);
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex3.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        boolean boolean19 = complex17.isNaN();
        double double20 = complex17.getImaginary();
        boolean boolean21 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex22 = complex17.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.0d) + "'", double20 == (-0.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray90 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray90);
        org.apache.commons.math.complex.Complex[] complexArray93 = laguerreSolver7.solveAll(doubleArray90, (double) (byte) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction94 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray90);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction95 = polynomialFunction94.derivative();
        double double97 = polynomialFunction94.value((double) 35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(univariateRealFunction95);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 15742.0d + "'", double97 == 15742.0d);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex8.negate();
        org.apache.commons.math.complex.Complex complex13 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        boolean boolean21 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex22 = complex19.cos();
        org.apache.commons.math.complex.Complex complex23 = complex13.subtract(complex19);
        boolean boolean24 = complex19.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex7.exp();
        org.apache.commons.math.complex.Complex complex12 = complex7.cos();
        org.apache.commons.math.complex.Complex complex13 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        boolean boolean19 = complex15.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex20 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex15.asin();
        org.apache.commons.math.complex.Complex complex22 = complex21.exp();
        org.apache.commons.math.complex.Complex complex23 = complex21.sqrt1z();
        double double24 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex25 = complex13.add(complex21);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.add(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        java.lang.Object[] objArray15 = new java.lang.Object[] { complex14 };
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        java.lang.Object[] objArray24 = new java.lang.Object[] { convergenceException18, complex20, true };
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26, throwable27);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray24, (java.lang.Throwable) convergenceException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray15, (java.lang.Throwable) mathException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException31);
        java.lang.String str33 = functionEvaluationException31.getPattern();
        java.lang.Object[] objArray34 = functionEvaluationException31.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException31);
        java.lang.Object[] objArray36 = functionEvaluationException31.getArguments();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", objArray36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray36);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str33, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction3.derivative();
        double double13 = polynomialFunction3.value(2.2360679774997907d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10.0f, (double) '4');
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex4.pow(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex4.add(complex18);
        double double20 = complex19.abs();
        double double21 = complex19.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setMaximalIterationCount(97);
        int int26 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double12 = laguerreSolver7.getAbsoluteAccuracy();
        double double15 = laguerreSolver7.solve(52.0d, (double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) maxIterationsExceededException7);
        int int9 = maxIterationsExceededException7.getMaxIterations();
        java.lang.Throwable[] throwableArray10 = maxIterationsExceededException7.getSuppressed();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        int int7 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double9 = laguerreSolver8.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = laguerreSolver8.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-6d + "'", double9 == 1.0E-6d);
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction5.derivative();
        double double8 = univariateRealFunction6.value(363.89859381747976d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(32.0d);
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex9.add(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex5.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean16 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        boolean boolean21 = complex15.equals((java.lang.Object) complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = complex22.acos();
        boolean boolean25 = complex22.isNaN();
        org.apache.commons.math.complex.Complex complex26 = complex5.divide(complex22);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex30.add(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex37 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        double[] doubleArray42 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        double double45 = polynomialFunction43.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction46 = polynomialFunction43.derivative();
        int int47 = polynomialFunction43.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver48 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction43);
        boolean boolean49 = complex39.equals((java.lang.Object) laguerreSolver48);
        boolean boolean50 = complex5.equals((java.lang.Object) laguerreSolver48);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = polynomialFunction4.derivative();
        double[] doubleArray6 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        laguerreSolver8.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction9);
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        int int10 = polynomialFunction9.degree();
        double double12 = polynomialFunction9.value((double) 10.0f);
        int int13 = polynomialFunction9.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction9.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction9.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double52 = laguerreSolver7.solve((double) 10.0f, 32.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double21 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0E-15d + "'", double21 == 1.0E-15d);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex12.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.conjugate();
        java.lang.Object[] objArray19 = new java.lang.Object[] { complex18 };
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        java.lang.Object[] objArray28 = new java.lang.Object[] { convergenceException22, complex24, true };
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray30, throwable31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray19, (java.lang.Throwable) mathException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException35);
        java.lang.String str37 = functionEvaluationException35.getPattern();
        double double38 = functionEvaluationException35.getArgument();
        java.lang.Throwable[] throwableArray39 = functionEvaluationException35.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException40 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray39);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException47);
        java.lang.String str49 = convergenceException48.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray39, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.tan();
        org.apache.commons.math.complex.Complex complex62 = complex59.exp();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex66.tan();
        org.apache.commons.math.complex.Complex complex69 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        java.lang.Object[] objArray73 = new java.lang.Object[] { complex62, (short) 10, mathException64, complex69, complex71 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException74 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "", objArray73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray39, (java.lang.Throwable) mathException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "", (java.lang.Throwable) functionEvaluationException77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException78);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str37, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(objArray73);
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver19.getPolynomialFunction();
        double[] doubleArray26 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction27.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        laguerreSolver31.setAbsoluteAccuracy((double) '#');
        laguerreSolver31.resetAbsoluteAccuracy();
        laguerreSolver31.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        org.apache.commons.math.complex.Complex complex49 = complex43.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex43, complex50 };
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex52.log();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = laguerreSolver31.solveAll(complexArray51, complex53);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        org.apache.commons.math.complex.Complex complex64 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = complex59.pow(complex61);
        org.apache.commons.math.complex.Complex complex66 = laguerreSolver19.solve(complexArray51, complex59);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex68.tan();
        org.apache.commons.math.complex.Complex complex72 = complex67.subtract(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.cos();
        boolean boolean74 = complex72.isInfinite();
        org.apache.commons.math.complex.Complex complex75 = complex72.cos();
        org.apache.commons.math.complex.Complex complex76 = complex75.tan();
        org.apache.commons.math.complex.Complex complex77 = complex76.tanh();
        org.apache.commons.math.complex.Complex[] complexArray78 = laguerreSolver7.solveAll(complexArray51, complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.cosh();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException1 = new org.apache.commons.math.MaxIterationsExceededException(2);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy(10.0d);
        laguerreSolver7.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        double double46 = laguerreSolver7.getResult();
        laguerreSolver7.setRelativeAccuracy(1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction46 = polynomialFunction45.derivative();
        double double48 = univariateRealFunction46.value((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(univariateRealFunction46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) -1);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double91 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double93 = laguerreSolver7.getResult();
        int int94 = laguerreSolver7.getMaximalIterationCount();
        double double95 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0E-14d + "'", double91 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0E-14d + "'", double95 == 1.0E-14d);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        double double16 = laguerreSolver7.getAbsoluteAccuracy();
        double double17 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-6d + "'", double16 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) '#');
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double15 = laguerreSolver7.solve(1.0E-6d, 1.2314965134057307d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        int int10 = polynomialFunction9.degree();
        double double12 = polynomialFunction9.value((double) 10.0f);
        int int13 = polynomialFunction9.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction9.polynomialDerivative();
        int int15 = polynomialFunction9.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 0.0f);
        double double93 = laguerreSolver7.getRelativeAccuracy();
        double double94 = laguerreSolver7.getAbsoluteAccuracy();
        int int95 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0E-14d + "'", double93 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0E-6d + "'", double94 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "hi!", (java.lang.Throwable) functionEvaluationException4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        functionEvaluationException4.addSuppressed((java.lang.Throwable) functionEvaluationException7);
        double double9 = functionEvaluationException7.getArgument();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex7.exp();
        org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9);
        double[] doubleArray13 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        laguerreSolver18.setAbsoluteAccuracy((double) '#');
        laguerreSolver18.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver18.getPolynomialFunction();
        double[] doubleArray25 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = polynomialFunction26.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver30 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction29);
        laguerreSolver30.setAbsoluteAccuracy((double) '#');
        laguerreSolver30.resetAbsoluteAccuracy();
        laguerreSolver30.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.log();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = complex37.multiply(complex42);
        org.apache.commons.math.complex.Complex complex47 = complex42.sin();
        org.apache.commons.math.complex.Complex complex48 = complex42.tan();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex42, complex49 };
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex51.log();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver30.solveAll(complexArray50, complex52);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.atan();
        org.apache.commons.math.complex.Complex complex63 = complex60.log();
        org.apache.commons.math.complex.Complex complex64 = complex58.pow(complex60);
        org.apache.commons.math.complex.Complex complex65 = laguerreSolver18.solve(complexArray50, complex58);
        org.apache.commons.math.complex.Complex complex66 = complex58.cos();
        double double67 = complex58.getReal();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex71.add(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex75.conjugate();
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex77.tanh();
        org.apache.commons.math.complex.Complex complex80 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex58.add(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex80.tanh();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = complex83.log();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex84.atan();
        org.apache.commons.math.complex.Complex complex87 = complex84.conjugate();
        org.apache.commons.math.complex.Complex complex88 = complex84.sinh();
        org.apache.commons.math.complex.Complex complex89 = complex82.divide(complex84);
        org.apache.commons.math.complex.Complex complex90 = complex4.pow(complex84);
        org.apache.commons.math.complex.Complex complex91 = complex90.sin();
        double double92 = complex90.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction29);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver7.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction10);
        laguerreSolver11.setMaximalIterationCount((int) '#');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str4 = functionEvaluationException3.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 100, (java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = functionEvaluationException7.getSuppressed();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        int int93 = laguerreSolver7.getIterationCount();
        double double94 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        java.lang.Class<?> wildcardClass98 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 52.0d + "'", double94 == 52.0d);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        double double15 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 10);
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray10 = functionEvaluationException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        java.lang.Object[] objArray21 = new java.lang.Object[] { convergenceException15, complex17, true };
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", objArray21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", objArray10, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray10);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        java.lang.Object[] objArray40 = convergenceException39.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", objArray40, throwable42);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException(100, "org.apache.commons.math.MathException: hi!", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", objArray40, (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray10, (java.lang.Throwable) mathException50);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double double37 = laguerreSolver7.getResult();
        double double38 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        double double39 = laguerreSolver7.solve((double) (-1L), (-0.0d));
        laguerreSolver7.setFunctionValueAccuracy(52.0d);
        double double42 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double46 = laguerreSolver7.solve(1.0E-6d, (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-6d + "'", double46 == 1.0E-6d);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        int int83 = laguerreSolver7.getMaximalIterationCount();
        double double84 = laguerreSolver7.getResult();
        double double88 = laguerreSolver7.solve((double) 0.0f, (double) (byte) 0, (double) (-1));
        laguerreSolver7.resetRelativeAccuracy();
        int int90 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        double[] doubleArray3 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        double double6 = polynomialFunction4.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        laguerreSolver8.setAbsoluteAccuracy((double) '#');
        laguerreSolver8.resetAbsoluteAccuracy();
        laguerreSolver8.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex20.sin();
        org.apache.commons.math.complex.Complex complex26 = complex20.tan();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex20, complex27 };
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray32 = laguerreSolver8.solveAll(complexArray28, complex30);
        laguerreSolver8.resetRelativeAccuracy();
        double double34 = laguerreSolver8.getAbsoluteAccuracy();
        double[] doubleArray37 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = polynomialFunction38.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        laguerreSolver42.setAbsoluteAccuracy((double) '#');
        laguerreSolver42.resetAbsoluteAccuracy();
        laguerreSolver42.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.apache.commons.math.complex.Complex complex58 = complex49.multiply(complex54);
        org.apache.commons.math.complex.Complex complex59 = complex54.sin();
        org.apache.commons.math.complex.Complex complex60 = complex54.tan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex54, complex61 };
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver42.solveAll(complexArray62, complex64);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex74.add(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex78.conjugate();
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex70.subtract(complex81);
        org.apache.commons.math.complex.Complex[] complexArray83 = laguerreSolver8.solveAll(complexArray62, complex81);
        int int84 = laguerreSolver8.getMaximalIterationCount();
        double[] doubleArray88 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray88);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction90 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray88);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray93 = laguerreSolver8.solveAll(doubleArray88, (-0.0d));
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) complexArray93);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-6d + "'", double34 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        java.lang.Object[] objArray2 = null;
        double[] doubleArray7 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        laguerreSolver12.setAbsoluteAccuracy((double) '#');
        laguerreSolver12.resetAbsoluteAccuracy();
        laguerreSolver12.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24);
        org.apache.commons.math.complex.Complex complex29 = complex24.sin();
        org.apache.commons.math.complex.Complex complex30 = complex24.tan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex24, complex31 };
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver12.solveAll(complexArray32, complex34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(2.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray2, (java.lang.Throwable) functionEvaluationException37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 52, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", throwable2);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex16.multiply(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.sin();
        org.apache.commons.math.complex.Complex complex27 = complex21.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex21, complex28 };
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver9.solveAll(complexArray29, complex31);
        laguerreSolver9.resetRelativeAccuracy();
        double double35 = laguerreSolver9.getAbsoluteAccuracy();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetRelativeAccuracy();
        double double41 = laguerreSolver9.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int42 = laguerreSolver9.getMaximalIterationCount();
        double[] doubleArray45 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double double48 = polynomialFunction46.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = polynomialFunction46.polynomialDerivative();
        double double51 = polynomialFunction46.value((double) (byte) 100);
        double[] doubleArray52 = polynomialFunction46.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver9.solveAll(doubleArray52, (double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str58 = functionEvaluationException57.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException57);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException();
        convergenceException59.addSuppressed((java.lang.Throwable) mathException60);
        java.lang.Object[] objArray62 = mathException60.getArguments();
        java.lang.String str63 = mathException60.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) 97, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray54, (java.lang.Throwable) mathException60);
        java.lang.String str65 = mathException60.getPattern();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E-6d + "'", double35 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        java.lang.String str3 = mathException1.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!" + "'", str3, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        int int9 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        int int14 = polynomialFunction11.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (byte) 10);
        double double12 = polynomialFunction6.value(0.0d);
        double[] doubleArray13 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction6.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction14);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        laguerreSolver24.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = complex31.multiply(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex36.sin();
        org.apache.commons.math.complex.Complex complex42 = complex36.tan();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex36, complex43 };
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver24.solveAll(complexArray44, complex46);
        laguerreSolver24.setRelativeAccuracy((double) 1.0f);
        laguerreSolver24.resetAbsoluteAccuracy();
        int int52 = laguerreSolver24.getIterationCount();
        double double53 = laguerreSolver24.getFunctionValueAccuracy();
        double[] doubleArray56 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray56);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray56);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction59 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray61 = laguerreSolver24.solveAll(doubleArray56, (double) (-1.0f));
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        java.lang.Object[] objArray73 = new java.lang.Object[] { convergenceException67, complex69, true };
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray75, throwable76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray73, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", objArray73);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException80 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException80);
        java.lang.Throwable[] throwableArray82 = functionEvaluationException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException81);
        org.apache.commons.math.ConvergenceException convergenceException84 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray61, (java.lang.Throwable) functionEvaluationException81);
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex88 = complex86.multiply(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex86.tan();
        org.apache.commons.math.complex.Complex complex90 = complex85.subtract(complex89);
        org.apache.commons.math.complex.Complex complex91 = complex90.cos();
        boolean boolean92 = complex90.isInfinite();
        org.apache.commons.math.complex.Complex complex93 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex94 = complex93.log();
        org.apache.commons.math.complex.Complex complex95 = complex94.sqrt1z();
        org.apache.commons.math.complex.Complex complex96 = complex90.subtract(complex94);
        org.apache.commons.math.complex.Complex complex97 = complex96.log();
        org.apache.commons.math.complex.Complex complex98 = complex96.sinh();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = laguerreSolver15.solveAll(complexArray61, complex96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        int int49 = laguerreSolver7.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = laguerreSolver7.getPolynomialFunction();
        int int51 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.1752011936438014d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double59 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex3.cos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex13.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex9.add(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex20.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex23.sin();
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.solve((-0.0d), 1.0E-14d);
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.0d) + "'", double15 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 100);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetRelativeAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double double21 = laguerreSolver7.solve(97.0d, 52.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 97.0d + "'", double21 == 97.0d);
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double39 = laguerreSolver7.solve((double) '#', (double) (byte) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver7.getPolynomialFunction();
        double double41 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double41 = laguerreSolver7.getResult();
        double double45 = laguerreSolver7.solve(0.7853981633974483d, (double) ' ', Double.POSITIVE_INFINITY);
        double double46 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount(52);
        laguerreSolver7.setRelativeAccuracy(1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.7853981633974483d + "'", double45 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-6d + "'", double46 == 1.0E-6d);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        laguerreSolver10.resetMaximalIterationCount();
        laguerreSolver10.resetMaximalIterationCount();
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex71.tan();
        org.apache.commons.math.complex.Complex complex75 = complex70.subtract(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex75.cos();
        boolean boolean77 = complex75.isInfinite();
        org.apache.commons.math.complex.Complex complex78 = complex75.cos();
        org.apache.commons.math.complex.Complex complex79 = complex78.tan();
        org.apache.commons.math.complex.Complex complex80 = complex79.tanh();
        org.apache.commons.math.complex.Complex[] complexArray81 = laguerreSolver10.solveAll(complexArray54, complex80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, "", (java.lang.Throwable) convergenceException82);
        java.lang.Throwable[] throwableArray84 = functionEvaluationException83.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException83);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        double double8 = univariateRealFunction6.value((double) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction6);
        laguerreSolver9.setMaximalIterationCount(100);
        double double14 = laguerreSolver9.solve(2.718281828459045d, Double.NaN);
        laguerreSolver9.setRelativeAccuracy((double) 1.0f);
        laguerreSolver9.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2.718281828459045d + "'", double14 == 2.718281828459045d);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(15742.0d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded");
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        double double17 = laguerreSolver7.solve((double) ' ', (double) 10L);
        double double21 = laguerreSolver7.solve((double) (byte) -1, (double) (byte) 100, 100.0d);
        laguerreSolver7.setRelativeAccuracy((double) 0.0f);
        double double24 = laguerreSolver7.getAbsoluteAccuracy();
        double double27 = laguerreSolver7.solve((double) (byte) 0, 1.1189396031849523d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-6d + "'", double24 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        double[] doubleArray3 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction5.derivative();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction6);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.tan();
        double double14 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex15 = complex11.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        double double8 = polynomialFunction4.value((double) 10L);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        double double11 = polynomialFunction4.value((double) (short) 100);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        double double14 = polynomialFunction4.value(10.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        boolean boolean32 = complex29.isInfinite();
        double double33 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        double double8 = polynomialFunction4.value((double) 0.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction4.derivative();
        int int11 = polynomialFunction4.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        laguerreSolver19.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex31.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex31, complex38 };
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver19.solveAll(complexArray39, complex41);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = complex47.pow(complex49);
        org.apache.commons.math.complex.Complex complex54 = laguerreSolver7.solve(complexArray39, complex47);
        double double55 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0E-6d + "'", double55 == 1.0E-6d);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        double double13 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        java.lang.Class<?> wildcardClass16 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.0d) + "'", double13 == (-0.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.negate();
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        org.apache.commons.math.complex.Complex complex19 = complex15.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        laguerreSolver10.resetAbsoluteAccuracy();
        laguerreSolver10.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex22.sin();
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex22, complex29 };
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = laguerreSolver10.solveAll(complexArray30, complex32);
        laguerreSolver10.resetRelativeAccuracy();
        double double36 = laguerreSolver10.getAbsoluteAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        double double42 = polynomialFunction40.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = polynomialFunction40.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver44 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction43);
        laguerreSolver44.setAbsoluteAccuracy((double) '#');
        laguerreSolver44.resetAbsoluteAccuracy();
        laguerreSolver44.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex51.log();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = complex51.multiply(complex56);
        org.apache.commons.math.complex.Complex complex61 = complex56.sin();
        org.apache.commons.math.complex.Complex complex62 = complex56.tan();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex56, complex63 };
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver44.solveAll(complexArray64, complex66);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex73.log();
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex76.add(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex80.conjugate();
        org.apache.commons.math.complex.Complex complex83 = complex82.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex72.subtract(complex83);
        org.apache.commons.math.complex.Complex[] complexArray85 = laguerreSolver10.solveAll(complexArray64, complex83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray85, (java.lang.Throwable) mathException86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) mathException86);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException88);
        java.lang.String str90 = convergenceException89.getPattern();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-6d + "'", double36 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str90, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.resetFunctionValueAccuracy();
        int int92 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction96 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction96);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean4 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex5.tan();
        boolean boolean9 = complex3.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex18.log();
        org.apache.commons.math.complex.Complex complex22 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex23 = complex18.cos();
        org.apache.commons.math.complex.Complex complex24 = complex18.atan();
        org.apache.commons.math.complex.Complex complex25 = complex10.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean27 = complex26.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex28.tan();
        boolean boolean32 = complex26.equals((java.lang.Object) complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex31.add(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex25.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex0.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        boolean boolean38 = complex32.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex29.add(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex40.sin();
        org.apache.commons.math.complex.Complex complex43 = complex42.cos();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        laguerreSolver7.setAbsoluteAccuracy(1.0d);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException2 = new org.apache.commons.math.MaxIterationsExceededException(0);
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException3);
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray14 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean5 = complex1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex1.asin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex11.add(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex17.cosh();
        double double21 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex1.subtract(complex20);
        double double23 = complex1.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.0d) + "'", double21 == (-0.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        double double59 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex21.pow(complex62);
        org.apache.commons.math.complex.Complex complex65 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex67.atan();
        org.apache.commons.math.complex.Complex complex70 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex71 = complex67.cos();
        org.apache.commons.math.complex.Complex complex72 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex73 = complex72.sin();
        org.apache.commons.math.complex.Complex complex74 = complex65.subtract(complex72);
        java.lang.Class<?> wildcardClass75 = complex72.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + Double.POSITIVE_INFINITY + "'", double59 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        double double10 = univariateRealFunction8.value(1.1189396031849523d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double25 = laguerreSolver7.solve((double) 10L, (double) (byte) 0);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 1);
        double double31 = laguerreSolver7.solve(0.6679493967289549d, 1.4440009959998334d, 3.9518054509189455d);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.6679493967289549d + "'", double31 == 0.6679493967289549d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver10.resetMaximalIterationCount();
        double double12 = laguerreSolver10.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-6d + "'", double12 == 1.0E-6d);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str5 = functionEvaluationException4.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException4);
        java.lang.Object[] objArray7 = functionEvaluationException4.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("Evaluation failed for argument = {0}", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("hi!", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException9);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        double double41 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray44 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray44);
        double double47 = polynomialFunction45.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = polynomialFunction45.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver49 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction48);
        laguerreSolver49.setAbsoluteAccuracy((double) '#');
        laguerreSolver49.resetAbsoluteAccuracy();
        laguerreSolver49.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        org.apache.commons.math.complex.Complex complex64 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = complex56.multiply(complex61);
        org.apache.commons.math.complex.Complex complex66 = complex61.sin();
        org.apache.commons.math.complex.Complex complex67 = complex61.tan();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex61, complex68 };
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray73 = laguerreSolver49.solveAll(complexArray69, complex71);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.atan();
        org.apache.commons.math.complex.Complex complex82 = complex79.log();
        org.apache.commons.math.complex.Complex complex83 = complex77.pow(complex79);
        org.apache.commons.math.complex.Complex complex84 = complex77.sqrt();
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex85.log();
        org.apache.commons.math.complex.Complex complex87 = complex86.sqrt();
        org.apache.commons.math.complex.Complex complex88 = complex86.atan();
        org.apache.commons.math.complex.Complex complex89 = complex84.add(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex84.log();
        org.apache.commons.math.complex.Complex complex91 = complex84.cosh();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = laguerreSolver7.solveAll(complexArray73, complex84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0E-6d + "'", double41 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction48);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex9.tan();
        org.apache.commons.math.complex.Complex complex13 = complex8.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        boolean boolean22 = complex20.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = complex18.add(complex20);
        java.lang.Object[] objArray26 = new java.lang.Object[] { complex6, complex13, complex18, (byte) 10, 1.0f };
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", objArray26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException((int) '#');
        int int30 = maxIterationsExceededException29.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.ConvergenceException: hi!", objArray26, (java.lang.Throwable) maxIterationsExceededException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray37 = functionEvaluationException36.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        java.lang.Object[] objArray48 = new java.lang.Object[] { convergenceException42, complex44, true };
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray50, throwable51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray48, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("", objArray48);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray48);
        int int56 = maxIterationsExceededException55.getMaxIterations();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException55);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray37, (java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) mathException58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray26, (java.lang.Throwable) mathException58);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray12);
        int int20 = maxIterationsExceededException19.getMaxIterations();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException(10);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException24);
        mathException21.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "", (java.lang.Throwable) mathException21);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException21);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.solve((double) 0.0f, (double) 97);
        laguerreSolver7.setAbsoluteAccuracy((double) 52);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setFunctionValueAccuracy(0.8414709848078965d);
        laguerreSolver7.setRelativeAccuracy(10.0d);
        double[] doubleArray50 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray50);
        double double53 = polynomialFunction51.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = polynomialFunction51.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver55 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction54);
        laguerreSolver55.setRelativeAccuracy((double) 10);
        double double58 = laguerreSolver55.getAbsoluteAccuracy();
        double double61 = laguerreSolver55.solve((double) (-1), 0.7853981633974483d);
        double[] doubleArray65 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction66 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver55.solveAll(doubleArray65, (-1.0d));
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex69.subtract(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.cos();
        org.apache.commons.math.complex.Complex complex76 = complex75.tan();
        org.apache.commons.math.complex.Complex[] complexArray77 = laguerreSolver7.solveAll(complexArray68, complex75);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0E-6d + "'", double58 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        laguerreSolver7.setRelativeAccuracy(1.1752011936438014d);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 1);
        laguerreSolver7.setMaximalIterationCount(4);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        java.lang.Object[] objArray15 = new java.lang.Object[] { convergenceException9, complex11, true };
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray17, throwable18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray15, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray15);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray24, throwable25);
        java.lang.Object[] objArray27 = convergenceException26.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray15, (java.lang.Throwable) convergenceException26);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("hi!", objArray15, throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray15, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException34);
        java.lang.String str38 = convergenceException37.getPattern();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str38, "org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        laguerreSolver17.resetAbsoluteAccuracy();
        laguerreSolver17.resetRelativeAccuracy();
        boolean boolean22 = complex5.equals((java.lang.Object) laguerreSolver17);
        double double23 = laguerreSolver17.getRelativeAccuracy();
        double double24 = laguerreSolver17.getRelativeAccuracy();
        laguerreSolver17.setAbsoluteAccuracy((double) (byte) 10);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-14d + "'", double23 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-14d + "'", double24 == 1.0E-14d);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex6.tan();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex10.multiply(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex24.asin();
        org.apache.commons.math.complex.Complex complex26 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex3.add(complex26);
        double double28 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex3.tan();
        double double30 = complex3.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 0L);
        double double36 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        int int15 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException3 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.getResult();
        double double39 = laguerreSolver7.solve(100.0d, 35.0d, (double) (byte) 1);
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        int int42 = laguerreSolver7.getMaximalIterationCount();
        int int43 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setRelativeAccuracy(7.0001840869445076d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        double[] doubleArray10 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        double double13 = polynomialFunction11.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction11.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        laguerreSolver15.setAbsoluteAccuracy((double) '#');
        laguerreSolver15.resetAbsoluteAccuracy();
        laguerreSolver15.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = complex22.multiply(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex27.sin();
        org.apache.commons.math.complex.Complex complex33 = complex27.tan();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex27, complex34 };
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray39 = laguerreSolver15.solveAll(complexArray35, complex37);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean41 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex42.tan();
        boolean boolean46 = complex40.equals((java.lang.Object) complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex37.add(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex7.add(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex49.cos();
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getReal();
        org.apache.commons.math.complex.Complex complex53 = complex50.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException24);
        java.lang.Throwable[] throwableArray26 = functionEvaluationException25.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException27);
        java.lang.Object[] objArray29 = maxIterationsExceededException27.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) '#', "org.apache.commons.math.ConvergenceException: ", objArray29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray29);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex6.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        java.lang.Object[] objArray13 = new java.lang.Object[] { complex12 };
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        java.lang.Object[] objArray22 = new java.lang.Object[] { convergenceException16, complex18, true };
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray24, throwable25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray22, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) mathException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException29);
        java.lang.String str31 = functionEvaluationException29.getPattern();
        java.lang.Object[] objArray32 = functionEvaluationException29.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException29);
        java.lang.Object[] objArray34 = functionEvaluationException29.getArguments();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException29);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str31, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray34);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        double[] doubleArray19 = new double[] { (byte) -1, (-0.0d), (byte) 0, 1.0E-15d, (byte) 10 };
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver7.solveAll(doubleArray19, 100.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int23 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -0.0, 0.0, 1.0E-15, 10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        double double85 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int87 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0E-15d + "'", double85 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.tan();
        boolean boolean25 = complex19.equals((java.lang.Object) complex24);
        boolean boolean26 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex32.cos();
        org.apache.commons.math.complex.Complex complex38 = complex32.atan();
        org.apache.commons.math.complex.Complex complex39 = complex32.tan();
        org.apache.commons.math.complex.Complex complex40 = complex24.add(complex32);
        org.apache.commons.math.complex.Complex complex41 = complex32.sin();
        double double42 = complex32.getReal();
        org.apache.commons.math.complex.Complex complex43 = complex18.add(complex32);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.atan();
        org.apache.commons.math.complex.Complex complex49 = complex48.atan();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = complex45.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex18.add(complex45);
        boolean boolean54 = complex45.isNaN();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        org.apache.commons.math.complex.Complex complex64 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = complex56.multiply(complex61);
        org.apache.commons.math.complex.Complex complex66 = complex61.sin();
        boolean boolean67 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex66.tan();
        org.apache.commons.math.complex.Complex complex69 = complex66.cos();
        org.apache.commons.math.complex.Complex complex70 = complex66.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex45.divide(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex73 = complex72.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        double[] doubleArray7 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        laguerreSolver12.setAbsoluteAccuracy((double) '#');
        laguerreSolver12.resetAbsoluteAccuracy();
        laguerreSolver12.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24);
        org.apache.commons.math.complex.Complex complex29 = complex24.sin();
        org.apache.commons.math.complex.Complex complex30 = complex24.tan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex24, complex31 };
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver12.solveAll(complexArray32, complex34);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray43, throwable44);
        java.lang.Object[] objArray46 = convergenceException45.getArguments();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException48 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray46);
        java.lang.Throwable[] throwableArray50 = convergenceException49.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.atan();
        java.lang.Object[] objArray64 = new java.lang.Object[] { convergenceException58, complex60, true };
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray66, throwable67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray64, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray64);
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("", objArray73, throwable74);
        java.lang.Object[] objArray76 = convergenceException75.getArguments();
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray64, (java.lang.Throwable) convergenceException75);
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("hi!", objArray64, throwable79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray36, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException(1.557407724654902d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Object[]) complexArray36, (java.lang.Throwable) mathException84);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) mathException84);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", (java.lang.Throwable) convergenceException86);
        java.lang.Throwable[] throwableArray88 = convergenceException87.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 1L);
        java.lang.Object[] objArray3 = functionEvaluationException2.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 1, (java.lang.Throwable) functionEvaluationException2);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray21 = mathException20.getArguments();
        functionEvaluationException4.addSuppressed((java.lang.Throwable) mathException20);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1.0]");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.asin();
        org.apache.commons.math.complex.Complex complex5 = complex3.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1), 1.0E-6d);
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException22.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) maxIterationsExceededException24);
        java.lang.String str26 = convergenceException25.getPattern();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str26, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray8 = functionEvaluationException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        java.lang.Object[] objArray19 = new java.lang.Object[] { convergenceException13, complex15, true };
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray21, throwable22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray19);
        int int27 = maxIterationsExceededException26.getMaxIterations();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(4.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Object[]) throwableArray8);
        java.lang.String str33 = functionEvaluationException32.toString();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!" + "'", str33, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!");
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        int int93 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(97.0d);
        double double98 = laguerreSolver7.solve(10.0d, 1.4440009959998334d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 10.0d + "'", double98 == 10.0d);
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 100L);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction91);
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.setRelativeAccuracy(100.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double19 = laguerreSolver7.solve((double) '#', (double) 'a');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray9, throwable10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray12);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray12, throwable17);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        int int9 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction6.derivative();
        double double13 = polynomialFunction6.value((double) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double[] doubleArray9 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        double double12 = laguerreSolver11.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-6d + "'", double12 == 1.0E-6d);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) ' ');
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction36);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex1.acos();
        org.apache.commons.math.complex.Complex complex5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = complex15.atan();
        org.apache.commons.math.complex.Complex complex22 = complex7.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.apache.commons.math.complex.Complex complex32 = complex26.pow(complex28);
        org.apache.commons.math.complex.Complex complex33 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = complex33.add(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex40.log();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex40.multiply(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex37.multiply(complex45);
        org.apache.commons.math.complex.Complex complex51 = complex45.atan();
        org.apache.commons.math.complex.Complex complex52 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex22.add(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex22.cos();
        org.apache.commons.math.complex.Complex complex55 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = complex22.sqrt();
        boolean boolean57 = complex22.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        laguerreSolver7.setAbsoluteAccuracy(1.0d);
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0E-14d, (double) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 10);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        double double13 = complex12.abs();
        org.apache.commons.math.complex.Complex complex14 = complex12.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(2.4785912770698393d);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        int int12 = maxIterationsExceededException11.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) maxIterationsExceededException11);
        int int14 = maxIterationsExceededException11.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException11);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex3.cos();
        org.apache.commons.math.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        java.lang.Object[] objArray14 = new java.lang.Object[] { complex13 };
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        java.lang.Object[] objArray23 = new java.lang.Object[] { convergenceException17, complex19, true };
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) mathException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "", objArray14);
        double double32 = functionEvaluationException31.getArgument();
        double double33 = functionEvaluationException31.getArgument();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
    }
}


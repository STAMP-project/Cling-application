import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest24 {

    public static boolean debug = false;

    @Test
    public void test12001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12001");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        double double45 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double48 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test12002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12002");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        int int36 = laguerreSolver7.getMaximalIterationCount();
        double double37 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
    }

    @Test
    public void test12003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12003");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex5.multiply(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex27.pow(complex29);
        org.apache.commons.math.complex.Complex complex34 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex38.multiply(complex46);
        org.apache.commons.math.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex60.add(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex56.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.acos();
        org.apache.commons.math.complex.Complex complex70 = complex51.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.tan();
        org.apache.commons.math.complex.Complex complex77 = complex74.exp();
        org.apache.commons.math.complex.Complex complex78 = complex74.cos();
        org.apache.commons.math.complex.Complex complex79 = complex51.divide(complex74);
        org.apache.commons.math.complex.Complex complex80 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex81 = complex22.multiply(complex51);
        org.apache.commons.math.complex.Complex complex82 = complex22.cos();
        org.apache.commons.math.complex.Complex complex83 = complex22.exp();
        double double84 = complex83.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 2.718281828459045d + "'", double84 == 2.718281828459045d);
    }

    @Test
    public void test12004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12004");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test12005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12005");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        double double16 = laguerreSolver7.solve((double) 10, (double) 1);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double20 = laguerreSolver7.solve((double) (short) 0, 97.0d);
        double double23 = laguerreSolver7.solve(1.5430806348152437d, (double) 0.0f);
        double double24 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5430806348152437d + "'", double23 == 1.5430806348152437d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-15d + "'", double24 == 1.0E-15d);
    }

    @Test
    public void test12006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12006");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex6);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex4.pow(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex19.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex25.cosh();
        double double29 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex30.atan();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex41 = complex33.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex30.subtract(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.sin();
        org.apache.commons.math.complex.Complex complex44 = complex15.pow(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex(1.4440009959998334d, 1.4440009959998334d);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.apache.commons.math.complex.Complex complex58 = complex52.pow(complex54);
        org.apache.commons.math.complex.Complex complex59 = complex54.cos();
        double double60 = complex59.getReal();
        org.apache.commons.math.complex.Complex complex61 = complex59.sin();
        org.apache.commons.math.complex.Complex complex62 = complex59.exp();
        org.apache.commons.math.complex.Complex complex63 = complex48.divide(complex59);
        org.apache.commons.math.complex.Complex complex64 = complex44.multiply(complex59);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test12007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12007");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, (double) (byte) 1);
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        laguerreSolver10.resetAbsoluteAccuracy();
        laguerreSolver10.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex22.sin();
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex22, complex29 };
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = laguerreSolver10.solveAll(complexArray30, complex32);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex37.tan();
        boolean boolean41 = complex35.equals((java.lang.Object) complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex32.add(complex40);
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt1z();
        org.apache.commons.math.complex.Complex complex45 = complex2.subtract(complex44);
        double double46 = complex44.abs();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test12008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12008");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        double[] doubleArray9 = polynomialFunction8.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction8.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction11);
    }

    @Test
    public void test12009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12009");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        boolean boolean32 = complex29.isInfinite();
        double double33 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex29.negate();
        org.apache.commons.math.complex.Complex complex36 = complex35.atan();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test12010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12010");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 100.0f, Double.POSITIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        double double5 = complex3.abs();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test12011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12011");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        int int12 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test12012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12012");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy((-0.0d));
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
    }

    @Test
    public void test12013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12013");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction6.value((double) 97);
        double double12 = polynomialFunction6.value((-0.1838722778432016d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test12014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12014");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        double double23 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex17.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex26.log();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex29.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.cos();
        org.apache.commons.math.complex.Complex complex36 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex37 = complex35.tan();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex25.divide(complex38);
        boolean boolean40 = complex39.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test12015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12015");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) '#');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction37);
    }

    @Test
    public void test12016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12016");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex7.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex3.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = complex27.multiply(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex32.sin();
        org.apache.commons.math.complex.Complex complex38 = complex32.acos();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex32.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex25.add(complex32);
        org.apache.commons.math.complex.Complex complex44 = complex15.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test12017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12017");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex14.multiply(complex22);
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex32.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex27.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.tan();
        org.apache.commons.math.complex.Complex complex53 = complex50.exp();
        org.apache.commons.math.complex.Complex complex54 = complex50.cos();
        org.apache.commons.math.complex.Complex complex55 = complex27.divide(complex50);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex55.log();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex63.atan();
        org.apache.commons.math.complex.Complex complex66 = complex63.log();
        org.apache.commons.math.complex.Complex complex67 = complex61.pow(complex63);
        org.apache.commons.math.complex.Complex complex68 = complex67.atan();
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex57.subtract(complex68);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex72.atan();
        org.apache.commons.math.complex.Complex complex75 = complex72.log();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.atan();
        org.apache.commons.math.complex.Complex complex80 = complex77.log();
        org.apache.commons.math.complex.Complex complex81 = complex72.multiply(complex77);
        org.apache.commons.math.complex.Complex complex82 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex77.cos();
        org.apache.commons.math.complex.Complex complex84 = complex57.pow(complex77);
        org.apache.commons.math.complex.Complex complex85 = complex77.sin();
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex87 = complex86.log();
        org.apache.commons.math.complex.Complex complex88 = complex87.sqrt();
        org.apache.commons.math.complex.Complex complex89 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex90 = complex88.multiply(complex89);
        org.apache.commons.math.complex.Complex complex91 = complex89.tan();
        org.apache.commons.math.complex.Complex complex92 = complex91.cosh();
        org.apache.commons.math.complex.Complex complex93 = complex91.tanh();
        org.apache.commons.math.complex.Complex complex94 = complex91.cosh();
        org.apache.commons.math.complex.Complex complex95 = complex85.pow(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex85.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test12018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12018");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 1L);
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        java.lang.Throwable[] throwableArray9 = functionEvaluationException7.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        java.lang.Object[] objArray26 = new java.lang.Object[] { convergenceException20, complex22, true };
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray26, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", objArray26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray26);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray35, throwable36);
        java.lang.Object[] objArray38 = convergenceException37.getArguments();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray26, (java.lang.Throwable) convergenceException37);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("hi!", objArray26, throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray26, (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.Throwable[] throwableArray54 = mathException52.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray26, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) functionEvaluationException55);
        boolean boolean57 = complex3.equals((java.lang.Object) "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.complex.Complex complex58 = complex3.negate();
        org.apache.commons.math.complex.Complex complex59 = complex58.negate();
        org.apache.commons.math.complex.Complex complex60 = complex58.negate();
        org.apache.commons.math.complex.Complex complex61 = complex60.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[1.0]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test12019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12019");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        double double85 = laguerreSolver7.getResult();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double87 = laguerreSolver7.getAbsoluteAccuracy();
        int int88 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        int int91 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0E-6d + "'", double87 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 100 + "'", int91 == 100);
    }

    @Test
    public void test12020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12020");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction88 = laguerreSolver7.getPolynomialFunction();
        double double91 = laguerreSolver7.solve((double) 1L, 0.8862269254527579d);
        double double92 = laguerreSolver7.getResult();
        laguerreSolver7.setMaximalIterationCount(100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction88);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test12021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12021");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        double double36 = laguerreSolver7.solve((double) (short) 100, (double) (-1));
        double double37 = laguerreSolver7.getRelativeAccuracy();
        double double38 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0E-6d + "'", double38 == 1.0E-6d);
    }

    @Test
    public void test12022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12022");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException5 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException5);
        int int7 = maxIterationsExceededException5.getMaxIterations();
        java.lang.Object[] objArray8 = maxIterationsExceededException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        java.lang.Object[] objArray20 = new java.lang.Object[] { convergenceException14, complex16, true };
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException27);
        double double29 = functionEvaluationException27.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1", objArray8, (java.lang.Throwable) functionEvaluationException27);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test12023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12023");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double[] doubleArray12 = polynomialFunction11.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (byte) 1);
        double double17 = polynomialFunction13.value((double) 0);
        int int18 = polynomialFunction13.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test12024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12024");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex17.multiply(complex28);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex40.cosh();
        double double44 = complex43.abs();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt1z();
        org.apache.commons.math.complex.Complex complex46 = complex17.subtract(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex17.acos();
        org.apache.commons.math.complex.Complex complex48 = complex17.log();
        org.apache.commons.math.complex.Complex complex49 = complex17.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test12025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12025");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.1752011936438014d);
        double double17 = laguerreSolver7.solve(32.0d, 3.141592653589793d, 1.0E-14d);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
    }

    @Test
    public void test12026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12026");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 4, (double) (short) 0);
    }

    @Test
    public void test12027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12027");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.solve((-0.0d), (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        double double44 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 100.0f);
        double double48 = laguerreSolver7.getResult();
        double double49 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setRelativeAccuracy(2.4785912770698393d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.0d) + "'", double41 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0E-14d + "'", double49 == 1.0E-14d);
    }

    @Test
    public void test12028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12028");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(52.0d);
        java.lang.String str2 = functionEvaluationException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52" + "'", str2, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52");
    }

    @Test
    public void test12029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12029");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1");
    }

    @Test
    public void test12030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12030");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 0L);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double23 = laguerreSolver7.solve(2.718281828459045d, (double) 10L, (double) '4');
        double double24 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2.718281828459045d + "'", double23 == 2.718281828459045d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-6d + "'", double24 == 1.0E-6d);
    }

    @Test
    public void test12031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12031");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.resetFunctionValueAccuracy();
        int int92 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) 35);
        double double95 = laguerreSolver7.getFunctionValueAccuracy();
        double double96 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0E-15d + "'", double95 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 35.0d + "'", double96 == 35.0d);
    }

    @Test
    public void test12032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12032");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(Double.NEGATIVE_INFINITY);
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test12033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12033");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test12034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12034");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        double double14 = laguerreSolver13.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver13.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
    }

    @Test
    public void test12035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12035");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        org.apache.commons.math.complex.Complex complex14 = complex11.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = complex11.multiply(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex16.sin();
        org.apache.commons.math.complex.Complex complex22 = complex16.tan();
        org.apache.commons.math.complex.Complex complex23 = complex9.divide(complex22);
        double[] doubleArray26 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction27.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        laguerreSolver31.setAbsoluteAccuracy((double) '#');
        laguerreSolver31.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = laguerreSolver31.getPolynomialFunction();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.atan();
        org.apache.commons.math.complex.Complex complex76 = complex73.log();
        org.apache.commons.math.complex.Complex complex77 = complex71.pow(complex73);
        org.apache.commons.math.complex.Complex complex78 = laguerreSolver31.solve(complexArray63, complex71);
        org.apache.commons.math.complex.Complex complex79 = complex71.cos();
        org.apache.commons.math.complex.Complex complex80 = complex23.divide(complex71);
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex81.log();
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        org.apache.commons.math.complex.Complex complex84 = complex82.atan();
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex85.log();
        org.apache.commons.math.complex.Complex complex87 = complex86.sqrt();
        org.apache.commons.math.complex.Complex complex88 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex89 = complex87.multiply(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex82.subtract(complex89);
        org.apache.commons.math.complex.Complex complex91 = complex23.subtract(complex90);
        org.apache.commons.math.complex.Complex complex92 = complex90.tan();
        org.apache.commons.math.complex.Complex complex93 = complex90.cosh();
        org.apache.commons.math.complex.Complex complex94 = complex90.sqrt();
        org.apache.commons.math.complex.Complex complex95 = complex90.sqrt();
        org.apache.commons.math.complex.Complex complex96 = complex6.pow(complex90);
        double double97 = complex90.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + Double.POSITIVE_INFINITY + "'", double97 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test12036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12036");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        double double8 = polynomialFunction4.value((double) 10L);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
    }

    @Test
    public void test12037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12037");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        int int19 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test12038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12038");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 1L);
        java.lang.Object[] objArray3 = functionEvaluationException2.getArguments();
        java.lang.Throwable[] throwableArray4 = functionEvaluationException2.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        java.lang.Object[] objArray21 = new java.lang.Object[] { convergenceException15, complex17, true };
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("", objArray21);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray21);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray30, throwable31);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray21, (java.lang.Throwable) convergenceException32);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("hi!", objArray21, throwable36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray21, (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException47);
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray21, (java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) functionEvaluationException50);
        double double52 = functionEvaluationException50.getArgument();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1.0]");
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
    }

    @Test
    public void test12039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12039");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double double14 = laguerreSolver13.getAbsoluteAccuracy();
        double double18 = laguerreSolver13.solve(35.0d, (double) 'a', 2.718281828459045d);
        double double19 = laguerreSolver13.getFunctionValueAccuracy();
        laguerreSolver13.resetAbsoluteAccuracy();
        laguerreSolver13.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-15d + "'", double19 == 1.0E-15d);
    }

    @Test
    public void test12040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12040");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.negate();
        boolean boolean18 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex19 = complex15.tan();
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex22.cos();
        org.apache.commons.math.complex.Complex complex24 = complex23.sin();
        org.apache.commons.math.complex.Complex complex25 = complex23.cos();
        org.apache.commons.math.complex.Complex complex26 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex23.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test12041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12041");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(2.718281828459045d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        int int16 = polynomialFunction15.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction15.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction17);
    }

    @Test
    public void test12042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12042");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        java.lang.Object[] objArray9 = new java.lang.Object[] { convergenceException3, complex5, true };
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray11, throwable12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray9, (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (0) exceeded", (java.lang.Throwable) convergenceException15);
        java.lang.String str17 = convergenceException15.getPattern();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str17, "org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test12043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12043");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        double double10 = complex9.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test12044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12044");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        double double2 = functionEvaluationException1.getArgument();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 32.0d + "'", double2 == 32.0d);
    }

    @Test
    public void test12045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12045");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex8.pow(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test12046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12046");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setRelativeAccuracy(1.0E-14d);
        double double25 = laguerreSolver7.solve((double) (short) -1, 3.9518054509189455d);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 100);
        laguerreSolver7.setRelativeAccuracy(1.5707963267948966d);
        laguerreSolver7.setMaximalIterationCount(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
    }

    @Test
    public void test12047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12047");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double double8 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        double double10 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.setRelativeAccuracy((-0.73669189358273d));
        laguerreSolver9.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
    }

    @Test
    public void test12048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12048");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex1.cos();
        org.apache.commons.math.complex.Complex complex6 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex10.multiply(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex31.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex20.pow(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex20.exp();
        boolean boolean42 = complex41.isNaN();
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex6.pow(complex41);
        org.apache.commons.math.complex.Complex complex45 = complex41.sin();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex49.add(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.conjugate();
        boolean boolean56 = complex55.isInfinite();
        org.apache.commons.math.complex.Complex complex57 = complex55.tan();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex41.pow(complex59);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test12049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12049");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.0d);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        laguerreSolver22.setFunctionValueAccuracy((double) '4');
        laguerreSolver22.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver22.resetRelativeAccuracy();
        laguerreSolver22.setFunctionValueAccuracy(0.8414709848078965d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = laguerreSolver22.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction34 = polynomialFunction33.derivative();
        double[] doubleArray35 = polynomialFunction33.getCoefficients();
        double[] doubleArray36 = polynomialFunction33.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray39 = laguerreSolver7.solveAll(doubleArray36, (-3.141592653589793d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(univariateRealFunction34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
    }

    @Test
    public void test12050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12050");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException9);
        double double11 = functionEvaluationException9.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException9);
        java.lang.String str13 = convergenceException12.toString();
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded" + "'", str13, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded");
    }

    @Test
    public void test12051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12051");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        boolean boolean38 = complex32.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex29.add(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt1z();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.tan();
        org.apache.commons.math.complex.Complex complex48 = complex45.exp();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex49.log();
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex45.divide(complex50);
        org.apache.commons.math.complex.Complex complex54 = complex53.atan();
        org.apache.commons.math.complex.Complex complex55 = complex53.log();
        org.apache.commons.math.complex.Complex complex56 = complex41.add(complex53);
        org.apache.commons.math.complex.Complex complex57 = complex53.negate();
        double double58 = complex53.abs();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test12052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12052");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.negate();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getReal();
        org.apache.commons.math.complex.Complex complex11 = complex8.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test12053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12053");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        int int7 = polynomialFunction4.degree();
        int int8 = polynomialFunction4.degree();
        double double10 = polynomialFunction4.value(0.8414709848078965d);
        double[] doubleArray11 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction13);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction13);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
    }

    @Test
    public void test12054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12054");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
    }

    @Test
    public void test12055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12055");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100);
        double double6 = functionEvaluationException5.getArgument();
        double double7 = functionEvaluationException5.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(0.38535742648327137d, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException5);
        java.lang.Object[] objArray9 = functionEvaluationException5.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException18);
        mathException13.addSuppressed((java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: ", objArray9, (java.lang.Throwable) functionEvaluationException19);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0]");
    }

    @Test
    public void test12056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12056");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.apache.commons.math.complex.Complex complex9 = complex2.pow(complex6);
        org.apache.commons.math.complex.Complex complex10 = complex6.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex18.pow(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex14.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        org.apache.commons.math.complex.Complex complex49 = complex43.acos();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex43.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex36.add(complex43);
        org.apache.commons.math.complex.Complex complex55 = complex26.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex10.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.cosh();
        boolean boolean58 = complex57.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test12057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12057");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "hi!", (java.lang.Throwable) maxIterationsExceededException7);
        int int9 = maxIterationsExceededException7.getMaxIterations();
        java.lang.Object[] objArray10 = maxIterationsExceededException7.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) functionEvaluationException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray10, (java.lang.Throwable) functionEvaluationException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 15, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException19);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
    }

    @Test
    public void test12058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12058");
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        java.lang.Object[] objArray14 = new java.lang.Object[] { complex13 };
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        java.lang.Object[] objArray23 = new java.lang.Object[] { convergenceException17, complex19, true };
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray14, (java.lang.Throwable) mathException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException30);
        java.lang.String str32 = functionEvaluationException30.getPattern();
        java.lang.Object[] objArray33 = functionEvaluationException30.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Object[] objArray35 = functionEvaluationException30.getArguments();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray35);
        java.lang.String str37 = mathException36.getPattern();
        java.lang.Throwable[] throwableArray38 = mathException36.getSuppressed();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str32, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str37, "org.apache.commons.math.FunctionEvaluationException: hi!");
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test12059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12059");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex11.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex11.exp();
        double double33 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex34 = complex11.conjugate();
        double[] doubleArray37 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = polynomialFunction38.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        laguerreSolver42.setAbsoluteAccuracy((double) '#');
        laguerreSolver42.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = laguerreSolver42.getPolynomialFunction();
        double[] doubleArray49 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray49);
        double double52 = polynomialFunction50.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = polynomialFunction50.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver54 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction53);
        laguerreSolver54.setAbsoluteAccuracy((double) '#');
        laguerreSolver54.resetAbsoluteAccuracy();
        laguerreSolver54.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        org.apache.commons.math.complex.Complex complex64 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex65.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex66.log();
        org.apache.commons.math.complex.Complex complex70 = complex61.multiply(complex66);
        org.apache.commons.math.complex.Complex complex71 = complex66.sin();
        org.apache.commons.math.complex.Complex complex72 = complex66.tan();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex66, complex73 };
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.log();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray78 = laguerreSolver54.solveAll(complexArray74, complex76);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = complex83.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.atan();
        org.apache.commons.math.complex.Complex complex87 = complex84.log();
        org.apache.commons.math.complex.Complex complex88 = complex82.pow(complex84);
        org.apache.commons.math.complex.Complex complex89 = laguerreSolver42.solve(complexArray74, complex82);
        org.apache.commons.math.complex.Complex complex90 = complex11.add(complex82);
        org.apache.commons.math.complex.Complex complex91 = complex90.exp();
        org.apache.commons.math.complex.Complex complex94 = new org.apache.commons.math.complex.Complex((double) 97, (double) 0L);
        org.apache.commons.math.complex.Complex complex95 = complex94.sinh();
        org.apache.commons.math.complex.Complex complex96 = complex91.divide(complex94);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test12060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12060");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        double double4 = complex3.getImaginary();
        boolean boolean5 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex6 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex3.sin();
        org.apache.commons.math.complex.Complex complex8 = complex7.tanh();
        double double9 = complex8.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test12061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12061");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        int int33 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double38 = laguerreSolver7.solve((double) 35, 0.761594155955765d);
        int int39 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
    }

    @Test
    public void test12062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12062");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex14.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.conjugate();
        boolean boolean21 = complex20.isInfinite();
        double double22 = complex20.getImaginary();
        boolean boolean23 = complex20.isNaN();
        org.apache.commons.math.complex.Complex complex24 = complex10.add(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean27 = complex26.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex28.tan();
        boolean boolean32 = complex26.equals((java.lang.Object) complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        org.apache.commons.math.complex.Complex complex37 = complex10.multiply(complex35);
        boolean boolean38 = complex35.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.0d) + "'", double22 == (-0.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test12063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12063");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tan();
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = complex17.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        org.apache.commons.math.complex.Complex complex23 = complex12.divide(complex20);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex27.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex20.add(complex35);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test12064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12064");
        double[] doubleArray6 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver11.setAbsoluteAccuracy((double) '#');
        laguerreSolver11.resetMaximalIterationCount();
        laguerreSolver11.resetMaximalIterationCount();
        double[] doubleArray18 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        double double21 = polynomialFunction19.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = polynomialFunction19.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        laguerreSolver23.setAbsoluteAccuracy((double) '#');
        laguerreSolver23.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = laguerreSolver23.getPolynomialFunction();
        double[] doubleArray30 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = polynomialFunction31.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction34);
        laguerreSolver35.setAbsoluteAccuracy((double) '#');
        laguerreSolver35.resetAbsoluteAccuracy();
        laguerreSolver35.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = complex47.log();
        org.apache.commons.math.complex.Complex complex51 = complex42.multiply(complex47);
        org.apache.commons.math.complex.Complex complex52 = complex47.sin();
        org.apache.commons.math.complex.Complex complex53 = complex47.tan();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex47, complex54 };
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver35.solveAll(complexArray55, complex57);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex65.atan();
        org.apache.commons.math.complex.Complex complex68 = complex65.log();
        org.apache.commons.math.complex.Complex complex69 = complex63.pow(complex65);
        org.apache.commons.math.complex.Complex complex70 = laguerreSolver23.solve(complexArray55, complex63);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex72.tan();
        org.apache.commons.math.complex.Complex complex76 = complex71.subtract(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex76.cos();
        boolean boolean78 = complex76.isInfinite();
        org.apache.commons.math.complex.Complex complex79 = complex76.cos();
        org.apache.commons.math.complex.Complex complex80 = complex79.tan();
        org.apache.commons.math.complex.Complex complex81 = complex80.tanh();
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver11.solveAll(complexArray55, complex81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!");
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Object[]) complexArray82, (java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(4.0d, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray82, (java.lang.Throwable) functionEvaluationException90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
    }

    @Test
    public void test12065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12065");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8, throwable9);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray11, (java.lang.Throwable) maxIterationsExceededException14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(32, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test12066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12066");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        double double11 = complex10.abs();
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.atan();
        org.apache.commons.math.complex.Complex complex20 = complex19.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex25.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex35.exp();
        org.apache.commons.math.complex.Complex complex38 = complex25.pow(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex25.acos();
        org.apache.commons.math.complex.Complex complex40 = complex21.pow(complex25);
        org.apache.commons.math.complex.Complex complex41 = complex16.add(complex40);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test12067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12067");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex1.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex1.sin();
        org.apache.commons.math.complex.Complex complex11 = complex1.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test12068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12068");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction46.polynomialDerivative();
        double[] doubleArray48 = polynomialFunction46.getCoefficients();
        double double50 = polynomialFunction46.value(32.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = polynomialFunction46.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction52 = polynomialFunction51.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertNotNull(univariateRealFunction52);
    }

    @Test
    public void test12069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12069");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        int int41 = laguerreSolver7.getIterationCount();
        double double42 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double44 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-6d + "'", double42 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test12070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12070");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = polynomialFunction40.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(polynomialFunction41);
    }

    @Test
    public void test12071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12071");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double38 = laguerreSolver7.solve((double) '4', 100.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double40 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
    }

    @Test
    public void test12072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12072");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        boolean boolean7 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = complex5.cos();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.atan();
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex12.tan();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex(0.8414709848078965d, (double) 100L);
        org.apache.commons.math.complex.Complex complex19 = complex12.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex10.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test12073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12073");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        int int14 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.setMaximalIterationCount(2);
        laguerreSolver7.setAbsoluteAccuracy(3.615526674047281E41d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test12074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12074");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8, throwable9);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        java.lang.Object[] objArray26 = new java.lang.Object[] { convergenceException20, complex22, true };
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray26, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", objArray26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException34);
        java.lang.String str36 = mathException35.getPattern();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray11, (java.lang.Throwable) mathException35);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray46, throwable47);
        java.lang.Object[] objArray49 = convergenceException48.getArguments();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, (java.lang.Throwable) maxIterationsExceededException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException54);
        java.lang.Throwable[] throwableArray56 = convergenceException54.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException", objArray11, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "hi!", (java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        functionEvaluationException62.addSuppressed((java.lang.Throwable) functionEvaluationException65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("Evaluation failed for argument = {0}", objArray11, (java.lang.Throwable) functionEvaluationException65);
        double double68 = functionEvaluationException65.getArgument();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
    }

    @Test
    public void test12075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12075");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test12076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12076");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double39 = laguerreSolver7.getAbsoluteAccuracy();
        double double40 = laguerreSolver7.getRelativeAccuracy();
        double double41 = laguerreSolver7.getResult();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-6d + "'", double39 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test12077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12077");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray9);
        java.lang.Throwable[] throwableArray13 = convergenceException12.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        java.lang.Object[] objArray27 = new java.lang.Object[] { convergenceException21, complex23, true };
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", objArray27);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray27);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray36, throwable37);
        java.lang.Object[] objArray39 = convergenceException38.getArguments();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray27, (java.lang.Throwable) convergenceException38);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("hi!", objArray27, throwable42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) convergenceException43);
        java.lang.Throwable[] throwableArray45 = convergenceException43.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException43);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test12078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12078");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 1L);
        java.lang.Object[] objArray4 = functionEvaluationException3.getArguments();
        java.lang.Throwable[] throwableArray5 = functionEvaluationException3.getSuppressed();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) mathException7);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test12079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12079");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.apache.commons.math.complex.Complex complex9 = complex2.pow(complex6);
        double double10 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.atan();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.cos();
        org.apache.commons.math.complex.Complex complex27 = complex21.atan();
        org.apache.commons.math.complex.Complex complex28 = complex13.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.negate();
        org.apache.commons.math.complex.Complex complex30 = complex6.pow(complex27);
        org.apache.commons.math.complex.Complex complex31 = complex6.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test12080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12080");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex1.pow(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex1.atan();
        double double15 = complex1.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test12081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12081");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 100);
        double double99 = laguerreSolver7.solve(1.4440009959998334d, 1.557407724654902d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.4440009959998334d + "'", double99 == 1.4440009959998334d);
    }

    @Test
    public void test12082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12082");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        double double8 = univariateRealFunction6.value((double) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction6);
        laguerreSolver9.setMaximalIterationCount(100);
        double double14 = laguerreSolver9.solve(2.718281828459045d, Double.NaN);
        laguerreSolver9.setAbsoluteAccuracy(0.0d);
        double double17 = laguerreSolver9.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2.718281828459045d + "'", double14 == 2.718281828459045d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
    }

    @Test
    public void test12083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12083");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.9149994957367077d, 0.8862269254527579d);
    }

    @Test
    public void test12084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12084");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex10.cos();
        org.apache.commons.math.complex.Complex complex16 = complex10.atan();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex20 = complex17.cos();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 100.0f, (double) 4);
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex17.add(complex25);
        double double27 = complex25.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.003997602237538d + "'", double27 == 10.003997602237538d);
    }

    @Test
    public void test12085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12085");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(35.0d, 52.0d);
    }

    @Test
    public void test12086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12086");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str7 = functionEvaluationException6.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        convergenceException8.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Object[] objArray11 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.Object[] objArray13 = mathException9.getArguments();
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(1.5706900455763888d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", objArray13, throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException", throwable14);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test12087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12087");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double13 = laguerreSolver7.solve((double) (-1), 0.7853981633974483d);
        double[] doubleArray17 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver7.solveAll(doubleArray17, (-1.0d));
        int int21 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double double23 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
    }

    @Test
    public void test12088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12088");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        laguerreSolver24.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = complex31.multiply(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex36.sin();
        org.apache.commons.math.complex.Complex complex42 = complex36.tan();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex36, complex43 };
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver24.solveAll(complexArray44, complex46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.atan();
        org.apache.commons.math.complex.Complex complex52 = complex51.atan();
        org.apache.commons.math.complex.Complex complex53 = complex52.sin();
        org.apache.commons.math.complex.Complex complex54 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex55 = complex52.asin();
        org.apache.commons.math.complex.Complex complex56 = laguerreSolver7.solve(complexArray44, complex52);
        org.apache.commons.math.complex.Complex complex57 = complex56.cos();
        double double58 = complex56.getReal();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test12089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12089");
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) convergenceException7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(2.0d, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", objArray9, (java.lang.Throwable) functionEvaluationException13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: ", objArray1, (java.lang.Throwable) functionEvaluationException14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test12090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12090");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0, (double) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test12091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12091");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.tan();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex1.atan();
        boolean boolean6 = complex1.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex19 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex19.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.tan();
        org.apache.commons.math.complex.Complex complex27 = complex24.acos();
        org.apache.commons.math.complex.Complex complex28 = complex27.exp();
        org.apache.commons.math.complex.Complex complex29 = complex27.negate();
        org.apache.commons.math.complex.Complex complex30 = complex8.pow(complex27);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex31.tan();
        org.apache.commons.math.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.tan();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex39.subtract(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex35.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex48.negate();
        org.apache.commons.math.complex.Complex complex51 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex52 = complex30.subtract(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex52.acos();
        boolean boolean54 = complex52.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test12092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12092");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math.complex.Complex complex12 = complex10.cos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex14.tan();
        org.apache.commons.math.complex.Complex complex17 = complex16.tan();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        double double19 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex18);
        boolean boolean21 = complex20.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test12093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12093");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 10);
        double double13 = laguerreSolver7.getRelativeAccuracy();
        int int14 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test12094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12094");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(10.0d);
        double double16 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test12095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12095");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        int int17 = polynomialFunction16.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = polynomialFunction16.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction18);
    }

    @Test
    public void test12096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12096");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = complex6.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex6.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        double double19 = complex18.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test12097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12097");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        double double89 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(1.0E-14d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double95 = laguerreSolver7.solve(0.761594155955765d, 97.0d);
        laguerreSolver7.setMaximalIterationCount((int) (byte) -1);
        int int98 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 52.0d + "'", double89 == 52.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.761594155955765d + "'", double95 == 0.761594155955765d);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test12098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12098");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex8.tan();
        org.apache.commons.math.complex.Complex complex12 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        boolean boolean21 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex25 = complex19.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex13.divide(complex19);
        double double27 = complex13.getReal();
        org.apache.commons.math.complex.Complex complex28 = complex7.multiply(complex13);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test12099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12099");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray9, throwable10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray12, (java.lang.Throwable) maxIterationsExceededException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!");
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray12, (java.lang.Throwable) mathException18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "", objArray12);
        java.lang.Object[] objArray21 = maxIterationsExceededException20.getArguments();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) maxIterationsExceededException20);
        java.lang.Object[] objArray23 = maxIterationsExceededException20.getArguments();
        int int24 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, (java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray30 = functionEvaluationException29.getArguments();
        java.lang.String str31 = functionEvaluationException29.getPattern();
        double double32 = functionEvaluationException29.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, (java.lang.Throwable) functionEvaluationException29);
        maxIterationsExceededException20.addSuppressed((java.lang.Throwable) functionEvaluationException29);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }

    @Test
    public void test12100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12100");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) 10.0f);
        int int47 = polynomialFunction44.degree();
        double[] doubleArray48 = polynomialFunction44.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver7.solveAll(doubleArray48, (double) 100.0f);
        double double54 = laguerreSolver7.solve((double) 97, 52.0d);
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 97.0d + "'", double54 == 97.0d);
    }

    @Test
    public void test12101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12101");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        double double8 = univariateRealFunction6.value((double) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction6);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver9.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
    }

    @Test
    public void test12102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12102");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex3.asin();
        double double5 = complex4.getReal();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test12103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12103");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(Double.NaN);
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 100);
        laguerreSolver7.setFunctionValueAccuracy((double) 97);
        laguerreSolver7.setFunctionValueAccuracy(636.4927919582647d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test12104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12104");
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray13);
        java.lang.Throwable[] throwableArray21 = maxIterationsExceededException20.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Object[]) throwableArray21, (java.lang.Throwable) mathException29);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test12105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12105");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test12106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12106");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex10.cos();
        org.apache.commons.math.complex.Complex complex16 = complex10.atan();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        boolean boolean20 = complex18.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12107");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        java.lang.Object[] objArray3 = functionEvaluationException2.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test12108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12108");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test12109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12109");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.negate();
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        double double19 = complex15.getReal();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, (java.lang.Throwable) functionEvaluationException25);
        boolean boolean27 = complex15.equals((java.lang.Object) functionEvaluationException26);
        org.apache.commons.math.complex.Complex complex28 = complex15.acos();
        org.apache.commons.math.complex.Complex complex29 = complex15.atan();
        org.apache.commons.math.complex.Complex complex30 = complex15.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test12110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12110");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0d, 100.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test12111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12111");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setMaximalIterationCount(0);
        int int21 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.setMaximalIterationCount((int) (short) 100);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test12112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12112");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction4.polynomialDerivative();
        double[] doubleArray16 = polynomialFunction15.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test12113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12113");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction3.derivative();
        int int13 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction3.polynomialDerivative();
        double double16 = polynomialFunction14.value(10.15486522864652d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test12114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12114");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.negate();
        double double12 = complex8.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test12115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12115");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex8 = complex4.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test12116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12116");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.38535742648327137d, (-0.8394684411440628d));
    }

    @Test
    public void test12117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12117");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int40 = laguerreSolver7.getMaximalIterationCount();
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction44.polynomialDerivative();
        double double49 = polynomialFunction44.value((double) (byte) 100);
        double[] doubleArray50 = polynomialFunction44.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver7.solveAll(doubleArray50, (double) ' ');
        double[] doubleArray55 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        double double58 = polynomialFunction56.value((double) 10.0f);
        int int59 = polynomialFunction56.degree();
        double[] doubleArray60 = polynomialFunction56.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction62 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver7.solveAll(doubleArray60, 100.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction65 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray64);
    }

    @Test
    public void test12118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12118");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) ' ');
        int int7 = polynomialFunction4.degree();
        double double9 = polynomialFunction4.value((double) 97);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction4.derivative();
        double[] doubleArray11 = polynomialFunction4.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
    }

    @Test
    public void test12119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12119");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray10 = functionEvaluationException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray13, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        java.lang.Object[] objArray23 = new java.lang.Object[] { convergenceException17, complex19, true };
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException27);
        convergenceException15.addSuppressed((java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray30 = convergenceException28.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10, (java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray32 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        java.lang.Object[] objArray45 = new java.lang.Object[] { convergenceException39, complex41, true };
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray47, throwable48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray45, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", objArray45);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray45);
        java.lang.Throwable[] throwableArray53 = maxIterationsExceededException52.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray53, (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException61);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.atan();
        java.lang.Object[] objArray74 = new java.lang.Object[] { convergenceException68, complex70, true };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray76, throwable77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray74, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("", objArray74);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException81 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray74);
        int int82 = maxIterationsExceededException81.getMaxIterations();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str87 = functionEvaluationException86.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException86);
        java.lang.String str89 = functionEvaluationException86.getPattern();
        mathException83.addSuppressed((java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (0) exceeded", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Object[]) throwableArray32);
        java.lang.Object[] objArray95 = convergenceException94.getArguments();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[]");
    }

    @Test
    public void test12120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12120");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.1752011936438014d);
        double[] doubleArray16 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        double double19 = polynomialFunction17.value((double) 10.0f);
        int int20 = polynomialFunction17.degree();
        double[] doubleArray21 = polynomialFunction17.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray26 = laguerreSolver7.solveAll(doubleArray21, 1.557407724654902d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.1432116289313778d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray26);
    }

    @Test
    public void test12121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12121");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test12122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12122");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex5.multiply(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex27.pow(complex29);
        org.apache.commons.math.complex.Complex complex34 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex38.multiply(complex46);
        org.apache.commons.math.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex60.add(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex56.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.acos();
        org.apache.commons.math.complex.Complex complex70 = complex51.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.tan();
        org.apache.commons.math.complex.Complex complex77 = complex74.exp();
        org.apache.commons.math.complex.Complex complex78 = complex74.cos();
        org.apache.commons.math.complex.Complex complex79 = complex51.divide(complex74);
        org.apache.commons.math.complex.Complex complex80 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex81 = complex22.multiply(complex51);
        double double82 = complex51.getReal();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = complex83.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.atan();
        boolean boolean88 = complex84.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex89 = complex84.conjugate();
        org.apache.commons.math.complex.Complex complex90 = complex84.asin();
        org.apache.commons.math.complex.Complex complex91 = complex90.exp();
        org.apache.commons.math.complex.Complex complex92 = complex90.conjugate();
        org.apache.commons.math.complex.Complex complex93 = complex92.negate();
        org.apache.commons.math.complex.Complex complex94 = complex93.cos();
        org.apache.commons.math.complex.Complex complex95 = complex93.tan();
        org.apache.commons.math.complex.Complex complex96 = complex93.sqrt1z();
        org.apache.commons.math.complex.Complex complex97 = complex51.divide(complex96);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test12123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12123");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) '4');
        double double41 = laguerreSolver7.solve((double) 1L, (double) ' ', (double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(0.5403023058681398d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
    }

    @Test
    public void test12124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12124");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve((double) 0, (double) 1.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
    }

    @Test
    public void test12125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12125");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) '4');
        laguerreSolver7.setMaximalIterationCount(52);
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 0);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        double double46 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double48 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-14d + "'", double46 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
    }

    @Test
    public void test12126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12126");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double36 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-14d + "'", double36 == 1.0E-14d);
    }

    @Test
    public void test12127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12127");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, "hi!", (java.lang.Throwable) functionEvaluationException6);
        double double9 = functionEvaluationException6.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test12128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12128");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        org.apache.commons.math.complex.Complex complex7 = complex5.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test12129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12129");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex1.cos();
        org.apache.commons.math.complex.Complex complex6 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex10.multiply(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex31.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        org.apache.commons.math.complex.Complex complex40 = complex20.pow(complex37);
        org.apache.commons.math.complex.Complex complex41 = complex20.exp();
        boolean boolean42 = complex41.isNaN();
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex6.pow(complex41);
        org.apache.commons.math.complex.Complex complex45 = complex41.sin();
        org.apache.commons.math.complex.Complex complex46 = complex41.exp();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.atan();
        org.apache.commons.math.complex.Complex complex49 = complex48.atan();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex53 = complex46.subtract(complex49);
        boolean boolean54 = complex49.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test12130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12130");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray8, throwable9);
        java.lang.Object[] objArray11 = convergenceException10.getArguments();
        java.lang.Throwable[] throwableArray12 = convergenceException10.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str19 = functionEvaluationException18.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException18);
        java.lang.Object[] objArray21 = functionEvaluationException18.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("hi!", objArray21);
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray29, throwable30);
        java.lang.Object[] objArray32 = convergenceException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray32);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray32);
        java.lang.Throwable[] throwableArray36 = convergenceException35.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        java.lang.Object[] objArray50 = new java.lang.Object[] { convergenceException44, complex46, true };
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray52, throwable53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray50, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", objArray50);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException57 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray50);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray59, throwable60);
        java.lang.Object[] objArray62 = convergenceException61.getArguments();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray50, (java.lang.Throwable) convergenceException61);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("hi!", objArray50, throwable65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray36, (java.lang.Throwable) convergenceException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("", objArray21, (java.lang.Throwable) convergenceException66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) convergenceException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException(4, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException71);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
    }

    @Test
    public void test12131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12131");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) -1, (double) (byte) 10);
        double double3 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = complex2.acos();
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        org.apache.commons.math.complex.Complex complex6 = complex2.atan();
        double double7 = complex6.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.56395488418149d + "'", double7 == 1.56395488418149d);
    }

    @Test
    public void test12132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12132");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str9 = functionEvaluationException8.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException();
        convergenceException10.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Object[] objArray13 = mathException11.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(97.00515450222221d, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(636.4927919582647d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", (java.lang.Throwable) functionEvaluationException16);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test12133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12133");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35");
    }

    @Test
    public void test12134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12134");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) 10, 7.0001840869445076d);
    }

    @Test
    public void test12135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12135");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        double double46 = laguerreSolver7.solve(1.1432116289313778d, (double) 20, 52.009614495783374d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.1432116289313778d + "'", double46 == 1.1432116289313778d);
    }

    @Test
    public void test12136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12136");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        int int49 = laguerreSolver7.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = laguerreSolver7.getPolynomialFunction();
        int int51 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.1752011936438014d);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int58 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
    }

    @Test
    public void test12137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12137");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray10 = functionEvaluationException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray13, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        java.lang.Object[] objArray23 = new java.lang.Object[] { convergenceException17, complex19, true };
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException27);
        convergenceException15.addSuppressed((java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray30 = convergenceException28.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10, (java.lang.Throwable) convergenceException28);
        java.lang.Throwable[] throwableArray32 = convergenceException31.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        java.lang.Object[] objArray45 = new java.lang.Object[] { convergenceException39, complex41, true };
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray47, throwable48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray45, (java.lang.Throwable) convergenceException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", objArray45);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray45);
        java.lang.Throwable[] throwableArray53 = maxIterationsExceededException52.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray53, (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException61);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex70.atan();
        java.lang.Object[] objArray74 = new java.lang.Object[] { convergenceException68, complex70, true };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray76, throwable77);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray74, (java.lang.Throwable) convergenceException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("", objArray74);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException81 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray74);
        int int82 = maxIterationsExceededException81.getMaxIterations();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str87 = functionEvaluationException86.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException86);
        java.lang.String str89 = functionEvaluationException86.getPattern();
        mathException83.addSuppressed((java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException83);
        java.lang.Throwable[] throwableArray93 = mathException83.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException83);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test12138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12138");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
    }

    @Test
    public void test12139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12139");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray9, throwable10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray12, (java.lang.Throwable) maxIterationsExceededException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!");
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray12, (java.lang.Throwable) mathException18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "", objArray12);
        java.lang.Object[] objArray21 = maxIterationsExceededException20.getArguments();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) maxIterationsExceededException20);
        java.lang.Object[] objArray23 = maxIterationsExceededException20.getArguments();
        int int24 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(0.4430227241169225d, (java.lang.Throwable) maxIterationsExceededException20);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
    }

    @Test
    public void test12140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12140");
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        laguerreSolver10.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver10.getPolynomialFunction();
        double double17 = laguerreSolver10.solve(0.0d, (double) 1.0f);
        double[] doubleArray20 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = polynomialFunction21.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        laguerreSolver25.setAbsoluteAccuracy((double) '#');
        laguerreSolver25.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = laguerreSolver25.getPolynomialFunction();
        double[] doubleArray32 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        double double35 = polynomialFunction33.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = polynomialFunction33.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver37 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction36);
        laguerreSolver37.setAbsoluteAccuracy((double) '#');
        laguerreSolver37.resetAbsoluteAccuracy();
        laguerreSolver37.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = complex44.multiply(complex49);
        org.apache.commons.math.complex.Complex complex54 = complex49.sin();
        org.apache.commons.math.complex.Complex complex55 = complex49.tan();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex49, complex56 };
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex58.log();
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray61 = laguerreSolver37.solveAll(complexArray57, complex59);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex67.atan();
        org.apache.commons.math.complex.Complex complex70 = complex67.log();
        org.apache.commons.math.complex.Complex complex71 = complex65.pow(complex67);
        org.apache.commons.math.complex.Complex complex72 = laguerreSolver25.solve(complexArray57, complex65);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex73.tan();
        org.apache.commons.math.complex.Complex complex77 = complex76.asin();
        org.apache.commons.math.complex.Complex[] complexArray78 = laguerreSolver10.solveAll(complexArray57, complex76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) complexArray57);
        java.lang.Object[] objArray81 = mathException80.getArguments();
        java.lang.String str82 = mathException80.toString();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(polynomialFunction29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str82, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test12141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12141");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        int int12 = laguerreSolver7.getMaximalIterationCount();
        double double13 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
    }

    @Test
    public void test12142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12142");
        double[] doubleArray1 = new double[] { 0.0d };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction2 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
    }

    @Test
    public void test12143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12143");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        laguerreSolver7.setRelativeAccuracy(0.0d);
        int int43 = laguerreSolver7.getMaximalIterationCount();
        double double47 = laguerreSolver7.solve(2.0d, (double) 1L, (double) 1);
        double double48 = laguerreSolver7.getFunctionValueAccuracy();
        int int49 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2.0d + "'", double47 == 2.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
    }

    @Test
    public void test12144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12144");
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        java.lang.Object[] objArray17 = new java.lang.Object[] { complex16 };
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        java.lang.Object[] objArray26 = new java.lang.Object[] { convergenceException20, complex22, true };
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray26, (java.lang.Throwable) convergenceException30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("", objArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray17, (java.lang.Throwable) mathException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = functionEvaluationException33.getPattern();
        double double36 = functionEvaluationException33.getArgument();
        java.lang.Object[] objArray37 = functionEvaluationException33.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "Evaluation failed for argument = {0}", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", objArray37, (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(0.9149994957367077d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", objArray37, (java.lang.Throwable) mathException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.MathException", objArray37);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str35, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertNotNull(objArray37);
    }

    @Test
    public void test12145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12145");
        double[] doubleArray3 = new double[] { (byte) -1, 1.0E-14d, (byte) 1 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray3);
        double[] doubleArray7 = polynomialFunction6.getCoefficients();
        double[] doubleArray8 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray8);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray8);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction10.derivative();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0E-14, 1.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction11);
    }

    @Test
    public void test12146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12146");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.sin();
        org.apache.commons.math.complex.Complex complex2 = complex1.asin();
        org.apache.commons.math.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex1.negate();
        org.apache.commons.math.complex.Complex complex5 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex23.tan();
        org.apache.commons.math.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.tan();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex31.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex27.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex21.add(complex27);
        org.apache.commons.math.complex.Complex complex42 = complex10.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex10.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex10.atan();
        org.apache.commons.math.complex.Complex complex46 = complex1.add(complex10);
        org.apache.commons.math.complex.Complex complex47 = complex46.tan();
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test12147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12147");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.solve((-0.0d), 1.0E-14d);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 0);
        laguerreSolver7.setMaximalIterationCount((int) '4');
        laguerreSolver7.setAbsoluteAccuracy(100.0d);
        double double24 = laguerreSolver7.solve(363.89859381747976d, 3.141592653589793d);
        int int25 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(100.07996802557444d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.0d) + "'", double15 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 363.89859381747976d + "'", double24 == 363.89859381747976d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
    }

    @Test
    public void test12148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12148");
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray16);
        int int24 = maxIterationsExceededException23.getMaxIterations();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException25);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray28, throwable29);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        java.lang.Object[] objArray38 = new java.lang.Object[] { convergenceException32, complex34, true };
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray40, throwable41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray38, (java.lang.Throwable) convergenceException42);
        convergenceException30.addSuppressed((java.lang.Throwable) convergenceException43);
        java.lang.Throwable[] throwableArray45 = convergenceException43.getSuppressed();
        mathException25.addSuppressed((java.lang.Throwable) convergenceException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(0.38535742648327137d, "Evaluation failed for argument = {0}", (java.lang.Throwable) mathException25);
        java.lang.Object[] objArray48 = mathException25.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray48, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(2.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) mathException54);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
    }

    @Test
    public void test12149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12149");
        double[] doubleArray11 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        double double14 = polynomialFunction12.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction12.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        laguerreSolver16.setAbsoluteAccuracy((double) '#');
        laguerreSolver16.resetAbsoluteAccuracy();
        laguerreSolver16.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.apache.commons.math.complex.Complex complex32 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex33 = complex28.sin();
        org.apache.commons.math.complex.Complex complex34 = complex28.tan();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex28, complex35 };
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver16.solveAll(complexArray36, complex38);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "hi!", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) convergenceException49);
        double double51 = functionEvaluationException50.getArgument();
        java.lang.Throwable[] throwableArray52 = functionEvaluationException50.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(1.557407724654902d, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray36, (java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray36);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test12150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12150");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetMaximalIterationCount();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 100);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
    }

    @Test
    public void test12151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12151");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int40 = laguerreSolver7.getMaximalIterationCount();
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction44.polynomialDerivative();
        double double49 = polynomialFunction44.value((double) (byte) 100);
        double[] doubleArray50 = polynomialFunction44.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver7.solveAll(doubleArray50, (double) ' ');
        double[] doubleArray55 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        double double58 = polynomialFunction56.value((double) 10.0f);
        int int59 = polynomialFunction56.degree();
        double[] doubleArray60 = polynomialFunction56.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction62 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver7.solveAll(doubleArray60, 100.0d);
        double double65 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test12152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12152");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.tan();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean29 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex30.tan();
        boolean boolean34 = complex28.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex24.pow(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex24.asin();
        org.apache.commons.math.complex.Complex complex38 = complex24.log();
        org.apache.commons.math.complex.Complex complex39 = complex22.multiply(complex24);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test12153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12153");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.solve((-0.0d), 1.0E-14d);
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 4);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        double double23 = laguerreSolver7.solve((double) (byte) 100, 2.59499345614249d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.0d) + "'", double15 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test12154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12154");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        double double76 = laguerreSolver7.getAbsoluteAccuracy();
        double double77 = laguerreSolver7.getResult();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0E-6d + "'", double76 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test12155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12155");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        org.apache.commons.math.complex.Complex complex16 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = complex11.pow(complex13);
        org.apache.commons.math.complex.Complex complex18 = complex13.cos();
        org.apache.commons.math.complex.Complex complex19 = complex13.atan();
        org.apache.commons.math.complex.Complex complex20 = complex13.tan();
        org.apache.commons.math.complex.Complex complex21 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex22 = complex13.sin();
        org.apache.commons.math.complex.Complex complex23 = complex13.atan();
        boolean boolean24 = complex13.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12156");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        int int39 = laguerreSolver7.getIterationCount();
        double double40 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test12157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12157");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.lang.Object[] objArray4 = functionEvaluationException3.getArguments();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str14 = functionEvaluationException13.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException();
        convergenceException15.addSuppressed((java.lang.Throwable) mathException16);
        java.lang.Object[] objArray18 = mathException16.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        java.lang.Object[] objArray31 = new java.lang.Object[] { convergenceException25, complex27, true };
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray33, throwable34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray31, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", objArray31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException39);
        java.lang.String str41 = mathException40.getPattern();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", objArray18, (java.lang.Throwable) mathException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("Maximal number of iterations (-1) exceeded", objArray4, (java.lang.Throwable) functionEvaluationException43);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[35.0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test12158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12158");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver4 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = laguerreSolver4.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
    }

    @Test
    public void test12159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12159");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex7.exp();
        org.apache.commons.math.complex.Complex complex12 = complex7.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Object[] objArray22 = functionEvaluationException21.getArguments();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray32 = functionEvaluationException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "", objArray32);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        java.lang.Object[] objArray43 = new java.lang.Object[] { convergenceException37, complex39, true };
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray45, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", objArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", objArray32, (java.lang.Throwable) mathException49);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        java.lang.Object[] objArray66 = new java.lang.Object[] { convergenceException60, complex62, true };
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray68, throwable69);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray66, (java.lang.Throwable) convergenceException70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("", objArray66);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException73 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray66);
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray75, throwable76);
        java.lang.Object[] objArray78 = convergenceException77.getArguments();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException77);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray66, (java.lang.Throwable) convergenceException77);
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.ConvergenceException convergenceException82 = new org.apache.commons.math.ConvergenceException("hi!", objArray66, throwable81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray66, (java.lang.Throwable) functionEvaluationException85);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException85);
        java.lang.Object[] objArray89 = convergenceException88.getArguments();
        mathException49.addSuppressed((java.lang.Throwable) convergenceException88);
        java.lang.Object[] objArray91 = mathException49.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray22, (java.lang.Throwable) mathException49);
        boolean boolean93 = complex12.equals((java.lang.Object) "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12160");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex4.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        boolean boolean8 = complex7.isNaN();
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        double double10 = complex7.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test12161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12161");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex10.cos();
        org.apache.commons.math.complex.Complex complex16 = complex10.atan();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex20 = complex17.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex24.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        boolean boolean31 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = complex30.tan();
        double double33 = complex30.getImaginary();
        boolean boolean34 = complex30.isNaN();
        org.apache.commons.math.complex.Complex complex35 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex39.add(complex40);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex46.acos();
        org.apache.commons.math.complex.Complex complex48 = complex30.divide(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex30.conjugate();
        boolean boolean50 = complex20.equals((java.lang.Object) complex30);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.0d) + "'", double33 == (-0.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test12162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12162");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = complex16.sin();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex29.tan();
        org.apache.commons.math.complex.Complex complex33 = complex29.sinh();
        double double34 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex16.divide(complex29);
        org.apache.commons.math.complex.Complex complex36 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex(97.0d, 32.0d);
        org.apache.commons.math.complex.Complex complex40 = complex29.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex29.acos();
        org.apache.commons.math.complex.Complex complex42 = complex29.conjugate();
        boolean boolean43 = complex42.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test12163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12163");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f);
        java.lang.String str2 = functionEvaluationException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 0" + "'", str2, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 0");
    }

    @Test
    public void test12164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12164");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        int int87 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double double91 = laguerreSolver7.solve(1.0E-15d, 52.0d);
        double double92 = laguerreSolver7.getRelativeAccuracy();
        double double93 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0E-15d + "'", double91 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0E-14d + "'", double92 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test12165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12165");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.5430806348152437d, (double) (short) 10);
    }

    @Test
    public void test12166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12166");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double41 = laguerreSolver7.getResult();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.resetRelativeAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
    }

    @Test
    public void test12167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12167");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.setRelativeAccuracy((double) 100L);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double40 = laguerreSolver7.solve((double) (-1.0f), (double) 52, (double) (short) 100);
        int int41 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
    }

    @Test
    public void test12168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12168");
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex7.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex14.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex27.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.conjugate();
        java.lang.Object[] objArray34 = new java.lang.Object[] { complex33 };
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        java.lang.Object[] objArray43 = new java.lang.Object[] { convergenceException37, complex39, true };
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray45, throwable46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", objArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray34, (java.lang.Throwable) mathException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException50);
        java.lang.String str52 = functionEvaluationException50.getPattern();
        double double53 = functionEvaluationException50.getArgument();
        java.lang.Throwable[] throwableArray54 = functionEvaluationException50.getSuppressed();
        boolean boolean55 = complex19.equals((java.lang.Object) throwableArray54);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray54);
        java.lang.Object[] objArray59 = functionEvaluationException58.getArguments();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str52, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
    }

    @Test
    public void test12169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12169");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction12.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
    }

    @Test
    public void test12170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12170");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex33.log();
        org.apache.commons.math.complex.Complex complex37 = complex28.multiply(complex33);
        org.apache.commons.math.complex.Complex complex38 = complex25.multiply(complex33);
        org.apache.commons.math.complex.Complex complex39 = complex38.negate();
        org.apache.commons.math.complex.Complex complex40 = complex10.subtract(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex42.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex42.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test12171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12171");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray9, throwable10);
        java.lang.Object[] objArray12 = convergenceException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "hi!", (java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray12, (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", (java.lang.Throwable) convergenceException26);
        java.lang.Object[] objArray28 = convergenceException26.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(100.07996802557444d, (java.lang.Throwable) convergenceException30);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
    }

    @Test
    public void test12172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12172");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        double double35 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E-6d + "'", double35 == 1.0E-6d);
    }

    @Test
    public void test12173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12173");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        laguerreSolver17.resetAbsoluteAccuracy();
        laguerreSolver17.resetRelativeAccuracy();
        boolean boolean22 = complex5.equals((java.lang.Object) laguerreSolver17);
        double double23 = laguerreSolver17.getFunctionValueAccuracy();
        laguerreSolver17.setFunctionValueAccuracy((double) 1);
        laguerreSolver17.resetFunctionValueAccuracy();
        laguerreSolver17.setRelativeAccuracy((double) 0L);
        double double29 = laguerreSolver17.getAbsoluteAccuracy();
        double double30 = laguerreSolver17.getAbsoluteAccuracy();
        laguerreSolver17.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0E-6d + "'", double29 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0E-6d + "'", double30 == 1.0E-6d);
    }

    @Test
    public void test12174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12174");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        double double11 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex10.cos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.acos();
        org.apache.commons.math.complex.Complex complex25 = complex22.tan();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex25.negate();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex10.add(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex10.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test12175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12175");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex8 = complex4.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test12176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12176");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (byte) 10);
        double double12 = polynomialFunction6.value(0.0d);
        double[] doubleArray13 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        int int15 = polynomialFunction14.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        double double18 = laguerreSolver17.getAbsoluteAccuracy();
        double double19 = laguerreSolver17.getRelativeAccuracy();
        laguerreSolver17.setAbsoluteAccuracy(97.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-6d + "'", double18 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
    }

    @Test
    public void test12177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12177");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        double double38 = complex36.abs();
        double double39 = complex36.abs();
        double double40 = complex36.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test12178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12178");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.tan();
        boolean boolean25 = complex19.equals((java.lang.Object) complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex27);
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        double double39 = laguerreSolver36.getRelativeAccuracy();
        laguerreSolver36.setMaximalIterationCount((int) (byte) 100);
        double double42 = laguerreSolver36.getAbsoluteAccuracy();
        boolean boolean43 = complex28.equals((java.lang.Object) laguerreSolver36);
        laguerreSolver36.resetRelativeAccuracy();
        laguerreSolver36.setMaximalIterationCount(1);
        int int47 = laguerreSolver36.getMaximalIterationCount();
        laguerreSolver36.setFunctionValueAccuracy(0.0d);
        laguerreSolver36.setRelativeAccuracy(97.0d);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = laguerreSolver36.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-14d + "'", double39 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test12179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12179");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex16.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test12180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12180");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double[] doubleArray35 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray35);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction38 = polynomialFunction37.derivative();
        double[] doubleArray39 = polynomialFunction37.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray41 = laguerreSolver7.solveAll(doubleArray39, 0.7853981633974483d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        double[] doubleArray43 = polynomialFunction42.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction44 = polynomialFunction42.derivative();
        double double46 = polynomialFunction42.value(0.5669767943827975d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test12181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12181");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) -1);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        double[] doubleArray26 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction27.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        laguerreSolver31.setAbsoluteAccuracy((double) '#');
        laguerreSolver31.resetAbsoluteAccuracy();
        laguerreSolver31.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        org.apache.commons.math.complex.Complex complex49 = complex43.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray51 = new org.apache.commons.math.complex.Complex[] { complex43, complex50 };
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex52.log();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray55 = laguerreSolver31.solveAll(complexArray51, complex53);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException58 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "hi!", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.complex.Complex complex61 = new org.apache.commons.math.complex.Complex((double) (-1), (double) ' ');
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt1z();
        org.apache.commons.math.complex.Complex complex63 = laguerreSolver7.solve(complexArray51, complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.log();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test12182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12182");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        java.lang.Object[] objArray9 = new java.lang.Object[] { convergenceException3, complex5, true };
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray11, throwable12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray9, (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException14);
        java.lang.String str17 = convergenceException14.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException14);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(1);
        convergenceException18.addSuppressed((java.lang.Throwable) maxIterationsExceededException21);
        int int23 = maxIterationsExceededException21.getMaxIterations();
        int int24 = maxIterationsExceededException21.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        java.lang.Object[] objArray35 = new java.lang.Object[] { convergenceException29, complex31, true };
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray37, throwable38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray35, (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", (java.lang.Throwable) functionEvaluationException41);
        java.lang.Object[] objArray43 = functionEvaluationException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException41);
        maxIterationsExceededException21.addSuppressed((java.lang.Throwable) functionEvaluationException41);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
    }

    @Test
    public void test12183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12183");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = complex11.tan();
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test12184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12184");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = laguerreSolver7.getPolynomialFunction();
        double double40 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
    }

    @Test
    public void test12185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12185");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        double double5 = complex0.getImaginary();
        boolean boolean6 = complex0.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test12186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12186");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        boolean boolean8 = complex4.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex4.asin();
        org.apache.commons.math.complex.Complex complex11 = complex4.cos();
        boolean boolean12 = complex1.equals((java.lang.Object) complex11);
        org.apache.commons.math.complex.Complex complex13 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex15.tan();
        org.apache.commons.math.complex.Complex complex19 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex23.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex31.tan();
        org.apache.commons.math.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex36.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.tan();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex39.subtract(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex35.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex29.add(complex35);
        org.apache.commons.math.complex.Complex complex50 = complex18.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex18.cosh();
        boolean boolean52 = complex13.equals((java.lang.Object) complex51);
        double[] doubleArray55 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        double double59 = polynomialFunction57.value((double) ' ');
        double[] doubleArray60 = polynomialFunction57.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction62 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        boolean boolean63 = complex51.equals((java.lang.Object) polynomialFunction62);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction64 = polynomialFunction62.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver65 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction64);
        double double67 = polynomialFunction64.value((double) 2);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(polynomialFunction64);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test12187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12187");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex14.multiply(complex22);
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex32.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex27.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.tan();
        org.apache.commons.math.complex.Complex complex53 = complex50.exp();
        org.apache.commons.math.complex.Complex complex54 = complex50.cos();
        org.apache.commons.math.complex.Complex complex55 = complex27.divide(complex50);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex55.log();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex63.atan();
        org.apache.commons.math.complex.Complex complex66 = complex63.log();
        org.apache.commons.math.complex.Complex complex67 = complex61.pow(complex63);
        org.apache.commons.math.complex.Complex complex68 = complex67.atan();
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex57.subtract(complex68);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex72.atan();
        org.apache.commons.math.complex.Complex complex75 = complex72.log();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.atan();
        org.apache.commons.math.complex.Complex complex80 = complex77.log();
        org.apache.commons.math.complex.Complex complex81 = complex72.multiply(complex77);
        org.apache.commons.math.complex.Complex complex82 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex77.cos();
        org.apache.commons.math.complex.Complex complex84 = complex57.pow(complex77);
        org.apache.commons.math.complex.Complex complex85 = complex77.sin();
        double double86 = complex85.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test12188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12188");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 100);
        double double39 = laguerreSolver7.solve((double) 0L, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test12189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12189");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        double double39 = laguerreSolver7.solve((double) (-1L), (-0.0d));
        laguerreSolver7.resetAbsoluteAccuracy();
        int int41 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test12190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12190");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        laguerreSolver7.resetMaximalIterationCount();
        double double21 = laguerreSolver7.solve(0.7853981633974483d, 1.557407724654902d, Double.NaN);
        laguerreSolver7.resetRelativeAccuracy();
        double double23 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.7853981633974483d + "'", double21 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-14d + "'", double23 == 1.0E-14d);
    }

    @Test
    public void test12191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12191");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double44 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray47 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray47);
        double double50 = polynomialFunction48.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = polynomialFunction48.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver52 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction51);
        laguerreSolver52.setAbsoluteAccuracy((double) '#');
        laguerreSolver52.resetAbsoluteAccuracy();
        laguerreSolver52.setFunctionValueAccuracy((double) '4');
        laguerreSolver52.resetMaximalIterationCount();
        double double62 = laguerreSolver52.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        double double63 = laguerreSolver52.getAbsoluteAccuracy();
        int int64 = laguerreSolver52.getMaximalIterationCount();
        double double65 = laguerreSolver52.getAbsoluteAccuracy();
        double[] doubleArray68 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction69 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray68);
        double double71 = polynomialFunction69.value((double) 10.0f);
        double[] doubleArray72 = polynomialFunction69.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction73 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver52.solveAll(doubleArray72, 2.0d);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean77 = complex76.isInfinite();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex78.tan();
        boolean boolean82 = complex76.equals((java.lang.Object) complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex84.multiply(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex86.sqrt();
        org.apache.commons.math.complex.Complex complex88 = complex81.add(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex87.cos();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex90 = laguerreSolver7.solve(complexArray75, complex87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0E-6d + "'", double63 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0E-6d + "'", double65 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test12192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12192");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(35.0d, (java.lang.Throwable) functionEvaluationException8);
        java.lang.Throwable[] throwableArray11 = functionEvaluationException10.getSuppressed();
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        java.lang.Object[] objArray25 = new java.lang.Object[] { convergenceException19, complex21, true };
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray27, throwable28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        convergenceException17.addSuppressed((java.lang.Throwable) convergenceException30);
        java.lang.Throwable[] throwableArray32 = convergenceException30.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        java.lang.Object[] objArray53 = new java.lang.Object[] { convergenceException47, complex49, true };
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray55, throwable56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray53, (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "hi!", (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) functionEvaluationException60);
        double double63 = functionEvaluationException60.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(97.00515450222221d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.tan();
        org.apache.commons.math.complex.Complex complex76 = complex73.exp();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex79.log();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex82 = complex80.tan();
        org.apache.commons.math.complex.Complex complex83 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = complex84.log();
        org.apache.commons.math.complex.Complex complex86 = complex85.sqrt();
        java.lang.Object[] objArray87 = new java.lang.Object[] { complex76, (short) 10, mathException78, complex83, complex85 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException88 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "", objArray87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.FunctionEvaluationException: hi!", objArray87);
        double double90 = functionEvaluationException89.getArgument();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) functionEvaluationException89);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException89);
        double double93 = functionEvaluationException89.getArgument();
        java.lang.String str94 = functionEvaluationException89.toString();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-0.0d) + "'", double90 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-0.0d) + "'", double93 == (-0.0d));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str94, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test12193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12193");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(2.718281828459045d, (double) (byte) 10);
        boolean boolean3 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex4 = complex2.cos();
        org.apache.commons.math.complex.Complex complex5 = complex2.exp();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test12194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12194");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        int int33 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double38 = laguerreSolver7.solve((double) 35, 0.761594155955765d);
        int int39 = laguerreSolver7.getIterationCount();
        int int40 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
    }

    @Test
    public void test12195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12195");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        java.lang.String str7 = functionEvaluationException5.getPattern();
        double double8 = functionEvaluationException5.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, (java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Throwable) functionEvaluationException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) 4, (java.lang.Throwable) mathException11);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
    }

    @Test
    public void test12196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12196");
        double[] doubleArray9 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double double13 = polynomialFunction11.value((double) 1);
        double[] doubleArray14 = polynomialFunction11.getCoefficients();
        double double16 = polynomialFunction11.value((double) 10);
        double double18 = polynomialFunction11.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex58.add(complex59);
        org.apache.commons.math.complex.Complex complex63 = complex58.sqrt1z();
        org.apache.commons.math.complex.Complex complex64 = complex58.cos();
        org.apache.commons.math.complex.Complex complex65 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex58.tanh();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver19.solveAll(complexArray49, complex66);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("hi!", throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) 1, (java.lang.Throwable) convergenceException71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray49, (java.lang.Throwable) mathException73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray80 = functionEvaluationException79.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException81 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) complexArray49, (java.lang.Throwable) maxIterationsExceededException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 8", (java.lang.Throwable) maxIterationsExceededException81);
        java.lang.Throwable[] throwableArray84 = maxIterationsExceededException81.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray84);
        java.lang.Throwable[] throwableArray86 = functionEvaluationException85.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test12197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12197");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        int int38 = laguerreSolver7.getIterationCount();
        int int39 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
    }

    @Test
    public void test12198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12198");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double25 = laguerreSolver7.solve(0.5403023058681398d, 0.0d, 0.8414709848078965d);
        double double28 = laguerreSolver7.solve((-0.1838722778432016d), 0.761594155955765d);
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.5403023058681398d + "'", double25 == 0.5403023058681398d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.1838722778432016d) + "'", double28 == (-0.1838722778432016d));
    }

    @Test
    public void test12199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12199");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver11.setAbsoluteAccuracy(10.0d);
        laguerreSolver11.setRelativeAccuracy((double) (short) -1);
        double double16 = laguerreSolver11.getFunctionValueAccuracy();
        laguerreSolver11.setAbsoluteAccuracy((double) 10L);
        double double19 = laguerreSolver11.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-15d + "'", double19 == 1.0E-15d);
    }

    @Test
    public void test12200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12200");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double20 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 0);
        double double23 = laguerreSolver7.getAbsoluteAccuracy();
        double double24 = laguerreSolver7.getAbsoluteAccuracy();
        double double25 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((-1));
        laguerreSolver7.setRelativeAccuracy(115.29998991473416d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test12201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12201");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray12);
        int int20 = maxIterationsExceededException19.getMaxIterations();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException21);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray24, throwable25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        java.lang.Object[] objArray34 = new java.lang.Object[] { convergenceException28, complex30, true };
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray36, throwable37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray34, (java.lang.Throwable) convergenceException38);
        convergenceException26.addSuppressed((java.lang.Throwable) convergenceException39);
        java.lang.Throwable[] throwableArray41 = convergenceException39.getSuppressed();
        mathException21.addSuppressed((java.lang.Throwable) convergenceException39);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException21);
        java.lang.Object[] objArray44 = convergenceException43.getArguments();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
    }

    @Test
    public void test12202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12202");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.setFunctionValueAccuracy(1.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double19 = laguerreSolver7.solve(0.0d, (double) 100L, 10.0d);
        double double20 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 52);
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
    }

    @Test
    public void test12203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12203");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        int int15 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        java.lang.Class<?> wildcardClass19 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test12204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12204");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double14 = laguerreSolver7.solve((double) (byte) 1, (double) 97);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
    }

    @Test
    public void test12205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12205");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        double double85 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (-1L));
        double double91 = laguerreSolver7.solve((double) ' ', (double) '#', 100.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double93 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0E-15d + "'", double85 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 32.0d + "'", double91 == 32.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0E-6d + "'", double93 == 1.0E-6d);
    }

    @Test
    public void test12206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12206");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str7 = functionEvaluationException6.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        convergenceException8.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Object[] objArray11 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException14);
        java.lang.Throwable[] throwableArray16 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "hi!", (java.lang.Throwable) functionEvaluationException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        functionEvaluationException22.addSuppressed((java.lang.Throwable) functionEvaluationException25);
        double double27 = functionEvaluationException22.getArgument();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException22);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) mathException28);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
    }

    @Test
    public void test12207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12207");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver9.getPolynomialFunction();
        double double14 = laguerreSolver9.getRelativeAccuracy();
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex77.add(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex73.subtract(complex84);
        org.apache.commons.math.complex.Complex[] complexArray86 = laguerreSolver9.solveAll(complexArray54, complex85);
        java.lang.Throwable throwable87 = null;
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) complexArray54, throwable87);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray54);
        java.lang.Throwable[] throwableArray90 = convergenceException89.getSuppressed();
        java.lang.Class<?> wildcardClass91 = throwableArray90.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test12208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12208");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        boolean boolean7 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = complex5.cos();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex9.cos();
        org.apache.commons.math.complex.Complex complex12 = complex9.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test12209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12209");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex12.log();
        org.apache.commons.math.complex.Complex complex16 = complex10.pow(complex12);
        org.apache.commons.math.complex.Complex complex17 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex17.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex24.multiply(complex29);
        org.apache.commons.math.complex.Complex complex34 = complex21.multiply(complex29);
        org.apache.commons.math.complex.Complex complex35 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex43.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex39.subtract(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex51.acos();
        org.apache.commons.math.complex.Complex complex53 = complex34.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex54.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.tan();
        org.apache.commons.math.complex.Complex complex60 = complex57.exp();
        org.apache.commons.math.complex.Complex complex61 = complex57.cos();
        org.apache.commons.math.complex.Complex complex62 = complex34.divide(complex57);
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = complex62.log();
        org.apache.commons.math.complex.Complex complex65 = complex6.pow(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex6.log();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.log();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        boolean boolean75 = complex73.isInfinite();
        org.apache.commons.math.complex.Complex complex76 = complex71.add(complex73);
        boolean boolean78 = complex73.equals((java.lang.Object) 10.0f);
        org.apache.commons.math.complex.Complex complex79 = complex73.cos();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex80.tan();
        org.apache.commons.math.complex.Complex complex84 = complex80.sinh();
        org.apache.commons.math.complex.Complex complex85 = complex79.subtract(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex6.subtract(complex79);
        org.apache.commons.math.complex.Complex complex87 = complex79.acos();
        org.apache.commons.math.complex.Complex complex88 = complex87.negate();
        org.apache.commons.math.complex.Complex complex89 = complex88.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test12210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12210");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math.complex.Complex complex21 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex19.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test12211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12211");
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException24);
        java.lang.Throwable[] throwableArray26 = functionEvaluationException25.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str42 = functionEvaluationException41.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException41);
        java.lang.Object[] objArray44 = functionEvaluationException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray44);
        java.lang.Throwable[] throwableArray46 = convergenceException45.getSuppressed();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray46);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException48 = new org.apache.commons.math.MaxIterationsExceededException(35, "org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException48);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) maxIterationsExceededException48);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test12212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12212");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        double double59 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex60 = complex58.log();
        boolean boolean61 = complex60.isInfinite();
        org.apache.commons.math.complex.Complex complex62 = complex60.acos();
        org.apache.commons.math.complex.Complex complex63 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex64 = complex62.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test12213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12213");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = laguerreSolver7.getPolynomialFunction();
        double double95 = laguerreSolver7.solve((double) 0L, (-1.0d), (double) 100.0f);
        laguerreSolver7.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        int int98 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction91);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
    }

    @Test
    public void test12214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12214");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetMaximalIterationCount();
        double[] doubleArray16 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        double double19 = polynomialFunction17.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction17.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        laguerreSolver21.setAbsoluteAccuracy((double) '#');
        laguerreSolver21.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = laguerreSolver21.getPolynomialFunction();
        double[] doubleArray28 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        double double31 = polynomialFunction29.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = polynomialFunction29.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver33 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        laguerreSolver33.setAbsoluteAccuracy((double) '#');
        laguerreSolver33.resetAbsoluteAccuracy();
        laguerreSolver33.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex40.log();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex40.multiply(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex45.sin();
        org.apache.commons.math.complex.Complex complex51 = complex45.tan();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex45, complex52 };
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex54.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = laguerreSolver33.solveAll(complexArray53, complex55);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex63.atan();
        org.apache.commons.math.complex.Complex complex66 = complex63.log();
        org.apache.commons.math.complex.Complex complex67 = complex61.pow(complex63);
        org.apache.commons.math.complex.Complex complex68 = laguerreSolver21.solve(complexArray53, complex61);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex69.subtract(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.cos();
        boolean boolean76 = complex74.isInfinite();
        org.apache.commons.math.complex.Complex complex77 = complex74.cos();
        org.apache.commons.math.complex.Complex complex78 = complex77.tan();
        org.apache.commons.math.complex.Complex complex79 = complex78.tanh();
        org.apache.commons.math.complex.Complex[] complexArray80 = laguerreSolver9.solveAll(complexArray53, complex79);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException81 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray80);
        int int82 = maxIterationsExceededException81.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException81);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test12215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12215");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex14.multiply(complex22);
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex28.exp();
        org.apache.commons.math.complex.Complex complex30 = complex28.sin();
        boolean boolean31 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = complex30.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test12216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12216");
        double[] doubleArray10 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        double double14 = polynomialFunction12.value((double) 1);
        double[] doubleArray15 = polynomialFunction12.getCoefficients();
        double double17 = polynomialFunction12.value((double) 10);
        double double19 = polynomialFunction12.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        double[] doubleArray25 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = polynomialFunction26.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver30 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction29);
        laguerreSolver30.setAbsoluteAccuracy((double) '#');
        laguerreSolver30.resetAbsoluteAccuracy();
        laguerreSolver30.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.log();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = complex37.multiply(complex42);
        org.apache.commons.math.complex.Complex complex47 = complex42.sin();
        org.apache.commons.math.complex.Complex complex48 = complex42.tan();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex42, complex49 };
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex51.log();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver30.solveAll(complexArray50, complex52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex59.add(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex59.sqrt1z();
        org.apache.commons.math.complex.Complex complex65 = complex59.cos();
        org.apache.commons.math.complex.Complex complex66 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex59.tanh();
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver20.solveAll(complexArray50, complex67);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.ConvergenceException convergenceException72 = new org.apache.commons.math.ConvergenceException("hi!", throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) 1, (java.lang.Throwable) convergenceException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray50, (java.lang.Throwable) mathException74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray81 = functionEvaluationException80.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException82 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) complexArray50, (java.lang.Throwable) maxIterationsExceededException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 8", (java.lang.Throwable) maxIterationsExceededException82);
        java.lang.Throwable[] throwableArray85 = maxIterationsExceededException82.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException86);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction29);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
    }

    @Test
    public void test12217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12217");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: ", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray6);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[35.0]");
    }

    @Test
    public void test12218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12218");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double35 = laguerreSolver7.getFunctionValueAccuracy();
        double double39 = laguerreSolver7.solve(0.0d, 1.557407724654902d, (-1.0d));
        double double43 = laguerreSolver7.solve(0.7853981633974483d, (double) 4, 1.1752011936438014d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.7853981633974483d + "'", double43 == 0.7853981633974483d);
    }

    @Test
    public void test12219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12219");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex14.multiply(complex22);
        org.apache.commons.math.complex.Complex complex28 = complex22.atan();
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.cos();
        org.apache.commons.math.complex.Complex complex31 = complex29.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test12220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12220");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = laguerreSolver7.getPolynomialFunction();
        double double92 = laguerreSolver7.getResult();
        double double96 = laguerreSolver7.solve((-0.73669189358273d), 32.0d, 0.9149994957367077d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-0.73669189358273d) + "'", double96 == (-0.73669189358273d));
    }

    @Test
    public void test12221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12221");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex6.tan();
        org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex15.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex10.multiply(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex24.asin();
        org.apache.commons.math.complex.Complex complex26 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex3.add(complex26);
        double double28 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex3.tan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean31 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex32.tan();
        boolean boolean36 = complex30.equals((java.lang.Object) complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex47.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex43.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.acos();
        org.apache.commons.math.complex.Complex complex57 = complex37.divide(complex55);
        org.apache.commons.math.complex.Complex complex58 = complex29.divide(complex57);
        boolean boolean59 = complex29.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test12222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12222");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex14.multiply(complex22);
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex27.asin();
        org.apache.commons.math.complex.Complex complex30 = complex27.cos();
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test12223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12223");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.asin();
        double double16 = complex15.getReal();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex15.pow(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.tan();
        org.apache.commons.math.complex.Complex complex31 = complex10.pow(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex10.exp();
        boolean boolean33 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean35 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex10.multiply(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex10.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test12224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12224");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        double double11 = complex5.abs();
        boolean boolean12 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        boolean boolean17 = complex14.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.tan();
        org.apache.commons.math.complex.Complex complex24 = complex21.atan();
        org.apache.commons.math.complex.Complex complex25 = complex21.cosh();
        double[] doubleArray28 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        double double31 = polynomialFunction29.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = polynomialFunction29.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver33 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        laguerreSolver33.setAbsoluteAccuracy((double) '#');
        laguerreSolver33.resetAbsoluteAccuracy();
        laguerreSolver33.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex40.log();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex40.multiply(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex45.sin();
        org.apache.commons.math.complex.Complex complex51 = complex45.tan();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex45, complex52 };
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex54.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = laguerreSolver33.solveAll(complexArray53, complex55);
        double double60 = laguerreSolver33.solve((double) (-1.0f), (double) 1L);
        boolean boolean61 = complex21.equals((java.lang.Object) double60);
        double[] doubleArray64 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction65 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray64);
        double double67 = polynomialFunction65.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction68 = polynomialFunction65.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver69 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction68);
        laguerreSolver69.setAbsoluteAccuracy((double) '#');
        laguerreSolver69.resetAbsoluteAccuracy();
        laguerreSolver69.resetRelativeAccuracy();
        laguerreSolver69.setRelativeAccuracy(0.0d);
        double double76 = laguerreSolver69.getFunctionValueAccuracy();
        boolean boolean77 = complex21.equals((java.lang.Object) double76);
        org.apache.commons.math.complex.Complex complex78 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex18.subtract(complex21);
        org.apache.commons.math.complex.Complex complex80 = complex5.add(complex79);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction68);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0E-15d + "'", double76 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test12225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12225");
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray17);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray26, throwable27);
        java.lang.Object[] objArray29 = convergenceException28.getArguments();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray17, (java.lang.Throwable) convergenceException28);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("hi!", objArray17, throwable32);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.atan();
        org.apache.commons.math.complex.Complex complex38 = complex35.log();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex40.log();
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex40);
        org.apache.commons.math.complex.Complex complex45 = complex40.sin();
        org.apache.commons.math.complex.Complex complex46 = complex40.tan();
        java.lang.Object[] objArray47 = new java.lang.Object[] { throwable32, complex46 };
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        java.lang.Object[] objArray59 = new java.lang.Object[] { convergenceException53, complex55, true };
        java.lang.Object[] objArray61 = new java.lang.Object[] {};
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray61, throwable62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("", objArray59, (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", objArray59);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException67);
        java.lang.String str69 = mathException68.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray47, (java.lang.Throwable) mathException68);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) convergenceException73);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray47, (java.lang.Throwable) convergenceException73);
        java.lang.Object[] objArray81 = new java.lang.Object[] {};
        java.lang.Throwable throwable82 = null;
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("", objArray81, throwable82);
        java.lang.Object[] objArray84 = convergenceException83.getArguments();
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray84);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException86 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray84);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "", objArray47, (java.lang.Throwable) convergenceException87);
        java.lang.Object[] objArray89 = functionEvaluationException88.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException88);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(objArray89);
    }

    @Test
    public void test12226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12226");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy(2.718281828459045d);
        int int15 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(1.0d);
        laguerreSolver7.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        double double20 = laguerreSolver7.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-15d + "'", double20 == 1.0E-15d);
    }

    @Test
    public void test12227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12227");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = complex6.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex6.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex6.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test12228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12228");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double90 = laguerreSolver7.getAbsoluteAccuracy();
        int int91 = laguerreSolver7.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction92 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setRelativeAccuracy(97.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0E-6d + "'", double90 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction92);
    }

    @Test
    public void test12229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12229");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray9, (java.lang.Throwable) maxIterationsExceededException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("hi!", objArray9);
        java.lang.Object[] objArray15 = convergenceException14.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", objArray15);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test12230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12230");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        double double37 = complex4.getReal();
        double double38 = complex4.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test12231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12231");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex8.tan();
        org.apache.commons.math.complex.Complex complex12 = complex11.asin();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex12.asin();
        org.apache.commons.math.complex.Complex complex15 = complex4.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex4.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test12232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12232");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex4.subtract(complex37);
        double double39 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex40 = complex4.sqrt();
        double double41 = complex4.abs();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex43.tan();
        org.apache.commons.math.complex.Complex complex47 = complex42.subtract(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.cos();
        boolean boolean49 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex50 = complex47.cos();
        org.apache.commons.math.complex.Complex complex51 = complex50.tan();
        org.apache.commons.math.complex.Complex complex52 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex53 = complex51.sin();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.atan();
        org.apache.commons.math.complex.Complex complex62 = complex59.log();
        org.apache.commons.math.complex.Complex complex63 = complex57.pow(complex59);
        org.apache.commons.math.complex.Complex complex64 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex64.add(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex69.negate();
        org.apache.commons.math.complex.Complex complex72 = complex69.atan();
        org.apache.commons.math.complex.Complex complex73 = complex69.tan();
        org.apache.commons.math.complex.Complex complex74 = complex69.sqrt1z();
        org.apache.commons.math.complex.Complex complex75 = complex51.divide(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex4.subtract(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex4.asin();
        org.apache.commons.math.complex.Complex complex78 = complex4.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test12233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12233");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sin();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = complex3.tanh();
        boolean boolean5 = complex3.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test12234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12234");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        double double23 = laguerreSolver7.solve((double) 97, 0.0d, (double) (short) 100);
        laguerreSolver7.setAbsoluteAccuracy((double) 0.0f);
        laguerreSolver7.setMaximalIterationCount((int) (byte) -1);
        double double28 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 97.0d + "'", double23 == 97.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0E-14d + "'", double28 == 1.0E-14d);
    }

    @Test
    public void test12235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12235");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex3.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        double double19 = complex18.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.0d) + "'", double19 == (-0.0d));
    }

    @Test
    public void test12236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12236");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException2);
        java.lang.String str4 = functionEvaluationException2.getPattern();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test12237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12237");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        laguerreSolver19.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex31.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex31, complex38 };
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver19.solveAll(complexArray39, complex41);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = complex47.pow(complex49);
        org.apache.commons.math.complex.Complex complex54 = laguerreSolver7.solve(complexArray39, complex47);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy((double) 97);
        laguerreSolver7.setRelativeAccuracy((double) 97);
        double double63 = laguerreSolver7.getRelativeAccuracy();
        double double66 = laguerreSolver7.solve(20.0d, (-1.0232274785475506d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 97.0d + "'", double63 == 97.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 20.0d + "'", double66 == 20.0d);
    }

    @Test
    public void test12238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12238");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double88 = laguerreSolver7.getAbsoluteAccuracy();
        int int89 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 0.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double97 = laguerreSolver7.solve(2.718281828459045d, 10.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double99 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-6d + "'", double88 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2.718281828459045d + "'", double97 == 2.718281828459045d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.0E-14d + "'", double99 == 1.0E-14d);
    }

    @Test
    public void test12239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12239");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        double double14 = univariateRealFunction12.value((-3.141592653589793d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test12240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12240");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction11.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction12.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction13);
        double double16 = univariateRealFunction13.value(1.5706900455763888d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test12241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12241");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) (short) -1);
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(3.141592653589793d);
        laguerreSolver7.resetMaximalIterationCount();
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
    }

    @Test
    public void test12242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12242");
        double[] doubleArray1 = new double[] { 0.0d };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction2 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray1);
        double double5 = polynomialFunction3.value(2.718281828459045d);
        int int6 = polynomialFunction3.degree();
        double double8 = polynomialFunction3.value(3.9518054509189455d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test12243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12243");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double52 = laguerreSolver7.solve((double) 10.0f, 32.0d);
        double double53 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(1.557407724654902d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
    }

    @Test
    public void test12244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12244");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException5);
    }

    @Test
    public void test12245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12245");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        laguerreSolver13.resetAbsoluteAccuracy();
        double double17 = laguerreSolver13.solve((double) 0L, (double) 52);
        double double18 = laguerreSolver13.getFunctionValueAccuracy();
        laguerreSolver13.setAbsoluteAccuracy(2.4785912770698393d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
    }

    @Test
    public void test12246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12246");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100);
        double double4 = functionEvaluationException3.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException5);
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        laguerreSolver17.resetAbsoluteAccuracy();
        laguerreSolver17.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.log();
        org.apache.commons.math.complex.Complex complex33 = complex24.multiply(complex29);
        org.apache.commons.math.complex.Complex complex34 = complex29.sin();
        org.apache.commons.math.complex.Complex complex35 = complex29.tan();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex29, complex36 };
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray41 = laguerreSolver17.solveAll(complexArray37, complex39);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray48, throwable49);
        java.lang.Object[] objArray51 = convergenceException50.getArguments();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException53 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray51);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray51);
        java.lang.Throwable[] throwableArray55 = convergenceException54.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex65.atan();
        java.lang.Object[] objArray69 = new java.lang.Object[] { convergenceException63, complex65, true };
        java.lang.Object[] objArray71 = new java.lang.Object[] {};
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray71, throwable72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray69, (java.lang.Throwable) convergenceException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("", objArray69);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException76 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray69);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray78, throwable79);
        java.lang.Object[] objArray81 = convergenceException80.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray69, (java.lang.Throwable) convergenceException80);
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("hi!", objArray69, throwable84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray55, (java.lang.Throwable) convergenceException85);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray41, (java.lang.Throwable) convergenceException85);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException88 = new org.apache.commons.math.MaxIterationsExceededException(10, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", (java.lang.Object[]) complexArray41);
        functionEvaluationException5.addSuppressed((java.lang.Throwable) maxIterationsExceededException88);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test12247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12247");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (0) exceeded");
    }

    @Test
    public void test12248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12248");
        double[] doubleArray6 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver11.setAbsoluteAccuracy((double) '#');
        laguerreSolver11.resetMaximalIterationCount();
        laguerreSolver11.resetMaximalIterationCount();
        double[] doubleArray18 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        double double21 = polynomialFunction19.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = polynomialFunction19.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        laguerreSolver23.setAbsoluteAccuracy((double) '#');
        laguerreSolver23.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = laguerreSolver23.getPolynomialFunction();
        double[] doubleArray30 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = polynomialFunction31.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction34);
        laguerreSolver35.setAbsoluteAccuracy((double) '#');
        laguerreSolver35.resetAbsoluteAccuracy();
        laguerreSolver35.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = complex47.log();
        org.apache.commons.math.complex.Complex complex51 = complex42.multiply(complex47);
        org.apache.commons.math.complex.Complex complex52 = complex47.sin();
        org.apache.commons.math.complex.Complex complex53 = complex47.tan();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex47, complex54 };
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver35.solveAll(complexArray55, complex57);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex65.atan();
        org.apache.commons.math.complex.Complex complex68 = complex65.log();
        org.apache.commons.math.complex.Complex complex69 = complex63.pow(complex65);
        org.apache.commons.math.complex.Complex complex70 = laguerreSolver23.solve(complexArray55, complex63);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex72.tan();
        org.apache.commons.math.complex.Complex complex76 = complex71.subtract(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex76.cos();
        boolean boolean78 = complex76.isInfinite();
        org.apache.commons.math.complex.Complex complex79 = complex76.cos();
        org.apache.commons.math.complex.Complex complex80 = complex79.tan();
        org.apache.commons.math.complex.Complex complex81 = complex80.tanh();
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver11.solveAll(complexArray55, complex81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, "", (java.lang.Throwable) convergenceException83);
        java.lang.Throwable[] throwableArray85 = functionEvaluationException84.getSuppressed();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray85);
        java.lang.Object[] objArray87 = mathException86.getArguments();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
    }

    @Test
    public void test12249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12249");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) (byte) -1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction4.derivative();
        double[] doubleArray10 = polynomialFunction4.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
    }

    @Test
    public void test12250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12250");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.getResult();
        double double39 = laguerreSolver7.solve(100.0d, 35.0d, (double) (byte) 1);
        laguerreSolver7.setMaximalIterationCount(100);
        int int42 = laguerreSolver7.getIterationCount();
        int int43 = laguerreSolver7.getMaximalIterationCount();
        double double44 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
    }

    @Test
    public void test12251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12251");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        double double10 = complex7.abs();
        org.apache.commons.math.complex.Complex complex11 = complex7.negate();
        org.apache.commons.math.complex.Complex complex12 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex24.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex31.asin();
        org.apache.commons.math.complex.Complex complex34 = complex12.multiply(complex31);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex31.pow(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.tan();
        org.apache.commons.math.complex.Complex complex40 = complex37.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test12252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12252");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex4.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex42.pow(complex44);
        double[] doubleArray51 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray51);
        double double54 = polynomialFunction52.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = polynomialFunction52.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver56 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction55);
        laguerreSolver56.setAbsoluteAccuracy((double) '#');
        laguerreSolver56.resetAbsoluteAccuracy();
        laguerreSolver56.resetRelativeAccuracy();
        boolean boolean61 = complex44.equals((java.lang.Object) laguerreSolver56);
        double double62 = laguerreSolver56.getFunctionValueAccuracy();
        laguerreSolver56.setFunctionValueAccuracy((double) 1);
        boolean boolean65 = complex37.equals((java.lang.Object) laguerreSolver56);
        laguerreSolver56.resetRelativeAccuracy();
        laguerreSolver56.resetFunctionValueAccuracy();
        laguerreSolver56.resetAbsoluteAccuracy();
        int int69 = laguerreSolver56.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0E-15d + "'", double62 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
    }

    @Test
    public void test12253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12253");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.tan();
        boolean boolean25 = complex19.equals((java.lang.Object) complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex27);
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        double double39 = laguerreSolver36.getRelativeAccuracy();
        laguerreSolver36.setMaximalIterationCount((int) (byte) 100);
        double double42 = laguerreSolver36.getAbsoluteAccuracy();
        boolean boolean43 = complex28.equals((java.lang.Object) laguerreSolver36);
        laguerreSolver36.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-14d + "'", double39 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test12254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12254");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        double[] doubleArray19 = new double[] { (byte) -1, (-0.0d), (byte) 0, 1.0E-15d, (byte) 10 };
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver7.solveAll(doubleArray19, 100.0d);
        double double22 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(97.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) (short) 0);
        laguerreSolver7.resetMaximalIterationCount();
        int int28 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double30 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(32.01560596553195d);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -0.0, 0.0, 1.0E-15, 10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0E-14d + "'", double30 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
    }

    @Test
    public void test12255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12255");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        double double18 = laguerreSolver7.getFunctionValueAccuracy();
        double double22 = laguerreSolver7.solve((double) 0.0f, (double) (byte) 10, 10.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double25 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test12256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12256");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException5);
        double double7 = functionEvaluationException6.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 10, (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException8);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray10);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test12257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12257");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver7.setRelativeAccuracy((double) (-1.0f));
        laguerreSolver7.resetFunctionValueAccuracy();
        int int41 = laguerreSolver7.getMaximalIterationCount();
        int int42 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(4.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test12258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12258");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray7, throwable8);
        java.lang.Object[] objArray10 = convergenceException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "hi!", (java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray10, (java.lang.Throwable) functionEvaluationException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) mathException24);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test12259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12259");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.setMaximalIterationCount((int) ' ');
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        double double20 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test12260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12260");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        double double76 = laguerreSolver7.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction77 = laguerreSolver7.getPolynomialFunction();
        int int78 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(0.0d);
        double double83 = laguerreSolver7.solve(20.0d, 7.0001840869445076d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0E-6d + "'", double76 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 20.0d + "'", double83 == 20.0d);
    }

    @Test
    public void test12261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12261");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        double[] doubleArray13 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        laguerreSolver18.setAbsoluteAccuracy((double) '#');
        laguerreSolver18.resetAbsoluteAccuracy();
        laguerreSolver18.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex25.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        org.apache.commons.math.complex.Complex complex33 = complex30.log();
        org.apache.commons.math.complex.Complex complex34 = complex25.multiply(complex30);
        org.apache.commons.math.complex.Complex complex35 = complex30.sin();
        org.apache.commons.math.complex.Complex complex36 = complex30.tan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex30, complex37 };
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver18.solveAll(complexArray38, complex40);
        laguerreSolver18.resetRelativeAccuracy();
        double double44 = laguerreSolver18.getAbsoluteAccuracy();
        laguerreSolver18.resetFunctionValueAccuracy();
        boolean boolean46 = complex10.equals((java.lang.Object) laguerreSolver18);
        int int47 = laguerreSolver18.getMaximalIterationCount();
        double double48 = laguerreSolver18.getRelativeAccuracy();
        int int49 = laguerreSolver18.getIterationCount();
        laguerreSolver18.setFunctionValueAccuracy((double) 0.0f);
        laguerreSolver18.setRelativeAccuracy((double) 1.0f);
        laguerreSolver18.setAbsoluteAccuracy(76.53545042904899d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0E-14d + "'", double48 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test12262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12262");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex11.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex11.exp();
        double double33 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex34 = complex11.conjugate();
        double double35 = complex34.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }

    @Test
    public void test12263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12263");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex24.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = complex31.multiply(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex28.multiply(complex36);
        org.apache.commons.math.complex.Complex complex42 = complex36.atan();
        org.apache.commons.math.complex.Complex complex43 = complex11.pow(complex36);
        org.apache.commons.math.complex.Complex complex44 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex45 = complex36.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test12264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12264");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException8 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, (java.lang.Throwable) maxIterationsExceededException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), (java.lang.Throwable) convergenceException10);
        java.lang.Object[] objArray12 = functionEvaluationException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: ", objArray12);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        java.lang.Object[] objArray25 = convergenceException24.getArguments();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", objArray25);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        java.lang.Object[] objArray40 = new java.lang.Object[] { convergenceException34, complex36, true };
        java.lang.Object[] objArray42 = new java.lang.Object[] {};
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray42, throwable43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray40, (java.lang.Throwable) convergenceException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", objArray40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException47 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException48);
        java.lang.String str50 = mathException49.getPattern();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: hi!", objArray25, (java.lang.Throwable) mathException49);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) mathException51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 10, (java.lang.Throwable) mathException51);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray12, (java.lang.Throwable) functionEvaluationException53);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray63, throwable64);
        java.lang.Object[] objArray66 = convergenceException65.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("", objArray66);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException69 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray66, (java.lang.Throwable) maxIterationsExceededException69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!");
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray66, (java.lang.Throwable) mathException72);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException74 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "", objArray66);
        java.lang.Object[] objArray75 = maxIterationsExceededException74.getArguments();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) maxIterationsExceededException74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray12, (java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray12);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }

    @Test
    public void test12265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12265");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray24 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        double double27 = polynomialFunction25.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = polynomialFunction25.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        laguerreSolver29.setAbsoluteAccuracy((double) '#');
        laguerreSolver29.resetAbsoluteAccuracy();
        laguerreSolver29.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.atan();
        org.apache.commons.math.complex.Complex complex39 = complex36.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex36.multiply(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex41.tan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex41, complex48 };
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver29.solveAll(complexArray49, complex51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex56.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = laguerreSolver7.solve(complexArray49, complex61);
        int int63 = laguerreSolver7.getIterationCount();
        double double64 = laguerreSolver7.getResult();
        int int65 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
    }

    @Test
    public void test12266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12266");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double39 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double41 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-6d + "'", double39 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
    }

    @Test
    public void test12267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12267");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        int int19 = laguerreSolver7.getMaximalIterationCount();
        double double23 = laguerreSolver7.solve((double) 1L, 0.0d, (double) (byte) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int25 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test12268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12268");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        int int7 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) (byte) -1);
        laguerreSolver10.setRelativeAccuracy(35.0d);
        double double15 = laguerreSolver10.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test12269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12269");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded");
    }

    @Test
    public void test12270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12270");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        int int12 = laguerreSolver7.getMaximalIterationCount();
        double double16 = laguerreSolver7.solve((double) (byte) 0, (double) 10.0f, 4.0d);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double23 = polynomialFunction21.value((double) 1);
        double double25 = polynomialFunction21.value((-1.0d));
        double double27 = polynomialFunction21.value((double) 1L);
        double[] doubleArray28 = polynomialFunction21.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray30 = laguerreSolver7.solveAll(doubleArray28, 100.07996802557444d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0]");
    }

    @Test
    public void test12271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12271");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double39 = laguerreSolver7.solve((double) '#', (double) (byte) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction42 = polynomialFunction40.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = polynomialFunction40.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction40.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(univariateRealFunction42);
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertNotNull(polynomialFunction44);
    }

    @Test
    public void test12272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12272");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double18 = laguerreSolver7.solve(636.4927919582647d, 15742.0d, 7.0001840869445076d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 636.4927919582647d + "'", double18 == 636.4927919582647d);
    }

    @Test
    public void test12273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12273");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(97.0d, "");
        java.lang.Class<?> wildcardClass3 = functionEvaluationException2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test12274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12274");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex1.cos();
        org.apache.commons.math.complex.Complex complex6 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex16.add(complex18);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex22.tan();
        org.apache.commons.math.complex.Complex complex26 = complex16.pow(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math.complex.Complex complex28 = complex26.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = complex11.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex1.multiply(complex11);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        boolean boolean36 = complex32.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex37 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex32.asin();
        double double39 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = complex30.divide(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-0.0d) + "'", double39 == (-0.0d));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test12275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12275");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.tan();
        boolean boolean25 = complex19.equals((java.lang.Object) complex24);
        boolean boolean26 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex32.cos();
        org.apache.commons.math.complex.Complex complex38 = complex32.atan();
        org.apache.commons.math.complex.Complex complex39 = complex32.tan();
        org.apache.commons.math.complex.Complex complex40 = complex24.add(complex32);
        org.apache.commons.math.complex.Complex complex41 = complex32.sin();
        double double42 = complex32.getReal();
        org.apache.commons.math.complex.Complex complex43 = complex18.add(complex32);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.atan();
        org.apache.commons.math.complex.Complex complex49 = complex48.atan();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex52 = complex45.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex18.add(complex45);
        boolean boolean54 = complex45.isNaN();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        org.apache.commons.math.complex.Complex complex64 = complex61.log();
        org.apache.commons.math.complex.Complex complex65 = complex56.multiply(complex61);
        org.apache.commons.math.complex.Complex complex66 = complex61.sin();
        boolean boolean67 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex66.tan();
        org.apache.commons.math.complex.Complex complex69 = complex66.cos();
        org.apache.commons.math.complex.Complex complex70 = complex66.sinh();
        org.apache.commons.math.complex.Complex complex71 = complex45.divide(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex45.atan();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex73.atan();
        org.apache.commons.math.complex.Complex complex75 = complex74.atan();
        org.apache.commons.math.complex.Complex complex76 = complex75.sin();
        org.apache.commons.math.complex.Complex complex77 = complex75.cos();
        org.apache.commons.math.complex.Complex complex78 = complex77.cos();
        org.apache.commons.math.complex.Complex complex79 = complex72.divide(complex77);
        org.apache.commons.math.complex.Complex complex80 = complex79.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test12276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12276");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount(0);
        laguerreSolver7.setFunctionValueAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.setFunctionValueAccuracy((double) 97);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction93 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction94 = polynomialFunction93.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction95 = polynomialFunction93.polynomialDerivative();
        double double97 = polynomialFunction93.value((double) 52);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction93);
        org.junit.Assert.assertNotNull(univariateRealFunction94);
        org.junit.Assert.assertNotNull(polynomialFunction95);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test12277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12277");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double15 = laguerreSolver7.solve(0.0d, (double) (short) 10, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        int int17 = polynomialFunction16.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test12278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12278");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.1189396031849523d, 3.615526674047281E41d);
    }

    @Test
    public void test12279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12279");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction6.derivative();
        int int10 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int12 = laguerreSolver11.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test12280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12280");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction87 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) '#');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction87);
    }

    @Test
    public void test12281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12281");
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = complex8.exp();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.tan();
        org.apache.commons.math.complex.Complex complex18 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        java.lang.Object[] objArray22 = new java.lang.Object[] { complex11, (short) 10, mathException13, complex18, complex20 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 10, "", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "org.apache.commons.math.FunctionEvaluationException: hi!", objArray22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", objArray22, throwable25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray22);
    }

    @Test
    public void test12282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12282");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        org.apache.commons.math.complex.Complex complex18 = complex13.subtract(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex18.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math.complex.Complex complex31 = complex26.subtract(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.cos();
        boolean boolean33 = complex31.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = complex34.tan();
        org.apache.commons.math.complex.Complex complex36 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex35.atan();
        org.apache.commons.math.complex.Complex complex39 = complex35.log();
        org.apache.commons.math.complex.Complex complex40 = complex24.add(complex35);
        org.apache.commons.math.complex.Complex complex41 = complex24.exp();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex51.log();
        org.apache.commons.math.complex.Complex complex55 = complex46.multiply(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex51.sin();
        org.apache.commons.math.complex.Complex complex57 = complex51.tan();
        org.apache.commons.math.complex.Complex complex58 = complex44.divide(complex57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex59.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        boolean boolean67 = complex65.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex63.add(complex65);
        org.apache.commons.math.complex.Complex complex69 = complex58.divide(complex63);
        org.apache.commons.math.complex.Complex complex70 = complex58.sin();
        org.apache.commons.math.complex.Complex complex71 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex72.asin();
        org.apache.commons.math.complex.Complex complex74 = complex24.divide(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex10.add(complex72);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test12283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12283");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) mathException3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Throwable) mathException4);
    }

    @Test
    public void test12284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12284");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray9 = functionEvaluationException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) maxIterationsExceededException15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray9, (java.lang.Throwable) functionEvaluationException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException17);
        java.lang.Class<?> wildcardClass20 = functionEvaluationException17.getClass();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test12285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12285");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        laguerreSolver36.resetAbsoluteAccuracy();
        laguerreSolver36.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex48);
        org.apache.commons.math.complex.Complex complex53 = complex48.sin();
        org.apache.commons.math.complex.Complex complex54 = complex48.tan();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex48, complex55 };
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver36.solveAll(complexArray56, complex58);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex65.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex66.log();
        org.apache.commons.math.complex.Complex complex70 = complex64.pow(complex66);
        org.apache.commons.math.complex.Complex complex71 = laguerreSolver24.solve(complexArray56, complex64);
        org.apache.commons.math.complex.Complex complex72 = complex64.cos();
        org.apache.commons.math.complex.Complex complex73 = complex16.divide(complex64);
        org.apache.commons.math.complex.Complex complex74 = complex16.negate();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.log();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt1z();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex82 = complex76.subtract(complex80);
        org.apache.commons.math.complex.Complex complex83 = complex74.multiply(complex80);
        org.apache.commons.math.complex.Complex complex84 = complex83.cos();
        org.apache.commons.math.complex.Complex complex85 = complex83.acos();
        double double86 = complex83.getImaginary();
        org.apache.commons.math.complex.Complex complex87 = complex83.tan();
        org.apache.commons.math.complex.Complex complex88 = complex87.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
    }

    @Test
    public void test12286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12286");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        int int14 = laguerreSolver7.getMaximalIterationCount();
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 8);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
    }

    @Test
    public void test12287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12287");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test12288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12288");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.tan();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex1.atan();
        boolean boolean6 = complex1.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex10.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex19.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math.complex.Complex complex31 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex41.log();
        org.apache.commons.math.complex.Complex complex43 = complex35.subtract(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex31.add(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex25.add(complex31);
        org.apache.commons.math.complex.Complex complex46 = complex14.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        double double48 = complex46.abs();
        double double49 = complex46.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex(2.718281828459045d, (double) (byte) 10);
        boolean boolean54 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex55 = complex50.add(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex50.exp();
        double double57 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = complex9.multiply(complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex71.atan();
        org.apache.commons.math.complex.Complex complex74 = complex69.add(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex69.log();
        org.apache.commons.math.complex.Complex complex76 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex69.cos();
        org.apache.commons.math.complex.Complex complex78 = complex77.cos();
        org.apache.commons.math.complex.Complex complex79 = complex58.add(complex77);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test12289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12289");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = laguerreSolver7.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
    }

    @Test
    public void test12290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12290");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex21 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.atan();
        org.apache.commons.math.complex.Complex complex36 = complex33.log();
        org.apache.commons.math.complex.Complex complex37 = complex28.multiply(complex33);
        org.apache.commons.math.complex.Complex complex38 = complex25.multiply(complex33);
        org.apache.commons.math.complex.Complex complex39 = complex38.negate();
        org.apache.commons.math.complex.Complex complex40 = complex10.subtract(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex10.acos();
        org.apache.commons.math.complex.Complex complex42 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = complex10.exp();
        org.apache.commons.math.complex.Complex complex44 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex45 = complex44.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test12291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12291");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(363.89859381747976d, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test12292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12292");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        double double37 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(97.0d);
        double[] doubleArray42 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        double double46 = polynomialFunction44.value((double) 1);
        double[] doubleArray47 = polynomialFunction44.getCoefficients();
        double double49 = polynomialFunction44.value((double) 10);
        double double51 = polynomialFunction44.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver52 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        double[] doubleArray53 = polynomialFunction44.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray55 = laguerreSolver7.solveAll(doubleArray53, 2.59499345614249d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 0.0]");
    }

    @Test
    public void test12293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12293");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(2.4785912770698393d);
    }

    @Test
    public void test12294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12294");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 1L);
        java.lang.Object[] objArray7 = functionEvaluationException6.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray18);
        int int26 = maxIterationsExceededException25.getMaxIterations();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str31 = functionEvaluationException30.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException30);
        java.lang.String str33 = functionEvaluationException30.getPattern();
        mathException27.addSuppressed((java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = {0}", objArray7, (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 8", objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1.0]");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test12295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12295");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex16.negate();
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = complex25.exp();
        org.apache.commons.math.complex.Complex complex29 = complex25.cos();
        boolean boolean30 = complex25.isInfinite();
        boolean boolean31 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex35.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.conjugate();
        boolean boolean42 = complex25.equals((java.lang.Object) complex41);
        org.apache.commons.math.complex.Complex complex43 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex21.multiply(complex43);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test12296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12296");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        laguerreSolver7.setAbsoluteAccuracy(1.557407724654902d);
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
    }

    @Test
    public void test12297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12297");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = laguerreSolver12.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test12298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12298");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = polynomialFunction20.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        laguerreSolver24.setAbsoluteAccuracy((double) '#');
        laguerreSolver24.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        laguerreSolver36.resetAbsoluteAccuracy();
        laguerreSolver36.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex48);
        org.apache.commons.math.complex.Complex complex53 = complex48.sin();
        org.apache.commons.math.complex.Complex complex54 = complex48.tan();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex48, complex55 };
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver36.solveAll(complexArray56, complex58);
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex65.multiply(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex66.atan();
        org.apache.commons.math.complex.Complex complex69 = complex66.log();
        org.apache.commons.math.complex.Complex complex70 = complex64.pow(complex66);
        org.apache.commons.math.complex.Complex complex71 = laguerreSolver24.solve(complexArray56, complex64);
        org.apache.commons.math.complex.Complex complex72 = complex64.cos();
        org.apache.commons.math.complex.Complex complex73 = complex16.divide(complex64);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex75.atan();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex78.log();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex75.subtract(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex16.subtract(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.tan();
        org.apache.commons.math.complex.Complex complex86 = complex85.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test12299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12299");
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex16.add(complex18);
        java.lang.Object[] objArray24 = new java.lang.Object[] { complex4, complex11, complex16, (byte) 10, 1.0f };
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("hi!", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: ", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: ", objArray24, (java.lang.Throwable) functionEvaluationException37);
        java.lang.Object[] objArray39 = functionEvaluationException37.getArguments();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
    }

    @Test
    public void test12300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12300");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int39 = laguerreSolver7.getIterationCount();
        int int40 = laguerreSolver7.getIterationCount();
        double double41 = laguerreSolver7.getRelativeAccuracy();
        double double42 = laguerreSolver7.getRelativeAccuracy();
        double double43 = laguerreSolver7.getFunctionValueAccuracy();
        double double47 = laguerreSolver7.solve(35.0297750331978d, (double) (byte) -1, 0.7853981633974483d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0297750331978d + "'", double47 == 35.0297750331978d);
    }

    @Test
    public void test12301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12301");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.tan();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        double double5 = complex1.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test12302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12302");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray7 = functionEvaluationException6.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        java.lang.Object[] objArray18 = new java.lang.Object[] { convergenceException12, complex14, true };
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray20, throwable21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray18);
        int int26 = maxIterationsExceededException25.getMaxIterations();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray7, (java.lang.Throwable) mathException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) mathException28);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) mathException28);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test12303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12303");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        boolean boolean10 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        double double12 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex17.acos();
        org.apache.commons.math.complex.Complex complex25 = complex13.divide(complex17);
        org.apache.commons.math.complex.Complex complex26 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.0d) + "'", double12 == (-0.0d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test12304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12304");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.tan();
        double double20 = complex18.getReal();
        org.apache.commons.math.complex.Complex complex21 = complex18.atan();
        org.apache.commons.math.complex.Complex complex22 = null;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test12305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12305");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        laguerreSolver13.setMaximalIterationCount((int) (short) -1);
        int int16 = laguerreSolver13.getMaximalIterationCount();
        double double17 = laguerreSolver13.getRelativeAccuracy();
        double double18 = laguerreSolver13.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver13.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-15d + "'", double18 == 1.0E-15d);
    }

    @Test
    public void test12306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12306");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount(4);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.6657737500283538d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test12307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12307");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 'a', (double) 10L);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        boolean boolean8 = complex4.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex9 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex4.asin();
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        boolean boolean14 = complex2.equals((java.lang.Object) complex12);
        org.apache.commons.math.complex.Complex complex15 = complex2.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test12308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12308");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex7.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex1.multiply(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex21.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z();
        org.apache.commons.math.complex.Complex complex28 = complex16.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex16.cos();
        double double30 = complex29.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test12309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12309");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean13 = complex12.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        boolean boolean18 = complex12.equals((java.lang.Object) complex17);
        org.apache.commons.math.complex.Complex complex19 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex20 = complex10.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test12310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12310");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str8 = functionEvaluationException7.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException();
        convergenceException9.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray12 = mathException10.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException(10, "hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        java.lang.Object[] objArray25 = new java.lang.Object[] { convergenceException19, complex21, true };
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray27, throwable28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray25);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = mathException34.getPattern();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", objArray12, (java.lang.Throwable) mathException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException37);
        java.lang.Object[] objArray39 = convergenceException38.getArguments();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
    }

    @Test
    public void test12311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12311");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.apache.commons.math.complex.Complex complex19 = complex16.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test12312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12312");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double11 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
    }

    @Test
    public void test12313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12313");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double13 = laguerreSolver7.solve((double) (-1), 0.7853981633974483d);
        double[] doubleArray17 = new double[] { 97.0d, 'a', 10 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver7.solveAll(doubleArray17, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction23 = polynomialFunction21.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 97.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(univariateRealFunction23);
    }

    @Test
    public void test12314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12314");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(Double.NaN);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 10);
        double double44 = laguerreSolver7.solve((double) (byte) -1, (-1.0d), (double) (-1L));
        laguerreSolver7.setRelativeAccuracy(7.0001840869445076d);
        double double47 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.0001840869445076d + "'", double47 == 7.0001840869445076d);
    }

    @Test
    public void test12315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12315");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean5 = complex1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex1.asin();
        org.apache.commons.math.complex.Complex complex8 = complex1.tan();
        double double9 = complex1.getImaginary();
        double[] doubleArray12 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction13.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        laguerreSolver17.setAbsoluteAccuracy((double) '#');
        double double20 = laguerreSolver17.getRelativeAccuracy();
        int int21 = laguerreSolver17.getMaximalIterationCount();
        laguerreSolver17.setMaximalIterationCount(1);
        double double24 = laguerreSolver17.getFunctionValueAccuracy();
        int int25 = laguerreSolver17.getMaximalIterationCount();
        laguerreSolver17.resetMaximalIterationCount();
        int int27 = laguerreSolver17.getMaximalIterationCount();
        laguerreSolver17.setMaximalIterationCount((int) (byte) 100);
        laguerreSolver17.setRelativeAccuracy(0.0d);
        boolean boolean32 = complex1.equals((java.lang.Object) laguerreSolver17);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-14d + "'", double20 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-15d + "'", double24 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test12316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12316");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(3.615526674047281E41d, "org.apache.commons.math.MathException: Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test12317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12317");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex3.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex3.cos();
        double double9 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex3.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test12318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12318");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        double double17 = laguerreSolver7.solve(1.0E-14d, (double) (byte) -1, 100.0d);
        double double21 = laguerreSolver7.solve((double) 1, 1.0E-6d, (double) (-1.0f));
        double double25 = laguerreSolver7.solve(35.0d, 1.0d, (double) 10L);
        laguerreSolver7.resetRelativeAccuracy();
        double double27 = laguerreSolver7.getFunctionValueAccuracy();
        double double28 = laguerreSolver7.getRelativeAccuracy();
        double double29 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-15d + "'", double27 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0E-14d + "'", double28 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0E-6d + "'", double29 == 1.0E-6d);
    }

    @Test
    public void test12319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12319");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double39 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        int int41 = laguerreSolver7.getMaximalIterationCount();
        double double42 = laguerreSolver7.getRelativeAccuracy();
        java.lang.Class<?> wildcardClass43 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test12320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12320");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double43 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0E-6d + "'", double43 == 1.0E-6d);
    }

    @Test
    public void test12321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12321");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) convergenceException2);
        double double4 = functionEvaluationException3.getArgument();
        java.lang.String str5 = functionEvaluationException3.getPattern();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test12322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12322");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        int int9 = polynomialFunction6.degree();
        double double11 = polynomialFunction6.value((double) 2);
        double double13 = polynomialFunction6.value(3.141592653589793d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction6.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
    }

    @Test
    public void test12323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12323");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException7.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException(1, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) maxIterationsExceededException10);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test12324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12324");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        double double36 = laguerreSolver7.solve((double) (short) 100, (double) (-1));
        double double37 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(115.29998991473416d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
    }

    @Test
    public void test12325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12325");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = laguerreSolver7.getPolynomialFunction();
        double double92 = laguerreSolver7.getResult();
        int int93 = laguerreSolver7.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction94 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction95 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetMaximalIterationCount();
        double double97 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(polynomialFunction94);
        org.junit.Assert.assertNotNull(polynomialFunction95);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test12326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12326");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int40 = laguerreSolver7.getMaximalIterationCount();
        double[] doubleArray43 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction44.polynomialDerivative();
        double double49 = polynomialFunction44.value((double) (byte) 100);
        double[] doubleArray50 = polynomialFunction44.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver7.solveAll(doubleArray50, (double) ' ');
        int int53 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test12327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12327");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.getResult();
        double double39 = laguerreSolver7.solve(100.0d, 35.0d, (double) (byte) 1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.4430227241169225d);
        int int43 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test12328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12328");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray3, throwable4);
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        java.lang.Object[] objArray13 = new java.lang.Object[] { convergenceException7, complex9, true };
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray15, throwable16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        convergenceException5.addSuppressed((java.lang.Throwable) convergenceException18);
        java.lang.Throwable[] throwableArray20 = convergenceException18.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), (java.lang.Throwable) functionEvaluationException29);
        maxIterationsExceededException21.addSuppressed((java.lang.Throwable) functionEvaluationException31);
        int int33 = maxIterationsExceededException21.getMaxIterations();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test12329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12329");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        boolean boolean3 = complex1.isInfinite();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test12330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12330");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double37 = laguerreSolver7.getResult();
        double double41 = laguerreSolver7.solve(Double.NEGATIVE_INFINITY, (double) 100L, 0.38535742648327137d);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 0);
        double double46 = laguerreSolver7.solve(1.0E-14d, 0.5403023058681398d);
        laguerreSolver7.setMaximalIterationCount(100);
        int int49 = laguerreSolver7.getMaximalIterationCount();
        double double50 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + Double.NEGATIVE_INFINITY + "'", double41 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-14d + "'", double46 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0E-6d + "'", double50 == 1.0E-6d);
    }

    @Test
    public void test12331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12331");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) ' ', (double) '4');
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        double double20 = laguerreSolver7.solve(1.557407724654902d, 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.557407724654902d + "'", double20 == 1.557407724654902d);
    }

    @Test
    public void test12332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12332");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        boolean boolean11 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex12.tan();
        boolean boolean14 = complex2.equals((java.lang.Object) complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.log();
        boolean boolean16 = complex15.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test12333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12333");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.cosh();
        double double20 = complex17.abs();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex24.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.sinh();
        double double31 = complex28.abs();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex28.add(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex36.sqrt1z();
        boolean boolean39 = complex38.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex44.pow(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex52.log();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex51.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex38.add(complex56);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex63.atan();
        org.apache.commons.math.complex.Complex complex66 = complex63.log();
        org.apache.commons.math.complex.Complex complex67 = complex61.pow(complex63);
        org.apache.commons.math.complex.Complex complex68 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex69.log();
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = complex70.atan();
        org.apache.commons.math.complex.Complex complex73 = complex68.add(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex68.log();
        org.apache.commons.math.complex.Complex complex75 = complex74.sin();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = complex56.pow(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex17.divide(complex76);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test12334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12334");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double42 = laguerreSolver7.solve(1.0E-14d, 0.7853981633974483d, (double) 0);
        laguerreSolver7.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction45 = polynomialFunction44.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(univariateRealFunction45);
    }

    @Test
    public void test12335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12335");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test12336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12336");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        int int11 = laguerreSolver10.getMaximalIterationCount();
        laguerreSolver10.resetFunctionValueAccuracy();
        double[] doubleArray22 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        double double25 = polynomialFunction23.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = polynomialFunction23.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        laguerreSolver27.setAbsoluteAccuracy((double) '#');
        laguerreSolver27.resetAbsoluteAccuracy();
        laguerreSolver27.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = complex34.log();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = complex34.multiply(complex39);
        org.apache.commons.math.complex.Complex complex44 = complex39.sin();
        org.apache.commons.math.complex.Complex complex45 = complex39.tan();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex39, complex46 };
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray51 = laguerreSolver27.solveAll(complexArray47, complex49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException54 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "hi!", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean57 = complex56.isInfinite();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex58.tan();
        boolean boolean62 = complex56.equals((java.lang.Object) complex61);
        boolean boolean63 = complex61.isNaN();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        org.apache.commons.math.complex.Complex complex72 = complex69.log();
        org.apache.commons.math.complex.Complex complex73 = complex67.pow(complex69);
        org.apache.commons.math.complex.Complex complex74 = complex69.cos();
        org.apache.commons.math.complex.Complex complex75 = complex69.atan();
        org.apache.commons.math.complex.Complex complex76 = complex69.tan();
        org.apache.commons.math.complex.Complex complex77 = complex61.add(complex69);
        org.apache.commons.math.complex.Complex complex78 = complex69.sin();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex79.log();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex83 = complex81.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex86 = complex84.multiply(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex82.add(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex86.sinh();
        org.apache.commons.math.complex.Complex complex89 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex90 = complex78.multiply(complex89);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver10.solveAll(complexArray47, complex90);
        laguerreSolver10.resetFunctionValueAccuracy();
        laguerreSolver10.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test12337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12337");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        double double11 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex10.cos();
        double double13 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex16.tan();
        boolean boolean20 = complex14.equals((java.lang.Object) complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex10.subtract(complex21);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean25 = complex24.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex26.tan();
        boolean boolean30 = complex24.equals((java.lang.Object) complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.log();
        double[] doubleArray34 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray34);
        double double37 = polynomialFunction35.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = polynomialFunction35.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver39 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction38);
        laguerreSolver39.setAbsoluteAccuracy((double) '#');
        laguerreSolver39.resetAbsoluteAccuracy();
        laguerreSolver39.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex51.log();
        org.apache.commons.math.complex.Complex complex55 = complex46.multiply(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex51.sin();
        org.apache.commons.math.complex.Complex complex57 = complex51.tan();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex51, complex58 };
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray63 = laguerreSolver39.solveAll(complexArray59, complex61);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean65 = complex64.isInfinite();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex66.tan();
        boolean boolean70 = complex64.equals((java.lang.Object) complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex61.add(complex69);
        org.apache.commons.math.complex.Complex complex73 = complex31.add(complex69);
        org.apache.commons.math.complex.Complex complex74 = complex73.tanh();
        org.apache.commons.math.complex.Complex complex75 = complex73.sinh();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex76.tan();
        org.apache.commons.math.complex.Complex complex80 = complex76.sinh();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex81.log();
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex85 = complex83.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.tan();
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex88 = complex87.log();
        org.apache.commons.math.complex.Complex complex89 = complex88.sqrt();
        org.apache.commons.math.complex.Complex complex90 = complex88.atan();
        org.apache.commons.math.complex.Complex complex91 = complex90.log();
        org.apache.commons.math.complex.Complex complex92 = complex84.subtract(complex91);
        org.apache.commons.math.complex.Complex complex93 = complex80.add(complex92);
        org.apache.commons.math.complex.Complex complex94 = complex93.cosh();
        org.apache.commons.math.complex.Complex complex95 = complex93.negate();
        org.apache.commons.math.complex.Complex complex96 = complex73.add(complex93);
        org.apache.commons.math.complex.Complex complex97 = complex73.atan();
        org.apache.commons.math.complex.Complex complex98 = complex23.subtract(complex97);
        double double99 = complex97.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.0d) + "'", double13 == (-0.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction38);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test12338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12338");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
    }

    @Test
    public void test12339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12339");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (byte) 10);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double38 = laguerreSolver7.solve((double) '4', 100.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        double double43 = laguerreSolver7.solve(8.0d, 8.0d);
        double double44 = laguerreSolver7.getFunctionValueAccuracy();
        double double45 = laguerreSolver7.getResult();
        int int46 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 8.0d + "'", double43 == 8.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test12340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12340");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt();
        double[] doubleArray11 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        double double14 = polynomialFunction12.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction12.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        laguerreSolver16.setAbsoluteAccuracy((double) '#');
        laguerreSolver16.resetAbsoluteAccuracy();
        laguerreSolver16.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.apache.commons.math.complex.Complex complex32 = complex23.multiply(complex28);
        org.apache.commons.math.complex.Complex complex33 = complex28.sin();
        org.apache.commons.math.complex.Complex complex34 = complex28.tan();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex28, complex35 };
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver16.solveAll(complexArray36, complex38);
        laguerreSolver16.resetRelativeAccuracy();
        double double42 = laguerreSolver16.getAbsoluteAccuracy();
        laguerreSolver16.resetRelativeAccuracy();
        laguerreSolver16.resetRelativeAccuracy();
        double double48 = laguerreSolver16.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int49 = laguerreSolver16.getMaximalIterationCount();
        double[] doubleArray52 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray52);
        double double55 = polynomialFunction53.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = polynomialFunction53.polynomialDerivative();
        double double58 = polynomialFunction53.value((double) (byte) 100);
        double[] doubleArray59 = polynomialFunction53.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray61 = laguerreSolver16.solveAll(doubleArray59, (double) ' ');
        java.lang.Class<?> wildcardClass62 = laguerreSolver16.getClass();
        boolean boolean63 = complex3.equals((java.lang.Object) wildcardClass62);
        org.apache.commons.math.complex.Complex complex64 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        boolean boolean73 = complex71.isInfinite();
        org.apache.commons.math.complex.Complex complex74 = complex69.add(complex71);
        boolean boolean76 = complex71.equals((java.lang.Object) 10.0f);
        org.apache.commons.math.complex.Complex complex77 = complex71.cos();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex78.tan();
        org.apache.commons.math.complex.Complex complex82 = complex78.sinh();
        org.apache.commons.math.complex.Complex complex83 = complex77.subtract(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex83.negate();
        org.apache.commons.math.complex.Complex complex85 = complex84.log();
        org.apache.commons.math.complex.Complex complex86 = complex64.divide(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex64.cos();
        org.apache.commons.math.complex.Complex complex88 = complex64.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-6d + "'", double42 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
    }

    @Test
    public void test12341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12341");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        double[] doubleArray17 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        laguerreSolver22.setAbsoluteAccuracy((double) '#');
        laguerreSolver22.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver22.getPolynomialFunction();
        double[] doubleArray29 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        laguerreSolver34.setAbsoluteAccuracy((double) '#');
        laguerreSolver34.resetAbsoluteAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex46, complex53 };
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver34.solveAll(complexArray54, complex56);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex64.atan();
        org.apache.commons.math.complex.Complex complex67 = complex64.log();
        org.apache.commons.math.complex.Complex complex68 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex69 = laguerreSolver22.solve(complexArray54, complex62);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.asin();
        org.apache.commons.math.complex.Complex[] complexArray75 = laguerreSolver7.solveAll(complexArray54, complex73);
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        int int80 = laguerreSolver7.getIterationCount();
        double double84 = laguerreSolver7.solve((double) 1, (double) 4, 10.0d);
        double double87 = laguerreSolver7.solve(0.5131355633916488d, 1.2314965134057307d);
        double double88 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5131355633916488d + "'", double87 == 0.5131355633916488d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0E-14d + "'", double88 == 1.0E-14d);
    }

    @Test
    public void test12342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12342");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) (byte) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex18.pow(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex26.log();
        org.apache.commons.math.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex25.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.log();
        org.apache.commons.math.complex.Complex complex41 = complex32.multiply(complex37);
        org.apache.commons.math.complex.Complex complex42 = complex29.multiply(complex37);
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex14.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.tan();
        org.apache.commons.math.complex.Complex complex53 = complex50.exp();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex54.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex50.divide(complex55);
        org.apache.commons.math.complex.Complex complex59 = complex55.negate();
        org.apache.commons.math.complex.Complex complex60 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex62.tan();
        org.apache.commons.math.complex.Complex complex66 = complex61.subtract(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.cos();
        boolean boolean68 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex69 = complex66.cos();
        org.apache.commons.math.complex.Complex complex70 = complex60.subtract(complex66);
        org.apache.commons.math.complex.Complex complex71 = complex14.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex3.pow(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex72.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test12343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12343");
        double[] doubleArray7 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        laguerreSolver12.setAbsoluteAccuracy((double) '#');
        laguerreSolver12.resetAbsoluteAccuracy();
        laguerreSolver12.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex23.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex24.log();
        org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24);
        org.apache.commons.math.complex.Complex complex29 = complex24.sin();
        org.apache.commons.math.complex.Complex complex30 = complex24.tan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex24, complex31 };
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver12.solveAll(complexArray32, complex34);
        laguerreSolver12.resetRelativeAccuracy();
        double double38 = laguerreSolver12.getAbsoluteAccuracy();
        double[] doubleArray41 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        double double44 = polynomialFunction42.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = polynomialFunction42.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver46 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction45);
        laguerreSolver46.setAbsoluteAccuracy((double) '#');
        laguerreSolver46.resetAbsoluteAccuracy();
        laguerreSolver46.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = complex53.multiply(complex58);
        org.apache.commons.math.complex.Complex complex63 = complex58.sin();
        org.apache.commons.math.complex.Complex complex64 = complex58.tan();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex58, complex65 };
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.log();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray70 = laguerreSolver46.solveAll(complexArray66, complex68);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.log();
        org.apache.commons.math.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex80.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex78.add(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex82.conjugate();
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex74.subtract(complex85);
        org.apache.commons.math.complex.Complex[] complexArray87 = laguerreSolver12.solveAll(complexArray66, complex85);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray87, (java.lang.Throwable) mathException88);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray87, (java.lang.Throwable) convergenceException91);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(3.141592653589793d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) convergenceException92);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0E-6d + "'", double38 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction45);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test12344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12344");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        double double19 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        double double22 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-14d + "'", double22 == 1.0E-14d);
    }

    @Test
    public void test12345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12345");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        laguerreSolver7.setFunctionValueAccuracy((double) 1L);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double[] doubleArray22 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        double double25 = polynomialFunction23.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = polynomialFunction23.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        laguerreSolver27.setAbsoluteAccuracy((double) '#');
        laguerreSolver27.resetAbsoluteAccuracy();
        laguerreSolver27.setFunctionValueAccuracy((double) '4');
        laguerreSolver27.resetMaximalIterationCount();
        double double37 = laguerreSolver27.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        double double38 = laguerreSolver27.getFunctionValueAccuracy();
        double[] doubleArray41 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        double double45 = polynomialFunction43.value((double) ' ');
        double[] doubleArray46 = polynomialFunction43.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray49 = laguerreSolver27.solveAll(doubleArray46, 1.0d);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.atan();
        org.apache.commons.math.complex.Complex complex55 = complex54.atan();
        org.apache.commons.math.complex.Complex complex56 = complex55.sin();
        org.apache.commons.math.complex.Complex complex57 = complex55.sqrt1z();
        org.apache.commons.math.complex.Complex complex58 = complex51.add(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex58.tanh();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = laguerreSolver7.solveAll(complexArray49, complex59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test12346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12346");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double38 = laguerreSolver7.solve(0.0d, (double) ' ', 35.0d);
        double double42 = laguerreSolver7.solve(1.0E-14d, (double) 0L, 1.0d);
        double double46 = laguerreSolver7.solve((double) (short) -1, (double) 100L, (double) 1L);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        int int49 = laguerreSolver7.getIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = laguerreSolver7.getPolynomialFunction();
        int int51 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(1.1752011936438014d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray61 = laguerreSolver7.solveAll(doubleArray59, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test12347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12347");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.solve((-0.0d), 1.0E-14d);
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 4);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        laguerreSolver7.setMaximalIterationCount(35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.0d) + "'", double15 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
    }

    @Test
    public void test12348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12348");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        double double88 = laguerreSolver7.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test12349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12349");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) maxIterationsExceededException9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(15742.0d, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException11);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test12350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12350");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.setMaximalIterationCount((int) (short) -1);
        laguerreSolver7.setAbsoluteAccuracy(1.0d);
        double[] doubleArray30 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = polynomialFunction31.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction34);
        laguerreSolver35.setAbsoluteAccuracy((double) '#');
        laguerreSolver35.resetAbsoluteAccuracy();
        laguerreSolver35.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.atan();
        org.apache.commons.math.complex.Complex complex50 = complex47.log();
        org.apache.commons.math.complex.Complex complex51 = complex42.multiply(complex47);
        org.apache.commons.math.complex.Complex complex52 = complex47.sin();
        org.apache.commons.math.complex.Complex complex53 = complex47.tan();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex47, complex54 };
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex56.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver35.solveAll(complexArray55, complex57);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException62 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "hi!", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex65.atan();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex65.subtract(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex65.sin();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex75.tan();
        org.apache.commons.math.complex.Complex complex79 = complex75.sinh();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt1z();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex81.log();
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex85 = complex83.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex88 = complex86.multiply(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex84.add(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex88.conjugate();
        org.apache.commons.math.complex.Complex complex91 = complex88.sqrt();
        org.apache.commons.math.complex.Complex complex92 = complex91.log();
        org.apache.commons.math.complex.Complex complex93 = complex80.pow(complex92);
        double double94 = complex92.abs();
        org.apache.commons.math.complex.Complex complex95 = complex74.multiply(complex92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex96 = laguerreSolver7.solve(complexArray55, complex74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (-1) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + Double.POSITIVE_INFINITY + "'", double94 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test12351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12351");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double39 = laguerreSolver7.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double41 = laguerreSolver7.getResult();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 4);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double48 = laguerreSolver7.solve(1.0d, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
    }

    @Test
    public void test12352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12352");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        java.lang.Throwable[] throwableArray11 = maxIterationsExceededException10.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(0, "", (java.lang.Object[]) throwableArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray19 = functionEvaluationException18.getArguments();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "hi!", objArray19);
        java.lang.String str22 = functionEvaluationException21.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "org.apache.commons.math.ConvergenceException: Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 100, "", (java.lang.Throwable) functionEvaluationException29);
        double double31 = functionEvaluationException30.getArgument();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(363.89859381747976d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) mathException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "", (java.lang.Throwable) functionEvaluationException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException34);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
    }

    @Test
    public void test12353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12353");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException3 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12354");
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        org.apache.commons.math.complex.Complex complex10 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex12.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex27.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex25.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.conjugate();
        java.lang.Object[] objArray32 = new java.lang.Object[] { complex31 };
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        java.lang.Object[] objArray41 = new java.lang.Object[] { convergenceException35, complex37, true };
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray43, throwable44);
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray41, (java.lang.Throwable) convergenceException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", objArray41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray32, (java.lang.Throwable) mathException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException48);
        java.lang.String str50 = functionEvaluationException48.getPattern();
        double double51 = functionEvaluationException48.getArgument();
        java.lang.Throwable[] throwableArray52 = functionEvaluationException48.getSuppressed();
        boolean boolean53 = complex17.equals((java.lang.Object) throwableArray52);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray52, throwable54);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str50, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test12355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12355");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = complex15.atan();
        org.apache.commons.math.complex.Complex complex22 = complex7.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test12356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12356");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount(0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = polynomialFunction18.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(univariateRealFunction19);
    }

    @Test
    public void test12357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12357");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException6 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException12);
        mathException7.addSuppressed((java.lang.Throwable) functionEvaluationException13);
        java.lang.Object[] objArray15 = functionEvaluationException13.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((-0.73669189358273d), (java.lang.Throwable) maxIterationsExceededException17);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test12358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12358");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.tan();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex14.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test12359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12359");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        int int85 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 1.0f);
        laguerreSolver7.resetMaximalIterationCount();
        double double90 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
    }

    @Test
    public void test12360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12360");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double39 = laguerreSolver7.solve((double) '#', (double) (byte) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction42 = polynomialFunction40.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction43 = polynomialFunction40.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(univariateRealFunction42);
        org.junit.Assert.assertNotNull(univariateRealFunction43);
    }

    @Test
    public void test12361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12361");
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        laguerreSolver10.resetAbsoluteAccuracy();
        laguerreSolver10.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex22.sin();
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex22, complex29 };
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = laguerreSolver10.solveAll(complexArray30, complex32);
        laguerreSolver10.setRelativeAccuracy((double) 1.0f);
        laguerreSolver10.resetFunctionValueAccuracy();
        double double41 = laguerreSolver10.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver10.setFunctionValueAccuracy((double) 1L);
        double[] doubleArray46 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        double double49 = polynomialFunction47.value((double) 10.0f);
        int int50 = polynomialFunction47.degree();
        double[] doubleArray51 = polynomialFunction47.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver10.solveAll(doubleArray51, (double) 100.0f);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray54);
        double double56 = functionEvaluationException55.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) 2, (java.lang.Throwable) functionEvaluationException55);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
    }

    @Test
    public void test12362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12362");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException22.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, (java.lang.Throwable) maxIterationsExceededException24);
        double double26 = functionEvaluationException25.getArgument();
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.1752011936438014d + "'", double26 == 1.1752011936438014d);
    }

    @Test
    public void test12363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12363");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getIterationCount();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction42 = polynomialFunction39.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction43 = polynomialFunction39.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction39.polynomialDerivative();
        double[] doubleArray45 = polynomialFunction39.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double[] doubleArray48 = polynomialFunction47.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray50 = laguerreSolver7.solveAll(doubleArray48, 1.0E-14d);
        int int51 = laguerreSolver7.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = laguerreSolver7.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction42);
        org.junit.Assert.assertNotNull(univariateRealFunction43);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction52);
    }

    @Test
    public void test12364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12364");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        java.lang.Object[] objArray12 = new java.lang.Object[] { convergenceException6, complex8, true };
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray14, throwable15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray12);
        int int20 = maxIterationsExceededException19.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) mathException22);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test12365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12365");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        double double90 = laguerreSolver7.solve((double) 0, 0.7853981633974483d);
        laguerreSolver7.setFunctionValueAccuracy((double) 10.0f);
        int int93 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test12366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12366");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100);
        double double4 = functionEvaluationException3.getArgument();
        double double5 = functionEvaluationException3.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.38535742648327137d, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException3);
        double double7 = functionEvaluationException3.getArgument();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test12367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12367");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex1.add(complex7);
        double double9 = complex8.abs();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex16.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.cos();
        boolean boolean23 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex15.divide(complex21);
        org.apache.commons.math.complex.Complex complex29 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex8.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        boolean boolean40 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex38);
        boolean boolean43 = complex38.equals((java.lang.Object) 10.0f);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex47.add(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.cos();
        org.apache.commons.math.complex.Complex complex54 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex54.tanh();
        boolean boolean56 = complex38.equals((java.lang.Object) complex54);
        org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) (byte) -1, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        boolean boolean61 = complex38.equals((java.lang.Object) complex60);
        org.apache.commons.math.complex.Complex complex62 = complex30.pow(complex38);
        org.apache.commons.math.complex.Complex complex63 = complex30.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sinh();
        org.apache.commons.math.complex.Complex complex65 = complex63.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test12368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12368");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex11.cos();
        boolean boolean13 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex11.subtract(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex5.divide(complex11);
        org.apache.commons.math.complex.Complex complex19 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex5.sqrt();
        boolean boolean21 = complex5.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test12369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12369");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        double double7 = polynomialFunction3.value((double) 100L);
        double double9 = polynomialFunction3.value((double) 100L);
        int int10 = polynomialFunction3.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction13.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
    }

    @Test
    public void test12370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12370");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
    }

    @Test
    public void test12371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12371");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = complex5.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.tan();
        org.apache.commons.math.complex.Complex complex19 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = complex16.cos();
        boolean boolean21 = complex16.isInfinite();
        boolean boolean22 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt1z();
        boolean boolean26 = complex24.isNaN();
        double double27 = complex24.abs();
        org.apache.commons.math.complex.Complex complex28 = complex16.add(complex24);
        org.apache.commons.math.complex.Complex complex29 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex16.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex11.multiply(complex16);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test12372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12372");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        double double36 = laguerreSolver7.solve((double) (short) 100, (double) (-1));
        double double37 = laguerreSolver7.getAbsoluteAccuracy();
        double double38 = laguerreSolver7.getFunctionValueAccuracy();
        int int39 = laguerreSolver7.getIterationCount();
        double double43 = laguerreSolver7.solve((double) 20, 0.0d, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 20.0d + "'", double43 == 20.0d);
    }

    @Test
    public void test12373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12373");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cos();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex38.cos();
        org.apache.commons.math.complex.Complex complex40 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex41.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test12374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12374");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex10.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.sin();
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        boolean boolean19 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex23.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = complex23.cos();
        org.apache.commons.math.complex.Complex complex30 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex23.tanh();
        boolean boolean32 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex33 = complex16.multiply(complex23);
        org.apache.commons.math.complex.Complex complex34 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex35 = complex23.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex39.pow(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex46.add(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.negate();
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex55.log();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex63 = complex59.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex63.asin();
        org.apache.commons.math.complex.Complex complex65 = complex64.cos();
        org.apache.commons.math.complex.Complex complex66 = complex65.sin();
        org.apache.commons.math.complex.Complex complex67 = complex54.add(complex65);
        org.apache.commons.math.complex.Complex complex68 = complex35.add(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = complex68.acos();
        org.apache.commons.math.complex.Complex complex71 = complex70.sin();
        boolean boolean72 = complex71.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test12375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12375");
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex5.sqrt1z();
        double[] doubleArray11 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        double double14 = polynomialFunction12.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction12.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        laguerreSolver16.setAbsoluteAccuracy((double) '#');
        laguerreSolver16.resetAbsoluteAccuracy();
        laguerreSolver16.setFunctionValueAccuracy((double) '4');
        laguerreSolver16.resetMaximalIterationCount();
        double double26 = laguerreSolver16.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex28.tan();
        org.apache.commons.math.complex.Complex complex32 = complex27.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex38.add(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex47.tan();
        org.apache.commons.math.complex.Complex complex51 = complex46.subtract(complex50);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex52.log();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex55.add(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex63.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex63.tan();
        org.apache.commons.math.complex.Complex complex67 = complex63.sinh();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex71.tan();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex75.atan();
        org.apache.commons.math.complex.Complex complex78 = complex77.log();
        org.apache.commons.math.complex.Complex complex79 = complex71.subtract(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex67.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex61.add(complex67);
        org.apache.commons.math.complex.Complex complex82 = complex50.divide(complex81);
        java.lang.Object[] objArray83 = new java.lang.Object[] { complex8, (byte) 1, complex31, false, complex45, complex50 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException85 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "org.apache.commons.math.ConvergenceException: hi!", objArray83, (java.lang.Throwable) maxIterationsExceededException85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) maxIterationsExceededException85);
        java.lang.Throwable[] throwableArray88 = mathException87.getSuppressed();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test12376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12376");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray37 = polynomialFunction36.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test12377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12377");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
    }

    @Test
    public void test12378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12378");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex4.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex21.tan();
        boolean boolean25 = complex19.equals((java.lang.Object) complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex27);
        double[] doubleArray31 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction32.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        laguerreSolver36.setAbsoluteAccuracy((double) '#');
        double double39 = laguerreSolver36.getRelativeAccuracy();
        laguerreSolver36.setMaximalIterationCount((int) (byte) 100);
        double double42 = laguerreSolver36.getAbsoluteAccuracy();
        boolean boolean43 = complex28.equals((java.lang.Object) laguerreSolver36);
        laguerreSolver36.resetRelativeAccuracy();
        laguerreSolver36.setMaximalIterationCount((int) (short) 10);
        double double47 = laguerreSolver36.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int48 = laguerreSolver36.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-14d + "'", double39 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0E-14d + "'", double47 == 1.0E-14d);
    }

    @Test
    public void test12379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12379");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        int int10 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(1.0E-15d);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double16 = laguerreSolver7.solve(97.0d, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 97.0d + "'", double16 == 97.0d);
    }

    @Test
    public void test12380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12380");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.solve((double) (short) 0, 1.0d);
        laguerreSolver7.setAbsoluteAccuracy((double) 100L);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int41 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
    }

    @Test
    public void test12381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12381");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (short) -1);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) ' ');
        double double17 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        laguerreSolver7.setAbsoluteAccuracy(2.2360679774997907d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
    }

    @Test
    public void test12382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12382");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray6);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray9);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test12383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12383");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double15 = laguerreSolver7.solve(0.0d, (double) 4, (double) (short) -1);
        double double16 = laguerreSolver7.getFunctionValueAccuracy();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
    }

    @Test
    public void test12384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12384");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(0.5669767943827975d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52");
    }

    @Test
    public void test12385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12385");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex8.exp();
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test12386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12386");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.resetFunctionValueAccuracy();
        int int92 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int97 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
    }

    @Test
    public void test12387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12387");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        double double14 = laguerreSolver7.getFunctionValueAccuracy();
        double double15 = laguerreSolver7.getFunctionValueAccuracy();
        double double16 = laguerreSolver7.getRelativeAccuracy();
        double double17 = laguerreSolver7.getFunctionValueAccuracy();
        double double21 = laguerreSolver7.solve(2.2360679774997907d, 0.7853981633974483d, (double) 32);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(32.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-15d + "'", double17 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.2360679774997907d + "'", double21 == 2.2360679774997907d);
    }

    @Test
    public void test12388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12388");
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        java.lang.Object[] objArray16 = new java.lang.Object[] { complex15 };
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        java.lang.Object[] objArray25 = new java.lang.Object[] { convergenceException19, complex21, true };
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray27, throwable28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray16, (java.lang.Throwable) mathException31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException32);
        java.lang.String str34 = functionEvaluationException32.getPattern();
        java.lang.Object[] objArray35 = functionEvaluationException32.getArguments();
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray40, throwable41);
        java.lang.Object[] objArray43 = convergenceException42.getArguments();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", objArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray35, (java.lang.Throwable) mathException44);
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray35);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", objArray35);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", (java.lang.Throwable) convergenceException48);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str34, "org.apache.commons.math.ConvergenceException: hi!");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
    }

    @Test
    public void test12389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12389");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        double double10 = complex7.abs();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex7.add(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double[] doubleArray20 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = polynomialFunction21.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        laguerreSolver25.setAbsoluteAccuracy((double) '#');
        laguerreSolver25.resetAbsoluteAccuracy();
        laguerreSolver25.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.atan();
        org.apache.commons.math.complex.Complex complex35 = complex32.log();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.atan();
        org.apache.commons.math.complex.Complex complex40 = complex37.log();
        org.apache.commons.math.complex.Complex complex41 = complex32.multiply(complex37);
        org.apache.commons.math.complex.Complex complex42 = complex37.sin();
        org.apache.commons.math.complex.Complex complex43 = complex37.tan();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex37, complex44 };
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray49 = laguerreSolver25.solveAll(complexArray45, complex47);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean51 = complex50.isInfinite();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex52.tan();
        boolean boolean56 = complex50.equals((java.lang.Object) complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex47.add(complex55);
        org.apache.commons.math.complex.Complex complex59 = complex58.log();
        double double60 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = complex17.subtract(complex59);
        boolean boolean62 = complex17.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 3.141592653589793d + "'", double60 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test12390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12390");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (byte) 100);
        double double10 = polynomialFunction3.value(32.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray12 = polynomialFunction11.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test12391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12391");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        org.apache.commons.math.complex.Complex complex16 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = complex11.pow(complex13);
        org.apache.commons.math.complex.Complex complex18 = complex13.cos();
        org.apache.commons.math.complex.Complex complex19 = complex13.atan();
        org.apache.commons.math.complex.Complex complex20 = complex13.tan();
        org.apache.commons.math.complex.Complex complex21 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex22 = complex13.sin();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex28.multiply(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex26.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex22.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = complex35.cos();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test12392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12392");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException5);
        java.lang.Throwable[] throwableArray7 = functionEvaluationException5.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(1.557407724654902d, "org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test12393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12393");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("hi!");
        java.lang.Object[] objArray4 = convergenceException3.getArguments();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(97.0d, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test12394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12394");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray3, throwable4);
        java.lang.Object[] objArray6 = convergenceException5.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(1.0d);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", objArray6, (java.lang.Throwable) functionEvaluationException9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException9);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    }

    @Test
    public void test12395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12395");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test12396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12396");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getRelativeAccuracy();
        double double84 = laguerreSolver7.getRelativeAccuracy();
        int int85 = laguerreSolver7.getMaximalIterationCount();
        double double86 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double88 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setMaximalIterationCount(1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction93 = laguerreSolver7.getPolynomialFunction();
        java.lang.Class<?> wildcardClass94 = laguerreSolver7.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0E-14d + "'", double83 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0E-14d + "'", double84 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 52.0d + "'", double88 == 52.0d);
        org.junit.Assert.assertNotNull(polynomialFunction93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test12397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12397");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double double36 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver7.solveAll(doubleArray39, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = polynomialFunction46.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver48 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction46);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver49 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction46);
        double double51 = polynomialFunction46.value((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(polynomialFunction47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
    }

    @Test
    public void test12398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12398");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        double double12 = polynomialFunction3.value((double) 10L);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction3.derivative();
        double[] doubleArray14 = polynomialFunction3.getCoefficients();
        double double16 = polynomialFunction3.value(0.6657737500283538d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = polynomialFunction3.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction17);
    }

    @Test
    public void test12399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12399");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        double double8 = polynomialFunction3.value((double) (short) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
    }

    @Test
    public void test12400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12400");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex15.log();
        org.apache.commons.math.complex.Complex complex19 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = complex15.atan();
        org.apache.commons.math.complex.Complex complex22 = complex7.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean24 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex25.tan();
        boolean boolean29 = complex23.equals((java.lang.Object) complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex31.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex28.add(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex22.subtract(complex35);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("", (java.lang.Throwable) maxIterationsExceededException39);
        boolean boolean41 = complex22.equals((java.lang.Object) "");
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        boolean boolean50 = complex48.isInfinite();
        org.apache.commons.math.complex.Complex complex51 = complex46.add(complex48);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex52.tan();
        org.apache.commons.math.complex.Complex complex56 = complex46.pow(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex22.divide(complex46);
        org.apache.commons.math.complex.Complex complex58 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test12401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12401");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        boolean boolean5 = complex1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex6 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex1.asin();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tan();
        double double13 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.atan();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        boolean boolean27 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex23.add(complex25);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex29.tan();
        org.apache.commons.math.complex.Complex complex33 = complex23.pow(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = complex18.multiply(complex35);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex(100.0d, (double) (-1L));
        double double40 = complex39.getReal();
        org.apache.commons.math.complex.Complex complex41 = complex18.add(complex39);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex45.add(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex54 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex56.atan();
        org.apache.commons.math.complex.Complex complex58 = complex57.conjugate();
        boolean boolean59 = complex39.equals((java.lang.Object) complex57);
        org.apache.commons.math.complex.Complex complex60 = complex39.sin();
        org.apache.commons.math.complex.Complex complex61 = complex10.divide(complex39);
        double double62 = complex61.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.0d) + "'", double13 == (-0.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test12402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12402");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "hi!", objArray6);
        java.lang.String str9 = functionEvaluationException8.getPattern();
        double double10 = functionEvaluationException8.getArgument();
        java.lang.Throwable[] throwableArray11 = functionEvaluationException8.getSuppressed();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test12403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12403");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(2.2360679774997907d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str6 = functionEvaluationException5.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        convergenceException7.addSuppressed((java.lang.Throwable) mathException8);
        java.lang.Object[] objArray10 = mathException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException8);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) mathException8);
        functionEvaluationException1.addSuppressed((java.lang.Throwable) mathException8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test12404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12404");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction8.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction8.polynomialDerivative();
        double double12 = polynomialFunction8.value((double) 8);
        int int13 = polynomialFunction8.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test12405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12405");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.resetFunctionValueAccuracy();
        int int92 = laguerreSolver7.getMaximalIterationCount();
        double double93 = laguerreSolver7.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction94 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetRelativeAccuracy();
        double double96 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.7853981633974483d + "'", double93 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(polynomialFunction94);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0E-15d + "'", double96 == 1.0E-15d);
    }

    @Test
    public void test12406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12406");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        double double11 = laguerreSolver7.getAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) ' ', (double) '4');
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        double[] doubleArray19 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray25 = laguerreSolver7.solveAll(doubleArray19, (double) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (10) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 32.0d + "'", double14 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0]");
    }

    @Test
    public void test12407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12407");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        laguerreSolver7.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        int int17 = polynomialFunction16.degree();
        double double19 = polynomialFunction16.value(0.5131355633916488d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test12408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12408");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) '4');
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
    }

    @Test
    public void test12409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12409");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        double double11 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = complex1.asin();
        org.apache.commons.math.complex.Complex complex14 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex1.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test12410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12410");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) (-1L));
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test12411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12411");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        int int35 = laguerreSolver7.getIterationCount();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        laguerreSolver43.resetRelativeAccuracy();
        double double69 = laguerreSolver43.getAbsoluteAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        laguerreSolver43.resetRelativeAccuracy();
        double double75 = laguerreSolver43.solve(52.0d, (double) 1.0f, (double) (byte) -1);
        int int76 = laguerreSolver43.getMaximalIterationCount();
        double[] doubleArray79 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        double double82 = polynomialFunction80.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction83 = polynomialFunction80.polynomialDerivative();
        double double85 = polynomialFunction80.value((double) (byte) 100);
        double[] doubleArray86 = polynomialFunction80.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver43.solveAll(doubleArray86, (double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver7.solveAll(doubleArray86, (double) (short) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction92 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction93 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0E-6d + "'", double69 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction83);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test12412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12412");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.atan();
        java.lang.Object[] objArray11 = new java.lang.Object[] { convergenceException5, complex7, true };
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray13, throwable14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray11);
        int int19 = maxIterationsExceededException18.getMaxIterations();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException18);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException18);
        java.lang.String str22 = maxIterationsExceededException18.getPattern();
        java.lang.Object[] objArray23 = maxIterationsExceededException18.getArguments();
        int int24 = maxIterationsExceededException18.getMaxIterations();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test12413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12413");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getMaximalIterationCount();
        int int35 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double37 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
    }

    @Test
    public void test12414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12414");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        org.apache.commons.math.complex.Complex complex16 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex18.log();
        org.apache.commons.math.complex.Complex complex22 = complex13.multiply(complex18);
        org.apache.commons.math.complex.Complex complex23 = complex18.sin();
        org.apache.commons.math.complex.Complex complex24 = complex18.tan();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.acos();
        org.apache.commons.math.complex.Complex complex27 = complex11.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex11.conjugate();
        boolean boolean29 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex30 = complex6.subtract(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex28.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test12415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12415");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = complex6.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test12416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12416");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) 'a');
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test12417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12417");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.apache.commons.math.complex.Complex complex9 = complex2.pow(complex6);
        org.apache.commons.math.complex.Complex complex10 = complex6.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex18.pow(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex14.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        org.apache.commons.math.complex.Complex complex49 = complex43.acos();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex43.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex36.add(complex43);
        org.apache.commons.math.complex.Complex complex55 = complex26.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex10.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex10.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test12418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12418");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex7.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        boolean boolean11 = complex5.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex1.pow(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex10.sin();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean16 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        boolean boolean21 = complex15.equals((java.lang.Object) complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.negate();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex10.add(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test12419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12419");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        double double15 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        double double18 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        int int20 = laguerreSolver7.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy(1.5430806348152437d);
        laguerreSolver7.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction21);
    }

    @Test
    public void test12420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12420");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setMaximalIterationCount(0);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 8);
        laguerreSolver7.setRelativeAccuracy(52.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
    }

    @Test
    public void test12421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12421");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.atan();
        org.apache.commons.math.complex.Complex complex7 = complex4.log();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.log();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex9.sin();
        org.apache.commons.math.complex.Complex complex15 = complex9.tan();
        org.apache.commons.math.complex.Complex complex16 = complex2.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex21.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex50.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex43.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex37.add(complex43);
        org.apache.commons.math.complex.Complex complex58 = complex21.divide(complex43);
        double double59 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex60 = complex58.log();
        boolean boolean61 = complex60.isInfinite();
        org.apache.commons.math.complex.Complex complex62 = complex60.acos();
        org.apache.commons.math.complex.Complex complex63 = complex62.sinh();
        org.apache.commons.math.complex.Complex complex64 = complex62.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test12422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12422");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.getResult();
        double double39 = laguerreSolver7.solve(100.0d, 35.0d, (double) (byte) 1);
        double double40 = laguerreSolver7.getRelativeAccuracy();
        int int41 = laguerreSolver7.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test12423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12423");
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        java.lang.Object[] objArray10 = new java.lang.Object[] { convergenceException4, complex6, true };
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray12, throwable13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) convergenceException15);
        java.lang.String str18 = convergenceException15.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException15);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(32.0d, (java.lang.Throwable) convergenceException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException21);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test12424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12424");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!");
        java.lang.String str2 = convergenceException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str2, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test12425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12425");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy(1.0E-14d);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver7.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
    }

    @Test
    public void test12426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12426");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.asin();
        double double16 = complex15.getReal();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex15.pow(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.tan();
        org.apache.commons.math.complex.Complex complex31 = complex10.pow(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex10.exp();
        org.apache.commons.math.complex.Complex complex33 = complex10.cos();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex37.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.sinh();
        org.apache.commons.math.complex.Complex complex44 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex41.exp();
        org.apache.commons.math.complex.Complex complex46 = complex41.sin();
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z();
        org.apache.commons.math.complex.Complex complex48 = complex47.sin();
        org.apache.commons.math.complex.Complex complex49 = complex47.acos();
        org.apache.commons.math.complex.Complex complex50 = complex33.subtract(complex47);
        org.apache.commons.math.complex.Complex complex51 = complex47.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test12427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12427");
        double[] doubleArray11 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        double double14 = polynomialFunction12.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction12.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        laguerreSolver16.setAbsoluteAccuracy((double) '#');
        laguerreSolver16.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = laguerreSolver16.getPolynomialFunction();
        double double23 = laguerreSolver16.solve(0.0d, (double) 1.0f);
        double[] doubleArray26 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = polynomialFunction27.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        laguerreSolver31.setAbsoluteAccuracy((double) '#');
        laguerreSolver31.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = laguerreSolver31.getPolynomialFunction();
        double[] doubleArray38 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = polynomialFunction39.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        laguerreSolver43.setAbsoluteAccuracy((double) '#');
        laguerreSolver43.resetAbsoluteAccuracy();
        laguerreSolver43.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex50.atan();
        org.apache.commons.math.complex.Complex complex53 = complex50.log();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = complex54.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex55.log();
        org.apache.commons.math.complex.Complex complex59 = complex50.multiply(complex55);
        org.apache.commons.math.complex.Complex complex60 = complex55.sin();
        org.apache.commons.math.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex55, complex62 };
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray67 = laguerreSolver43.solveAll(complexArray63, complex65);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex73.atan();
        org.apache.commons.math.complex.Complex complex76 = complex73.log();
        org.apache.commons.math.complex.Complex complex77 = complex71.pow(complex73);
        org.apache.commons.math.complex.Complex complex78 = laguerreSolver31.solve(complexArray63, complex71);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex79.tan();
        org.apache.commons.math.complex.Complex complex83 = complex82.asin();
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver16.solveAll(complexArray63, complex82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException86 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException87 = new org.apache.commons.math.MaxIterationsExceededException(2, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException88 = new org.apache.commons.math.MaxIterationsExceededException(20, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException91 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) maxIterationsExceededException91);
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray63, (java.lang.Throwable) maxIterationsExceededException91);
        int int94 = maxIterationsExceededException91.getMaxIterations();
        int int95 = maxIterationsExceededException91.getMaxIterations();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction42);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
    }

    @Test
    public void test12428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12428");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        laguerreSolver19.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex31.tan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex31, complex38 };
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver19.solveAll(complexArray39, complex41);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = complex47.pow(complex49);
        org.apache.commons.math.complex.Complex complex54 = laguerreSolver7.solve(complexArray39, complex47);
        laguerreSolver7.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setFunctionValueAccuracy((double) 97);
        laguerreSolver7.setFunctionValueAccuracy(2.2360679774997907d);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test12429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12429");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetMaximalIterationCount();
        int int11 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 100);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setFunctionValueAccuracy(1.1432116289313778d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test12430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12430");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex1.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.atan();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.cos();
        org.apache.commons.math.complex.Complex complex27 = complex21.atan();
        org.apache.commons.math.complex.Complex complex28 = complex13.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.atan();
        boolean boolean34 = complex30.equals((java.lang.Object) (byte) 10);
        org.apache.commons.math.complex.Complex complex35 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex30.asin();
        boolean boolean37 = complex36.isNaN();
        org.apache.commons.math.complex.Complex complex38 = complex13.pow(complex36);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        org.apache.commons.math.complex.Complex complex42 = complex36.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex10.subtract(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex43.tan();
        org.apache.commons.math.complex.Complex complex45 = complex44.tan();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex49.add(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.cos();
        org.apache.commons.math.complex.Complex complex56 = complex55.tan();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        org.apache.commons.math.complex.Complex complex72 = complex67.add(complex71);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex73.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.atan();
        org.apache.commons.math.complex.Complex complex77 = complex74.log();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.atan();
        org.apache.commons.math.complex.Complex complex82 = complex79.log();
        org.apache.commons.math.complex.Complex complex83 = complex74.multiply(complex79);
        org.apache.commons.math.complex.Complex complex84 = complex71.multiply(complex79);
        org.apache.commons.math.complex.Complex complex85 = complex84.negate();
        org.apache.commons.math.complex.Complex complex86 = complex56.subtract(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex56.exp();
        org.apache.commons.math.complex.Complex complex88 = complex87.tan();
        org.apache.commons.math.complex.Complex complex89 = complex88.exp();
        org.apache.commons.math.complex.Complex complex92 = new org.apache.commons.math.complex.Complex(1.0E-6d, 52.0d);
        org.apache.commons.math.complex.Complex complex93 = complex88.multiply(complex92);
        org.apache.commons.math.complex.Complex complex94 = complex45.divide(complex92);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
    }

    @Test
    public void test12431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12431");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = complex80.abs();
        boolean boolean84 = complex80.isInfinite();
        org.apache.commons.math.complex.Complex complex85 = complex80.conjugate();
        org.apache.commons.math.complex.Complex complex86 = complex80.tan();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test12432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12432");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "");
        java.lang.Object[] objArray8 = functionEvaluationException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", objArray8);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray11, throwable12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        java.lang.Object[] objArray21 = new java.lang.Object[] { convergenceException15, complex17, true };
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray23, throwable24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        convergenceException13.addSuppressed((java.lang.Throwable) convergenceException26);
        java.lang.Throwable[] throwableArray28 = convergenceException26.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray8, (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math.complex.Complex complex43 = complex38.subtract(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = complex49.multiply(complex50);
        boolean boolean52 = complex50.isInfinite();
        org.apache.commons.math.complex.Complex complex53 = complex48.add(complex50);
        java.lang.Object[] objArray56 = new java.lang.Object[] { complex36, complex43, complex48, (byte) 10, 1.0f };
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("hi!", objArray56);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException59 = new org.apache.commons.math.MaxIterationsExceededException((int) '#');
        int int60 = maxIterationsExceededException59.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.ConvergenceException: hi!", objArray56, (java.lang.Throwable) maxIterationsExceededException59);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException62 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "org.apache.commons.math.FunctionEvaluationException: ", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray8, (java.lang.Throwable) maxIterationsExceededException62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", (java.lang.Throwable) maxIterationsExceededException62);
        java.lang.Object[] objArray65 = maxIterationsExceededException62.getArguments();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray65);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(objArray65);
    }

    @Test
    public void test12433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12433");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double34 = laguerreSolver7.solve((double) (-1.0f), (double) 1L);
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) 0);
        double double39 = laguerreSolver7.solve((double) (-1L), (-0.0d));
        laguerreSolver7.setFunctionValueAccuracy(52.0d);
        int int42 = laguerreSolver7.getMaximalIterationCount();
        int int43 = laguerreSolver7.getMaximalIterationCount();
        double double44 = laguerreSolver7.getAbsoluteAccuracy();
        int int45 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-6d + "'", double44 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
    }

    @Test
    public void test12434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12434");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex31 = complex18.pow(complex30);
        boolean boolean32 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex33 = complex10.multiply(complex18);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex35.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex35.tan();
        org.apache.commons.math.complex.Complex complex39 = complex34.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex39.cos();
        boolean boolean41 = complex39.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt1z();
        org.apache.commons.math.complex.Complex complex44 = complex33.add(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex42.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test12435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12435");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double83 = laguerreSolver7.getResult();
        laguerreSolver7.setFunctionValueAccuracy((double) (-1));
        double double88 = laguerreSolver7.solve(1.557407724654902d, 3.141592653589793d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.557407724654902d + "'", double88 == 1.557407724654902d);
    }

    @Test
    public void test12436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12436");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(1.0E-14d);
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        double double18 = laguerreSolver7.solve(32.0d, (double) '4');
        double double19 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
    }

    @Test
    public void test12437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12437");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double12 = laguerreSolver11.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(univariateRealFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
    }

    @Test
    public void test12438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12438");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray6, throwable7);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        java.lang.Object[] objArray16 = new java.lang.Object[] { convergenceException10, complex12, true };
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray18, throwable19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        convergenceException8.addSuppressed((java.lang.Throwable) convergenceException21);
        java.lang.Throwable[] throwableArray23 = convergenceException21.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "hi!", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray23);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test12439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12439");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setMaximalIterationCount(4);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test12440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12440");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double11 = laguerreSolver7.getFunctionValueAccuracy();
        double[] doubleArray14 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction15.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        laguerreSolver19.setAbsoluteAccuracy((double) '#');
        laguerreSolver19.resetAbsoluteAccuracy();
        double double26 = laguerreSolver19.solve((double) 100, 10.0d, (-1.0d));
        double double27 = laguerreSolver19.getRelativeAccuracy();
        laguerreSolver19.resetFunctionValueAccuracy();
        laguerreSolver19.resetAbsoluteAccuracy();
        double double30 = laguerreSolver19.getRelativeAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex69.tan();
        org.apache.commons.math.complex.Complex complex73 = complex68.subtract(complex72);
        org.apache.commons.math.complex.Complex complex74 = laguerreSolver19.solve(complexArray61, complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex75.tan();
        org.apache.commons.math.complex.Complex complex79 = complex75.sinh();
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt1z();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex82 = complex81.log();
        org.apache.commons.math.complex.Complex complex83 = complex82.log();
        org.apache.commons.math.complex.Complex complex84 = complex82.exp();
        org.apache.commons.math.complex.Complex complex85 = complex79.multiply(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.acos();
        org.apache.commons.math.complex.Complex[] complexArray87 = laguerreSolver7.solveAll(complexArray61, complex84);
        org.apache.commons.math.complex.Complex complex88 = complex84.tanh();
        double double89 = complex88.getImaginary();
        org.apache.commons.math.complex.Complex complex90 = complex88.acos();
        org.apache.commons.math.complex.Complex complex91 = complex90.log();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-14d + "'", double27 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0E-14d + "'", double30 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test12441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12441");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double35 = laguerreSolver7.solve((double) (short) -1, 10.0d);
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        double double38 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0E-6d + "'", double38 == 1.0E-6d);
    }

    @Test
    public void test12442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12442");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray4, throwable5);
        java.lang.Object[] objArray7 = convergenceException6.getArguments();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException6);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) mathException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) mathException8);
        java.lang.String str11 = mathException8.getPattern();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) mathException12);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test12443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12443");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        boolean boolean10 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        double double12 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex17.acos();
        org.apache.commons.math.complex.Complex complex25 = complex13.divide(complex17);
        org.apache.commons.math.complex.Complex complex26 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.0d) + "'", double12 == (-0.0d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test12444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12444");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        boolean boolean22 = complex20.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = complex18.add(complex20);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex24.tan();
        org.apache.commons.math.complex.Complex complex28 = complex18.pow(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex30.tan();
        org.apache.commons.math.complex.Complex complex34 = complex29.subtract(complex33);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex38.add(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex46.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex46.tan();
        org.apache.commons.math.complex.Complex complex50 = complex46.sinh();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex51.log();
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.tan();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex54.subtract(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex50.add(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex44.add(complex50);
        org.apache.commons.math.complex.Complex complex65 = complex33.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        double[] doubleArray69 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction70 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        double double72 = polynomialFunction70.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction73 = polynomialFunction70.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver74 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction73);
        laguerreSolver74.setAbsoluteAccuracy((double) '#');
        laguerreSolver74.resetAbsoluteAccuracy();
        laguerreSolver74.resetRelativeAccuracy();
        laguerreSolver74.setRelativeAccuracy(0.0d);
        boolean boolean81 = complex65.equals((java.lang.Object) 0.0d);
        org.apache.commons.math.complex.Complex complex82 = complex65.asin();
        org.apache.commons.math.complex.Complex complex83 = complex82.asin();
        org.apache.commons.math.complex.Complex complex84 = complex28.multiply(complex83);
        boolean boolean85 = complex12.equals((java.lang.Object) complex83);
        org.apache.commons.math.complex.Complex complex86 = complex83.tan();
        org.apache.commons.math.complex.Complex complex87 = complex83.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction73);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test12445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12445");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray11 = functionEvaluationException10.getArguments();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, "hi!", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray11);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray22, throwable23);
        java.lang.Object[] objArray25 = convergenceException24.getArguments();
        java.lang.Throwable[] throwableArray26 = convergenceException24.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.String str33 = functionEvaluationException32.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException32);
        java.lang.Object[] objArray35 = functionEvaluationException32.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("hi!", objArray35);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray43, throwable44);
        java.lang.Object[] objArray46 = convergenceException45.getArguments();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", objArray46);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException48 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray46);
        java.lang.Throwable[] throwableArray50 = convergenceException49.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = complex59.multiply(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.atan();
        java.lang.Object[] objArray64 = new java.lang.Object[] { convergenceException58, complex60, true };
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray66, throwable67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray64, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", objArray64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray64);
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("", objArray73, throwable74);
        java.lang.Object[] objArray76 = convergenceException75.getArguments();
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray64, (java.lang.Throwable) convergenceException75);
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("hi!", objArray64, throwable79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", objArray35, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "hi!", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ");
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray26, (java.lang.Throwable) convergenceException86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray11, (java.lang.Throwable) convergenceException86);
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", objArray11);
        java.lang.Throwable throwable90 = null;
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray11, throwable90);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
    }

    @Test
    public void test12446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12446");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setRelativeAccuracy((double) 10);
        double double10 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test12447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12447");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex24.atan();
        org.apache.commons.math.complex.Complex complex27 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex28.acos();
        org.apache.commons.math.complex.Complex complex31 = complex11.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex11.exp();
        double double33 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex34 = complex11.tanh();
        boolean boolean35 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex34.negate();
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test12448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12448");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        boolean boolean1 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        boolean boolean6 = complex0.equals((java.lang.Object) complex5);
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        org.apache.commons.math.complex.Complex complex16 = complex13.log();
        org.apache.commons.math.complex.Complex complex17 = complex11.pow(complex13);
        org.apache.commons.math.complex.Complex complex18 = complex13.cos();
        org.apache.commons.math.complex.Complex complex19 = complex13.atan();
        org.apache.commons.math.complex.Complex complex20 = complex13.tan();
        org.apache.commons.math.complex.Complex complex21 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex22 = complex13.acos();
        org.apache.commons.math.complex.Complex complex23 = complex13.negate();
        org.apache.commons.math.complex.Complex complex24 = complex13.exp();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = complex25.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex31.log();
        org.apache.commons.math.complex.Complex complex35 = complex26.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex31.acos();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex31.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex31.asin();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = complex46.pow(complex48);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = complex56.pow(complex58);
        org.apache.commons.math.complex.Complex complex63 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex64.log();
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex65.atan();
        org.apache.commons.math.complex.Complex complex68 = complex63.add(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex63.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sin();
        org.apache.commons.math.complex.Complex complex71 = complex69.acos();
        org.apache.commons.math.complex.Complex complex72 = complex52.divide(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex31.pow(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex13.divide(complex72);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test12449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12449");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(35.0d, (-0.1838722778432016d));
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex8 = complex6.multiply(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        double double14 = complex11.abs();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex11.add(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.sqrt1z();
        boolean boolean22 = complex21.isNaN();
        org.apache.commons.math.complex.Complex complex23 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        boolean boolean25 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex30.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex29.add(complex30);
        org.apache.commons.math.complex.Complex complex34 = complex29.sqrt1z();
        org.apache.commons.math.complex.Complex complex35 = complex29.cos();
        org.apache.commons.math.complex.Complex complex36 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.cos();
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex39.log();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((-1.0d), (double) ' ');
        org.apache.commons.math.complex.Complex complex47 = complex43.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex38.add(complex48);
        double double50 = complex38.getReal();
        org.apache.commons.math.complex.Complex complex51 = complex24.pow(complex38);
        org.apache.commons.math.complex.Complex complex52 = complex3.pow(complex51);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.8414709848078965d + "'", double50 == 0.8414709848078965d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test12450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12450");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetMaximalIterationCount();
        double[] doubleArray16 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        double double19 = polynomialFunction17.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction17.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        laguerreSolver21.setAbsoluteAccuracy((double) '#');
        laguerreSolver21.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = laguerreSolver21.getPolynomialFunction();
        double[] doubleArray28 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        double double31 = polynomialFunction29.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = polynomialFunction29.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver33 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        laguerreSolver33.setAbsoluteAccuracy((double) '#');
        laguerreSolver33.resetAbsoluteAccuracy();
        laguerreSolver33.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex40.log();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex44.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.atan();
        org.apache.commons.math.complex.Complex complex48 = complex45.log();
        org.apache.commons.math.complex.Complex complex49 = complex40.multiply(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex45.sin();
        org.apache.commons.math.complex.Complex complex51 = complex45.tan();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex45, complex52 };
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex54.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray57 = laguerreSolver33.solveAll(complexArray53, complex55);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex62.multiply(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex63.atan();
        org.apache.commons.math.complex.Complex complex66 = complex63.log();
        org.apache.commons.math.complex.Complex complex67 = complex61.pow(complex63);
        org.apache.commons.math.complex.Complex complex68 = laguerreSolver21.solve(complexArray53, complex61);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex70.tan();
        org.apache.commons.math.complex.Complex complex74 = complex69.subtract(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.cos();
        boolean boolean76 = complex74.isInfinite();
        org.apache.commons.math.complex.Complex complex77 = complex74.cos();
        org.apache.commons.math.complex.Complex complex78 = complex77.tan();
        org.apache.commons.math.complex.Complex complex79 = complex78.tanh();
        org.apache.commons.math.complex.Complex[] complexArray80 = laguerreSolver9.solveAll(complexArray53, complex79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.lang.Object[] objArray84 = functionEvaluationException83.getArguments();
        java.lang.Throwable[] throwableArray85 = functionEvaluationException83.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException86 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray80, (java.lang.Throwable) functionEvaluationException83);
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException83);
        java.lang.String str88 = convergenceException87.toString();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[35.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[35.0]");
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = 35" + "'", str88, "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = 35");
    }

    @Test
    public void test12451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12451");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double37 = laguerreSolver7.getResult();
        laguerreSolver7.setFunctionValueAccuracy(0.6679493967289549d);
        laguerreSolver7.setFunctionValueAccuracy((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test12452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12452");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.tan();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex14.log();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex13.subtract(complex16);
        org.apache.commons.math.complex.Complex complex20 = complex13.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.tanh();
        double double30 = complex27.getReal();
        org.apache.commons.math.complex.Complex complex31 = complex27.tan();
        org.apache.commons.math.complex.Complex complex32 = complex21.add(complex27);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.557407724654902d + "'", double30 == 1.557407724654902d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test12453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12453");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double12 = laguerreSolver7.getAbsoluteAccuracy();
        double double13 = laguerreSolver7.getRelativeAccuracy();
        double double16 = laguerreSolver7.solve(1.0E-14d, (double) (-1.0f));
        double double17 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double19 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-14d + "'", double13 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
    }

    @Test
    public void test12454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12454");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction88 = laguerreSolver7.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction89 = polynomialFunction88.polynomialDerivative();
        double[] doubleArray90 = polynomialFunction88.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction91 = polynomialFunction88.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction88);
        org.junit.Assert.assertNotNull(polynomialFunction89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction91);
    }

    @Test
    public void test12455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12455");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        double double10 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((-1.0d));
        laguerreSolver7.resetAbsoluteAccuracy();
        double double15 = laguerreSolver7.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver7.getPolynomialFunction();
        double double18 = polynomialFunction16.value((double) (short) 1);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        double[] doubleArray20 = polynomialFunction16.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test12456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12456");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.0d);
        double double14 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
    }

    @Test
    public void test12457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12457");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        int int33 = laguerreSolver7.getIterationCount();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        double double39 = laguerreSolver7.solve((double) 35, (double) 0, (double) 0.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
    }

    @Test
    public void test12458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12458");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double6 = polynomialFunction4.value((double) 1);
        double[] doubleArray7 = polynomialFunction4.getCoefficients();
        double double9 = polynomialFunction4.value((double) 10);
        double double11 = polynomialFunction4.value((-1.0d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction4.derivative();
        int int15 = polynomialFunction4.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test12459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12459");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        double double12 = laguerreSolver7.solve((double) ' ', (double) (-1L));
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        int int19 = laguerreSolver7.getMaximalIterationCount();
        double double23 = laguerreSolver7.solve((double) 97, 0.0d, (double) (short) 100);
        double double26 = laguerreSolver7.solve((double) '#', (double) 52);
        double double27 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setRelativeAccuracy(0.5669767943827975d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 97.0d + "'", double23 == 97.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-14d + "'", double27 == 1.0E-14d);
    }

    @Test
    public void test12460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12460");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setAbsoluteAccuracy(0.0d);
        laguerreSolver7.setRelativeAccuracy(0.7853981633974483d);
        laguerreSolver7.resetFunctionValueAccuracy();
        int int92 = laguerreSolver7.getMaximalIterationCount();
        double double93 = laguerreSolver7.getRelativeAccuracy();
        double double94 = laguerreSolver7.getResult();
        double double95 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction97 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray98 = polynomialFunction97.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.7853981633974483d + "'", double93 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0E-15d + "'", double95 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction97);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[0.0]");
    }

    @Test
    public void test12461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12461");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        java.lang.Object[] objArray14 = new java.lang.Object[] { convergenceException8, complex10, true };
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray16, throwable17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray14, (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray14);
        java.lang.Throwable[] throwableArray22 = maxIterationsExceededException21.getSuppressed();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) mathException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(15742.0d, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException25);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test12462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12462");
        double[] doubleArray4 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction5.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        laguerreSolver9.setAbsoluteAccuracy((double) '#');
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.atan();
        org.apache.commons.math.complex.Complex complex19 = complex16.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.log();
        org.apache.commons.math.complex.Complex complex25 = complex16.multiply(complex21);
        org.apache.commons.math.complex.Complex complex26 = complex21.sin();
        org.apache.commons.math.complex.Complex complex27 = complex21.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex21, complex28 };
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver9.solveAll(complexArray29, complex31);
        laguerreSolver9.resetRelativeAccuracy();
        double double37 = laguerreSolver9.solve((double) (short) -1, 10.0d);
        double double38 = laguerreSolver9.getAbsoluteAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        double[] doubleArray42 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        double double45 = polynomialFunction43.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = polynomialFunction43.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver47 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction46);
        laguerreSolver47.setAbsoluteAccuracy((double) '#');
        laguerreSolver47.resetAbsoluteAccuracy();
        laguerreSolver47.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex58.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.atan();
        org.apache.commons.math.complex.Complex complex62 = complex59.log();
        org.apache.commons.math.complex.Complex complex63 = complex54.multiply(complex59);
        org.apache.commons.math.complex.Complex complex64 = complex59.sin();
        org.apache.commons.math.complex.Complex complex65 = complex59.tan();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex59, complex66 };
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray71 = laguerreSolver47.solveAll(complexArray67, complex69);
        laguerreSolver47.setRelativeAccuracy((double) 1.0f);
        laguerreSolver47.resetAbsoluteAccuracy();
        int int75 = laguerreSolver47.getIterationCount();
        double double76 = laguerreSolver47.getFunctionValueAccuracy();
        double[] doubleArray79 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction80 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction81 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction82 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver47.solveAll(doubleArray79, (double) (-1.0f));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction85 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray87 = laguerreSolver9.solveAll(doubleArray79, (double) (short) 10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "");
        java.lang.Object[] objArray93 = functionEvaluationException92.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException92);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException94);
        org.apache.commons.math.ConvergenceException convergenceException96 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded", (java.lang.Object[]) complexArray87, (java.lang.Throwable) convergenceException94);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) convergenceException94);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0E-6d + "'", double38 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 52.0d + "'", double76 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
    }

    @Test
    public void test12463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12463");
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        java.lang.Object[] objArray23 = new java.lang.Object[] { convergenceException17, complex19, true };
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray25, throwable26);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", objArray23);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray23);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray32, throwable33);
        java.lang.Object[] objArray35 = convergenceException34.getArguments();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "hi!", objArray23, (java.lang.Throwable) convergenceException34);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("hi!", objArray23, throwable38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex45.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.atan();
        org.apache.commons.math.complex.Complex complex49 = complex46.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex46.sin();
        org.apache.commons.math.complex.Complex complex52 = complex46.tan();
        java.lang.Object[] objArray53 = new java.lang.Object[] { throwable38, complex52 };
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.atan();
        java.lang.Object[] objArray65 = new java.lang.Object[] { convergenceException59, complex61, true };
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray67, throwable68);
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray65, (java.lang.Throwable) convergenceException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("", objArray65);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException72 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, (java.lang.Throwable) maxIterationsExceededException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException73);
        java.lang.String str75 = mathException74.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray53, (java.lang.Throwable) mathException74);
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, (java.lang.Throwable) convergenceException79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray53, (java.lang.Throwable) convergenceException79);
        java.lang.Object[] objArray87 = new java.lang.Object[] {};
        java.lang.Throwable throwable88 = null;
        org.apache.commons.math.ConvergenceException convergenceException89 = new org.apache.commons.math.ConvergenceException("", objArray87, throwable88);
        java.lang.Object[] objArray90 = convergenceException89.getArguments();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("hi!", objArray90);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException92 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray90);
        org.apache.commons.math.ConvergenceException convergenceException93 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "", objArray53, (java.lang.Throwable) convergenceException93);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException95 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray53);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException96 = new org.apache.commons.math.MaxIterationsExceededException(97, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", objArray53);
        org.apache.commons.math.ConvergenceException convergenceException97 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.MaxIterationsExceededException: ", objArray53);
        org.apache.commons.math.MathException mathException98 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Maximal number of iterations (-1) exceeded", objArray53);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
    }

    @Test
    public void test12464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12464");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex7.exp();
        org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.asin();
        org.apache.commons.math.complex.Complex complex12 = complex9.asin();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math.complex.Complex complex28 = complex12.multiply(complex25);
        double double29 = complex25.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test12465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12465");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetFunctionValueAccuracy();
        laguerreSolver7.setFunctionValueAccuracy(100.0d);
        double double19 = laguerreSolver7.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test12466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12466");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex7.tan();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = complex7.atan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex7.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex26.multiply(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = complex22.multiply(complex27);
        org.apache.commons.math.complex.Complex complex32 = complex27.sin();
        boolean boolean33 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex32.tan();
        org.apache.commons.math.complex.Complex complex35 = complex19.subtract(complex32);
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) '4', 0.0d);
        org.apache.commons.math.complex.Complex complex39 = complex38.exp();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex41.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex41.tan();
        org.apache.commons.math.complex.Complex complex45 = complex40.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex49.add(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex57.tan();
        org.apache.commons.math.complex.Complex complex61 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex66 = complex64.multiply(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex65.tan();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex68.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex69.atan();
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex73 = complex65.subtract(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex61.add(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex55.add(complex61);
        org.apache.commons.math.complex.Complex complex76 = complex44.divide(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex76.log();
        double[] doubleArray80 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction81 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray80);
        double double83 = polynomialFunction81.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction84 = polynomialFunction81.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver85 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction84);
        laguerreSolver85.setAbsoluteAccuracy((double) '#');
        laguerreSolver85.resetAbsoluteAccuracy();
        laguerreSolver85.resetRelativeAccuracy();
        laguerreSolver85.setRelativeAccuracy(0.0d);
        boolean boolean92 = complex76.equals((java.lang.Object) 0.0d);
        org.apache.commons.math.complex.Complex complex93 = complex76.asin();
        boolean boolean94 = complex93.isInfinite();
        org.apache.commons.math.complex.Complex complex95 = complex93.cosh();
        org.apache.commons.math.complex.Complex complex96 = complex38.divide(complex95);
        org.apache.commons.math.complex.Complex complex97 = complex19.divide(complex95);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction84);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test12467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12467");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 100);
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (-1.0f));
        int int40 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
    }

    @Test
    public void test12468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12468");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        org.apache.commons.math.complex.Complex complex12 = complex6.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex6.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex6.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test12469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12469");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.tan();
        org.apache.commons.math.complex.Complex complex19 = complex16.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex16.divide(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex24.atan();
        org.apache.commons.math.complex.Complex complex26 = complex11.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex11.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test12470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12470");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getAbsoluteAccuracy();
        double double9 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setAbsoluteAccuracy(35.0d);
        double double12 = laguerreSolver7.getFunctionValueAccuracy();
        double double13 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetFunctionValueAccuracy();
        double double15 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setRelativeAccuracy(Double.NaN);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }

    @Test
    public void test12471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12471");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex37.tan();
        org.apache.commons.math.complex.Complex complex41 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.log();
        org.apache.commons.math.complex.Complex complex46 = complex44.exp();
        org.apache.commons.math.complex.Complex complex47 = complex41.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.asin();
        org.apache.commons.math.complex.Complex complex49 = complex46.asin();
        org.apache.commons.math.complex.Complex complex50 = complex4.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.conjugate();
        double[] doubleArray54 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray54);
        double double57 = polynomialFunction55.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = polynomialFunction55.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver59 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction58);
        laguerreSolver59.setAbsoluteAccuracy((double) '#');
        laguerreSolver59.resetAbsoluteAccuracy();
        double double66 = laguerreSolver59.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction67 = laguerreSolver59.getPolynomialFunction();
        laguerreSolver59.resetAbsoluteAccuracy();
        laguerreSolver59.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver59.setMaximalIterationCount(0);
        int int73 = laguerreSolver59.getMaximalIterationCount();
        laguerreSolver59.setMaximalIterationCount(97);
        boolean boolean76 = complex51.equals((java.lang.Object) laguerreSolver59);
        laguerreSolver59.setRelativeAccuracy(2.0d);
        double double82 = laguerreSolver59.solve(2.4785912770698393d, 3.9518054509189455d, (-0.8394684411440628d));
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction58);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction67);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2.4785912770698393d + "'", double82 == 2.4785912770698393d);
    }

    @Test
    public void test12472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12472");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(2.5091784786580567d);
    }

    @Test
    public void test12473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12473");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex12.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.atan();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test12474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12474");
        double[] doubleArray10 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        double double13 = polynomialFunction11.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction11.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        laguerreSolver15.setAbsoluteAccuracy((double) '#');
        laguerreSolver15.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver15.getPolynomialFunction();
        double double22 = laguerreSolver15.solve(0.0d, (double) 1.0f);
        double[] doubleArray25 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = polynomialFunction26.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver30 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction29);
        laguerreSolver30.setAbsoluteAccuracy((double) '#');
        laguerreSolver30.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = laguerreSolver30.getPolynomialFunction();
        double[] doubleArray37 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        double double40 = polynomialFunction38.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = polynomialFunction38.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction41);
        laguerreSolver42.setAbsoluteAccuracy((double) '#');
        laguerreSolver42.resetAbsoluteAccuracy();
        laguerreSolver42.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex48.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.atan();
        org.apache.commons.math.complex.Complex complex52 = complex49.log();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex55 = complex53.multiply(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex54.atan();
        org.apache.commons.math.complex.Complex complex57 = complex54.log();
        org.apache.commons.math.complex.Complex complex58 = complex49.multiply(complex54);
        org.apache.commons.math.complex.Complex complex59 = complex54.sin();
        org.apache.commons.math.complex.Complex complex60 = complex54.tan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex54, complex61 };
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver42.solveAll(complexArray62, complex64);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex71.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex72.atan();
        org.apache.commons.math.complex.Complex complex75 = complex72.log();
        org.apache.commons.math.complex.Complex complex76 = complex70.pow(complex72);
        org.apache.commons.math.complex.Complex complex77 = laguerreSolver30.solve(complexArray62, complex70);
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex78.multiply(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex78.tan();
        org.apache.commons.math.complex.Complex complex82 = complex81.asin();
        org.apache.commons.math.complex.Complex[] complexArray83 = laguerreSolver15.solveAll(complexArray62, complex81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException85 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException86 = new org.apache.commons.math.MaxIterationsExceededException(2, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException87 = new org.apache.commons.math.MaxIterationsExceededException(20, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62);
        java.lang.String str88 = maxIterationsExceededException87.getPattern();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction29);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction41);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str88, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test12475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12475");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1.0f, (double) 0.0f);
    }

    @Test
    public void test12476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12476");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.resetMaximalIterationCount();
        double double17 = laguerreSolver7.solve((double) (-1L), (double) (byte) 1, (double) 'a');
        laguerreSolver7.resetFunctionValueAccuracy();
        double double22 = laguerreSolver7.solve((double) 1L, (double) (-1), 1.1752011936438014d);
        laguerreSolver7.resetRelativeAccuracy();
        int int24 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy(0.9173172759781081d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test12477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12477");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex4.multiply(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.atan();
        org.apache.commons.math.complex.Complex complex8 = complex5.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        double double11 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex10.sin();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        boolean boolean15 = complex13.isInfinite();
        double double16 = complex13.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.0d) + "'", double16 == (-0.0d));
    }

    @Test
    public void test12478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12478");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        laguerreSolver7.setFunctionValueAccuracy(Double.NaN);
        laguerreSolver7.setRelativeAccuracy((double) (short) 1);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        double double20 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) (short) 0);
        double double23 = laguerreSolver7.getAbsoluteAccuracy();
        double double24 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.setMaximalIterationCount((int) (short) 10);
        double double29 = laguerreSolver7.solve(0.0d, (double) (-1));
        laguerreSolver7.setFunctionValueAccuracy((double) 0.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setAbsoluteAccuracy((double) 35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
    }

    @Test
    public void test12479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12479");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        boolean boolean7 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex5.subtract(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.tan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex25.atan();
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex17.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex34.atan();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex37.log();
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex41 = complex39.multiply(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex34.subtract(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex30.multiply(complex41);
        org.apache.commons.math.complex.Complex complex44 = complex11.subtract(complex41);
        boolean boolean45 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = new org.apache.commons.math.complex.Complex((double) 52, 1.557407724654902d);
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.apache.commons.math.complex.Complex complex50 = complex41.add(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test12480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12480");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        double double32 = laguerreSolver7.getRelativeAccuracy();
        double double33 = laguerreSolver7.getResult();
        double double34 = laguerreSolver7.getRelativeAccuracy();
        laguerreSolver7.resetRelativeAccuracy();
        int int36 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-14d + "'", double34 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test12481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12481");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Maximal number of iterations ({0}) exceeded");
    }

    @Test
    public void test12482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12482");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        double double85 = laguerreSolver7.solve((double) 1L, 35.0d);
        double double86 = laguerreSolver7.getRelativeAccuracy();
        int int87 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setAbsoluteAccuracy((double) 10);
        laguerreSolver7.setAbsoluteAccuracy((double) 35);
        int int92 = laguerreSolver7.getMaximalIterationCount();
        double double93 = laguerreSolver7.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0E-14d + "'", double86 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 35.0d + "'", double93 == 35.0d);
    }

    @Test
    public void test12483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12483");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double14 = laguerreSolver7.solve(0.0d, (double) 1.0f);
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.setRelativeAccuracy((double) (byte) 0);
        laguerreSolver7.setMaximalIterationCount((int) (short) 0);
        laguerreSolver7.setRelativeAccuracy((double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test12484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12484");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int34 = laguerreSolver7.getIterationCount();
        laguerreSolver7.setFunctionValueAccuracy((double) 10L);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver7.getPolynomialFunction();
        double[] doubleArray40 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction41.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        laguerreSolver45.setAbsoluteAccuracy((double) '#');
        laguerreSolver45.resetAbsoluteAccuracy();
        laguerreSolver45.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.atan();
        org.apache.commons.math.complex.Complex complex55 = complex52.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = complex57.log();
        org.apache.commons.math.complex.Complex complex61 = complex52.multiply(complex57);
        org.apache.commons.math.complex.Complex complex62 = complex57.sin();
        org.apache.commons.math.complex.Complex complex63 = complex57.tan();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex57, complex64 };
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = laguerreSolver45.solveAll(complexArray65, complex67);
        laguerreSolver45.setRelativeAccuracy((double) 1.0f);
        laguerreSolver45.resetFunctionValueAccuracy();
        laguerreSolver45.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction74 = laguerreSolver45.getPolynomialFunction();
        double[] doubleArray75 = polynomialFunction74.getCoefficients();
        double[] doubleArray76 = polynomialFunction74.getCoefficients();
        double[] doubleArray77 = polynomialFunction74.getCoefficients();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray79 = laguerreSolver7.solveAll(doubleArray77, (-2.356194490192345d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(polynomialFunction74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0]");
    }

    @Test
    public void test12485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12485");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.setFunctionValueAccuracy((double) 0);
        laguerreSolver7.setRelativeAccuracy((double) 1.0f);
        int int16 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        laguerreSolver7.resetRelativeAccuracy();
        int int20 = laguerreSolver7.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test12486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12486");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = complex13.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex14.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.atan();
        org.apache.commons.math.complex.Complex complex22 = complex19.log();
        org.apache.commons.math.complex.Complex complex23 = complex14.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = complex19.sin();
        org.apache.commons.math.complex.Complex complex25 = complex19.tan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex19, complex26 };
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver7.solveAll(complexArray27, complex29);
        laguerreSolver7.resetRelativeAccuracy();
        double double33 = laguerreSolver7.getAbsoluteAccuracy();
        double[] doubleArray36 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = polynomialFunction37.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver41 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction40);
        laguerreSolver41.setAbsoluteAccuracy((double) '#');
        laguerreSolver41.resetAbsoluteAccuracy();
        laguerreSolver41.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex49 = complex47.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex48.log();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex53.sin();
        org.apache.commons.math.complex.Complex complex59 = complex53.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex53, complex60 };
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex62.log();
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray65 = laguerreSolver41.solveAll(complexArray61, complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex66.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex70.log();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex77 = complex75.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex73.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex77.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex69.subtract(complex80);
        org.apache.commons.math.complex.Complex[] complexArray82 = laguerreSolver7.solveAll(complexArray61, complex80);
        int int83 = laguerreSolver7.getMaximalIterationCount();
        double double84 = laguerreSolver7.getResult();
        double double88 = laguerreSolver7.solve((double) 0.0f, (double) (byte) 0, (double) (-1));
        double double89 = laguerreSolver7.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0E-14d + "'", double89 == 1.0E-14d);
    }

    @Test
    public void test12487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12487");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex11.tan();
        org.apache.commons.math.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex20 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.tan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex19.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex15.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex9.add(complex15);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex29.tan();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex32.tan();
        org.apache.commons.math.complex.Complex complex36 = complex35.asin();
        double double37 = complex36.getReal();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex41.add(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.tanh();
        org.apache.commons.math.complex.Complex complex50 = complex36.pow(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.tan();
        boolean boolean52 = complex51.isInfinite();
        org.apache.commons.math.complex.Complex complex53 = complex29.add(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test12488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12488");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (byte) 10);
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction6.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction12);
        laguerreSolver13.setRelativeAccuracy((-1.0d));
        double double16 = laguerreSolver13.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test12489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12489");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        double double14 = laguerreSolver7.solve((double) 100, 10.0d, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver7.getPolynomialFunction();
        laguerreSolver7.resetAbsoluteAccuracy();
        laguerreSolver7.setAbsoluteAccuracy((double) 10.0f);
        laguerreSolver7.setMaximalIterationCount(0);
        int int21 = laguerreSolver7.getMaximalIterationCount();
        laguerreSolver7.setMaximalIterationCount(1);
        laguerreSolver7.setAbsoluteAccuracy(1.4142135623730951d);
        laguerreSolver7.setRelativeAccuracy(0.5574077246549021d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test12490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12490");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.atan();
        org.apache.commons.math.complex.Complex complex2 = complex1.atan();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.atan();
        org.apache.commons.math.complex.Complex complex13 = complex10.log();
        org.apache.commons.math.complex.Complex complex14 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex10.cos();
        org.apache.commons.math.complex.Complex complex16 = complex10.atan();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.negate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        boolean boolean23 = complex20.isNaN();
        double double24 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex18.subtract(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.negate();
        org.apache.commons.math.complex.Complex complex28 = complex25.tan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex36 = complex34.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.tan();
        org.apache.commons.math.complex.Complex complex38 = complex31.pow(complex35);
        double double39 = complex35.getReal();
        org.apache.commons.math.complex.Complex complex40 = complex35.sin();
        org.apache.commons.math.complex.Complex complex41 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex35.log();
        org.apache.commons.math.complex.Complex complex43 = complex25.add(complex35);
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test12491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12491");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = complex0.multiply(complex1);
        org.apache.commons.math.complex.Complex complex3 = complex1.atan();
        org.apache.commons.math.complex.Complex complex4 = complex1.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.atan();
        org.apache.commons.math.complex.Complex complex9 = complex6.log();
        org.apache.commons.math.complex.Complex complex10 = complex1.multiply(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex6.sin();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        org.apache.commons.math.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.tan();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex22.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex18.add(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.tan();
        org.apache.commons.math.complex.Complex complex34 = complex11.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.asin();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex36.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex42 = complex40.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.atan();
        org.apache.commons.math.complex.Complex complex44 = complex41.log();
        org.apache.commons.math.complex.Complex complex45 = complex39.pow(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.apache.commons.math.complex.Complex complex51 = complex46.add(complex50);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex52.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.atan();
        org.apache.commons.math.complex.Complex complex56 = complex53.log();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.atan();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = complex53.multiply(complex58);
        org.apache.commons.math.complex.Complex complex63 = complex50.multiply(complex58);
        org.apache.commons.math.complex.Complex complex64 = complex63.sinh();
        boolean boolean65 = complex64.isNaN();
        org.apache.commons.math.complex.Complex complex66 = complex64.acos();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex68 = complex67.log();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex71 = complex69.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex72.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex70.add(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex77 = complex74.tan();
        org.apache.commons.math.complex.Complex complex78 = complex77.sin();
        org.apache.commons.math.complex.Complex complex79 = complex77.log();
        org.apache.commons.math.complex.Complex complex80 = complex77.tanh();
        org.apache.commons.math.complex.Complex complex81 = complex77.sqrt1z();
        org.apache.commons.math.complex.Complex complex82 = complex64.divide(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex82.asin();
        org.apache.commons.math.complex.Complex complex84 = complex35.add(complex82);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
    }

    @Test
    public void test12492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12492");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.log();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex7 = complex5.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.apache.commons.math.complex.Complex complex9 = complex2.pow(complex6);
        org.apache.commons.math.complex.Complex complex10 = complex6.tan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex15.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex19.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math.complex.Complex complex23 = complex20.log();
        org.apache.commons.math.complex.Complex complex24 = complex18.pow(complex20);
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex14.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex31.atan();
        org.apache.commons.math.complex.Complex complex34 = complex33.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.atan();
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex42.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.apache.commons.math.complex.Complex complex46 = complex43.log();
        org.apache.commons.math.complex.Complex complex47 = complex38.multiply(complex43);
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        org.apache.commons.math.complex.Complex complex49 = complex43.acos();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex43.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex36.add(complex43);
        org.apache.commons.math.complex.Complex complex55 = complex26.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex10.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.cosh();
        double double58 = complex57.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test12493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12493");
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        java.lang.Object[] objArray16 = new java.lang.Object[] { complex15 };
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex20.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        java.lang.Object[] objArray25 = new java.lang.Object[] { convergenceException19, complex21, true };
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray27, throwable28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.ConvergenceException: hi!", objArray16, (java.lang.Throwable) mathException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "", objArray16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(4.0d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = functionEvaluationException33.getPattern();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test12494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12494");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver7.setAbsoluteAccuracy((double) '#');
        laguerreSolver7.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver7.getPolynomialFunction();
        double double12 = laguerreSolver7.getRelativeAccuracy();
        double[] doubleArray15 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction16.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy((double) '#');
        laguerreSolver20.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver20.getPolynomialFunction();
        double[] doubleArray27 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = polynomialFunction28.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        laguerreSolver32.setAbsoluteAccuracy((double) '#');
        laguerreSolver32.resetAbsoluteAccuracy();
        laguerreSolver32.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex40 = complex38.multiply(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.apache.commons.math.complex.Complex complex42 = complex39.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex45 = complex43.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math.complex.Complex complex47 = complex44.log();
        org.apache.commons.math.complex.Complex complex48 = complex39.multiply(complex44);
        org.apache.commons.math.complex.Complex complex49 = complex44.sin();
        org.apache.commons.math.complex.Complex complex50 = complex44.tan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex44, complex51 };
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex54 = complex53.log();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver32.solveAll(complexArray52, complex54);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex59 = complex57.multiply(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex63 = complex61.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex62.atan();
        org.apache.commons.math.complex.Complex complex65 = complex62.log();
        org.apache.commons.math.complex.Complex complex66 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex67 = laguerreSolver20.solve(complexArray52, complex60);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex70 = complex68.multiply(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex73 = complex72.log();
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex76 = complex74.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex79 = complex77.multiply(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex75.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex complex83 = complex71.subtract(complex82);
        org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver7.solveAll(complexArray52, complex83);
        double double85 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) (-1L));
        double double90 = laguerreSolver7.solve(Double.NaN, 1.0d);
        laguerreSolver7.resetMaximalIterationCount();
        double double92 = laguerreSolver7.getAbsoluteAccuracy();
        laguerreSolver7.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0E-15d + "'", double85 == 1.0E-15d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0E-6d + "'", double92 == 1.0E-6d);
    }

    @Test
    public void test12495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12495");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex3 = complex1.multiply(complex2);
        org.apache.commons.math.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math.complex.Complex complex5 = complex0.subtract(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = complex8.multiply(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex11.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex17.tan();
        org.apache.commons.math.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex26 = complex24.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex25.tan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex21.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.add(complex21);
        org.apache.commons.math.complex.Complex complex36 = complex4.divide(complex35);
        boolean boolean37 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = complex4.negate();
        org.apache.commons.math.complex.Complex complex39 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = complex39.conjugate();
        java.lang.Class<?> wildcardClass42 = complex39.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test12496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12496");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "");
        java.lang.Throwable[] throwableArray6 = functionEvaluationException5.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex12.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.atan();
        java.lang.Object[] objArray17 = new java.lang.Object[] { convergenceException11, complex13, true };
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray19, throwable20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "hi!", objArray17);
        int int25 = maxIterationsExceededException24.getMaxIterations();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) maxIterationsExceededException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) mathException26);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray35, throwable36);
        java.lang.Object[] objArray38 = convergenceException37.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", objArray38, (java.lang.Throwable) maxIterationsExceededException41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.MathException: ", (java.lang.Throwable) functionEvaluationException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(1.1752011936438014d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) mathException44);
        double double46 = functionEvaluationException45.getArgument();
        double double47 = functionEvaluationException45.getArgument();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.1752011936438014d + "'", double46 == 1.1752011936438014d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.1752011936438014d + "'", double47 == 1.1752011936438014d);
    }

    @Test
    public void test12497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12497");
        double[] doubleArray6 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver11.setAbsoluteAccuracy((double) '#');
        laguerreSolver11.resetAbsoluteAccuracy();
        laguerreSolver11.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex18.log();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.atan();
        org.apache.commons.math.complex.Complex complex26 = complex23.log();
        org.apache.commons.math.complex.Complex complex27 = complex18.multiply(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex23.sin();
        org.apache.commons.math.complex.Complex complex29 = complex23.tan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex23, complex30 };
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex33 = complex32.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver11.solveAll(complexArray31, complex33);
        laguerreSolver11.resetRelativeAccuracy();
        double double37 = laguerreSolver11.getAbsoluteAccuracy();
        double[] doubleArray40 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction41.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        laguerreSolver45.setAbsoluteAccuracy((double) '#');
        laguerreSolver45.resetAbsoluteAccuracy();
        laguerreSolver45.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex53 = complex51.multiply(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex52.atan();
        org.apache.commons.math.complex.Complex complex55 = complex52.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = complex56.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex57.atan();
        org.apache.commons.math.complex.Complex complex60 = complex57.log();
        org.apache.commons.math.complex.Complex complex61 = complex52.multiply(complex57);
        org.apache.commons.math.complex.Complex complex62 = complex57.sin();
        org.apache.commons.math.complex.Complex complex63 = complex57.tan();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex57, complex64 };
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex67 = complex66.log();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray69 = laguerreSolver45.solveAll(complexArray65, complex67);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex70.multiply(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex74.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex78 = complex76.multiply(complex77);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex81 = complex79.multiply(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex77.add(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex73.subtract(complex84);
        org.apache.commons.math.complex.Complex[] complexArray86 = laguerreSolver11.solveAll(complexArray65, complex84);
        java.lang.Object[] objArray88 = new java.lang.Object[] {};
        java.lang.Throwable throwable89 = null;
        org.apache.commons.math.ConvergenceException convergenceException90 = new org.apache.commons.math.ConvergenceException("", objArray88, throwable89);
        java.lang.Object[] objArray91 = convergenceException90.getArguments();
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException((java.lang.Throwable) convergenceException90);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray65, (java.lang.Throwable) mathException92);
        java.lang.Object[] objArray94 = mathException93.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException95 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException", objArray94);
        java.lang.Object[] objArray96 = convergenceException95.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException97 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "", objArray96);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0E-6d + "'", double37 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertNotNull(objArray96);
    }

    @Test
    public void test12498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12498");
        double[] doubleArray5 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver10.setAbsoluteAccuracy((double) '#');
        laguerreSolver10.resetAbsoluteAccuracy();
        laguerreSolver10.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex18 = complex16.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.atan();
        org.apache.commons.math.complex.Complex complex20 = complex17.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex21.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex22.log();
        org.apache.commons.math.complex.Complex complex26 = complex17.multiply(complex22);
        org.apache.commons.math.complex.Complex complex27 = complex22.sin();
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex22, complex29 };
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray34 = laguerreSolver10.solveAll(complexArray30, complex32);
        double double35 = laguerreSolver10.getRelativeAccuracy();
        int int36 = laguerreSolver10.getIterationCount();
        double[] doubleArray39 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray39);
        double double42 = polynomialFunction40.value((double) 10.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = polynomialFunction40.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver44 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction43);
        laguerreSolver44.setAbsoluteAccuracy((double) '#');
        laguerreSolver44.resetAbsoluteAccuracy();
        laguerreSolver44.setFunctionValueAccuracy((double) '4');
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex52 = complex50.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.atan();
        org.apache.commons.math.complex.Complex complex54 = complex51.log();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex56.atan();
        org.apache.commons.math.complex.Complex complex59 = complex56.log();
        org.apache.commons.math.complex.Complex complex60 = complex51.multiply(complex56);
        org.apache.commons.math.complex.Complex complex61 = complex56.sin();
        org.apache.commons.math.complex.Complex complex62 = complex56.tan();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex56, complex63 };
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver44.solveAll(complexArray64, complex66);
        laguerreSolver44.setRelativeAccuracy((double) 1.0f);
        laguerreSolver44.resetFunctionValueAccuracy();
        double double75 = laguerreSolver44.solve(0.0d, (double) ' ', 35.0d);
        laguerreSolver44.setFunctionValueAccuracy((double) 1L);
        double[] doubleArray80 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction81 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray80);
        double double83 = polynomialFunction81.value((double) 10.0f);
        int int84 = polynomialFunction81.degree();
        double[] doubleArray85 = polynomialFunction81.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction86 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray88 = laguerreSolver44.solveAll(doubleArray85, (double) 100.0f);
        org.apache.commons.math.complex.Complex[] complexArray90 = laguerreSolver10.solveAll(doubleArray85, Double.NEGATIVE_INFINITY);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray90);
        org.apache.commons.math.ConvergenceException convergenceException92 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException91);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException91);
        org.apache.commons.math.ConvergenceException convergenceException94 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Maximal number of iterations (1) exceeded", (java.lang.Throwable) convergenceException91);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E-14d + "'", double35 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test12499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12499");
        double[] doubleArray2 = new double[] { 1, (byte) 0 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = polynomialFunction4.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = polynomialFunction4.polynomialDerivative();
        int int7 = polynomialFunction6.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 0.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(univariateRealFunction5);
        org.junit.Assert.assertNotNull(polynomialFunction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test12500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12500");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "hi!", (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException7);
        java.lang.Object[] objArray9 = convergenceException8.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.5403023058681398d, (java.lang.Throwable) convergenceException10);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }
}


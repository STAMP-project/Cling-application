import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime7 = property4.roundCeilingCopy();
        long long8 = property4.remainder();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.lang.String str15 = locale11.getDisplayLanguage(locale13);
        org.joda.time.DateTime dateTime16 = property4.setCopy("2239", locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withMonthOfYear(21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 259200000L + "'", long8 == 259200000L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572897366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        java.util.Date date13 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date13);
        boolean boolean15 = date5.before(date13);
        int int16 = date13.getTimezoneOffset();
        java.util.Date date23 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean24 = date13.after(date23);
        int int25 = date13.getMonth();
        java.lang.String str26 = date13.toLocaleString();
        date13.setMinutes((int) (short) 1);
        java.lang.String str29 = date13.toGMTString();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 03 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc624\ud6c4 11:17:00" + "'", str26, "\uc624\ud6c4 11:17:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3 Mar 1900 23:01:00 GMT" + "'", str29, "3 Mar 1900 23:01:00 GMT");
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.lang.String str48 = property6.toString();
        org.joda.time.DateTimeField dateTimeField49 = property6.getField();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(1970L);
        int int52 = property6.compareTo((org.joda.time.ReadablePartial) localTime51);
        java.lang.String str53 = property6.getAsShortText();
        org.joda.time.DateTimeField dateTimeField54 = property6.getField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[millisOfSecond]" + "'", str48, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "97" + "'", str53, "97");
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology2 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology11.getZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.Chronology chronology25 = chronology11.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = chronology2.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField27 = chronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.lang.String str34 = dateTimeZone28.getNameKey((long) 33342);
        java.lang.String str35 = dateTimeZone28.getID();
        org.joda.time.Chronology chronology36 = chronology2.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField37 = chronology2.halfdays();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        int[] intArray8 = localTime5.getValues();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        int int11 = dateTime10.getEra();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes(1);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTime.Property property16 = dateTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = dateTime14.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int19 = localTime17.indexOf(dateTimeFieldType18);
        boolean boolean20 = localTime5.isSupported(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0, 97]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.DateTime dateTime15 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime16 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(139680);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(10L);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMinutes(1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.DateTime dateTime30 = property29.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime30.toString(dateTimeFormatter31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean34 = dateTime30.isSupported(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType33.getDurationType();
        int int36 = dateTime22.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime38 = dateTime22.withMillisOfDay(1967);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime43 = dateTime40.minusDays((int) 'a');
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int46 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.Chronology chronology54 = yearMonthDay53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology54.getZone();
        org.joda.time.DurationField durationField57 = chronology54.months();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType45.getField(chronology54);
        java.lang.String str59 = dateTimeFieldType45.getName();
        boolean boolean60 = dateTime22.isSupported(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType45.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = dateTime18.withField(dateTimeFieldType45, 21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str32, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hourOfHalfday" + "'", str59, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(durationFieldType61);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.Chronology chronology7 = dateTimeFormatter4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTimeFormatter4.parseDateTime("\uc6d4");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property6 = dateTime5.monthOfYear();
        boolean boolean7 = localTime0.equals((java.lang.Object) dateTime5);
        int int8 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property15 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime17 = property15.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime17.minusYears((int) (byte) 1);
        boolean boolean24 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime26 = dateTime17.minusMonths(6);
        java.lang.String str27 = dateTime26.toString();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-07-01T00:00:00.000Z" + "'", str27, "1969-07-01T00:00:00.000Z");
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology2 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = chronology2.halfdays();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = chronology2.get(readablePeriod7, (long) 680);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("millis");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 100, chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean9 = localTime7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = localTime7.plusMillis(52);
        org.joda.time.LocalTime localTime13 = localTime7.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime13.withPeriodAdded(readablePeriod14, 292278993);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime18 = localTime13.plus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime20.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime20.plus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime20.minus(17L);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property30 = dateTime20.property(dateTimeFieldType29);
        int int31 = localTime13.get(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        boolean boolean33 = languageRange1.equals((java.lang.Object) dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "millis" + "'", str2, "millis");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "millis" + "'", str3, "millis");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "millis" + "'", str4, "millis");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        int int4 = calendar0.getLeastMaximum((int) (byte) 1);
        calendar0.set((int) (byte) 1, 56, 0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths((int) ' ');
        boolean boolean20 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime13.minusSeconds(17);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.plus(readableDuration24);
        boolean boolean26 = calendar0.after((java.lang.Object) dateTime23);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = calendar0.getActualMinimum(50400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50400000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=56,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292269054 + "'", int4 == 292269054);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("22:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"22:00:00.100\" is malformed at \":00:00.100\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        int int16 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime localTime18 = localTime5.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean20 = localTime5.isSupported(dateTimeFieldType19);
        org.joda.time.LocalTime.Property property21 = localTime5.millisOfDay();
        boolean boolean22 = property21.isLeap();
        org.joda.time.LocalTime localTime24 = property21.addCopy((-63035999903L));
        org.joda.time.LocalTime localTime26 = property21.setCopy(97);
        org.joda.time.DateTime dateTime27 = localTime26.toDateTimeToday();
        int int28 = localTime26.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfDay((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime5.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime5.withMillisOfDay(7);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale22 = new java.util.Locale("UTC", "Italie");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = dateTimeField36.getAsText(32770, locale38);
        java.lang.String str42 = locale28.getDisplayLanguage(locale38);
        java.lang.String str43 = dateTimeZone24.getShortName((long) 6, locale38);
        java.lang.String str44 = locale22.getDisplayVariant(locale38);
        java.util.Locale.Builder builder45 = builder19.setLocale(locale38);
        java.util.Calendar calendar46 = dateTime5.toCalendar(locale38);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays(0);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.minus(readableDuration52);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        boolean boolean55 = locale54.hasExtensions();
        java.util.Calendar calendar56 = dateTime51.toCalendar(locale54);
        boolean boolean57 = calendar46.before((java.lang.Object) dateTime51);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86340000 + "'", int10 == 86340000);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals(locale22.toString(), "utc_ITALIE");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str40, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32770" + "'", str41, "32770");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str42, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-60000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes(1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        int int44 = localTime42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime54 = dateTime36.withFields((org.joda.time.ReadablePartial) localTime42);
        boolean boolean55 = dateTime28.equals((java.lang.Object) localTime42);
        org.joda.time.LocalTime localTime57 = localTime42.plusMillis(10);
        int int58 = localTime57.getMillisOfDay();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 36000107 + "'", int58 == 36000107);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        java.lang.String str15 = dateTimeZone11.getID();
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16, locale17);
        int int20 = calendar19.getWeekYear();
        calendar19.add(0, 36000107);
        // The following exception was thrown during execution in test generation
        try {
            calendar19.roll(36000545, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Englisch" + "'", str18, "Englisch");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=734,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        int int27 = calendar26.getFirstDayOfWeek();
        java.time.Instant instant28 = calendar26.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = calendar26.getGreatestMinimum(35273);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35273");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "KOR" + "'", str19, "KOR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko-KR" + "'", str20, "ko-KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Corea del Sud" + "'", str22, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572897752,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=752,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property6.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property6.roundCeilingCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology26);
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = dateTimeField29.getAsText(32770, locale31);
        java.lang.String str36 = dateTimeField29.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 100, chronology38);
        int int40 = localTime39.getMillisOfSecond();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 100, chronology42);
        boolean boolean44 = localTime39.isAfter((org.joda.time.ReadablePartial) localTime43);
        int int45 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localTime39);
        java.lang.String str46 = dateTimeField29.getName();
        java.util.Date date52 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromDateFields(date52);
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localTime53, (int) 'a', locale55);
        java.lang.String str58 = property20.getAsText(locale55);
        org.joda.time.LocalTime localTime60 = property20.addCopy(0L);
        org.joda.time.LocalTime localTime61 = property20.roundCeilingCopy();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        java.lang.String str63 = calendar62.getCalendarType();
        java.time.Instant instant64 = calendar62.toInstant();
        int int65 = calendar62.getWeekYear();
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromCalendarFields(calendar62);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localTime66.getFieldTypes();
        org.joda.time.DateTime dateTime68 = localTime66.toDateTimeToday();
        int int69 = property20.compareTo((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.LocalTime localTime71 = localTime66.minusMillis((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean73 = localTime71.isSupported(dateTimeFieldType72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType72.getField(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property76 = localTime13.property(dateTimeFieldType72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str33, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "32770" + "'", str34, "32770");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 999 + "'", int45 == 999);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "millisOfSecond" + "'", str46, "millisOfSecond");
        org.junit.Assert.assertEquals(date52.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "KOR" + "'", str56, "KOR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "97" + "'", str57, "97");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "97" + "'", str58, "97");
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644572897782,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=782,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "gregory" + "'", str63, "gregory");
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.LocalTime localTime11 = property6.setCopy(15);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfSecond(24);
        int int14 = localTime13.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localTime13.getFields();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "97" + "'", str9, "97");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((-48957), 25200999, 732);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -48957 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        java.util.Locale locale2 = new java.util.Locale("15 Oct 1952 00:00:00 GMT", "allemand");
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar calendar5 = builder4.build();
        java.util.Calendar.Builder builder9 = builder4.setDate(0, 0, (int) 'x');
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology15);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = dateTimeField18.getAsText(32770, locale20);
        java.lang.String str24 = locale10.getDisplayLanguage(locale20);
        java.util.Calendar.Builder builder25 = builder9.setLocale(locale10);
        java.lang.String str26 = locale2.getDisplayName(locale10);
        java.util.Locale.setDefault(locale10);
        org.junit.Assert.assertEquals(locale2.toString(), "15 oct 1952 00:00:00 gmt_ALLEMAND");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str22, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32770" + "'", str23, "32770");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str24, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "15 oct 1952 00:00:00 gmt (ALLEMAND)" + "'", str26, "15 oct 1952 00:00:00 gmt (ALLEMAND)");
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) 70);
        java.lang.String str14 = dateTimeZone10.getShortName(1L);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) 36000089);
        java.lang.String str18 = dateTimeZone10.getShortName(62356320L);
        java.lang.String str20 = dateTimeZone10.getShortName(1963473901878993L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("36");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=36");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) (byte) 100);
        boolean boolean11 = dateTimeZone7.isStandardOffset((long) (short) 10);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean13 = calendar0.before((java.lang.Object) dateTime12);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = calendar0.getMinimum(292275055);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292275055");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10071);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType4 = localTime2.getFieldType(588);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 588");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology6);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = dateTimeField9.getAsText(32770, locale11);
        java.lang.String str16 = dateTimeField9.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        boolean boolean24 = localTime19.isAfter((org.joda.time.ReadablePartial) localTime23);
        int int25 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime19);
        java.lang.String str26 = dateTimeField9.getName();
        java.util.Date date32 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromDateFields(date32);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime33, (int) 'a', locale35);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale35.getDisplayLanguage(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = locale42.toLanguageTag();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale42.getDisplayCountry(locale45);
        java.lang.String str47 = locale41.getDisplayVariant(locale42);
        java.lang.String str48 = locale40.getDisplayScript(locale42);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale42);
        java.lang.String str50 = locale38.getDisplayName(locale42);
        java.util.Calendar.Builder builder51 = builder1.setLocale(locale42);
        java.lang.String str52 = locale42.getDisplayName();
        java.util.Locale.setDefault(category0, locale42);
        java.lang.String str54 = locale42.getDisplayName();
        java.lang.String str55 = locale42.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str13, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32770" + "'", str14, "32770");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 109 + "'", int20 == 109);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 999 + "'", int25 == 999);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millisOfSecond" + "'", str26, "millisOfSecond");
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "KOR" + "'", str36, "KOR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "97" + "'", str37, "97");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "KOR" + "'", str43, "KOR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko-KR" + "'", str44, "ko-KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Corea del Sud" + "'", str46, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572898040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=40,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str50, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Koreanisch (S\374dkorea)" + "'", str52, "Koreanisch (S\374dkorea)");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str54, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ko" + "'", str55, "ko");
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.clear();
        java.util.Date date6 = new java.util.Date(1969, (int) (byte) 100, (int) '#');
        int int7 = date6.getDay();
        date6.setTime((long) 86399999);
        java.util.Date date15 = new java.util.Date(7, (int) (byte) -1, 16, (int) (byte) 10, (int) (short) 0);
        int int16 = date15.getDate();
        boolean boolean17 = date6.before(date15);
        calendar0.setTime(date15);
        int int19 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar0.getMaximum(79140000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1989496800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1906,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=16,DAY_OF_YEAR=350,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 23:59:59 UTC 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 16 10:00:00 UTC 1906");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(4);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.LocalTime localTime16 = localTime13.withSecondOfMinute(23);
        org.joda.time.LocalTime.Property property17 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "09:56:00.099" + "'", str14, "09:56:00.099");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        java.util.Date date6 = new java.util.Date((int) (short) 1, 14, 0, (int) (byte) 1, (int) (short) 1, 57600000);
        date6.setMinutes(3);
        int int9 = date6.getDate();
        date6.setDate((-16));
        date6.setMonth(973587);
        java.util.Date date19 = new java.util.Date(1969, 0, 2000, (int) (byte) -1, 17);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int34 = dateTimeZone32.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        long long47 = dateTimeZone32.getMillisKeepLocal(dateTimeZone45, (long) 2);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 8, dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTimeISO();
        boolean boolean50 = dateTime48.isAfterNow();
        org.joda.time.DateTime dateTime52 = dateTime48.withMillis(100L);
        java.util.Date date53 = dateTime52.toDate();
        boolean boolean54 = date19.before(date53);
        int int55 = date6.compareTo(date53);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 15 17:03:00 UTC 83035");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Jun 22 23:17:00 UTC 3874");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        long long13 = dateTimeField10.add(1979L, (-215999355L));
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-568023439881598021L) + "'", long13 == (-568023439881598021L));
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localTime5.getFieldTypes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 100, chronology14);
        int int16 = localTime15.getMillisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        boolean boolean20 = localTime15.isAfter((org.joda.time.ReadablePartial) localTime19);
        int int21 = property10.compareTo((org.joda.time.ReadablePartial) localTime15);
        java.lang.String str22 = localTime15.toString();
        org.joda.time.LocalTime localTime24 = localTime15.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 39);
        boolean boolean28 = localTime5.isAfter((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.LocalTime localTime30 = localTime24.plusMillis(23);
        org.joda.time.LocalTime localTime32 = localTime30.plusMinutes(34080097);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.setTimeInMillis(100L);
        boolean boolean37 = calendar34.isWeekDateSupported();
        calendar34.roll(2, false);
        calendar34.setTimeInMillis(0L);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int47 = dateTimeZone45.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        long long60 = dateTimeZone45.getMillisKeepLocal(dateTimeZone58, (long) 2);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 8, dateTimeZone45);
        int int62 = dateTime61.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime64 = dateTime61.minusWeeks(4);
        boolean boolean65 = localTime32.equals((java.lang.Object) dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 200 + "'", int16 == 200);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "00:00:00.200" + "'", str22, "00:00:00.200");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2L + "'", long60 == 2L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(292260000L);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths(32000);
        java.lang.String str5 = dateTime3.toString("79140000");
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "79140000" + "'", str5, "79140000");
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getStandardOffset((-1L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter17.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = chronology40.withZone(dateTimeZone53);
        long long57 = dateTimeZone53.convertLocalToUTC((long) 32770, false);
        boolean boolean59 = dateTimeZone53.isStandardOffset((long) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter17.withZone(dateTimeZone53);
        boolean boolean61 = dateTimeZone53.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32770L + "'", long57 == 32770L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.DateTime dateTime7 = localTime2.toDateTimeToday();
        int int8 = dateTime7.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.secondOfDay();
        int int2 = property1.getMaximumValue();
        org.joda.time.DateTime dateTime3 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime4 = property1.withMinimumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399 + "'", int2 == 86399);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.halfdayOfDay();
        org.joda.time.Chronology chronology26 = chronology21.withUTC();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long39 = dateTimeZone37.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property44 = dateTime41.weekyear();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.withHourOfDay(6);
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        int int50 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime49);
        long long53 = dateTimeZone37.adjustOffset(121L, true);
        org.joda.time.Chronology chronology54 = chronology26.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        boolean boolean57 = dateTimeField55.isLeap(34080097L);
        long long59 = dateTimeField55.roundHalfEven(10127L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 121L + "'", long53 == 121L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.clear();
        java.util.Date date6 = new java.util.Date(1969, (int) (byte) 100, (int) '#');
        int int7 = date6.getDay();
        date6.setTime((long) 86399999);
        java.util.Date date15 = new java.util.Date(7, (int) (byte) -1, 16, (int) (byte) 10, (int) (short) 0);
        int int16 = date15.getDate();
        boolean boolean17 = date6.before(date15);
        calendar0.setTime(date15);
        calendar0.clear();
        calendar0.set(28083086, 74, 18, 1974, (-19035), 7201951);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=28083086,MONTH=74,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=18,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=1974,MINUTE=-19035,SECOND=7201951,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 23:59:59 UTC 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 16 10:00:00 UTC 1906");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        long long29 = dateTimeField27.roundFloor((long) (short) 100);
        java.lang.String str30 = dateTimeField27.getName();
        int int33 = dateTimeField27.getDifference((long) 'x', 36000097L);
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category34);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        calendar37.setTimeInMillis(100L);
        boolean boolean40 = calendar37.isWeekDateSupported();
        calendar37.roll(2, false);
        calendar37.setTimeInMillis(0L);
        java.util.TimeZone timeZone46 = calendar37.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale51.getISO3Country();
        java.lang.String str53 = locale51.toLanguageTag();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale51.getDisplayCountry(locale54);
        java.lang.String str56 = locale50.getDisplayVariant(locale51);
        java.lang.String str57 = locale49.getDisplayScript(locale51);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone46, locale49);
        java.util.Locale.setDefault(category34, locale49);
        java.util.Locale locale60 = java.util.Locale.getDefault(category34);
        int int61 = dateTimeField27.getMaximumTextLength(locale60);
        java.lang.String str62 = dateTimeField18.getAsShortText(23, locale60);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 200 + "'", int3 == 200);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfSecond" + "'", str30, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-35999977) + "'", int33 == (-35999977));
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "KOR" + "'", str52, "KOR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ko-KR" + "'", str53, "ko-KR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Corea del Sud" + "'", str55, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644572898338,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=338,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23" + "'", str62, "23");
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(999);
        boolean boolean17 = dateTime12.isBeforeNow();
        boolean boolean19 = dateTime12.isEqual(251819990L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        java.lang.StringBuffer stringBuffer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(stringBuffer17, 7952351904000000152L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        boolean boolean12 = localTime5.equals((java.lang.Object) dateTime10);
        org.joda.time.LocalTime localTime14 = localTime5.withMillisOfDay(4);
        int[] intArray16 = chronology3.get((org.joda.time.ReadablePartial) localTime5, 9223371986234400089L);
        org.joda.time.DateTimeField dateTimeField17 = chronology3.weekOfWeekyear();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay((long) (-244803), chronology3);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int34 = dateTimeZone32.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        long long47 = dateTimeZone32.getMillisKeepLocal(dateTimeZone45, (long) 2);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 8, dateTimeZone32);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(dateTimeZone32);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 10, dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalTime localTime52 = localTime50.plus(readablePeriod51);
        org.joda.time.LocalTime localTime54 = localTime52.minusSeconds(10);
        org.joda.time.DateTime dateTime55 = localTime52.toDateTimeToday();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime55.toMutableDateTime(chronology56);
        org.joda.time.DateTime.Property property58 = dateTime55.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        boolean boolean60 = localTime18.equals((java.lang.Object) dateTimeField59);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 0, 0, 189]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime.Property property7 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMonths((int) ' ');
        java.lang.String str16 = dateTime13.toString();
        int int17 = dateTime13.getDayOfWeek();
        boolean boolean18 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.100+00:00:00.100" + "'", str16, "1970-01-01T00:00:00.100+00:00:00.100");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime3 = dateTime1.minus(10L);
        org.joda.time.DateTime.Property property4 = dateTime3.weekyear();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder5.set(0, (int) (short) 0);
        java.util.Locale locale10 = new java.util.Locale("DateTimeField[millisOfSecond]");
        java.util.Calendar.Builder builder11 = builder8.setLocale(locale10);
        java.util.Calendar.Builder builder15 = builder8.setTimeOfDay((int) (byte) 1, 271, 6);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.setTimeInMillis(100L);
        boolean boolean29 = calendar26.isWeekDateSupported();
        calendar26.roll(2, false);
        calendar26.setTimeInMillis(0L);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.Chronology chronology37 = chronology23.withZone(dateTimeZone36);
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        java.lang.String str41 = dateTimeField40.getName();
        long long43 = dateTimeField40.remainder(100L);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.toLanguageTag();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale47.getDisplayCountry(locale50);
        java.lang.String str52 = locale46.getDisplayVariant(locale47);
        java.lang.String str53 = locale45.getDisplayScript(locale47);
        java.lang.String str54 = locale45.getISO3Language();
        java.lang.String str55 = locale45.getISO3Country();
        java.lang.String str56 = locale45.getScript();
        java.lang.String str57 = dateTimeField40.getAsText(36002097, locale45);
        java.util.Calendar.Builder builder58 = builder8.setLocale(locale45);
        java.lang.String str59 = property4.getAsText(locale45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals(locale10.toString(), "datetimefield[millisofsecond]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "dayOfYear" + "'", str41, "dayOfYear");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "KOR" + "'", str48, "KOR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ko-KR" + "'", str49, "ko-KR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Corea del Sud" + "'", str51, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "36002097" + "'", str57, "36002097");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        java.util.Locale locale1 = new java.util.Locale("Koreanisch");
        org.junit.Assert.assertEquals(locale1.toString(), "koreanisch");
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.Builder builder11 = builder5.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("it_IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: it_IT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        java.util.Date date6 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        date6.setYear(0);
        int int9 = date6.getSeconds();
        java.util.Date date15 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date15.setMonth((int) ' ');
        java.util.Date date23 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date23);
        boolean boolean25 = date15.before(date23);
        int int26 = date23.getTimezoneOffset();
        java.util.Date date33 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean34 = date23.after(date33);
        date33.setMonth(5);
        date33.setDate(57600000);
        java.time.Instant instant39 = date33.toInstant();
        java.util.Date date40 = java.util.Date.from(instant39);
        long long41 = date40.getTime();
        boolean boolean42 = date6.after(date40);
        java.lang.String str43 = date40.toLocaleString();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Dec 10 03:10:06 UTC 1900");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(date33.toString(), "Tue Nov 08 03:10:06 UTC 159605");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Tue Nov 08 03:10:06 UTC 159605");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4974507054606000L + "'", long41 == 4974507054606000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "8 nov. 159605 03:10:06" + "'", str43, "8 nov. 159605 03:10:06");
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfDay((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime5.get(dateTimeFieldType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime5.withDurationAdded(readableDuration11, (int) 'x');
        int int14 = dateTime13.getDayOfMonth();
        int int15 = dateTime13.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86340100 + "'", int10 == 86340100);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86340100 + "'", int15 == 86340100);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone9);
        calendar11.clear();
        boolean boolean13 = calendar11.isWeekDateSupported();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572898787,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=787,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        long long16 = chronology12.add((long) 19, (long) 97, 3);
        org.joda.time.DurationField durationField17 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.yearOfCentury();
        long long23 = dateTimeField21.roundHalfCeiling((long) 84326400);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 200 + "'", int3 == 200);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 310L + "'", long16 == 310L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 4);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(1, 86399999, 0);
        java.util.Calendar.Builder builder12 = builder0.setDate(0, (int) (byte) 10, 36000107);
        java.util.Calendar.Builder builder16 = builder12.setDate((int) (short) 1, 58620000, 20);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        int[] intArray18 = localTime17.getValues();
        java.util.Calendar.Builder builder19 = builder16.setFields(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder16.setInstant(36000999L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DateTime dateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        int int36 = dateTime35.getMonthOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMonths((int) 'x');
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        int int42 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 36000249, dateTimeZone29);
        org.joda.time.DateTime dateTime44 = dateTime26.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property49 = dateTime46.weekyear();
        org.joda.time.DateTime dateTime51 = property49.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime51.minus(readablePeriod54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.withZone(dateTimeZone56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime60 = dateTime57.withField(dateTimeFieldType58, 1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime57.withPeriodAdded(readablePeriod61, (int) (short) 1);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 0);
        int int66 = dateTime65.getEra();
        org.joda.time.DateTime dateTime67 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime69 = dateTime65.minusMinutes(1);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfYear();
        org.joda.time.DateTime dateTime71 = property70.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.minus(readablePeriod72);
        org.joda.time.DateTime dateTime75 = dateTime71.withYearOfEra(11);
        int int76 = dateTime57.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.LocalTime localTime77 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localTime77.getFieldType(0);
        boolean boolean80 = dateTime71.isSupported(dateTimeFieldType79);
        java.lang.String str81 = dateTimeFieldType79.toString();
        java.lang.String str82 = dateTimeFieldType79.getName();
        org.joda.time.DateTime.Property property83 = dateTime44.property(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 25200000 + "'", int42 == 25200000);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hourOfDay" + "'", str81, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hourOfDay" + "'", str82, "hourOfDay");
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        int int16 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime14);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        long long44 = dateTimeZone29.getMillisKeepLocal(dateTimeZone42, (long) 2);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 8, dateTimeZone29);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes(1);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.DateTime dateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology58);
        org.joda.time.LocalTime.Property property60 = localTime59.millisOfSecond();
        int int61 = localTime59.size();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) 100, chronology63);
        int int65 = localTime64.getMillisOfSecond();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) 100, chronology67);
        boolean boolean69 = localTime64.isAfter((org.joda.time.ReadablePartial) localTime68);
        int int70 = localTime59.compareTo((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.DateTime dateTime71 = dateTime53.withFields((org.joda.time.ReadablePartial) localTime59);
        boolean boolean72 = dateTime45.equals((java.lang.Object) localTime59);
        org.joda.time.LocalTime localTime74 = localTime59.plusMillis(10);
        boolean boolean75 = localTime5.isEqual((org.joda.time.ReadablePartial) localTime74);
        org.joda.time.LocalTime localTime77 = localTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalTime.Property property78 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField79 = property78.getField();
        long long81 = dateTimeField79.roundHalfCeiling(72017000830865927L);
        java.util.Locale locale86 = new java.util.Locale("287", "10:00:00.000");
        // The following exception was thrown during execution in test generation
        try {
            long long87 = dateTimeField79.set((-8380800000L), "DateTimeField[monthOfYear]", locale86);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[monthOfYear]\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 200 + "'", int11 == 200);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 200 + "'", int65 == 200);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 72017000830865927L + "'", long81 == 72017000830865927L);
        org.junit.Assert.assertEquals(locale86.toString(), "287_10:00:00.000");
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.lang.String str5 = localTime2.toString();
        org.joda.time.LocalTime localTime7 = localTime2.plusMinutes(102);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime2.minus(readablePeriod8);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.200" + "'", str5, "00:00:00.200");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        calendar0.roll((int) (byte) -1, 0);
        boolean boolean6 = calendar0.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar0.getMaximum(36000999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572898924,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=924,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (-52));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime5.withDate(510, 4, 35152294);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35152294 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setHours(292269054);
        int int8 = date5.getMinutes();
        java.util.Date date14 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date14.setMonth((int) ' ');
        java.util.Date date22 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromDateFields(date22);
        boolean boolean24 = date14.before(date22);
        int int25 = date22.getTimezoneOffset();
        java.util.Date date32 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean33 = date22.after(date32);
        int int34 = date22.getMonth();
        java.lang.String str35 = date22.toLocaleString();
        boolean boolean36 = date5.after(date22);
        int int37 = date5.getYear();
        int int38 = date5.getMinutes();
        date5.setDate(47);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Feb 16 06:17:00 UTC 35242");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 17 + "'", int8 == 17);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date22.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals(date32.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "3 mars 1900 23:17:00" + "'", str35, "3 mars 1900 23:17:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 33342 + "'", int37 == 33342);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 17 + "'", int38 == 17);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = dateTimeField26.getAsText(32770, locale28);
        int int33 = dateTimeField26.getMaximumValue((long) 0);
        int int34 = dateTime17.get(dateTimeField26);
        int int35 = dateTime3.get(dateTimeField26);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(0);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMinutes(1);
        org.joda.time.DateTime dateTime46 = dateTime44.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, 36000097);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime3.withChronology(chronology50);
        java.util.Date date52 = dateTime3.toDate();
        org.joda.time.DateMidnight dateMidnight53 = dateTime3.toDateMidnight();
        org.joda.time.DateTime dateTime55 = dateTime3.minusMonths(109);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 100, chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean60 = localTime58.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime.Property property62 = localTime58.property(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType61.getDurationType();
        org.joda.time.DateTime dateTime65 = dateTime3.withFieldAdded(durationFieldType63, 985);
        org.joda.time.DateTime dateTime66 = dateTime3.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str30, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32770" + "'", str31, "32770");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999 + "'", int33 == 999);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 900 + "'", int34 == 900);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Mon May 01 00:00:00 UTC 1967");
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayScript();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.DurationField durationField12 = durationFieldType3.getField(chronology11);
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale19.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        java.lang.String str24 = locale18.getDisplayVariant(locale19);
        java.lang.String str25 = locale17.getDisplayScript(locale19);
        java.lang.String str26 = locale17.getISO3Language();
        java.lang.String str27 = dateTimeField15.getAsText(36000097L, locale17);
        java.lang.String str28 = locale0.getDisplayLanguage(locale17);
        boolean boolean29 = locale17.hasExtensions();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale17);
        long long31 = calendar30.getTimeInMillis();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KOR" + "'", str20, "KOR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko-KR" + "'", str21, "ko-KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Corea del Sud" + "'", str23, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "deu" + "'", str26, "deu");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "36000097" + "'", str27, "36000097");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italienisch" + "'", str28, "Italienisch");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572898996,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=996,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572898996L + "'", long31 == 1644572898996L);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.LocalTime localTime54 = property53.withMaximumValue();
        int int56 = localTime54.getValue(0);
        java.lang.String str57 = localTime54.toString();
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds(12);
        boolean boolean60 = localTime46.equals((java.lang.Object) localTime54);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime46.plus(readablePeriod61);
        org.joda.time.LocalTime.Property property63 = localTime46.minuteOfHour();
        org.joda.time.LocalTime localTime65 = property63.addNoWrapToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = localTime65.getFieldType(0);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfHour();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.toDateTime(chronology71);
        org.joda.time.DateTime dateTime73 = localTime65.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.joda.time.DateTime dateTime76 = localTime65.toDateTimeToday(dateTimeZone75);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 200 + "'", int26 == 200);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10:00:00.999" + "'", str57, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readablePeriod21);
        int int23 = dateTime20.getDayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime20.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime(chronology29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        int int33 = dateTime32.getEra();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes(1);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.DateTime dateTime38 = property37.roundHalfCeilingCopy();
        boolean boolean39 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime.Property property40 = dateTime38.millisOfDay();
        boolean boolean41 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalTime localTime42 = dateTime38.toLocalTime();
        org.joda.time.DateTime dateTime43 = dateTime12.withFields((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime localTime45 = localTime42.plusHours(79140);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime45);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology7);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(3);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.minus((-251999990L));
        boolean boolean24 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str25 = dateTime23.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int27 = dateTime23.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays((int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime33.toYearMonthDay();
        org.joda.time.Chronology chronology35 = yearMonthDay34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfDay();
        java.lang.String str37 = chronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.year();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology35.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime44.minusDays((int) 'a');
        org.joda.time.DateTime dateTime48 = dateTime44.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.Chronology chronology50 = yearMonthDay49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology50.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        boolean boolean55 = dateTimeZone53.isFixed();
        org.joda.time.Chronology chronology56 = chronology35.withZone(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-03T21:57:00.090+00:00:00.100" + "'", str25, "1970-01-03T21:57:00.090+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.Chronology chronology16 = yearMonthDay15.getChronology();
        org.joda.time.DurationField durationField17 = durationFieldType8.getField(chronology16);
        org.joda.time.Chronology chronology18 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfSecond();
        org.joda.time.DurationField durationField20 = dateTimeField19.getRangeDurationField();
        int int21 = dateTime7.get(dateTimeField19);
        java.lang.String str23 = dateTime7.toString("36000097");
        boolean boolean25 = dateTime7.isAfter(32L);
        org.joda.time.DateTime dateTime27 = dateTime7.withMillis(36000188L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "36000097" + "'", str23, "36000097");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(86340009);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property25 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.minus(readablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZone(dateTimeZone32);
        boolean boolean34 = localTime11.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.LocalTime localTime36 = localTime11.minusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = localTime36.getValue(586);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 586");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime6.getZone();
        org.joda.time.DateTime.Property property19 = dateTime6.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getDurationType();
        org.joda.time.DateTime.Property property23 = dateTime6.property(dateTimeFieldType20);
        int int24 = dateTime6.getMillisOfDay();
        int int25 = dateTime6.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfDay((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime5.get(dateTimeFieldType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime5.withDurationAdded(readableDuration11, (int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str15 = dateTimeFieldType14.getName();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType14.getField(chronology23);
        int int28 = dateTime13.get(dateTimeFieldType14);
        int int29 = dateTime13.getHourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime13.minusSeconds(22);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks(79199985);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime31.withSecondOfMinute(71819990);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71819990 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86340000 + "'", int10 == 86340000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hourOfHalfday" + "'", str15, "hourOfHalfday");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        java.util.Date date3 = new java.util.Date(5, (int) (short) 100, 7);
        int int4 = date3.getDay();
        int int5 = date3.getYear();
        java.time.Instant instant6 = date3.toInstant();
        java.util.Date date10 = new java.util.Date((int) '4', 9, 15);
        int int11 = date10.getHours();
        date10.setYear(109);
        java.util.Date date19 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date19.setMonth((int) ' ');
        java.util.Date date27 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromDateFields(date27);
        boolean boolean29 = date19.before(date27);
        int int30 = date27.getTimezoneOffset();
        java.util.Date date37 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean38 = date27.after(date37);
        date37.setMonth(5);
        date37.setSeconds((-292275054));
        date37.setSeconds(80);
        boolean boolean45 = date10.after(date37);
        boolean boolean46 = date3.before(date10);
        java.lang.String str47 = date3.toGMTString();
        org.junit.Assert.assertEquals(date3.toString(), "Wed May 07 00:00:00 UTC 1913");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Oct 15 00:00:00 UTC 2009");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals(date19.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Jun 10 03:11:20 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7 May 1913 00:00:00 GMT" + "'", str47, "7 May 1913 00:00:00 GMT");
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfMonth();
        boolean boolean14 = dateTime4.isBefore((long) 100);
        org.joda.time.DateTime dateTime15 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = dateTime23.toString(dateTimeFormatter24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean27 = dateTime23.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime30.minusDays((int) 'a');
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology36.getZone();
        boolean boolean39 = dateTimeFieldType28.isSupported(chronology36);
        org.joda.time.DateTime dateTime40 = dateTime23.toDateTime(chronology36);
        boolean boolean41 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str25, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("millis");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.Object obj8 = null;
        boolean boolean9 = languageRange1.equals(obj8);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "millis" + "'", str3, "millis");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millis" + "'", str6, "millis");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "millis" + "'", str7, "millis");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = dateTime5.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Sun Mar 09 00:19:25 UTC 2549");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=sun mar 09 00:19:25 utc 2549");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.plus(readablePeriod26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str29 = dateTimeFieldType28.getName();
        boolean boolean30 = dateTime7.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime38 = property37.withMaximumValue();
        int int40 = localTime38.getValue(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int42 = localTime38.indexOf(dateTimeFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalTime localTime45 = localTime38.withPeriodAdded(readablePeriod43, (int) (short) -1);
        org.joda.time.DateTime dateTime46 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localTime45.getFieldTypes();
        org.joda.time.LocalTime.Property property48 = localTime45.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime50 = property48.setCopy("\uc624\uc804 12:00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970. 1. 1 ????? 12:00:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hourOfDay" + "'", str29, "hourOfDay");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfDay();
        boolean boolean7 = property6.isLeap();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.lang.String str11 = locale9.getExtension('x');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property6.setCopy("+70:00", locale9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+70:00\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        int int10 = property9.getMaximumValue();
        boolean boolean11 = property9.isLeap();
        org.joda.time.LocalTime localTime13 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime14 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime15 = property9.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalTime localTime18 = localTime15.withPeriodAdded(readablePeriod16, 58620000);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean20 = localTime18.isSupported(durationFieldType19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.setTimeInMillis(100L);
        boolean boolean25 = calendar22.isWeekDateSupported();
        calendar22.roll(2, false);
        calendar22.setTimeInMillis(0L);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int35 = dateTimeZone33.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        long long48 = dateTimeZone33.getMillisKeepLocal(dateTimeZone46, (long) 2);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 8, dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTimeISO();
        boolean boolean51 = dateTime49.isAfterNow();
        org.joda.time.DateTime dateTime53 = dateTime49.withMillis(100L);
        java.util.Date date54 = dateTime53.toDate();
        int int55 = dateTime53.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property56 = dateTime53.secondOfMinute();
        boolean boolean57 = localTime18.equals((java.lang.Object) property56);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = localTime18.getValue(510);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 510");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('u', "deu");
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) 'a');
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        org.joda.time.Chronology chronology30 = yearMonthDay29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology30.getZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.Chronology chronology44 = chronology30.withZone(dateTimeZone43);
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale47 = java.util.Locale.getDefault(category46);
        java.util.Locale locale48 = java.util.Locale.getDefault(category46);
        java.lang.String str49 = dateTimeZone43.getName(10L, locale48);
        java.util.Locale.Builder builder50 = builder21.setLocale(locale48);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone14, locale48);
        java.lang.String str52 = locale48.getDisplayVariant();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category46.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644572899326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=326,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = dateTimeFormatter7.parseLocalTime("86399999");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusHours((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime3.withMillisOfDay(1);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(0);
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 2);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DateTime dateTime30 = dateTime14.toDateTime(chronology27);
        org.joda.time.Chronology chronology31 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        long long34 = dateTimeZone32.convertUTCToLocal((long) 292269054);
        java.lang.String str35 = dateTimeZone32.toString();
        int int37 = dateTimeZone32.getOffsetFromLocal(433L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 292269054L + "'", long34 == 292269054L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) 70);
        java.lang.String str14 = dateTimeZone10.getShortName(1L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        java.lang.String str23 = property21.getAsString();
        org.joda.time.DateTime dateTime25 = property21.addToCopy(86399999);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime25.withDayOfMonth(12);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(363);
        java.lang.Object obj31 = null;
        boolean boolean32 = dateTime28.equals(obj31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale51.getISO3Country();
        java.lang.String str53 = locale51.toLanguageTag();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale51.getDisplayCountry(locale54);
        java.lang.String str56 = locale50.getDisplayVariant(locale51);
        java.lang.String str57 = locale49.getDisplayScript(locale51);
        java.lang.String str58 = dateTimeField47.getAsShortText((long) 0, locale51);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone42, locale51);
        java.util.Calendar calendar60 = dateTime28.toCalendar(locale51);
        java.lang.String str61 = locale51.getISO3Country();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "KOR" + "'", str52, "KOR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ko-KR" + "'", str53, "ko-KR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Corea del Sud" + "'", str55, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644572899443,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=443,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=311031442800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=11826,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=12,DAY_OF_YEAR=71,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "KOR" + "'", str61, "KOR");
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(55020000L);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        int int16 = property13.get();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str20 = locale17.getCountry();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale17);
        java.lang.String str22 = property13.getAsShortText(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter8.withLocale(locale17);
        boolean boolean24 = dateTimeFormatter8.isPrinter();
        org.joda.time.Chronology chronology25 = dateTimeFormatter8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1901);
        java.lang.StringBuffer stringBuffer29 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMonths((int) ' ');
        boolean boolean41 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime44 = dateTime34.withDurationAdded((long) 8, (int) '#');
        org.joda.time.LocalDate localDate45 = dateTime44.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter28.printTo(stringBuffer29, (org.joda.time.ReadablePartial) localDate45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "KOR" + "'", str18, "KOR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ko-KR" + "'", str19, "ko-KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KR" + "'", str20, "KR");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572899480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=480,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long9 = dateTimeField7.roundFloor((long) (short) 100);
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category10, locale11);
        int int13 = dateTimeField7.getMaximumTextLength(locale11);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale15.getDisplayScript(locale19);
        java.lang.String str21 = locale15.getVariant();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "allemand" + "'", str16, "allemand");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr-FR" + "'", str17, "fr-FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 100, chronology15);
        java.lang.String str21 = chronology15.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology15.add(1644572740472L, (-1167609599931L), 86220277);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -1167609599931 * 86220277");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfWeek();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        int int13 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTime dateTime14 = localTime8.toDateTimeToday();
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime.Property property16 = dateTime14.year();
        int int17 = property5.getDifference((org.joda.time.ReadableInstant) dateTime14);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        java.lang.String str33 = dateTimeZone29.getID();
        long long35 = dateTimeZone29.convertUTCToLocal(1980L);
        java.lang.String str37 = dateTimeZone29.getShortName((-9L));
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime14.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime40 = dateTime14.minusSeconds(79200);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572899590,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=590,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19034) + "'", int17 == (-19034));
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Etc/UTC" + "'", str33, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1980L + "'", long35 == 1980L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean9 = dateTime5.isSupported(dateTimeFieldType8);
        java.util.GregorianCalendar gregorianCalendar10 = dateTime5.toGregorianCalendar();
        int int11 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime13 = dateTime5.withMillisOfSecond(8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 365 + "'", int11 == 365);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) 'u', 2000, 8, 277, 3, 35158814, 36000156);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 277 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime5.plusYears(11);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, 3);
        int int14 = dateTime10.getYear();
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1981 + "'", int14 == 1981);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        int int16 = property13.get();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str20 = locale17.getCountry();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale17);
        java.lang.String str22 = property13.getAsShortText(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter8.withLocale(locale17);
        boolean boolean24 = dateTimeFormatter8.isPrinter();
        org.joda.time.Chronology chronology25 = dateTimeFormatter8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1901);
        boolean boolean29 = dateTimeFormatter28.isParser();
        java.io.Writer writer30 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property35 = dateTime32.weekyear();
        org.joda.time.DateTime dateTime37 = property35.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded((long) 1969, 9);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) (byte) 100);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 1970, dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime43.withZoneRetainFields(dateTimeZone48);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter28.printTo(writer30, (org.joda.time.ReadableInstant) dateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "KOR" + "'", str18, "KOR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ko-KR" + "'", str19, "ko-KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KR" + "'", str20, "KR");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572899752,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=752,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        java.io.Writer writer66 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfHour();
        org.joda.time.DateTime dateTime71 = dateTime68.minusDays((int) 'a');
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks(0);
        org.joda.time.DateTime dateTime75 = dateTime71.plus((long) 11);
        org.joda.time.DateTime dateTime77 = dateTime71.withHourOfDay(3);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime80 = dateTime77.withDurationAdded(readableDuration78, 30);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter65.printTo(writer66, (org.joda.time.ReadableInstant) dateTime80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 121L + "'", long64 == 121L);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.LocalTime localTime19 = localTime15.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime21 = localTime15.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        int int25 = localTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        boolean boolean29 = localTime24.isAfter((org.joda.time.ReadablePartial) localTime28);
        boolean boolean30 = localTime21.isEqual((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        int int39 = localTime38.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        boolean boolean43 = localTime38.isAfter((org.joda.time.ReadablePartial) localTime42);
        int int44 = property33.compareTo((org.joda.time.ReadablePartial) localTime38);
        java.lang.String str45 = localTime38.toString();
        boolean boolean46 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime38);
        boolean boolean47 = localTime5.isEqual((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.LocalTime.Property property48 = localTime5.millisOfSecond();
        org.joda.time.DurationField durationField49 = property48.getDurationField();
        org.joda.time.DurationField durationField50 = property48.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField51 = property48.getField();
        java.lang.String str52 = property48.toString();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "00:00:00.100" + "'", str45, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[millisOfSecond]" + "'", str52, "Property[millisOfSecond]");
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property6.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime9 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalTime.Property property11 = localTime9.property(dateTimeFieldType10);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long39 = dateTimeZone24.getMillisKeepLocal(dateTimeZone37, (long) 2);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 8, dateTimeZone24);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(dateTimeZone24);
        long long43 = dateTimeZone24.convertUTCToLocal((long) (byte) 100);
        org.joda.time.DateTime dateTime44 = localTime9.toDateTimeToday(dateTimeZone24);
        int int45 = dateTime44.getHourOfDay();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getCountry();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        int int5 = calendar4.getMinimalDaysInFirstWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(5);
        boolean boolean11 = dateTimeFormatter8.isPrinter();
        org.joda.time.Chronology chronology12 = dateTimeFormatter8.getChronology();
        boolean boolean13 = dateTimeFormatter8.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter8.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter8.withDefaultYear(0);
        boolean boolean19 = calendar4.after((java.lang.Object) dateTimeFormatter18);
        int int21 = calendar4.getGreatestMinimum(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "KOR" + "'", str1, "KOR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko-KR" + "'", str2, "ko-KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KR" + "'", str3, "KR");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572899894,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=894,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimePrinter15);
        org.junit.Assert.assertNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 121);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter10.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 6);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withOffsetParsed();
        java.lang.Appendable appendable30 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology36);
        org.joda.time.LocalTime.Property property38 = localTime37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = dateTimeField39.getAsText(32770, locale41);
        java.lang.String str46 = dateTimeField39.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 100, chronology48);
        int int50 = localTime49.getMillisOfSecond();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 100, chronology52);
        boolean boolean54 = localTime49.isAfter((org.joda.time.ReadablePartial) localTime53);
        int int55 = dateTimeField39.getMaximumValue((org.joda.time.ReadablePartial) localTime49);
        int int57 = localTime49.getValue(1);
        org.joda.time.Chronology chronology58 = localTime49.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.days();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime(33642000000L, chronology58);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter25.printTo(appendable30, (org.joda.time.ReadablePartial) localTime60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str43, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32770" + "'", str44, "32770");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 999 + "'", int55 == 999);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear(52);
        boolean boolean8 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.parse("09:58:23.097 (+00:00:00.100)", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        java.util.Date date6 = new java.util.Date(9, 252690035, 25200000, 1977, 4, 30);
        java.lang.Object obj7 = date6.clone();
        org.junit.Assert.assertEquals(date6.toString(), "Thu May 24 09:04:30 UTC 21128407");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "Thu May 24 09:04:30 UTC 21128407");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "Thu May 24 09:04:30 UTC 21128407");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "Thu May 24 09:04:30 UTC 21128407");
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField13 = dateTimeField12.getLeapDurationField();
        java.util.Locale locale18 = new java.util.Locale("Property[millisOfSecond]", "Taiwan", "35");
        java.lang.String str19 = locale18.getDisplayVariant();
        java.lang.String str20 = dateTimeField12.getAsShortText(48977L, locale18);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals(locale18.toString(), "property[millisofsecond]_TAIWAN_35");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "35" + "'", str19, "35");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Jan" + "'", str20, "Jan");
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        int int48 = property6.getMaximumValueOverall();
        org.joda.time.LocalTime localTime50 = property6.addWrapFieldToCopy(59);
        org.joda.time.LocalTime localTime52 = localTime50.withSecondOfMinute(13);
        org.joda.time.LocalTime.Property property53 = localTime52.hourOfDay();
        org.joda.time.LocalTime localTime54 = property53.getLocalTime();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 999 + "'", int48 == 999);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        int int15 = dateTime12.getYearOfEra();
        boolean boolean16 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean23 = dateTime18.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        int int25 = dateTime5.get(dateTimeFieldType22);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime5.toGregorianCalendar();
        int int27 = gregorianCalendar26.getFirstDayOfWeek();
        java.lang.Object obj28 = gregorianCalendar26.clone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "java.util.GregorianCalendar[time=-60000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "java.util.GregorianCalendar[time=-60000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "java.util.GregorianCalendar[time=-60000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime1.toMutableDateTimeISO();
        int int7 = mutableDateTime6.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime10.minusWeeks((int) (short) 100);
        org.joda.time.DateTime.Property property15 = dateTime10.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        int int9 = date8.getMinutes();
        java.lang.String str10 = date8.toLocaleString();
        int int11 = date8.getMinutes();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572900022,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:48:20 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "11 f\351vr. 2022 09:48:20" + "'", str10, "11 f\351vr. 2022 09:48:20");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 48 + "'", int11 == 48);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 100, chronology16);
        int int18 = localTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        boolean boolean22 = localTime17.isAfter((org.joda.time.ReadablePartial) localTime21);
        int int23 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime17);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar24);
        int int26 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 8, dateTimeZone40);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(dateTimeZone40);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 10, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalTime localTime60 = localTime58.plus(readablePeriod59);
        org.joda.time.LocalTime localTime62 = localTime60.minusSeconds(10);
        org.joda.time.LocalTime localTime64 = localTime62.plusMinutes(86399999);
        int int65 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime64);
        org.joda.time.LocalTime localTime67 = localTime64.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localTime67.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField70 = localTime67.getField(2922789);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2922789");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572900029,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=29,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        int int9 = localTime7.getValue(0);
        java.lang.String str10 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = localTime7.minusSeconds(12);
        org.joda.time.LocalTime localTime14 = localTime7.plusHours((int) 'u');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        int int17 = dateTime16.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 100, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        java.lang.String str23 = localTime20.toString();
        org.joda.time.LocalTime localTime25 = localTime20.plusSeconds(121);
        org.joda.time.DateTime dateTime26 = dateTime16.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.Chronology chronology27 = localTime20.getChronology();
        org.joda.time.Chronology chronology28 = localTime20.getChronology();
        boolean boolean29 = localTime14.equals((java.lang.Object) localTime20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localTime14.getFieldTypes();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10:00:00.999" + "'", str10, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "00:00:00.100" + "'", str23, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str9 = dateTimeField7.getAsShortText((long) 121);
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int25 = dateTimeZone23.getStandardOffset((-1L));
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone23);
        int int27 = localTime26.getMillisOfSecond();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        int int36 = localTime35.getMillisOfSecond();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 100, chronology38);
        boolean boolean40 = localTime35.isAfter((org.joda.time.ReadablePartial) localTime39);
        int int41 = property30.compareTo((org.joda.time.ReadablePartial) localTime35);
        java.lang.String str42 = localTime35.toString();
        org.joda.time.LocalTime localTime44 = localTime35.minusSeconds(100);
        int[] intArray45 = localTime44.getValues();
        int int46 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime26, intArray45);
        org.joda.time.LocalTime localTime48 = localTime26.minusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime(chronology52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        int int56 = dateTime55.getEra();
        org.joda.time.DateTime dateTime57 = dateTime55.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime59 = dateTime55.minusMinutes(1);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfYear();
        org.joda.time.DateTime dateTime61 = property60.roundHalfCeilingCopy();
        boolean boolean62 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = dateTime50.plusHours(6);
        boolean boolean65 = dateTime50.isEqualNow();
        long long66 = dateTime50.getMillis();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology71);
        org.joda.time.LocalTime.Property property73 = localTime72.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = property73.getField();
        org.joda.time.LocalTime localTime75 = property73.getLocalTime();
        org.joda.time.LocalTime localTime77 = property73.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime78 = property73.roundHalfEvenCopy();
        java.util.Date date84 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.fromDateFields(date84);
        boolean boolean86 = localTime78.equals((java.lang.Object) localTime85);
        org.joda.time.LocalTime.Property property87 = localTime85.millisOfDay();
        org.joda.time.LocalTime localTime88 = property87.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime localTime91 = localTime88.withField(dateTimeFieldType89, 35135652);
        boolean boolean92 = dateTime50.isSupported(dateTimeFieldType89);
        int int93 = localTime48.get(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "121" + "'", str9, "121");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "00:00:00.100" + "'", str42, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[23, 58, 20, 100]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertEquals(date84.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 72000000 + "'", int93 == 72000000);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        org.joda.time.DateTime.Property property22 = dateTime5.minuteOfHour();
        java.lang.String str23 = property22.getName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minuteOfHour" + "'", str23, "minuteOfHour");
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        int int19 = localTime10.indexOf(dateTimeFieldType16);
        int int20 = localTime7.indexOf(dateTimeFieldType16);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean25 = localTime23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime localTime27 = localTime23.plusMillis(52);
        org.joda.time.LocalTime localTime29 = localTime23.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime32 = localTime29.withPeriodAdded(readablePeriod30, 292278993);
        org.joda.time.DateTime dateTime33 = localTime29.toDateTimeToday();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        int int38 = localTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        boolean boolean42 = localTime37.isAfter((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = dateTimeFieldType43.isSupported(chronology44);
        int int46 = localTime37.indexOf(dateTimeFieldType43);
        org.joda.time.Chronology chronology47 = localTime37.getChronology();
        long long51 = chronology47.add((long) 19, (long) 97, 3);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0, chronology47);
        boolean boolean53 = localTime29.equals((java.lang.Object) chronology47);
        boolean boolean54 = dateTimeFieldType16.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField55 = chronology47.weekyearOfCentury();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 310L + "'", long51 == 310L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        int int19 = localTime10.indexOf(dateTimeFieldType16);
        int int20 = localTime7.indexOf(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property21 = localTime7.millisOfSecond();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(6);
        org.joda.time.DateTime dateTime31 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology36);
        org.joda.time.LocalTime.Property property38 = localTime37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.LocalTime localTime40 = property38.getLocalTime();
        org.joda.time.LocalTime localTime41 = property38.roundCeilingCopy();
        org.joda.time.LocalTime localTime43 = property38.addCopy(6);
        org.joda.time.DurationField durationField44 = property38.getDurationField();
        int int45 = property38.get();
        org.joda.time.LocalTime localTime46 = property38.withMinimumValue();
        org.joda.time.LocalTime localTime47 = property38.withMaximumValue();
        org.joda.time.LocalTime localTime48 = property38.roundCeilingCopy();
        org.joda.time.LocalTime localTime49 = localTime7.withFields((org.joda.time.ReadablePartial) localTime48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalTime localTime52 = localTime49.withPeriodAdded(readablePeriod50, (int) (byte) 100);
        int int53 = localTime49.getMillisOfDay();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property58 = dateTime55.weekyear();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property63 = dateTime62.minuteOfHour();
        org.joda.time.DateTime dateTime65 = dateTime62.minusDays((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime62.toDateTime();
        int int67 = property58.getDifference((org.joda.time.ReadableInstant) dateTime66);
        int int68 = dateTime66.getMillisOfDay();
        org.joda.time.DateTime dateTime70 = dateTime66.plusMillis(999);
        org.joda.time.DateTime dateTime71 = dateTime66.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime73 = dateTime66.withMillis((-3360127159509L));
        org.joda.time.DateTime dateTime75 = dateTime66.withYearOfCentury(30);
        org.joda.time.DateTime dateTime76 = localTime49.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.LocalTime.Property property77 = localTime49.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime79 = property77.setCopy("eng");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"eng\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 36000097 + "'", int53 == 36000097);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.clear();
        calendar0.set(126, 36000053, 6);
        java.util.Date date12 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date12.setMonth((int) ' ');
        java.util.Date date20 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromDateFields(date20);
        boolean boolean22 = date12.before(date20);
        int int23 = date20.getTimezoneOffset();
        int int24 = date20.getHours();
        int int25 = date20.getMinutes();
        java.util.Date date29 = new java.util.Date(1969, (int) (byte) 100, (int) '#');
        int int30 = date29.getDate();
        boolean boolean31 = date20.after(date29);
        int int32 = date20.getMonth();
        calendar0.setTime(date20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = calendar0.isSet(738196);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 738196");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-2203634580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1900,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertEquals(date12.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date20.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 17 + "'", int25 == 17);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Jun 04 00:00:00 UTC 3877");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = builder61.build();
        java.time.Instant instant63 = calendar62.toInstant();
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = null;
        org.joda.time.format.DateTimeParser dateTimeParser65 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter64, dateTimeParser65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter66.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withPivotYear((int) (byte) 0);
        boolean boolean71 = calendar62.after((java.lang.Object) dateTimeFormatter70);
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.fromCalendarFields(calendar62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField74 = localTime72.getField(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 28");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572900355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=355,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localTime72);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int5 = calendar0.getWeekYear();
        java.lang.String str6 = calendar0.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar0.getActualMaximum(2865);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 2865");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572900387,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=387,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gregory" + "'", str6, "gregory");
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime6.getZone();
        org.joda.time.DateTime.Property property19 = dateTime6.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime6.withYear(1644630388);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1644630388 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        java.util.Date date6 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        int int7 = date6.getHours();
        long long8 = date6.getTime();
        int int9 = date6.getDay();
        java.lang.Object obj10 = date6.clone();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-2116270194000L) + "'", long8 == (-2116270194000L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "Wed Dec 10 03:10:06 UTC 1902");
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("-9");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-9\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=property[hourofday]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("479", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=479");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        java.util.Date date1 = new java.util.Date(430884576988578L);
        java.lang.Object obj2 = null;
        boolean boolean3 = date1.equals(obj2);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Mar 10 00:16:28 UTC 15624");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 100);
        java.lang.String str14 = dateTimeZone10.getNameKey(292269063L);
        int int16 = dateTimeZone10.getOffset(1644572712440L);
        java.lang.String str18 = dateTimeZone10.getNameKey((long) 4809);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        int int6 = date5.getSeconds();
        int int7 = date5.getSeconds();
        date5.setSeconds(14);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.LocalTime localTime17 = property16.roundHalfEvenCopy();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        int int19 = property16.getMaximumTextLength(locale18);
        boolean boolean20 = date5.equals((java.lang.Object) property16);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 03 23:17:14 UTC 1900");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.plusHours(32770);
        int int12 = localTime11.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localTime11.getFieldType(35135652);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35135652");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        java.lang.String str8 = date5.toLocaleString();
        int int9 = date5.getHours();
        date5.setTime(252000086L);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jan 03 22:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3 sept. 1902 23:17:00" + "'", str8, "3 sept. 1902 23:17:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property6.addCopy(6);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        int int13 = property6.get();
        org.joda.time.LocalTime localTime14 = property6.withMinimumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology19);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property21.withMaximumValue();
        org.joda.time.LocalTime localTime23 = property21.getLocalTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) 'a');
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(3);
        long long32 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        calendar34.setTimeInMillis(100L);
        boolean boolean37 = calendar34.isWeekDateSupported();
        calendar34.roll(2, false);
        calendar34.setTimeInMillis(0L);
        java.util.TimeZone timeZone43 = calendar34.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int47 = dateTimeZone45.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        long long60 = dateTimeZone45.getMillisKeepLocal(dateTimeZone58, (long) 2);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 8, dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime61.toMutableDateTimeISO();
        boolean boolean63 = dateTime61.isAfterNow();
        org.joda.time.DateTime dateTime65 = dateTime61.withMillis(100L);
        int int66 = property21.getDifference((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.LocalTime localTime67 = property21.roundCeilingCopy();
        org.joda.time.LocalTime localTime69 = property21.addCopy(62135596800117L);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property21.getFieldType();
        boolean boolean71 = localTime14.isSupported(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 36000097L + "'", long32 == 36000097L);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2L + "'", long60 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 36000089 + "'", int66 == 36000089);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfWeek();
        org.joda.time.DurationField durationField14 = chronology7.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology7.getDateTimeMillis(1644565558303L, 43200000, 36000053, 737, 80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.setVariant("1967");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.removeUnicodeLocaleAttribute("79140000");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setScript("1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder5.setVariant("86340000");
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.Builder builder11 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder11.setVariant("");
        java.util.Locale.Builder builder15 = builder13.setVariant("7201951");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setRegion("allemand");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: allemand [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        int int5 = calendar0.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = calendar0.getLeastMaximum(587);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 587");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572900663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=663,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        int int6 = date5.getSeconds();
        int int7 = date5.getMonth();
        date5.setMinutes(62220);
        date5.setMinutes((-36002075));
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(5);
        boolean boolean17 = dateTimeFormatter14.isPrinter();
        org.joda.time.Chronology chronology18 = dateTimeFormatter14.getChronology();
        boolean boolean19 = dateTimeFormatter14.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter14.withZoneUTC();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setTimeInMillis(100L);
        boolean boolean27 = calendar24.isWeekDateSupported();
        calendar24.roll(2, false);
        calendar24.setTimeInMillis(0L);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int37 = dateTimeZone35.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.setTimeInMillis(100L);
        boolean boolean41 = calendar38.isWeekDateSupported();
        calendar38.roll(2, false);
        calendar38.setTimeInMillis(0L);
        java.util.TimeZone timeZone47 = calendar38.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        long long50 = dateTimeZone35.getMillisKeepLocal(dateTimeZone48, (long) 2);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 8, dateTimeZone35);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(dateTimeZone35);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 10, dateTimeZone35);
        java.lang.String str54 = dateTimeZone35.getID();
        long long56 = dateTimeZone35.nextTransition(10L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter14.withZone(dateTimeZone35);
        boolean boolean58 = dateTimeFormatter57.isOffsetParsed();
        boolean boolean59 = dateTimeFormatter57.isParser();
        boolean boolean60 = date5.equals((java.lang.Object) boolean59);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Sep 20 12:25:00 UTC 1831");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Etc/UTC" + "'", str54, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar.Builder builder52 = builder50.setLenient(true);
        java.util.Calendar.Builder builder54 = builder50.setInstant((long) 491);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder56 = builder54.setCalendarType("\u610f\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: ????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572900734,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=734,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder5.setVariant("86340000");
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.Builder builder11 = builder7.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale13.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = builder11.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder11.clearExtensions();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        int int22 = dateTime21.getEra();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekyear();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime28.minusDays((int) 'a');
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int34 = dateTime32.get(dateTimeFieldType33);
        int int35 = dateTime32.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime32.withMillis(32770L);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(32770);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder41.setExtension('u', "deu");
        java.util.Locale.Builder builder46 = builder44.setRegion("");
        java.util.Locale locale47 = builder46.build();
        java.util.Locale locale48 = builder46.build();
        java.lang.String str49 = dateTime39.toString("32770", locale48);
        java.lang.String str50 = dateTimeField25.getAsShortText(53, locale48);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str55 = dateTimeField25.getAsShortText((long) 102, locale53);
        java.util.Locale locale59 = new java.util.Locale("fr", "-1", "11 Feb 2022 09:45:31 GMT");
        java.lang.String str60 = locale53.getDisplayScript(locale59);
        java.util.Locale.Builder builder61 = builder19.setLocale(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder64 = builder61.setUnicodeLocaleKeyword("Property[monthOfYear]", "11 f\351vr. 2022 09:48:20");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Property[monthOfYear] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str14, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "francese" + "'", str17, "francese");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "32770" + "'", str49, "32770");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "53" + "'", str50, "53");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970" + "'", str55, "1970");
        org.junit.Assert.assertEquals(locale59.toString(), "fr_-1_11 Feb 2022 09:45:31 GMT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTime4.toString("+00:00", locale6);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays(25200999);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(14, 13, 7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZone(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime26.withField(dateTimeFieldType27, 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime26.withPeriodAdded(readablePeriod30, (int) (short) 1);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra(11);
        int int45 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localTime46.getFieldType(0);
        boolean boolean49 = dateTime40.isSupported(dateTimeFieldType48);
        java.lang.String str50 = dateTimeFieldType48.toString();
        int int51 = localTime13.indexOf(dateTimeFieldType48);
        boolean boolean52 = dateTime4.isSupported(dateTimeFieldType48);
        org.joda.time.DateTime dateTime54 = dateTime4.minusYears(292275055);
        int int55 = dateTime54.getDayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hourOfDay" + "'", str50, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = dateTime1.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = dateTime12.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime12.minusMillis(15);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime12.plusHours((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime12.withMillisOfDay(1);
        int int24 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime28 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.minusMinutes(1);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths(0);
        org.joda.time.DateTime dateTime34 = dateTime32.minus((long) 2);
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfHour();
        org.joda.time.Chronology chronology36 = dateTime32.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.centuries();
        org.joda.time.DurationField durationField38 = chronology36.halfdays();
        org.joda.time.DateTime dateTime39 = dateTime23.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.minuteOfDay();
        org.joda.time.Chronology chronology41 = chronology36.withUTC();
        org.joda.time.DateTime dateTime42 = dateTime8.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.yearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone11.getName(8416800097L, locale28);
        java.lang.String str31 = dateTimeZone11.getShortName((long) 11);
        java.lang.String str33 = dateTimeZone11.getNameKey(1920000L);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter6.isOffsetParsed();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        boolean boolean36 = dateTimeZone33.isFixed();
        long long39 = dateTimeZone33.adjustOffset((long) 139680, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone33);
        int int41 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean43 = dateTimeFormatter42.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter42.withDefaultYear(36002097);
        java.io.Writer writer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter45.printTo(writer46, 53L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 139680L + "'", long39 == 139680L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 2);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology12);
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean20 = localTime18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalTime localTime22 = localTime18.plusMillis(52);
        org.joda.time.LocalTime localTime24 = localTime18.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 292278993);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime34 = dateTime29.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.LocalTime localTime35 = dateTime29.toLocalTime();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.setTimeInMillis(100L);
        boolean boolean53 = calendar50.isWeekDateSupported();
        calendar50.roll(2, false);
        calendar50.setTimeInMillis(0L);
        java.util.TimeZone timeZone59 = calendar50.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        long long62 = dateTimeZone47.getMillisKeepLocal(dateTimeZone60, (long) 2);
        boolean boolean63 = dateTimeZone60.isFixed();
        long long66 = dateTimeZone60.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now(dateTimeZone60);
        org.joda.time.LocalTime localTime68 = localTime35.withFields((org.joda.time.ReadablePartial) localTime67);
        org.joda.time.LocalTime localTime69 = localTime27.withFields((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean71 = localTime69.isSupported(dateTimeFieldType70);
        int[] intArray73 = chronology12.get((org.joda.time.ReadablePartial) localTime69, 345600000L);
        org.joda.time.DateTimeField dateTimeField74 = chronology12.halfdayOfDay();
        boolean boolean76 = dateTimeField74.isLeap((-3L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 2L + "'", long62 == 2L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 139680L + "'", long66 == 139680L);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1914-01-01t00:00:00.000z");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 1970);
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays(0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(23);
        boolean boolean16 = dateTime12.isEqual(132L);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime12.withDurationAdded(readableDuration17, 292278993);
        org.joda.time.LocalDateTime localDateTime20 = dateTime12.toLocalDateTime();
        boolean boolean21 = dateTimeZone1.isLocalDateTimeGap(localDateTime20);
        java.lang.String str23 = dateTimeZone1.getName((-251999990L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-251999990L) + "'", long7 == (-251999990L));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+70:00" + "'", str23, "+70:00");
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.Interval interval45 = property6.toInterval();
        org.joda.time.LocalTime localTime46 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime47 = property6.getLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        boolean boolean50 = localTime47.isSupported(durationFieldType49);
        org.joda.time.DateTime dateTime51 = localTime47.toDateTimeToday();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Date date54 = new java.util.Date((int) '4', 86399999, 4);
        java.util.Calendar.Builder builder55 = builder50.setInstant(date54);
        java.util.Calendar.Builder builder57 = builder55.setInstant((-251999990L));
        java.util.Calendar.Builder builder61 = builder55.setWeekDate(97, 32769, (int) '4');
        java.util.Calendar.Builder builder63 = builder61.setLenient(false);
        java.util.Calendar.Builder builder67 = builder63.setWeekDate((-244803), 999, 36000099);
        java.util.Calendar.Builder builder72 = builder67.setTimeOfDay(15, 22, (int) 'a', 96);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property75 = dateTime74.minuteOfHour();
        org.joda.time.DateTime dateTime77 = dateTime74.minusDays((int) 'a');
        org.joda.time.DateTime dateTime78 = dateTime74.toDateTime();
        org.joda.time.DateTime.Property property79 = dateTime74.year();
        java.util.Locale locale80 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology85);
        org.joda.time.LocalTime.Property property87 = localTime86.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField88 = property87.getField();
        java.util.Locale locale90 = java.util.Locale.KOREA;
        java.util.Locale locale91 = java.util.Locale.FRENCH;
        java.lang.String str92 = locale90.getDisplayName(locale91);
        java.lang.String str93 = dateTimeField88.getAsText(32770, locale90);
        java.lang.String str94 = locale80.getDisplayLanguage(locale90);
        java.lang.String str95 = property79.getAsShortText(locale80);
        java.util.Calendar.Builder builder96 = builder67.setLocale(locale80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder98 = builder67.setCalendarType("fra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: fra");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572901127,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=21,MILLISECOND=127,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Dec 04 00:00:00 UTC 7201951");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str92, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "32770" + "'", str93, "32770");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str94, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970" + "'", str95, "1970");
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.monthOfYear();
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology8.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime3.plusHours(292278993);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withPeriodAdded(readablePeriod12, 32769);
        org.joda.time.DateTime dateTime16 = dateTime11.minusMonths(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        int int8 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes(1);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(0);
        org.joda.time.DateTime dateTime20 = dateTime18.minus((long) 2);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfHour();
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.centuries();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(chronology22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime5, chronology22);
        org.joda.time.DurationField durationField27 = chronology22.halfdays();
        org.joda.time.ReadablePartial readablePartial28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology22.set(readablePartial28, (long) (-1644572712));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(31572000053L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusSeconds(126);
        int int5 = dateTime4.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        java.lang.String str3 = durationFieldType1.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weeks" + "'", str2, "weeks");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weeks" + "'", str3, "weeks");
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property6.getFieldType();
        int int46 = property6.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) 70);
        java.lang.String str19 = dateTimeZone15.getShortName(1L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        int int25 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter4.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter4.withZoneUTC();
        int int28 = dateTimeFormatter4.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("36000116", (double) 1644572860241L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644572860241E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long9 = dateTimeField7.roundFloor((long) (short) 100);
        org.joda.time.DurationField durationField10 = dateTimeField7.getDurationField();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology15);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = dateTimeField18.getAsText(32770, locale20);
        java.lang.String str25 = dateTimeField18.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localTime28);
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale37.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale37.getDisplayCountry(locale40);
        java.lang.String str42 = locale36.getDisplayVariant(locale37);
        java.lang.String str43 = locale36.getVariant();
        java.lang.String str44 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime28, 14, locale36);
        java.util.Locale locale45 = locale36.stripExtensions();
        java.lang.Object obj46 = locale45.clone();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str22, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32770" + "'", str23, "32770");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 999 + "'", int34 == 999);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "KOR" + "'", str38, "KOR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ko-KR" + "'", str39, "ko-KR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Corea del Sud" + "'", str41, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "14" + "'", str44, "14");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "it_IT");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setDate(0, 0, (int) 'x');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = dateTimeField14.getAsText(32770, locale16);
        java.lang.String str20 = locale6.getDisplayLanguage(locale16);
        java.util.Calendar.Builder builder21 = builder5.setLocale(locale6);
        java.util.Calendar.Builder builder26 = builder21.setTimeOfDay((-7198030), 39, 30, 36000545);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str18, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32770" + "'", str19, "32770");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str20, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        java.util.Date date13 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date13);
        boolean boolean15 = date5.before(date13);
        int int16 = date13.getTimezoneOffset();
        java.util.Date date23 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean24 = date13.after(date23);
        int int25 = date13.getMonth();
        date13.setYear(7);
        long long28 = date13.getTime();
        date13.setMinutes(0);
        date13.setDate(13);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Mar 13 23:00:00 UTC 1907");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1982796180000L) + "'", long28 == (-1982796180000L));
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withZone(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime20 = dateTime17.withField(dateTimeFieldType18, 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfDay();
        org.joda.time.DurationField durationField30 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType18.getField(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime4.withField(dateTimeFieldType18, 4809);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4809 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology22.getZone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusHours((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime3.withMillisOfDay(1);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(0);
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 2);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DateTime dateTime30 = dateTime14.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfDay();
        java.lang.String str34 = dateTimeField32.getAsText(100L);
        long long37 = dateTimeField32.add((long) 960, 8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 968L + "'", long37 == 968L);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(4);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long41 = dateTimeZone26.getMillisKeepLocal(dateTimeZone39, (long) 2);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 8, dateTimeZone26);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 0);
        int int45 = dateTime44.getEra();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime48 = dateTime44.minusMinutes(1);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.DateTime dateTime50 = property49.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology55);
        org.joda.time.LocalTime.Property property57 = localTime56.millisOfSecond();
        int int58 = localTime56.size();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) 100, chronology60);
        int int62 = localTime61.getMillisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) 100, chronology64);
        boolean boolean66 = localTime61.isAfter((org.joda.time.ReadablePartial) localTime65);
        int int67 = localTime56.compareTo((org.joda.time.ReadablePartial) localTime65);
        org.joda.time.DateTime dateTime68 = dateTime50.withFields((org.joda.time.ReadablePartial) localTime56);
        boolean boolean69 = dateTime42.equals((java.lang.Object) localTime56);
        org.joda.time.LocalTime localTime71 = localTime56.plusMillis(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str73 = dateTimeFieldType72.getName();
        boolean boolean74 = localTime56.isSupported(dateTimeFieldType72);
        int int75 = localTime11.indexOf(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2L + "'", long41 == 2L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hourOfDay" + "'", str73, "hourOfDay");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getShortName((-1680047639000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withDefaultYear((-599));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withDefaultYear(35126);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        int int26 = dateTime24.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.plus(readableDuration27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime24.plus(readablePeriod29);
        org.joda.time.DateTime.Property property31 = dateTime30.secondOfDay();
        org.joda.time.DateTime dateTime32 = property31.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime36.minusDays((int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.DurationField durationField43 = durationFieldType34.getField(chronology42);
        org.joda.time.Chronology chronology44 = chronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfSecond();
        org.joda.time.DurationField durationField46 = chronology42.months();
        org.joda.time.DurationField durationField47 = chronology42.months();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime32.toMutableDateTime(chronology42);
        int int49 = mutableDateTime48.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = dateTimeFormatter20.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime48, "TWN", 33342);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime3 = dateTime1.minus(10L);
        org.joda.time.DateTime.Property property4 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withMillisOfDay(999);
        int int7 = dateTime1.getEra();
        int int8 = dateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        int int16 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime localTime18 = localTime5.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean20 = localTime5.isSupported(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType19.getField(chronology21);
        int int24 = dateTimeField22.getLeapAmount(1137048084691326000L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter7.withChronology(chronology15);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder19.setExtension('u', "deu");
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.util.Locale.Builder builder25 = builder19.setLocale(locale23);
        java.util.Locale locale26 = builder19.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter18.withLocale(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear(985);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.parse("java.util.GregorianCalendar[time=999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", dateTimeFormatter27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Englisch" + "'", str24, "Englisch");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getCountry();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        calendar4.add(14, 52);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.add(491, 30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "KOR" + "'", str1, "KOR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko-KR" + "'", str2, "ko-KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KR" + "'", str3, "KR");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572901742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=21,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusHours((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime3.withMillisOfDay(1);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(0);
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 2);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DateTime dateTime30 = dateTime14.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfDay();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DurationField durationField34 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = chronology27.getDateTimeMillis((-719065L), 32769, 14, 7201951, 36000099);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalTime localTime21 = property19.getLocalTime();
        org.joda.time.LocalTime localTime22 = property19.roundCeilingCopy();
        boolean boolean23 = localTime2.equals((java.lang.Object) property19);
        org.joda.time.LocalTime localTime25 = localTime2.plusMinutes((int) (byte) 10);
        org.joda.time.LocalTime localTime27 = localTime2.plusHours(86);
        int int28 = localTime2.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime10.plusSeconds(96);
        org.joda.time.DateTime dateTime17 = dateTime10.withHourOfDay((int) (byte) 10);
        boolean boolean19 = dateTime10.isBefore((long) 2);
        org.joda.time.DateTime dateTime22 = dateTime10.withDurationAdded((-2177452800009L), 17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int26 = dateTimeZone24.getOffset((long) (short) 100);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone24.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = dateTime10.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime30.toMutableDateTime(chronology31);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 57600000 + "'", int26 == 57600000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        java.util.Date date11 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromDateFields(date11);
        org.joda.time.LocalTime.Property property13 = localTime12.minuteOfHour();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.LocalTime localTime22 = property20.getLocalTime();
        org.joda.time.LocalTime localTime23 = property20.roundCeilingCopy();
        boolean boolean24 = property20.isLeap();
        org.joda.time.LocalTime localTime25 = property20.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property20.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = localTime26.isSupported(dateTimeFieldType27);
        int int29 = localTime12.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        org.joda.time.DurationField durationField34 = chronology32.halfdays();
        org.joda.time.DurationField durationField35 = chronology32.minutes();
        boolean boolean36 = dateTimeFieldType27.isSupported(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(48, (-63119927), 19, 363, 57600000, (-58), chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 363 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime2.withMillisOfDay(9);
        org.joda.time.LocalTime.Property property11 = localTime2.secondOfMinute();
        org.joda.time.LocalTime.Property property12 = localTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalTime localTime15 = property12.addWrapFieldToCopy(271);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.setTimeInMillis(100L);
        boolean boolean25 = calendar22.isWeekDateSupported();
        calendar22.roll(2, false);
        calendar22.setTimeInMillis(0L);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset((long) 70);
        java.lang.String str36 = dateTimeZone32.getShortName(1L);
        long long40 = dateTimeZone32.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime41 = dateTime20.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMillis(11);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfHour();
        org.joda.time.DateTime dateTime50 = dateTime47.minusDays((int) 'a');
        org.joda.time.DateTime dateTime51 = dateTime47.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime51.toYearMonthDay();
        org.joda.time.Chronology chronology53 = yearMonthDay52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfYear();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField57.getType();
        int int59 = dateTime43.get(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property60 = localTime15.property(dateTimeFieldType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572901742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=21,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        date5.setTime((long) (byte) 1);
        int int10 = date5.getTimezoneOffset();
        java.util.Date date17 = new java.util.Date(1969, 67, 107, (-52), (int) (byte) -1, 269);
        boolean boolean18 = date5.before(date17);
        int int19 = date17.getSeconds();
        java.time.Instant instant20 = date17.toInstant();
        java.lang.String str21 = date17.toGMTString();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Nov 12 20:03:29 UTC 3874");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 29 + "'", int19 == 29);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "12 Nov 3874 20:03:29 GMT" + "'", str21, "12 Nov 3874 20:03:29 GMT");
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        java.util.Calendar calendar8 = java.util.Calendar.getInstance();
        calendar8.setTimeInMillis(100L);
        boolean boolean11 = calendar8.isWeekDateSupported();
        calendar8.roll(2, false);
        calendar8.setTimeInMillis(0L);
        java.util.TimeZone timeZone17 = calendar8.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int21 = dateTimeZone19.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.setTimeInMillis(100L);
        boolean boolean25 = calendar22.isWeekDateSupported();
        calendar22.roll(2, false);
        calendar22.setTimeInMillis(0L);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long34 = dateTimeZone19.getMillisKeepLocal(dateTimeZone32, (long) 2);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 8, dateTimeZone19);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(dateTimeZone19);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 10, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalTime localTime39 = localTime37.plus(readablePeriod38);
        org.joda.time.LocalTime localTime41 = localTime39.minusSeconds(10);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.setTimeInMillis(100L);
        boolean boolean45 = calendar42.isWeekDateSupported();
        calendar42.roll(2, false);
        calendar42.setTimeInMillis(0L);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int55 = dateTimeZone53.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance();
        calendar56.setTimeInMillis(100L);
        boolean boolean59 = calendar56.isWeekDateSupported();
        calendar56.roll(2, false);
        calendar56.setTimeInMillis(0L);
        java.util.TimeZone timeZone65 = calendar56.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        long long68 = dateTimeZone53.getMillisKeepLocal(dateTimeZone66, (long) 2);
        long long71 = dateTimeZone66.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTime dateTime72 = localTime41.toDateTimeToday(dateTimeZone66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(540, 577, 58232770, 600, 277, 35237999, dateTimeZone66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2L + "'", long34 == 2L);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2L + "'", long68 == 2L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setLanguage("09:58:23.097");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 09:58:23.097 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        boolean boolean27 = dateTimeZone24.isFixed();
        long long30 = dateTimeZone24.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone24);
        int int34 = dateTimeZone24.getStandardOffset(0L);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime.Property property36 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.plus(3600009L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 139680L + "'", long30 == 139680L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds(11);
        org.joda.time.LocalDateTime localDateTime33 = dateTime32.toLocalDateTime();
        org.joda.time.DateTime dateTime35 = dateTime32.minusYears(4);
        boolean boolean36 = dateTime35.isEqualNow();
        int int37 = dateTime35.getMinuteOfDay();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.halfdays();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology7.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-58), 32770, 13, (-599), 577, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -599 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        int int10 = property9.getMaximumValue();
        boolean boolean11 = property9.isLeap();
        org.joda.time.LocalTime localTime13 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime14 = property9.roundFloorCopy();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone40, (long) 2);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 8, dateTimeZone27);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        int int46 = dateTime45.getEra();
        org.joda.time.DateTime dateTime47 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime49 = dateTime45.minusMinutes(1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfYear();
        org.joda.time.DateTime dateTime51 = property50.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology56);
        org.joda.time.LocalTime.Property property58 = localTime57.millisOfSecond();
        int int59 = localTime57.size();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 100, chronology61);
        int int63 = localTime62.getMillisOfSecond();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 100, chronology65);
        boolean boolean67 = localTime62.isAfter((org.joda.time.ReadablePartial) localTime66);
        int int68 = localTime57.compareTo((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.DateTime dateTime69 = dateTime51.withFields((org.joda.time.ReadablePartial) localTime57);
        boolean boolean70 = dateTime43.equals((java.lang.Object) localTime57);
        org.joda.time.LocalTime localTime72 = localTime57.plusMillis(10);
        java.util.Date date78 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromDateFields(date78);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology84);
        int int86 = localTime79.compareTo((org.joda.time.ReadablePartial) localTime85);
        boolean boolean87 = localTime72.isBefore((org.joda.time.ReadablePartial) localTime85);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int89 = localTime72.indexOf(dateTimeFieldType88);
        int int90 = localTime14.get(dateTimeFieldType88);
        java.lang.String str91 = dateTimeFieldType88.toString();
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType88.getDurationType();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "secondOfMinute" + "'", str91, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationFieldType92);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfWeek();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.halfdays();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readablePeriod5);
        org.joda.time.DateTime.Property property7 = dateTime4.secondOfMinute();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("608");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology8);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        org.joda.time.LocalTime localTime14 = property10.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime15 = property10.roundHalfEvenCopy();
        java.util.Date date21 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromDateFields(date21);
        boolean boolean23 = localTime15.equals((java.lang.Object) localTime22);
        org.joda.time.LocalTime.Property property24 = localTime22.millisOfSecond();
        org.joda.time.LocalTime.Property property25 = localTime22.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime27 = localTime22.minus(readablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(52);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone29);
        org.joda.time.LocalTime localTime31 = localTime27.withFields((org.joda.time.ReadablePartial) localTime30);
        int int32 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime27);
        org.joda.time.LocalTime localTime34 = localTime3.minusHours(79201970);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        int int7 = dateTime4.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime4.minusMillis(491);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime4.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime13 = dateTime4.minusDays(97);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property6.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours(57600000);
        int int16 = localTime13.getMillisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean21 = localTime19.isSupported(dateTimeFieldType20);
        org.joda.time.LocalTime localTime23 = localTime19.plusMillis(52);
        org.joda.time.LocalTime localTime25 = localTime19.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime28 = localTime25.withPeriodAdded(readablePeriod26, 292278993);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime25.plus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime32.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime32.plus(readableDuration37);
        org.joda.time.DateTime dateTime40 = dateTime32.minus(17L);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property42 = dateTime32.property(dateTimeFieldType41);
        int int43 = localTime25.get(dateTimeFieldType41);
        int int44 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000097 + "'", int16 == 36000097);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime7.dayOfYear();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.DateTime dateTime15 = property12.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property12.getFieldType();
        java.lang.String str17 = dateTimeFieldType16.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str9, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfYear" + "'", str17, "dayOfYear");
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 36000097);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        boolean boolean16 = dateTime13.isEqual((-43199903L));
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears(732);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withCenturyOfEra(292269054);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292269054 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.Chronology chronology13 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = localTime5.getField((int) (short) 1);
        long long17 = dateTimeField15.roundHalfFloor((long) 292269054);
        long long20 = dateTimeField15.getDifferenceAsLong((long) 86220268, 0L);
        long long22 = dateTimeField15.roundHalfFloor(0L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.100" + "'", str8, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 292260000L + "'", long17 == 292260000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1437L + "'", long20 == 1437L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField13 = property6.getField();
        boolean boolean14 = property6.isLeap();
        org.joda.time.LocalTime localTime16 = property6.addCopy(86L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = dateTimeField25.getAsText(32770, locale27);
        java.lang.String str32 = dateTimeField25.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        int int36 = localTime35.getMillisOfSecond();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 100, chronology38);
        boolean boolean40 = localTime35.isAfter((org.joda.time.ReadablePartial) localTime39);
        int int41 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localTime35);
        int int43 = localTime35.getValue(1);
        org.joda.time.Chronology chronology44 = localTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.minuteOfDay();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes(1);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.DateTime.Property property53 = dateTime51.secondOfMinute();
        org.joda.time.DateTime dateTime55 = dateTime51.withHourOfDay(16);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(1970L);
        org.joda.time.DateTime dateTime58 = dateTime51.withFields((org.joda.time.ReadablePartial) localTime57);
        org.joda.time.LocalTime.Property property59 = localTime57.hourOfDay();
        org.joda.time.LocalTime localTime61 = localTime57.plusHours(21);
        java.util.Locale locale63 = new java.util.Locale("10:00:00.097");
        java.lang.String str64 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localTime61, locale63);
        java.lang.String str65 = localTime16.toString("09:56:00.099", locale63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField67 = localTime16.getField(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str29, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "32770" + "'", str30, "32770");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999 + "'", int41 == 999);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertEquals(locale63.toString(), "10:00:00.097");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1260" + "'", str64, "1260");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "09:56:00.099" + "'", str65, "09:56:00.099");
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(3);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.minus((-251999990L));
        boolean boolean24 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getWeekOfWeekyear();
        int int26 = dateTime23.getYearOfCentury();
        java.util.GregorianCalendar gregorianCalendar27 = dateTime23.toGregorianCalendar();
        java.lang.String str28 = dateTime23.toString();
        int int29 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime23.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-03T21:56:59.990Z" + "'", str28, "1970-01-03T21:56:59.990Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 79019 + "'", int29 == 79019);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime7.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime7.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime7.minus(17L);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime7.minus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology25.getZone();
        org.joda.time.DurationField durationField29 = chronology25.centuries();
        long long33 = chronology25.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime7.toMutableDateTime(chronology25);
        boolean boolean36 = dateTime5.equals((java.lang.Object) chronology25);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-49881509L) + "'", long33 == (-49881509L));
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setLanguage("DateTimeField[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: DateTimeField[minuteOfHour] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property8 = localTime2.secondOfMinute();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalTime localTime11 = property8.addCopy(0);
        int int12 = localTime11.size();
        java.util.Date date16 = new java.util.Date(985, (int) (byte) 10, 121);
        int int17 = date16.getMinutes();
        boolean boolean18 = localTime11.equals((java.lang.Object) date16);
        java.util.Date date24 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date24.setMonth((int) ' ');
        date24.setTime((long) (byte) 1);
        int int29 = date24.getTimezoneOffset();
        java.util.Date date36 = new java.util.Date(1969, 67, 107, (-52), (int) (byte) -1, 269);
        boolean boolean37 = date24.before(date36);
        int int38 = date36.getSeconds();
        int int39 = date16.compareTo(date36);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572902227,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=227,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Mar 01 00:00:00 UTC 2886");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Nov 12 20:03:29 UTC 3874");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 29 + "'", int38 == 29);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = dateTimeField24.getAsText(32770, locale26);
        java.lang.String str31 = dateTimeField24.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        int int35 = localTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        boolean boolean39 = localTime34.isAfter((org.joda.time.ReadablePartial) localTime38);
        int int40 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime34);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromCalendarFields(calendar41);
        int int43 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean48 = localTime46.isSupported(dateTimeFieldType47);
        org.joda.time.LocalTime localTime50 = localTime46.plusMillis(52);
        java.lang.Object obj51 = new java.lang.Object();
        boolean boolean52 = localTime50.equals(obj51);
        int int53 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology58);
        org.joda.time.LocalTime.Property property60 = localTime59.millisOfSecond();
        org.joda.time.LocalTime localTime61 = property60.withMaximumValue();
        org.joda.time.LocalTime localTime62 = property60.getLocalTime();
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.lang.String str65 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localTime62, (int) ' ', locale64);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology70);
        org.joda.time.LocalTime.Property property72 = localTime71.millisOfSecond();
        org.joda.time.LocalTime localTime73 = property72.withMaximumValue();
        int int75 = localTime73.getValue(0);
        java.lang.String str76 = localTime73.toString();
        org.joda.time.LocalTime localTime78 = localTime73.minusSeconds(12);
        org.joda.time.LocalTime localTime80 = localTime73.plusHours((int) 'u');
        int[] intArray81 = localTime73.getValues();
        chronology12.validate((org.joda.time.ReadablePartial) localTime62, intArray81);
        org.joda.time.DurationField durationField83 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField84 = chronology12.dayOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str28, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32770" + "'", str29, "32770");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 999 + "'", int40 == 999);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644572902244,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=244,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999 + "'", int43 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 999 + "'", int53 == 999);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "32" + "'", str65, "32");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "10:00:00.999" + "'", str76, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 0, 0, 999]");
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime8.withPeriodAdded(readablePeriod9, 292278993);
        org.joda.time.DateTime dateTime12 = localTime8.toDateTimeToday();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        int int20 = localTime18.size();
        org.joda.time.LocalTime localTime22 = localTime18.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime24 = localTime18.minusMillis((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime24.plus(readablePeriod25);
        boolean boolean27 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime24);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 8, dateTimeZone40);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 0);
        int int59 = dateTime58.getEra();
        org.joda.time.DateTime dateTime60 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime62 = dateTime58.minusMinutes(1);
        org.joda.time.DateTime.Property property63 = dateTime62.dayOfYear();
        org.joda.time.DateTime dateTime64 = property63.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology69);
        org.joda.time.LocalTime.Property property71 = localTime70.millisOfSecond();
        int int72 = localTime70.size();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long) 100, chronology74);
        int int76 = localTime75.getMillisOfSecond();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((long) 100, chronology78);
        boolean boolean80 = localTime75.isAfter((org.joda.time.ReadablePartial) localTime79);
        int int81 = localTime70.compareTo((org.joda.time.ReadablePartial) localTime79);
        org.joda.time.DateTime dateTime82 = dateTime64.withFields((org.joda.time.ReadablePartial) localTime70);
        boolean boolean83 = dateTime56.equals((java.lang.Object) localTime70);
        org.joda.time.LocalTime localTime85 = localTime70.plusMillis(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str87 = dateTimeFieldType86.getName();
        boolean boolean88 = localTime70.isSupported(dateTimeFieldType86);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.LocalTime localTime90 = localTime70.minus(readablePeriod89);
        boolean boolean91 = localTime24.isBefore((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.LocalTime localTime93 = localTime24.plusMinutes(1901);
        org.joda.time.LocalTime.Property property94 = localTime93.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hourOfDay" + "'", str87, "hourOfDay");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(localTime93);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime.Property property7 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime12 = dateTime10.minus(10L);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean24 = dateTime20.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        int int26 = dateTime12.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes(1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology41);
        boolean boolean46 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime32.plus(readablePeriod47);
        org.joda.time.Chronology chronology49 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType23.getField(chronology49);
        org.joda.time.DateTime dateTime51 = dateTime8.toDateTime(chronology49);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str22, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(86220268, 1971, 271, (-25201), 0, 0, (-48957));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -25201 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(30, 36000097, 14, 1974, 25, 35158814);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1974 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = dateTimeFormatter8.parseLocalDate("1970");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.DateTimeField dateTimeField11 = property6.getField();
        java.lang.String str12 = dateTimeField11.getName();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millisOfSecond" + "'", str12, "millisOfSecond");
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        int int14 = dateTimeField7.getMaximumValue((long) 0);
        long long16 = dateTimeField7.roundHalfEven((long) (byte) 100);
        boolean boolean17 = dateTimeField7.isLenient();
        long long19 = dateTimeField7.roundHalfEven((long) 58620000);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale21.getDisplayCountry(locale24);
        java.lang.String str26 = dateTimeField7.getAsText((long) 19, locale24);
        java.lang.String str27 = locale24.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = locale24.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 58620000L + "'", long19 == 58620000L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "KOR" + "'", str22, "KOR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ko-KR" + "'", str23, "ko-KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Corea del Sud" + "'", str25, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "19" + "'", str26, "19");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime5.toYearMonthDay();
        org.joda.time.DateTime dateTime10 = dateTime5.plusSeconds(15);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 588);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale11.getDisplayVariant(locale12);
        java.lang.String str18 = locale10.getDisplayScript(locale12);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale12);
        java.lang.String str20 = dateTime4.toString("-1", locale12);
        org.joda.time.DateTime dateTime22 = dateTime4.plus((long) 139680);
        org.joda.time.DateTime dateTime23 = dateTime4.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "KOR" + "'", str13, "KOR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Corea del Sud" + "'", str16, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572902455,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=455,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone9);
        calendar10.setFirstDayOfWeek(15);
        int int13 = calendar10.getWeekYear();
        calendar10.setFirstDayOfWeek(152);
        java.util.Date date16 = calendar10.getTime();
        int int17 = calendar10.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((long) (short) 0);
        int int25 = property22.get();
        org.joda.time.DateTime dateTime26 = property22.roundCeilingCopy();
        org.joda.time.DurationField durationField27 = property22.getLeapDurationField();
        org.joda.time.DateTime dateTime29 = property22.addToCopy(36000097);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone39);
        boolean boolean41 = dateTime29.equals((java.lang.Object) timeZone39);
        calendar10.setTimeZone(timeZone39);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572902470,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=152,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=470,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:48:22 UTC 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644572902470,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=470,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.LocalTime localTime19 = localTime15.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime21 = localTime15.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        int int25 = localTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        boolean boolean29 = localTime24.isAfter((org.joda.time.ReadablePartial) localTime28);
        boolean boolean30 = localTime21.isEqual((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        int int39 = localTime38.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        boolean boolean43 = localTime38.isAfter((org.joda.time.ReadablePartial) localTime42);
        int int44 = property33.compareTo((org.joda.time.ReadablePartial) localTime38);
        java.lang.String str45 = localTime38.toString();
        boolean boolean46 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime38);
        boolean boolean47 = localTime5.isEqual((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.LocalTime.Property property48 = localTime5.millisOfSecond();
        org.joda.time.DurationField durationField49 = property48.getDurationField();
        org.joda.time.DurationField durationField50 = property48.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField51 = property48.getField();
        java.lang.String str52 = property48.getAsString();
        org.joda.time.LocalTime localTime53 = property48.withMinimumValue();
        org.joda.time.LocalTime localTime54 = property48.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime55 = localTime54.toDateTimeToday();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "00:00:00.100" + "'", str45, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "97" + "'", str52, "97");
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime10.minusMillis(7201951);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withDayOfWeek(41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        int int15 = dateTime12.getYearOfEra();
        boolean boolean16 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime5.plus(readablePeriod17);
        org.joda.time.DateTime.Property property19 = dateTime5.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = dateTime14.toLocalDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.weekyear();
        long long18 = dateTime16.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        java.util.Locale.Category category0 = null;
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category1);
        java.util.Locale locale4 = java.util.Locale.US;
        java.util.Locale.setDefault(category1, locale4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category1);
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category1, locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.lang.String str11 = locale7.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-US" + "'", str10, "en-US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "US" + "'", str11, "US");
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes(491);
        org.joda.time.DateTime dateTime15 = dateTime1.plusMonths((int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.100" + "'", str8, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime.Property property16 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) (byte) -1);
        int int20 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime.Property property21 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime23 = dateTime17.minusMonths(1977);
        org.joda.time.DateTime.Property property24 = dateTime23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        int int33 = localTime31.size();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 100, chronology35);
        int int37 = localTime36.getMillisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        boolean boolean41 = localTime36.isAfter((org.joda.time.ReadablePartial) localTime40);
        int int42 = localTime31.compareTo((org.joda.time.ReadablePartial) localTime40);
        org.joda.time.LocalTime localTime44 = localTime31.withMillisOfDay((int) ' ');
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        boolean boolean46 = localTime31.isSupported(durationFieldType45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        int int54 = localTime52.size();
        int[] intArray55 = localTime52.getValues();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property58 = dateTime57.minuteOfHour();
        org.joda.time.DateTime dateTime60 = dateTime57.minusDays((int) 'a');
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime57.era();
        org.joda.time.DateTime dateTime64 = dateTime57.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime66 = dateTime57.plusHours(1);
        org.joda.time.TimeOfDay timeOfDay67 = dateTime66.toTimeOfDay();
        int int68 = localTime52.compareTo((org.joda.time.ReadablePartial) timeOfDay67);
        int int69 = localTime31.compareTo((org.joda.time.ReadablePartial) localTime52);
        int int70 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localTime31);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 0, 0, 97]");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 100, chronology16);
        int int18 = localTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        boolean boolean22 = localTime17.isAfter((org.joda.time.ReadablePartial) localTime21);
        int int23 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime17);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar24);
        int int26 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 8, dateTimeZone40);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(dateTimeZone40);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 10, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalTime localTime60 = localTime58.plus(readablePeriod59);
        org.joda.time.LocalTime localTime62 = localTime60.minusSeconds(10);
        org.joda.time.LocalTime localTime64 = localTime62.plusMinutes(86399999);
        int int65 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime64);
        org.joda.time.LocalTime.Property property66 = localTime25.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology71);
        org.joda.time.LocalTime.Property property73 = localTime72.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = property73.getField();
        long long76 = dateTimeField74.roundFloor((long) (short) 100);
        boolean boolean77 = localTime25.equals((java.lang.Object) long76);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572902677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=677,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2L + "'", long55 == 2L);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L + "'", long76 == 100L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale1.getDisplayLanguage(locale3);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar6.getMinimum(36000249);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36000249");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str2, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "francese" + "'", str5, "francese");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572902700,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=700,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 1970);
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) 3);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 121, dateTimeZone20);
        int int37 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        org.joda.time.Instant instant39 = dateTime36.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-251999990L) + "'", long7 == (-251999990L));
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 252000000 + "'", int37 == 252000000);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        java.util.Date date3 = new java.util.Date(1969, (int) (byte) 100, (int) '#');
        int int4 = date3.getDay();
        date3.setTime((long) 86399999);
        java.util.Date date12 = new java.util.Date(7, (int) (byte) -1, 16, (int) (byte) 10, (int) (short) 0);
        int int13 = date12.getDate();
        boolean boolean14 = date3.before(date12);
        date12.setMinutes(18);
        date12.setMinutes(35126);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 23:59:59 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Jan 09 19:26:00 UTC 1907");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = dateTime7.isEqual(readableInstant8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusSeconds(985);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime7.plus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime7.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        boolean boolean7 = calendar0.isWeekDateSupported();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = calendar0.getDisplayNames((int) (short) 1, 0, locale11);
        int int13 = calendar0.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = calendar0.isSet(29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572902747,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=747,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        java.util.Date date6 = new java.util.Date(15, 985, (-979), 1970, 292269054, 9);
        java.util.Date date13 = new java.util.Date(59, 97, 4, (int) (byte) 0, 17, (int) (short) 1);
        java.time.Instant instant14 = date13.toInstant();
        boolean boolean15 = date6.after(date13);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromDateFields(date13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = localTime16.getField((-1963));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1963");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Wed Apr 29 16:54:09 UTC 2550");
        org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 04 00:17:01 UTC 1967");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        calendar0.setMinimalDaysInFirstWeek((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar0.getActualMaximum((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572902808,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=808,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:48:22 UTC 2022");
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        java.util.Locale locale3 = new java.util.Locale("", "centuryofera", "1970-01-01T00:00:00.000+00:00:00.009");
        java.util.Locale locale7 = new java.util.Locale("Wed Sep 03 23:17:00 UTC 1902", "91", "KOR");
        java.lang.String str8 = locale3.getDisplayCountry(locale7);
        org.junit.Assert.assertEquals(locale3.toString(), "_CENTURYOFERA_1970-01-01T00:00:00.000+00:00:00.009");
        org.junit.Assert.assertEquals(locale7.toString(), "wed sep 03 23:17:00 utc 1902_91_KOR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CENTURYOFERA" + "'", str8, "CENTURYOFERA");
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology10.getDateTimeMillis(7020000, 976, 107, 79201970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 976 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(6);
        int int6 = dateTime5.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.minus(readableDuration7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = dateTimeField24.getAsText(32770, locale26);
        java.lang.String str31 = dateTimeField24.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        int int35 = localTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        boolean boolean39 = localTime34.isAfter((org.joda.time.ReadablePartial) localTime38);
        int int40 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime34);
        java.lang.String str41 = dateTimeField24.getName();
        java.util.Date date47 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromDateFields(date47);
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localTime48, (int) 'a', locale50);
        java.lang.String str53 = property15.getAsText(locale50);
        org.joda.time.LocalTime localTime55 = property15.addCopy(0L);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology60);
        org.joda.time.LocalTime.Property property62 = localTime61.millisOfSecond();
        org.joda.time.LocalTime localTime63 = property62.withMaximumValue();
        int int65 = localTime63.getValue(0);
        java.lang.String str66 = localTime63.toString();
        org.joda.time.LocalTime localTime68 = localTime63.minusSeconds(12);
        boolean boolean69 = localTime55.equals((java.lang.Object) localTime63);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalTime localTime71 = localTime55.plus(readablePeriod70);
        org.joda.time.LocalTime.Property property72 = localTime55.minuteOfHour();
        org.joda.time.LocalTime localTime74 = property72.addNoWrapToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = localTime74.getFieldType(0);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property79 = dateTime78.minuteOfHour();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = dateTime78.toDateTime(chronology80);
        org.joda.time.DateTime dateTime82 = localTime74.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = localTime74.equals((java.lang.Object) 121);
        org.joda.time.LocalTime.Property property85 = localTime74.millisOfSecond();
        org.joda.time.LocalTime localTime86 = property85.getLocalTime();
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(345600000L);
        boolean boolean89 = localTime86.equals((java.lang.Object) dateTime88);
        org.joda.time.DateTime dateTime90 = dateTime8.withFields((org.joda.time.ReadablePartial) localTime86);
        org.joda.time.LocalTime localTime91 = dateTime8.toLocalTime();
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime8.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str28, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32770" + "'", str29, "32770");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 999 + "'", int40 == 999);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "millisOfSecond" + "'", str41, "millisOfSecond");
        org.junit.Assert.assertEquals(date47.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "KOR" + "'", str51, "KOR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "97" + "'", str52, "97");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "97" + "'", str53, "97");
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "10:00:00.999" + "'", str66, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(mutableDateTime92);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        java.util.Locale locale1 = new java.util.Locale("1970");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        // The following exception was thrown during execution in test generation
        try {
            calendar2.roll(16, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "1970");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644572902992,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfMinute();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property8.setCopy(1320);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1320 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfWeek();
        java.util.Locale locale17 = new java.util.Locale("1970");
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField13.set(83965235248000L, "1970-01-31T23:57:19.000Z", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-31T23:57:19.000Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals(locale17.toString(), "1970");
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Jan 1, 1970 12:00:00 AM", (double) 900);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=900.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 10, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime31.plus(readablePeriod32);
        org.joda.time.LocalTime localTime35 = localTime33.minusSeconds(10);
        int[] intArray36 = localTime33.getValues();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes(1);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfYear();
        org.joda.time.DateTime dateTime49 = property48.roundHalfCeilingCopy();
        boolean boolean50 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime49.getEra();
        org.joda.time.DateTime dateTime52 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology57);
        org.joda.time.LocalTime.Property property59 = localTime58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        org.joda.time.LocalTime localTime61 = property59.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalTime localTime63 = localTime61.plus(readablePeriod62);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology68);
        org.joda.time.LocalTime.Property property70 = localTime69.millisOfSecond();
        org.joda.time.LocalTime localTime71 = property70.withMaximumValue();
        org.joda.time.LocalTime localTime72 = property70.getLocalTime();
        boolean boolean73 = localTime61.isAfter((org.joda.time.ReadablePartial) localTime72);
        boolean boolean74 = localTime33.equals((java.lang.Object) localTime61);
        org.joda.time.LocalTime localTime76 = localTime33.minusSeconds(1969);
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localTime76);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.LocalTime localTime9 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime10 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property6.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField12 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(11);
        boolean boolean28 = dateTime25.isEqualNow();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime25.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.DateTime dateTime33 = dateTime25.plusMillis(32770);
        boolean boolean35 = dateTime33.isBefore(269L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime33.withMinuteOfHour(71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.withDurationAdded(139680L, (-1));
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        int int12 = dateTime11.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTime4.toString("+00:00", locale6);
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays(25200999);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(14, 13, 7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZone(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime26.withField(dateTimeFieldType27, 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime26.withPeriodAdded(readablePeriod30, (int) (short) 1);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra(11);
        int int45 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localTime46.getFieldType(0);
        boolean boolean49 = dateTime40.isSupported(dateTimeFieldType48);
        java.lang.String str50 = dateTimeFieldType48.toString();
        int int51 = localTime13.indexOf(dateTimeFieldType48);
        boolean boolean52 = dateTime4.isSupported(dateTimeFieldType48);
        org.joda.time.DateTime dateTime54 = dateTime4.minusYears(292275055);
        org.joda.time.DateTime.Property property55 = dateTime4.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hourOfDay" + "'", str50, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        java.util.Date date1 = new java.util.Date((long) 8);
        date1.setSeconds(71);
        java.util.Date date9 = new java.util.Date(7, (int) (byte) -1, 16, (int) (byte) 10, (int) (short) 0);
        int int10 = date9.getDate();
        int int11 = date9.getSeconds();
        long long12 = date9.getTime();
        int int13 = date1.compareTo(date9);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:11 UTC 1970");
        org.junit.Assert.assertEquals(date9.toString(), "Sun Dec 16 10:00:00 UTC 1906");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1989496800000L) + "'", long12 == (-1989496800000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.100" + "'", str8, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(35041737, 1644630388, 152);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder8 = builder5.setWeekDefinition(35279353, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 59);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter18.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.parse("39", dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimePrinter21);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime4 = dateTime1.plusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean6 = dateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        java.lang.String str16 = chronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.year();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology14.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.halfdayOfDay();
        int int22 = dateTime1.get(dateTimeField21);
        int int24 = dateTimeField21.getLeapAmount((-63120000L));
        int int25 = dateTimeField21.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        java.time.Instant instant9 = calendar0.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(36000097);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572903360,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=23,MILLISECOND=360,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:48:23 UTC 2022");
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) 1970);
        long long8 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 52, dateTimeZone2);
        long long12 = dateTimeZone2.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        int int17 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        long long21 = dateTimeZone2.convertLocalToUTC((long) 79200, false, (long) 2022);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone2);
        int int24 = dateTimeZone2.getOffset((long) (-1560));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-251999990L) + "'", long8 == (-251999990L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86399L + "'", long12 == 86399L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 252000000 + "'", int17 == 252000000);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-251920800L) + "'", long21 == (-251920800L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 252000000 + "'", int24 == 252000000);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayScript();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.DurationField durationField12 = durationFieldType3.getField(chronology11);
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale19.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        java.lang.String str24 = locale18.getDisplayVariant(locale19);
        java.lang.String str25 = locale17.getDisplayScript(locale19);
        java.lang.String str26 = locale17.getISO3Language();
        java.lang.String str27 = dateTimeField15.getAsText(36000097L, locale17);
        java.lang.String str28 = locale0.getDisplayLanguage(locale17);
        boolean boolean29 = locale17.hasExtensions();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale17);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = calendar30.getLeastMaximum(769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 769");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KOR" + "'", str20, "KOR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko-KR" + "'", str21, "ko-KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Corea del Sud" + "'", str23, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "deu" + "'", str26, "deu");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "36000097" + "'", str27, "36000097");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italienisch" + "'", str28, "Italienisch");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572903428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=23,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType6.getDurationType();
        java.lang.String str10 = dateTimeFieldType6.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfHalfday" + "'", str10, "hourOfHalfday");
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localTime15.get(dateTimeFieldType18);
        int int20 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.Chronology chronology21 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        java.lang.String str24 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) dateTimeField25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJYearOfEraDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(17817L);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        java.util.Date date5 = new java.util.Date(12, 35400091, 1981, (int) 'u', 9);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jan 05 21:09:00 UTC 2951925");
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        int int4 = calendar0.getLeastMaximum((int) (byte) 1);
        calendar0.set((int) (byte) 1, 56, 0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths((int) ' ');
        boolean boolean20 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime13.minusSeconds(17);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.plus(readableDuration24);
        boolean boolean26 = calendar0.after((java.lang.Object) dateTime23);
        org.joda.time.DateTime.Property property27 = dateTime23.year();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 999, dateTimeZone40);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime45.minusDays(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        int int51 = dateTime50.getEra();
        org.joda.time.DateTime dateTime52 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime54 = dateTime50.minusMinutes(1);
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfYear();
        org.joda.time.DateTime dateTime56 = property55.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = dateTime56.toString(dateTimeFormatter57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean60 = dateTime56.isSupported(dateTimeFieldType59);
        int int61 = dateTime45.get(dateTimeFieldType59);
        org.joda.time.LocalTime.Property property62 = localTime43.property(dateTimeFieldType59);
        org.joda.time.Chronology chronology63 = localTime43.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int64 = property27.compareTo((org.joda.time.ReadablePartial) localTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=56,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292269054 + "'", int4 == 292269054);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str58, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        int int9 = localTime7.getValue(0);
        java.lang.String str10 = localTime7.toString();
        org.joda.time.LocalTime.Property property11 = localTime7.hourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) 'a');
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear(9);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        boolean boolean21 = property11.equals((java.lang.Object) property20);
        long long22 = property20.remainder();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology27);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = dateTimeField30.getAsText(32770, locale32);
        java.lang.String str37 = dateTimeField30.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        int int41 = localTime40.getMillisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 100, chronology43);
        boolean boolean45 = localTime40.isAfter((org.joda.time.ReadablePartial) localTime44);
        int int46 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime40);
        java.lang.String str48 = dateTimeField30.getAsText(0L);
        long long50 = dateTimeField30.roundHalfEven((-50399903L));
        java.util.Date date56 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date56.setMonth((int) ' ');
        date56.setSeconds(0);
        java.lang.String str61 = date56.toGMTString();
        int int62 = date56.getDay();
        date56.setMonth(8);
        int int65 = date56.getHours();
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromDateFields(date56);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology71);
        org.joda.time.LocalTime.Property property73 = localTime72.millisOfSecond();
        org.joda.time.LocalTime localTime74 = property73.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime76 = property73.addCopy((long) 1970);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        int[] intArray78 = localTime76.getValues();
        int int79 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime66, intArray78);
        org.joda.time.LocalTime localTime81 = localTime66.withMillisOfDay((int) 'u');
        boolean boolean82 = property20.equals((java.lang.Object) 'u');
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10:00:00.999" + "'", str10, "10:00:00.999");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2073600000L + "'", long22 == 2073600000L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str34, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "32770" + "'", str35, "32770");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-50399903L) + "'", long50 == (-50399903L));
        org.junit.Assert.assertEquals(date56.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "3 Sep 1902 23:17:00 GMT" + "'", str61, "3 Sep 1902 23:17:00 GMT");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 0, 2, 67]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 999 + "'", int79 == 999);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField23 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology7.secondOfMinute();
        long long26 = dateTimeField24.roundHalfCeiling(6842880000000720L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6842880000001000L + "'", long26 == 6842880000001000L);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 100);
        boolean boolean13 = dateTimeZone10.isFixed();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone10);
        int int15 = dateTime14.getSecondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35303 + "'", int15 == 35303);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime10.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.LocalTime localTime16 = dateTime10.toLocalTime();
        org.joda.time.LocalTime localTime18 = localTime16.plusHours(99);
        org.joda.time.LocalTime localTime20 = localTime16.minusHours(33342);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone22.nextTransition(0L);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getDisplayVariant();
        java.lang.String str28 = dateTimeZone22.getShortName((long) 16, locale26);
        java.lang.String str29 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localTime16, 33342, locale26);
        int[] intArray30 = localTime16.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        int int34 = localTime33.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        boolean boolean38 = localTime33.isAfter((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType39.isSupported(chronology40);
        int int42 = localTime33.indexOf(dateTimeFieldType39);
        org.joda.time.Chronology chronology43 = localTime33.getChronology();
        long long47 = chronology43.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.minuteOfHour();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = localTime55.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = localTime55.getFieldTypes();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property62 = dateTime59.weekyear();
        org.joda.time.DateTime dateTime64 = property62.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property67 = dateTime66.minuteOfHour();
        org.joda.time.DateTime dateTime69 = dateTime66.minusDays((int) 'a');
        org.joda.time.DateTime dateTime70 = dateTime66.toDateTime();
        int int71 = property62.getDifference((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime70.toMutableDateTime();
        org.joda.time.LocalTime localTime73 = dateTime70.toLocalTime();
        boolean boolean74 = localTime55.equals((java.lang.Object) localTime73);
        int int75 = dateTimeField49.getMaximumValue((org.joda.time.ReadablePartial) localTime73);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance();
        calendar77.setTimeInMillis(100L);
        boolean boolean80 = calendar77.isWeekDateSupported();
        calendar77.roll(2, false);
        calendar77.setTimeInMillis(0L);
        java.util.TimeZone timeZone86 = calendar77.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        int int90 = dateTimeZone88.getStandardOffset((-1L));
        org.joda.time.LocalTime localTime91 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone88);
        int int92 = localTime91.getMillisOfSecond();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray93 = localTime91.getFieldTypes();
        int int94 = localTime73.compareTo((org.joda.time.ReadablePartial) localTime91);
        int int95 = localTime16.compareTo((org.joda.time.ReadablePartial) localTime73);
        org.joda.time.LocalTime.Property property96 = localTime73.minuteOfHour();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "33342" + "'", str29, "33342");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 310L + "'", long47 == 310L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 59 + "'", int75 == 59);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        boolean boolean12 = dateTimeField11.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField11.getType();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DurationField durationField24 = chronology21.weekyears();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology21);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType13.getDurationType();
        java.lang.String str29 = durationFieldType28.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyears" + "'", str29, "weekyears");
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.setTimeInMillis(100L);
        boolean boolean23 = calendar20.isWeekDateSupported();
        calendar20.roll(2, false);
        calendar20.setTimeInMillis(0L);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long32 = dateTimeZone17.getMillisKeepLocal(dateTimeZone30, (long) 2);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 8, dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter2.withZone(dateTimeZone17);
        int int35 = dateTimeFormatter2.getDefaultYear();
        java.lang.StringBuffer stringBuffer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer36, (-244803L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2000 + "'", int35 == 2000);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.LocalTime localTime16 = property14.getLocalTime();
        org.joda.time.LocalTime localTime17 = property14.roundCeilingCopy();
        boolean boolean18 = property14.isLeap();
        org.joda.time.LocalTime localTime19 = property14.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property14.getField();
        org.joda.time.LocalTime localTime21 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField22 = property14.getField();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.LocalTime localTime33 = property32.withMaximumValue();
        org.joda.time.LocalTime localTime34 = property32.getLocalTime();
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfDay();
        java.lang.String str36 = property35.getName();
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale37.getCountry();
        java.lang.String str40 = property35.getAsShortText(locale37);
        java.lang.String str41 = dateTimeZone24.getShortName((long) 1, locale37);
        java.lang.String str42 = dateTimeField22.getAsText(58620000, locale37);
        org.joda.time.DateTime dateTime43 = property4.setCopy("18", locale37);
        int int44 = dateTime43.getMillisOfDay();
        org.joda.time.DateTime.Property property45 = dateTime43.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfDay" + "'", str36, "millisOfDay");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "US" + "'", str39, "US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "36000097" + "'", str40, "36000097");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "58620000" + "'", str42, "58620000");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = calendar0.isSet(32000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572903750,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=23,MILLISECOND=750,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime1.minus(17L);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property11 = dateTime1.property(dateTimeFieldType10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime1.toDateMidnight();
        org.joda.time.DateTime dateTime14 = dateTime1.plusWeeks((-7198030));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        org.joda.time.DurationField durationField18 = chronology15.months();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType6.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.clockhourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.DateTime dateTime15 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime16 = property4.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property4.getFieldType();
        org.joda.time.DateTime dateTime19 = property4.setCopy(57600000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour(79200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79200000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("23:59:50.010", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=23:59:50.010");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology2 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = chronology2.minutes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        int int21 = dateTime20.getEra();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes(1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra(11);
        int int31 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.setTimeInMillis(100L);
        boolean boolean45 = calendar42.isWeekDateSupported();
        calendar42.roll(2, false);
        calendar42.setTimeInMillis(0L);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.Chronology chronology53 = chronology39.withZone(dateTimeZone52);
        org.joda.time.DurationField durationField54 = chronology53.seconds();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfDay();
        org.joda.time.DateTime dateTime57 = dateTime12.toDateTime(chronology53);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime60 = dateTime57.withFieldAdded(durationFieldType58, 991);
        org.joda.time.DateTime dateTime62 = dateTime57.minusWeeks(32);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withDurationAdded(readableDuration6, 32770);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime8.withDayOfWeek(220);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 220 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 100, chronology16);
        int int18 = localTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        boolean boolean22 = localTime17.isAfter((org.joda.time.ReadablePartial) localTime21);
        int int23 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime17);
        java.lang.String str24 = dateTimeField7.getName();
        java.util.Date date30 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromDateFields(date30);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime31, (int) 'a', locale33);
        int int36 = localTime31.size();
        org.joda.time.LocalTime localTime38 = localTime31.minusSeconds(1969);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        int int42 = localTime41.getMillisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        boolean boolean46 = localTime41.isAfter((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.Chronology chronology47 = localTime45.getChronology();
        org.joda.time.LocalTime localTime48 = localTime31.withFields((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology54);
        org.joda.time.LocalTime.Property property56 = localTime55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        java.lang.String str59 = dateTimeField57.getAsShortText((long) 121);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale63.getISO3Country();
        java.lang.String str65 = locale63.toLanguageTag();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale63.getDisplayCountry(locale66);
        java.lang.String str68 = locale62.getDisplayVariant(locale63);
        java.lang.String str69 = locale61.getDisplayScript(locale63);
        java.lang.String str70 = locale61.getISO3Language();
        java.util.Locale locale71 = locale61.stripExtensions();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale71);
        java.lang.String str73 = locale71.getISO3Language();
        java.lang.String str74 = dateTimeField57.getAsShortText(109, locale71);
        java.lang.String str75 = localTime31.toString("22:00:00.100", locale71);
        java.lang.String str76 = locale71.getISO3Country();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "millisOfSecond" + "'", str24, "millisOfSecond");
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "KOR" + "'", str34, "KOR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "97" + "'", str35, "97");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "121" + "'", str59, "121");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "KOR" + "'", str64, "KOR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ko-KR" + "'", str65, "ko-KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Corea del Sud" + "'", str67, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "deu" + "'", str70, "deu");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1644572903891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=23,MILLISECOND=891,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "deu" + "'", str73, "deu");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "109" + "'", str74, "109");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "22:00:00.100" + "'", str75, "22:00:00.100");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DurationField durationField9 = property7.getDurationField();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(6);
        java.util.Date date16 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromDateFields(date16);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        int int24 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime23);
        boolean boolean25 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime.Property property26 = localTime8.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale27.getISO3Country();
        java.lang.String str29 = locale27.toLanguageTag();
        java.lang.String str30 = locale27.getCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale27);
        java.util.Set<java.lang.String> strSet32 = locale27.getUnicodeLocaleKeys();
        int int33 = property26.getMaximumShortTextLength(locale27);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "KOR" + "'", str28, "KOR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ko-KR" + "'", str29, "ko-KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "KR" + "'", str30, "KR");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572903922,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=23,MILLISECOND=922,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property6.addNoWrapToCopy(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property6.getFieldType();
        org.joda.time.LocalTime localTime10 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes(1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        int int26 = localTime24.size();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        int int30 = localTime29.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        boolean boolean34 = localTime29.isAfter((org.joda.time.ReadablePartial) localTime33);
        int int35 = localTime24.compareTo((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.DateTime dateTime36 = dateTime18.withFields((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime18.plus(readablePeriod37);
        org.joda.time.DateTime dateTime40 = dateTime18.plusYears(2);
        long long41 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime40.withHourOfDay((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded(readableDuration44, 1967);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-63035999903L) + "'", long41 == (-63035999903L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        int int27 = calendar26.getFirstDayOfWeek();
        java.time.Instant instant28 = calendar26.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = calendar26.isSet(1644551206);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1644551206");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "KOR" + "'", str19, "KOR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko-KR" + "'", str20, "ko-KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Corea del Sud" + "'", str22, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572903965,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=23,MILLISECOND=965,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.Chronology chronology26 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfHour();
        org.joda.time.DurationField durationField28 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.Chronology chronology30 = chronology26.withUTC();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        long long43 = dateTimeZone41.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property48 = dateTime45.weekyear();
        org.joda.time.DateTime dateTime50 = property48.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime52 = dateTime50.withHourOfDay(6);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTimeISO();
        int int54 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) dateTime53);
        long long57 = dateTimeZone41.adjustOffset(121L, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((java.lang.Object) chronology26, dateTimeZone41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 121L + "'", long57 == 121L);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance();
        calendar3.setTimeInMillis(100L);
        boolean boolean6 = calendar3.isWeekDateSupported();
        calendar3.roll(2, false);
        calendar3.setTimeInMillis(0L);
        java.util.TimeZone timeZone12 = calendar3.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.toLanguageTag();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale17.getDisplayCountry(locale20);
        java.lang.String str22 = locale16.getDisplayVariant(locale17);
        java.lang.String str23 = locale15.getDisplayScript(locale17);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone12, locale15);
        java.util.Locale.setDefault(category0, locale15);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        long long35 = dateTimeField33.roundFloor((long) (short) 100);
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category36, locale37);
        int int39 = dateTimeField33.getMaximumTextLength(locale37);
        java.lang.String str40 = locale37.getCountry();
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale44.getISO3Language();
        java.lang.String str47 = locale37.getDisplayVariant(locale44);
        java.util.Locale.setDefault(category0, locale44);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getScript();
        java.lang.String str51 = locale44.getDisplayLanguage(locale49);
        java.lang.String str52 = locale49.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "KOR" + "'", str18, "KOR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ko-KR" + "'", str19, "ko-KR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Corea del Sud" + "'", str21, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572904012,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=12,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ita" + "'", str46, "ita");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "italiano" + "'", str51, "italiano");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "IT" + "'", str52, "IT");
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int25 = dateTimeZone23.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.setTimeInMillis(100L);
        boolean boolean29 = calendar26.isWeekDateSupported();
        calendar26.roll(2, false);
        calendar26.setTimeInMillis(0L);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone36, (long) 2);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 8, dateTimeZone23);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(dateTimeZone23);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 10, dateTimeZone23);
        java.lang.String str42 = dateTimeZone23.getID();
        long long44 = dateTimeZone23.nextTransition(10L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZone(dateTimeZone23);
        boolean boolean46 = dateTimeFormatter45.isOffsetParsed();
        boolean boolean47 = dateTimeFormatter45.isParser();
        boolean boolean48 = dateTimeFormatter45.isOffsetParsed();
        java.lang.Appendable appendable49 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology54);
        org.joda.time.LocalTime.Property property56 = localTime55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        java.lang.String str59 = dateTimeField57.getAsShortText((long) 121);
        java.lang.String str61 = dateTimeField57.getAsText((long) 69);
        long long63 = dateTimeField57.roundHalfCeiling(25105L);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology68);
        int int70 = dateTimeField57.getMinimumValue((org.joda.time.ReadablePartial) localTime69);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter45.printTo(appendable49, (org.joda.time.ReadablePartial) localTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "121" + "'", str59, "121");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "69" + "'", str61, "69");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 25105L + "'", long63 == 25105L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(48, 86400549, 345, 789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder5.setVariant("86340000");
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.Builder builder11 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder11.setVariant("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = dateTimeField21.getAsText(32770, locale23);
        java.lang.String str28 = dateTimeField21.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        boolean boolean36 = localTime31.isAfter((org.joda.time.ReadablePartial) localTime35);
        int int37 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localTime31);
        java.lang.String str38 = dateTimeField21.getName();
        java.util.Date date44 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date44);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime45, (int) 'a', locale47);
        int int50 = localTime45.size();
        org.joda.time.LocalTime localTime52 = localTime45.minusSeconds(1969);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        int int56 = localTime55.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 100, chronology58);
        boolean boolean60 = localTime55.isAfter((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.Chronology chronology61 = localTime59.getChronology();
        org.joda.time.LocalTime localTime62 = localTime45.withFields((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology68);
        org.joda.time.LocalTime.Property property70 = localTime69.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        java.lang.String str73 = dateTimeField71.getAsShortText((long) 121);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str79 = locale77.toLanguageTag();
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale77.getDisplayCountry(locale80);
        java.lang.String str82 = locale76.getDisplayVariant(locale77);
        java.lang.String str83 = locale75.getDisplayScript(locale77);
        java.lang.String str84 = locale75.getISO3Language();
        java.util.Locale locale85 = locale75.stripExtensions();
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale85);
        java.lang.String str87 = locale85.getISO3Language();
        java.lang.String str88 = dateTimeField71.getAsShortText(109, locale85);
        java.lang.String str89 = localTime45.toString("22:00:00.100", locale85);
        java.util.Locale.Builder builder90 = builder11.setLocale(locale85);
        java.util.Locale.Builder builder91 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder93 = builder91.setScript("36000097");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 36000097 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str25, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32770" + "'", str26, "32770");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertEquals(date44.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "KOR" + "'", str48, "KOR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "97" + "'", str49, "97");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "121" + "'", str73, "121");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "KOR" + "'", str78, "KOR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ko-KR" + "'", str79, "ko-KR");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Corea del Sud" + "'", str81, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "deu" + "'", str84, "deu");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=1644572904145,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "deu" + "'", str87, "deu");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "109" + "'", str88, "109");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "22:00:00.100" + "'", str89, "22:00:00.100");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        int int8 = dateTime6.getSecondOfMinute();
        int int9 = dateTime6.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        java.lang.Object obj2 = null;
        boolean boolean3 = languageRange1.equals(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        java.util.Locale locale1 = new java.util.Locale("1970-01-01T00:00:00.000+00:00:00.009");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "1970-01-01t00:00:00.000+00:00:00.009");
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime5.plusYears(11);
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(32769L, 161);
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTimeISO();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        int int10 = property9.getMaximumValue();
        boolean boolean11 = property9.isLeap();
        org.joda.time.LocalTime localTime13 = property9.addWrapFieldToCopy(0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.LocalTime localTime22 = property20.getLocalTime();
        org.joda.time.LocalTime localTime23 = property20.roundCeilingCopy();
        boolean boolean24 = property20.isLeap();
        org.joda.time.LocalTime localTime25 = property20.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property20.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property20.getFieldType();
        boolean boolean28 = localTime13.isSupported(dateTimeFieldType27);
        java.lang.String str29 = dateTimeFieldType27.toString();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        calendar46.setTimeInMillis(100L);
        boolean boolean49 = calendar46.isWeekDateSupported();
        calendar46.roll(2, false);
        calendar46.setTimeInMillis(0L);
        java.util.TimeZone timeZone55 = calendar46.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long58 = dateTimeZone43.getMillisKeepLocal(dateTimeZone56, (long) 2);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 8, dateTimeZone43);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(dateTimeZone43);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) 10, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalTime localTime63 = localTime61.plus(readablePeriod62);
        org.joda.time.LocalTime.Property property64 = localTime61.minuteOfHour();
        org.joda.time.Chronology chronology65 = localTime61.getChronology();
        boolean boolean66 = dateTimeFieldType27.isSupported(chronology65);
        org.joda.time.DurationField durationField67 = chronology65.hours();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "millisOfSecond" + "'", str29, "millisOfSecond");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2L + "'", long58 == 2L);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(59);
        org.joda.time.Chronology chronology11 = dateTimeFormatter7.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZoneUTC();
        java.lang.Appendable appendable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(appendable14, (long) 79019);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.withMinimumValue();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        int int63 = dateTime62.getEra();
        org.joda.time.DateTime dateTime64 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime66 = dateTime62.plusSeconds(6);
        org.joda.time.DateTime dateTime67 = dateTime66.withLaterOffsetAtOverlap();
        boolean boolean68 = localTime60.equals((java.lang.Object) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        org.joda.time.LocalTime.Property property71 = localTime60.property(dateTimeFieldType69);
        org.joda.time.LocalTime localTime72 = property71.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField73 = property71.getField();
        org.joda.time.DateTimeField dateTimeField74 = property71.getField();
        boolean boolean75 = dateTimeField74.isLenient();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572904292,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=292,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        java.lang.StringBuffer stringBuffer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(stringBuffer19, (-251999877L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        boolean boolean12 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime5.withDurationAdded((long) 8, (int) '#');
        org.joda.time.DateTime dateTime17 = dateTime5.plusSeconds((int) ' ');
        org.joda.time.DateTime.Property property18 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime19 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int int20 = dateTime5.getMinuteOfHour();
        java.util.Date date21 = dateTime5.toDate();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Sep 26 00:00:00 UTC 1969");
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now();
        int int27 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField25.getType();
        org.joda.time.DurationField durationField29 = dateTimeField25.getRangeDurationField();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((-62198582364983L));
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes(17);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = dateTimeField14.getAsText(32770, locale16);
        java.lang.String str21 = dateTimeField14.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        int int25 = localTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        boolean boolean29 = localTime24.isAfter((org.joda.time.ReadablePartial) localTime28);
        int int30 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localTime24);
        java.lang.String str31 = dateTimeField14.getName();
        java.util.Date date37 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromDateFields(date37);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localTime38, (int) 'a', locale40);
        int int43 = localTime38.size();
        org.joda.time.LocalTime localTime45 = localTime38.minusSeconds(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int47 = localTime45.get(dateTimeFieldType46);
        boolean boolean48 = localTime6.isSupported(dateTimeFieldType46);
        boolean boolean49 = localTime3.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localTime3.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str18, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32770" + "'", str19, "32770");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 999 + "'", int30 == 999);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertEquals(date37.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "KOR" + "'", str41, "KOR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "97" + "'", str42, "97");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(292269054L, chronology8);
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears(72000000);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(3);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.minus((-251999990L));
        boolean boolean24 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getWeekOfWeekyear();
        int int26 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime.Property property27 = dateTime23.millisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.LocalTime localTime35 = property34.withMaximumValue();
        org.joda.time.LocalTime localTime36 = property34.getLocalTime();
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfDay();
        org.joda.time.LocalTime localTime39 = property37.addCopy(2);
        org.joda.time.LocalTime localTime40 = property37.roundCeilingCopy();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) localTime40);
        org.joda.time.LocalTime.Property property42 = localTime40.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology47);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfSecond();
        org.joda.time.LocalTime localTime50 = property49.withMaximumValue();
        org.joda.time.LocalTime localTime51 = property49.getLocalTime();
        org.joda.time.LocalTime.Property property52 = localTime51.millisOfDay();
        org.joda.time.LocalTime localTime54 = property52.addCopy(2);
        org.joda.time.LocalTime localTime55 = property52.withMaximumValue();
        org.joda.time.LocalTime localTime57 = localTime55.plusMillis(59);
        org.joda.time.LocalTime localTime59 = localTime57.minusMillis(139680);
        org.joda.time.LocalTime localTime61 = localTime59.plusMinutes((int) ' ');
        int int62 = localTime40.compareTo((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.LocalTime localTime64 = localTime40.withMillisOfDay(86340100);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(localTime64);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 59);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear(0);
        java.lang.Appendable appendable24 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology29);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        int int32 = localTime30.size();
        int[] intArray33 = localTime30.getValues();
        org.joda.time.LocalTime localTime35 = localTime30.plusSeconds((int) (short) 100);
        org.joda.time.LocalTime.Property property36 = localTime30.secondOfMinute();
        org.joda.time.LocalTime localTime37 = property36.withMaximumValue();
        org.joda.time.LocalTime localTime38 = property36.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(appendable24, (org.joda.time.ReadablePartial) localTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 0, 0, 97]");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.setVariant("1967");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        calendar0.setWeekDate(9, 19, 1);
        java.time.Instant instant8 = calendar0.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61871955095531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=9,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=132,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.Chronology chronology26 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology26.months();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.weekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime5 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMinutes(1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths(0);
        int int21 = dateTime18.getYearOfEra();
        boolean boolean22 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks(0);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMinutes(1);
        org.joda.time.DateTime dateTime35 = dateTime33.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withPeriodAdded(readablePeriod36, 36000097);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime23.withChronology(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 18 + "'", int24 == 18);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 100, chronology16);
        int int18 = localTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        boolean boolean22 = localTime17.isAfter((org.joda.time.ReadablePartial) localTime21);
        int int23 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime17);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar24);
        int int26 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.DateTime dateTime27 = localTime25.toDateTimeToday();
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        int int29 = dateTime27.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime30 = dateTime27.toLocalTime();
        org.joda.time.DateTime dateTime31 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572904506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes(1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        int int44 = localTime42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime54 = dateTime36.withFields((org.joda.time.ReadablePartial) localTime42);
        boolean boolean55 = dateTime28.equals((java.lang.Object) localTime42);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalTime localTime57 = localTime42.minus(readablePeriod56);
        org.joda.time.LocalTime localTime59 = localTime57.plusHours((int) (short) 10);
        java.lang.String str60 = localTime59.toString();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance();
        calendar63.setTimeInMillis(100L);
        boolean boolean66 = calendar63.isWeekDateSupported();
        calendar63.roll(2, false);
        calendar63.setTimeInMillis(0L);
        java.util.TimeZone timeZone72 = calendar63.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        int int76 = dateTimeZone74.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance();
        calendar77.setTimeInMillis(100L);
        boolean boolean80 = calendar77.isWeekDateSupported();
        calendar77.roll(2, false);
        calendar77.setTimeInMillis(0L);
        java.util.TimeZone timeZone86 = calendar77.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        long long89 = dateTimeZone74.getMillisKeepLocal(dateTimeZone87, (long) 2);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) 8, dateTimeZone74);
        org.joda.time.LocalTime localTime91 = org.joda.time.LocalTime.now(dateTimeZone74);
        org.joda.time.LocalTime localTime92 = new org.joda.time.LocalTime((long) 10, dateTimeZone74);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.LocalTime localTime94 = localTime92.plus(readablePeriod93);
        boolean boolean95 = localTime59.isBefore((org.joda.time.ReadablePartial) localTime94);
        org.joda.time.LocalTime localTime97 = localTime59.minusMinutes(985);
        org.joda.time.LocalTime localTime99 = localTime59.plusSeconds((int) (short) 100);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "20:00:00.097" + "'", str60, "20:00:00.097");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2L + "'", long89 == 2L);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(localTime97);
        org.junit.Assert.assertNotNull(localTime99);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology78);
        org.joda.time.LocalTime.Property property80 = localTime79.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField81 = property80.getField();
        java.util.Locale locale83 = java.util.Locale.KOREA;
        java.util.Locale locale84 = java.util.Locale.FRENCH;
        java.lang.String str85 = locale83.getDisplayName(locale84);
        java.lang.String str86 = dateTimeField81.getAsText(32770, locale83);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone71, locale83);
        java.util.Calendar.Builder builder88 = builder0.setTimeZone(timeZone71);
        java.util.Calendar.Builder builder92 = builder0.setTimeOfDay(7, (int) 'u', (-1));
        java.util.Calendar calendar93 = builder0.build();
        java.util.Date date94 = calendar93.getTime();
        int int95 = date94.getMinutes();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572904561,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=561,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str85, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "32770" + "'", str86, "32770");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1644572904561,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=561,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(calendar93);
        org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=32219000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=56,SECOND=59,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 08:56:59 UTC 1970");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 56 + "'", int95 == 56);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        boolean boolean8 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology11 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter3.withZone(dateTimeZone28);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category31);
        java.util.Locale locale34 = java.util.Locale.US;
        java.util.Locale.setDefault(category31, locale34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category31);
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale37.getScript();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology43);
        org.joda.time.LocalTime.Property property45 = localTime44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = dateTimeField46.getAsText(32770, locale48);
        java.lang.String str53 = dateTimeField46.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) 100, chronology55);
        int int57 = localTime56.getMillisOfSecond();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 100, chronology59);
        boolean boolean61 = localTime56.isAfter((org.joda.time.ReadablePartial) localTime60);
        int int62 = dateTimeField46.getMaximumValue((org.joda.time.ReadablePartial) localTime56);
        java.lang.String str63 = dateTimeField46.getName();
        java.util.Date date69 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.fromDateFields(date69);
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.lang.String str73 = locale72.getISO3Country();
        java.lang.String str74 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localTime70, (int) 'a', locale72);
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.lang.String str76 = locale72.getDisplayLanguage(locale75);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.lang.String str80 = locale79.getISO3Country();
        java.lang.String str81 = locale79.toLanguageTag();
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.lang.String str83 = locale79.getDisplayCountry(locale82);
        java.lang.String str84 = locale78.getDisplayVariant(locale79);
        java.lang.String str85 = locale77.getDisplayScript(locale79);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale79);
        java.lang.String str87 = locale75.getDisplayName(locale79);
        java.lang.String str88 = locale37.getDisplayCountry(locale79);
        java.lang.String str89 = locale36.getDisplayVariant(locale79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter3.withLocale(locale79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter3.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime93 = org.joda.time.LocalTime.parse("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str50, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "32770" + "'", str51, "32770");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 999 + "'", int62 == 999);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
        org.junit.Assert.assertEquals(date69.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "KOR" + "'", str73, "KOR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "97" + "'", str74, "97");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str76, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "KOR" + "'", str80, "KOR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ko-KR" + "'", str81, "ko-KR");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Corea del Sud" + "'", str83, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=1644572904593,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=593,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str87, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str88, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMinutes(1);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths(0);
        int int25 = dateTime22.getYearOfEra();
        boolean boolean26 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime22);
        int int27 = dateTime22.getEra();
        org.joda.time.DateTime dateTime29 = dateTime22.minus((long) 9);
        int int30 = dateTime29.getDayOfWeek();
        boolean boolean31 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("DateTimeField[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[weekyear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime1.withPeriodAdded(readablePeriod14, 2022);
        org.joda.time.DateTime dateTime18 = dateTime1.plusSeconds(36000000);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property6.addNoWrapToCopy(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property6.getFieldType();
        org.joda.time.DurationField durationField10 = property6.getDurationField();
        org.joda.time.LocalTime localTime11 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        int int37 = localTime32.size();
        org.joda.time.LocalTime localTime39 = localTime32.minusSeconds(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int41 = localTime39.get(dateTimeFieldType40);
        boolean boolean42 = localTime0.isSupported(dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType40.getDurationType();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType40.getDurationType();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfHalfday();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        int int53 = dateTime52.getEra();
        org.joda.time.DateTime dateTime55 = dateTime52.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property56 = dateTime55.monthOfYear();
        boolean boolean57 = localTime50.equals((java.lang.Object) dateTime55);
        org.joda.time.LocalTime localTime59 = localTime50.withMillisOfDay(4);
        int[] intArray61 = chronology48.get((org.joda.time.ReadablePartial) localTime50, 9223371986234400089L);
        org.joda.time.DurationField durationField62 = chronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField63 = chronology48.centuryOfEra();
        org.joda.time.DurationField durationField64 = durationFieldType45.getField(chronology48);
        java.lang.String str65 = durationFieldType45.getName();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10, 0, 0, 89]");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hours" + "'", str65, "hours");
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        java.lang.String str23 = property21.getAsText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        boolean boolean4 = dateTimeZone2.isFixed();
        int int6 = dateTimeZone2.getOffset((long) 4);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 63120000 + "'", int6 == 63120000);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        java.util.Date date11 = new java.util.Date((int) (short) 100, (int) (byte) 100, 2, 70, 1970, 1969);
        calendar0.setTime(date11);
        int int14 = calendar0.getActualMinimum(0);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(269, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1210058569000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2008,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=127,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=49,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertEquals(date11.toString(), "Tue May 06 07:22:49 UTC 2008");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime dateTime11 = property8.addToCopy((-52));
        org.joda.time.DateTime dateTime12 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(36000);
        int int15 = dateTime12.getYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 36000089, 2865);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 04 00:00:00 UTC 3001914");
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withDefaultYear((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTimeFormatter7.parseDateTime("23 Jan 35242 06:17:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.DurationField durationField9 = property4.getLeapDurationField();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long24 = dateTimeZone22.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property29 = dateTime26.weekyear();
        org.joda.time.DateTime dateTime31 = property29.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(6);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        int int35 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime();
        org.joda.time.DateTime dateTime38 = dateTime34.withFields((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours(97);
        boolean boolean41 = property4.equals((java.lang.Object) dateTime40);
        org.joda.time.DateTime.Property property42 = dateTime40.millisOfSecond();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime47 = property45.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        int int51 = localTime50.getMillisOfSecond();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) 100, chronology53);
        boolean boolean55 = localTime50.isAfter((org.joda.time.ReadablePartial) localTime54);
        int int56 = property45.compareTo((org.joda.time.ReadablePartial) localTime50);
        java.lang.String str57 = localTime50.toString();
        org.joda.time.LocalTime localTime59 = localTime50.minusSeconds(100);
        org.joda.time.LocalTime.Property property60 = localTime50.secondOfMinute();
        int int61 = property42.compareTo((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.DateTime dateTime62 = property42.roundHalfCeilingCopy();
        boolean boolean64 = dateTime62.isBefore((-804L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "00:00:00.100" + "'", str57, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 59);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter17.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withZoneUTC();
        java.io.Writer writer22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(writer22, readableInstant23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimePrinter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime6.minusDays((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.Chronology chronology12 = yearMonthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        org.joda.time.DurationField durationField15 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekyearOfCentury();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1, chronology12);
        long long22 = chronology12.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(35237999, 83820000, 0, 36000156, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35237999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-58319308799879L) + "'", long22 == (-58319308799879L));
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime9.minusYears(432000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -431998033 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 4);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(1, 86399999, 0);
        java.util.Calendar.Builder builder12 = builder8.setDate((-1), 8, 36000089);
        java.util.Calendar.Builder builder16 = builder8.setTimeOfDay(292269054, 24, 15);
        java.util.Calendar.Builder builder20 = builder16.setDate((-9), 69, 86220277);
        java.util.Date date26 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromDateFields(date26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localTime27.getFieldTypes();
        int int29 = localTime27.getMinuteOfHour();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime27.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean36 = localTime34.isSupported(dateTimeFieldType35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromCalendarFields(calendar37);
        int int39 = localTime34.compareTo((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTime dateTime40 = localTime34.toDateTimeToday();
        org.joda.time.LocalTime localTime42 = localTime34.withMillisOfDay(9);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology47);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = dateTimeField50.getAsText(32770, locale52);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology60);
        org.joda.time.LocalTime.Property property62 = localTime61.millisOfSecond();
        int int63 = localTime61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 100, chronology65);
        int int67 = localTime66.getMillisOfSecond();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) 100, chronology69);
        boolean boolean71 = localTime66.isAfter((org.joda.time.ReadablePartial) localTime70);
        int int72 = localTime61.compareTo((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology77);
        org.joda.time.LocalTime.Property property79 = localTime78.millisOfSecond();
        int int80 = localTime78.size();
        int[] intArray81 = localTime78.getValues();
        int int82 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localTime70, intArray81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalTime localTime84 = localTime70.minus(readablePeriod83);
        boolean boolean85 = localTime34.isBefore((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.DateTime dateTime86 = dateTime31.withFields((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.LocalTime localTime88 = localTime70.minus(readablePeriod87);
        int[] intArray89 = localTime88.getValues();
        java.util.Calendar.Builder builder90 = builder20.setFields(intArray89);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 17 + "'", int29 == 17);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572904997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=24,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str54, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "32770" + "'", str55, "32770");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10, 0, 0, 97]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 999 + "'", int82 == 999);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale27.getISO3Country();
        java.lang.String str29 = locale27.toLanguageTag();
        java.lang.String str30 = dateTimeZone25.getName((long) 4, locale27);
        int int32 = dateTimeZone25.getOffsetFromLocal((-1680047639000L));
        boolean boolean33 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 161, dateTimeZone25);
        java.lang.String str36 = dateTimeZone25.getShortName(311031615600000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "KOR" + "'", str28, "KOR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ko-KR" + "'", str29, "ko-KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime5.plusYears(11);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, 3);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        int int21 = localTime19.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int23 = localTime19.get(dateTimeFieldType22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology28);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        int int31 = localTime29.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int33 = localTime29.get(dateTimeFieldType32);
        int int34 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.Chronology chronology35 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.centuries();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime10.toMutableDateTime(chronology35);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 100, chronology6);
        int int8 = localTime7.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 100, chronology10);
        boolean boolean12 = localTime7.isAfter((org.joda.time.ReadablePartial) localTime11);
        int int13 = property2.compareTo((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        boolean boolean25 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property26 = dateTime18.dayOfMonth();
        int int27 = property2.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime28 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime30 = property2.addWrapFieldToCopy(14);
        org.joda.time.DateTime dateTime31 = property2.roundHalfFloorCopy();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) 70);
        java.lang.String str46 = dateTimeZone42.getShortName(1L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        int int52 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime.Property property53 = dateTime51.hourOfDay();
        long long54 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime55 = property2.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfMonth();
        org.joda.time.DateTime.Property property57 = dateTime55.millisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 139680 + "'", int27 == 139680);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 139680L + "'", long54 == 139680L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(52);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getNameKey((long) 586);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = property6.addWrapFieldToCopy(1979);
        int int10 = property6.getLeapAmount();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(35400091, (-63119927), 79019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35400091 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DurationField durationField12 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        int int7 = dateTime4.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime4.minusMillis(491);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime4.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime11 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime4.plus(4L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusMillis((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        int int20 = dateTime19.getMonthOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology28);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        int int31 = localTime29.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int33 = localTime29.get(dateTimeFieldType32);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology38);
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfSecond();
        int int41 = localTime39.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int43 = localTime39.get(dateTimeFieldType42);
        int int44 = localTime29.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.Chronology chronology45 = localTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime23.toMutableDateTime(chronology45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = dateTime23.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setTimeInMillis(100L);
        boolean boolean10 = calendar7.isWeekDateSupported();
        calendar7.roll(2, false);
        calendar7.setTimeInMillis(0L);
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone31, (long) 2);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone18);
        int int36 = dateTimeZone18.getOffsetFromLocal((long) 14);
        java.lang.String str37 = dateTimeZone18.getID();
        long long41 = dateTimeZone18.convertLocalToUTC((long) 22, false, 1644572766885L);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 22L + "'", long41 == 22L);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getCountry();
        java.lang.String str36 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localTime31, locale33);
        java.lang.Object obj37 = null;
        boolean boolean38 = localTime31.equals(obj37);
        int int39 = localTime31.getMinuteOfHour();
        int int40 = localTime31.size();
        org.joda.time.LocalTime.Property property41 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime42 = property41.withMinimumValue();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "US" + "'", str35, "US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "10" + "'", str36, "10");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        java.lang.String str5 = property4.getName();
        org.joda.time.DateTime dateTime6 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime7 = property4.withMinimumValue();
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar.Builder builder63 = builder61.setInstant(1980L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder66 = builder61.setWeekDefinition(2865, 83820000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572905309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=25,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfMinute();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder9.setExtension('u', "deu");
        java.util.Locale.Builder builder14 = builder12.setRegion("");
        java.util.Locale.Builder builder16 = builder14.setVariant("86340000");
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale.Builder builder20 = builder16.setLocale(locale18);
        int int21 = property8.getMaximumShortTextLength(locale18);
        java.lang.String str22 = property8.getAsString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology20);
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        int int24 = dateTime15.get(dateTimeField23);
        int int26 = dateTimeField23.getMinimumValue((long) 1967);
        int int29 = dateTimeField23.getDifference((long) 59, (long) 3);
        long long32 = dateTimeField23.add((long) 97, 31795199991L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 56 + "'", int29 == 56);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 31795200088L + "'", long32 == 31795200088L);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("4-feb-1967 0.17.01");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=4-feb-1967 0.17.01");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.roundHalfEvenCopy();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        int int9 = property6.getMaximumTextLength(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property6.getField();
        org.joda.time.LocalTime localTime12 = property6.setCopy((int) (byte) 10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 4);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long17 = dateTimeZone15.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(6);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        int int28 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property29 = dateTime27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        java.util.Locale locale38 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getCountry();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localTime36, locale38);
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.lang.String str45 = locale44.getISO3Country();
        java.lang.String str46 = locale44.toLanguageTag();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale44.getDisplayCountry(locale47);
        java.lang.String str49 = locale43.getDisplayVariant(locale44);
        java.lang.String str50 = localTime36.toString("zh", locale44);
        int[] intArray51 = localTime36.getValues();
        java.util.Calendar.Builder builder52 = builder0.setFields(intArray51);
        java.util.Calendar.Builder builder56 = builder0.setWeekDate(252000000, 79200000, 28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder59 = builder56.set(35135652, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "US" + "'", str40, "US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10" + "'", str41, "10");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "KOR" + "'", str45, "KOR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ko-KR" + "'", str46, "ko-KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Corea del Sud" + "'", str48, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "10" + "'", str50, "10");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 0, 0, 97]");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) (byte) 100);
        java.lang.String str10 = dateTimeZone7.getID();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime1.toMutableDateTime(dateTimeZone7);
        int int13 = dateTimeZone7.getStandardOffset(97L);
        long long15 = dateTimeZone7.previousTransition(0L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.lang.String str48 = property6.toString();
        org.joda.time.DateTimeField dateTimeField49 = property6.getField();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(1970L);
        int int52 = property6.compareTo((org.joda.time.ReadablePartial) localTime51);
        int[] intArray53 = localTime51.getValues();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property56 = dateTime55.minuteOfHour();
        org.joda.time.DateTime dateTime58 = property56.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) 100, chronology60);
        int int62 = localTime61.getMillisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) 100, chronology64);
        boolean boolean66 = localTime61.isAfter((org.joda.time.ReadablePartial) localTime65);
        int int67 = property56.compareTo((org.joda.time.ReadablePartial) localTime61);
        java.lang.String str68 = localTime61.toString();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime74 = dateTime70.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime70.plus(readableDuration75);
        org.joda.time.DateTime dateTime78 = dateTime70.minus(17L);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property80 = dateTime70.property(dateTimeFieldType79);
        int int81 = localTime61.get(dateTimeFieldType79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalTime localTime84 = localTime61.withPeriodAdded(readablePeriod82, 33342);
        boolean boolean85 = localTime51.isAfter((org.joda.time.ReadablePartial) localTime84);
        org.joda.time.LocalTime localTime87 = localTime51.plusMinutes(738196);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[millisOfSecond]" + "'", str48, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 1, 970]");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "00:00:00.100" + "'", str68, "00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 24 + "'", int81 == 24);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localTime87);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        int int10 = dateTime7.getHourOfDay();
        org.joda.time.DateTime.Property property11 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks(80);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str28 = dateTimeZone26.getNameKey(53L);
        long long30 = dateTimeZone26.previousTransition(1969L);
        org.joda.time.DateTime dateTime31 = dateTime14.withZoneRetainFields(dateTimeZone26);
        boolean boolean33 = dateTime31.isAfter(48977L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1969L + "'", long30 == 1969L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("f\351vr.", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=fe?vr.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        java.lang.String str10 = dateTimeFieldType8.toString();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        boolean boolean24 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology25 = dateTime23.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(7, 1);
        int int37 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        long long39 = chronology25.set((org.joda.time.ReadablePartial) localTime36, (long) 1970);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType8.getField(chronology25);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfDay" + "'", str10, "hourOfDay");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 25260000L + "'", long39 == 25260000L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.Chronology chronology26 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.DurationField durationField28 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(dateTimeZone30);
        int int33 = dateTimeZone30.getStandardOffset(6842880000001000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        java.util.Date date11 = new java.util.Date((int) (short) 100, (int) (byte) 100, 2, 70, 1970, 1969);
        calendar0.setTime(date11);
        int int13 = calendar0.getFirstDayOfWeek();
        boolean boolean14 = calendar0.isWeekDateSupported();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(16, 17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime23 = dateTime21.toLocalDateTime();
        boolean boolean24 = dateTimeZone17.isLocalDateTimeGap(localDateTime23);
        long long26 = dateTimeZone17.previousTransition((-2124664980000L));
        boolean boolean27 = calendar0.equals((java.lang.Object) dateTimeZone17);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1210058569000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2008,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=127,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=49,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertEquals(date11.toString(), "Tue May 06 07:22:49 UTC 2008");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-2124664980000L) + "'", long26 == (-2124664980000L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 24);
        boolean boolean16 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        int int8 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Date date10 = new java.util.Date((long) 11);
        int int11 = date10.getDay();
        calendar0.setTime(date10);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=11,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str4 = dateTimeZone0.getShortName((-1680047639000L));
        long long6 = dateTimeZone0.nextTransition((long) 139680);
        long long9 = dateTimeZone0.adjustOffset((long) '#', true);
        long long11 = dateTimeZone0.previousTransition((long) 107);
        boolean boolean13 = dateTimeZone0.isStandardOffset(32772L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 139680L + "'", long6 == 139680L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 107L + "'", long11 == 107L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setTimeInMillis(100L);
        boolean boolean10 = calendar7.isWeekDateSupported();
        calendar7.roll(2, false);
        calendar7.setTimeInMillis(0L);
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone31, (long) 2);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 8, dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTimeISO();
        boolean boolean36 = dateTime34.isAfterNow();
        org.joda.time.DateTime dateTime38 = dateTime34.withMillis(100L);
        java.util.Date date39 = dateTime38.toDate();
        boolean boolean40 = dateTime5.equals((java.lang.Object) dateTime38);
        org.joda.time.DateTime dateTime42 = dateTime38.minusMonths(58620000);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime38.minus(readablePeriod43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime38.withMonthOfYear(56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone1.nextTransition(0L);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((-251920800L), dateTimeZone1);
        long long6 = dateTimeZone1.previousTransition(662695991999999999L);
        java.lang.String str8 = dateTimeZone1.getShortName((long) 53);
        java.lang.String str10 = dateTimeZone1.getNameKey(170207999999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 662695991999999999L + "'", long6 == 662695991999999999L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("+56:59");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=+56:59");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        int int18 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime14.withWeekOfWeekyear(24);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime29 = property26.roundCeilingCopy();
        long long30 = property26.remainder();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.lang.String str37 = locale33.getDisplayLanguage(locale35);
        org.joda.time.DateTime dateTime38 = property26.setCopy("2239", locale35);
        java.lang.String str39 = property26.getAsShortText();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getDisplayName();
        int int42 = property26.getMaximumShortTextLength(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = dateTime14.toString("dayOfMonth", locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 259200000L + "'", long30 == 259200000L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572905969,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=25,MILLISECOND=969,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Franz\366sisch" + "'", str41, "Franz\366sisch");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        int int16 = property13.get();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str20 = locale17.getCountry();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale17);
        java.lang.String str22 = property13.getAsShortText(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter8.withLocale(locale17);
        boolean boolean24 = dateTimeFormatter8.isPrinter();
        org.joda.time.Chronology chronology25 = dateTimeFormatter8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1901);
        java.lang.Appendable appendable29 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology42);
        org.joda.time.LocalTime.Property property44 = localTime43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.lang.String str50 = dateTimeField45.getAsText(32770, locale47);
        java.lang.String str52 = dateTimeField45.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        int int56 = localTime55.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 100, chronology58);
        boolean boolean60 = localTime55.isAfter((org.joda.time.ReadablePartial) localTime59);
        int int61 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localTime55);
        java.lang.String str62 = dateTimeField45.getName();
        java.util.Date date68 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.fromDateFields(date68);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localTime69, (int) 'a', locale71);
        java.lang.String str74 = property36.getAsText(locale71);
        org.joda.time.LocalTime localTime76 = property36.addCopy(0L);
        org.joda.time.LocalTime localTime77 = property36.roundCeilingCopy();
        java.lang.String str78 = property36.toString();
        org.joda.time.DateTimeField dateTimeField79 = property36.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property36.getFieldType();
        org.joda.time.LocalTime localTime82 = property36.addCopy(86340009);
        org.joda.time.LocalTime localTime84 = property36.addCopy(36030850);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable29, (org.joda.time.ReadablePartial) localTime84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "KOR" + "'", str18, "KOR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ko-KR" + "'", str19, "ko-KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KR" + "'", str20, "KR");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572906022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=26,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str49, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "32770" + "'", str50, "32770");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 999 + "'", int61 == 999);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "millisOfSecond" + "'", str62, "millisOfSecond");
        org.junit.Assert.assertEquals(date68.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "KOR" + "'", str72, "KOR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "97" + "'", str73, "97");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "97" + "'", str74, "97");
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Property[millisOfSecond]" + "'", str78, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime84);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        int int4 = dateTime3.getMinuteOfDay();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks(79200);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        int int8 = property7.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1439 + "'", int8 == 1439);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology2 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = dateTimeField4.getType();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology10);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = dateTimeField21.getAsText(32770, locale23);
        java.lang.String str28 = dateTimeField21.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        boolean boolean36 = localTime31.isAfter((org.joda.time.ReadablePartial) localTime35);
        int int37 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localTime31);
        java.lang.String str38 = dateTimeField21.getName();
        java.util.Date date44 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date44);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime45, (int) 'a', locale47);
        java.lang.String str50 = property12.getAsText(locale47);
        int int51 = property12.getMinimumValueOverall();
        org.joda.time.LocalTime localTime52 = property12.roundHalfFloorCopy();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology57);
        org.joda.time.LocalTime.Property property59 = localTime58.millisOfSecond();
        int int60 = localTime58.size();
        org.joda.time.LocalTime localTime62 = localTime58.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime64 = localTime58.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) 100, chronology66);
        int int68 = localTime67.getMillisOfSecond();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) 100, chronology70);
        boolean boolean72 = localTime67.isAfter((org.joda.time.ReadablePartial) localTime71);
        boolean boolean73 = localTime64.isEqual((org.joda.time.ReadablePartial) localTime71);
        org.joda.time.LocalTime localTime75 = localTime71.plusMinutes(86399);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean77 = localTime75.isSupported(dateTimeFieldType76);
        org.joda.time.LocalTime.Property property78 = localTime52.property(dateTimeFieldType76);
        org.joda.time.LocalTime localTime80 = property78.addNoWrapToCopy(109);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = dateTimeField4.add((org.joda.time.ReadablePartial) localTime80, 10, intArray82, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str25, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32770" + "'", str26, "32770");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertEquals(date44.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "KOR" + "'", str48, "KOR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "97" + "'", str49, "97");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "97" + "'", str50, "97");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localTime80);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime4.minusSeconds(17);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.monthOfYear();
        org.joda.time.DurationField durationField25 = chronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.dayOfMonth();
        java.lang.String str29 = dateTimeField27.getAsText((long) 1438);
        long long31 = dateTimeField27.roundHalfFloor((long) 540);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("DateTimeField[secondOfDay]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=datetimefield[secondofday]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DurationField durationField9 = property7.getDurationField();
        org.joda.time.DateTime dateTime10 = property7.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property7.setCopy("java.util.GregorianCalendar[time=1644572592302,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=12,MILLISECOND=302,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=1644572592302,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=12,MILLISECOND=302,ZONE_OFFSET=0,DST_OFFSET=0]\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.lang.String str78 = locale75.getISO3Language();
        java.util.Calendar.Builder builder79 = builder74.setLocale(locale75);
        java.util.Calendar.Builder builder81 = builder74.setInstant((long) 600);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder85 = builder81.setDate(1644551206, (int) (byte) -1, (-25201));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572906139,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=26,MILLISECOND=139,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str77, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "kor" + "'", str78, "kor");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(2865, 35222, 35248, 680, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2865 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getStandardOffset((-1L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter17.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = chronology40.withZone(dateTimeZone53);
        long long57 = dateTimeZone53.convertLocalToUTC((long) 32770, false);
        boolean boolean59 = dateTimeZone53.isStandardOffset((long) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter17.withZone(dateTimeZone53);
        org.joda.time.Chronology chronology61 = dateTimeFormatter17.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.months();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32770L + "'", long57 == 32770L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale locale6 = builder5.build();
        java.lang.String str7 = locale6.getCountry();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        java.lang.String str5 = property4.getAsText();
        java.lang.String str6 = property4.getAsText();
        org.joda.time.DateTime dateTime7 = property4.getDateTime();
        org.joda.time.DateTime dateTime8 = property4.withMinimumValue();
        java.lang.String str9 = property4.getAsText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970" + "'", str5, "1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970" + "'", str6, "1970");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.setTimeInMillis(100L);
        boolean boolean23 = calendar20.isWeekDateSupported();
        calendar20.roll(2, false);
        calendar20.setTimeInMillis(0L);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long32 = dateTimeZone17.getMillisKeepLocal(dateTimeZone30, (long) 2);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 8, dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter2.withZone(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = dateTimeFormatter2.print(5034754013329000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes(1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        int int44 = localTime42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime54 = dateTime36.withFields((org.joda.time.ReadablePartial) localTime42);
        boolean boolean55 = dateTime28.equals((java.lang.Object) localTime42);
        org.joda.time.LocalTime localTime57 = localTime42.plusMillis(10);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property60 = dateTime59.minuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime59.minusDays((int) 'a');
        org.joda.time.DateTime dateTime63 = dateTime59.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay64 = dateTime63.toYearMonthDay();
        org.joda.time.Chronology chronology65 = yearMonthDay64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology65.getZone();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTimeISO();
        org.joda.time.DateTime dateTime72 = dateTime69.withMillisOfDay((int) 'x');
        org.joda.time.LocalDate localDate73 = dateTime72.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = localTime42.isBefore((org.joda.time.ReadablePartial) localDate73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate73);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths(86399);
        java.util.Date date15 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromDateFields(date15);
        org.joda.time.LocalTime.Property property17 = localTime16.minuteOfHour();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.LocalTime localTime26 = property24.getLocalTime();
        org.joda.time.LocalTime localTime27 = property24.roundCeilingCopy();
        boolean boolean28 = property24.isLeap();
        org.joda.time.LocalTime localTime29 = property24.withMinimumValue();
        org.joda.time.LocalTime localTime30 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        int int33 = localTime16.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfHalfday();
        org.joda.time.DurationField durationField38 = chronology36.halfdays();
        org.joda.time.DurationField durationField39 = chronology36.minutes();
        boolean boolean40 = dateTimeFieldType31.isSupported(chronology36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime7.toMutableDateTime(chronology36);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology46);
        org.joda.time.LocalTime.Property property48 = localTime47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.LocalTime localTime50 = property48.getLocalTime();
        org.joda.time.LocalTime localTime51 = property48.roundCeilingCopy();
        org.joda.time.LocalTime localTime53 = property48.addCopy(6);
        org.joda.time.LocalTime.Property property54 = localTime53.hourOfDay();
        org.joda.time.DateTime dateTime55 = localTime53.toDateTimeToday();
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime7.toMutableDateTime(chronology56);
        org.joda.time.DurationField durationField58 = chronology56.years();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekOfWeekyear();
        long long62 = dateTimeField59.getDifferenceAsLong((-59L), (long) 32000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.minusDays((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.Chronology chronology9 = yearMonthDay8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology9.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.Chronology chronology23 = chronology9.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        boolean boolean25 = durationFieldType0.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 1970);
        long long34 = dateTimeZone28.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 52, dateTimeZone28);
        long long38 = dateTimeZone28.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        int int41 = dateTime40.getEra();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        int int43 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.Chronology chronology45 = chronology23.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfCentury();
        boolean boolean48 = dateTimeField47.isSupported();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean53 = localTime51.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology59);
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfSecond();
        int int62 = localTime60.size();
        org.joda.time.LocalTime.Property property63 = localTime60.minuteOfHour();
        org.joda.time.LocalTime localTime64 = property63.roundFloorCopy();
        int int65 = localTime64.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) 100, chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean70 = localTime68.isSupported(dateTimeFieldType69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.fromCalendarFields(calendar71);
        int int73 = localTime68.compareTo((org.joda.time.ReadablePartial) localTime72);
        org.joda.time.DateTime dateTime74 = localTime68.toDateTimeToday();
        org.joda.time.LocalTime localTime76 = localTime68.withMillisOfDay(9);
        org.joda.time.LocalTime localTime78 = localTime76.plusMinutes(86340000);
        boolean boolean79 = localTime64.isEqual((org.joda.time.ReadablePartial) localTime76);
        int[] intArray80 = localTime76.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField47.add((org.joda.time.ReadablePartial) localTime51, 36002172, intArray80, 79200000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36002172");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hours" + "'", str1, "hours");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-251999990L) + "'", long34 == (-251999990L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86399L + "'", long38 == 86399L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 252000000 + "'", int43 == 252000000);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1644572906276,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=26,MILLISECOND=276,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 9]");
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        boolean boolean30 = dateTime28.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillis(100L);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        boolean boolean43 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime28.withZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime45.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 2);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology12);
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean20 = localTime18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalTime localTime22 = localTime18.plusMillis(52);
        org.joda.time.LocalTime localTime24 = localTime18.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 292278993);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime34 = dateTime29.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.LocalTime localTime35 = dateTime29.toLocalTime();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.setTimeInMillis(100L);
        boolean boolean53 = calendar50.isWeekDateSupported();
        calendar50.roll(2, false);
        calendar50.setTimeInMillis(0L);
        java.util.TimeZone timeZone59 = calendar50.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        long long62 = dateTimeZone47.getMillisKeepLocal(dateTimeZone60, (long) 2);
        boolean boolean63 = dateTimeZone60.isFixed();
        long long66 = dateTimeZone60.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now(dateTimeZone60);
        org.joda.time.LocalTime localTime68 = localTime35.withFields((org.joda.time.ReadablePartial) localTime67);
        org.joda.time.LocalTime localTime69 = localTime27.withFields((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean71 = localTime69.isSupported(dateTimeFieldType70);
        int[] intArray73 = chronology12.get((org.joda.time.ReadablePartial) localTime69, 345600000L);
        org.joda.time.DateTimeField dateTimeField74 = chronology12.yearOfCentury();
        java.lang.String str75 = dateTimeField74.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 2L + "'", long62 == 2L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 139680L + "'", long66 == 139680L);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[22, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str75, "DateTimeField[yearOfCentury]");
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 36000097);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DateTime dateTime25 = dateTime10.withZoneRetainFields(dateTimeZone24);
        java.util.Locale locale28 = new java.util.Locale("Taiwan");
        java.lang.String str29 = dateTimeZone24.getName((long) 491, locale28);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals(locale28.toString(), "taiwan");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday();
        boolean boolean10 = dateTime8.isEqual((-52254687945600052L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572906354,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=26,MILLISECOND=354,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("\uc11c\uae30");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '????' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        boolean boolean27 = dateTimeZone24.isFixed();
        long long30 = dateTimeZone24.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone24);
        int int34 = dateTimeZone24.getStandardOffset(0L);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone24);
        long long37 = dateTimeZone24.convertUTCToLocal(72017000830915315L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 139680L + "'", long30 == 139680L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 72017000830915315L + "'", long37 == 72017000830915315L);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.Chronology chronology16 = yearMonthDay15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.Chronology chronology30 = chronology16.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology30.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.halfdayOfDay();
        org.joda.time.Chronology chronology35 = chronology30.withUTC();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        long long48 = dateTimeZone46.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property53 = dateTime50.weekyear();
        org.joda.time.DateTime dateTime55 = property53.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.withHourOfDay(6);
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        int int59 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime58);
        long long62 = dateTimeZone46.adjustOffset(121L, true);
        org.joda.time.Chronology chronology63 = chronology35.withZone(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter8.withZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str67 = dateTimeZone65.getNameKey((long) (byte) 100);
        boolean boolean69 = dateTimeZone65.isStandardOffset((long) (short) 10);
        java.lang.String str71 = dateTimeZone65.getShortName((long) 121);
        long long73 = dateTimeZone46.getMillisKeepLocal(dateTimeZone65, (-1581379253009L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(35041737, (-599), 62220, 35248, (-19034), 25, dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35248 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 121L + "'", long62 == 121L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+70:00" + "'", str71, "+70:00");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1581631253009L) + "'", long73 == (-1581631253009L));
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfEra(11);
        org.joda.time.DateTime dateTime13 = dateTime11.minusSeconds(152);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(7);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long39 = dateTimeZone24.getMillisKeepLocal(dateTimeZone37, (long) 2);
        long long41 = dateTimeZone24.convertUTCToLocal(62135596800117L);
        long long44 = dateTimeZone24.convertLocalToUTC(1979L, true);
        org.joda.time.DateTime dateTime45 = dateTime11.toDateTime(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-04T00:00:00.000+70:00" + "'", str9, "1970-01-04T00:00:00.000+70:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 62135596800117L + "'", long41 == 62135596800117L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1979L + "'", long44 == 1979L);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        java.util.Date date6 = new java.util.Date(63120000, (int) '#', 220, 3, 2, (int) (short) 1);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Jul 08 03:02:01 UTC 63121903");
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.Chronology chronology18 = dateTimeFormatter17.getChronolgy();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        java.lang.String str4 = property2.getAsShortText();
        org.joda.time.DurationField durationField5 = property2.getRangeDurationField();
        org.joda.time.DateTime dateTime6 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime8 = dateTime6.withYear(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology7.getZone();
        org.joda.time.DurationField durationField18 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology7.era();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.setTimeInMillis(100L);
        boolean boolean23 = calendar20.isWeekDateSupported();
        calendar20.roll(2, false);
        calendar20.setTimeInMillis(0L);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int33 = dateTimeZone31.getOffsetFromLocal((long) 0);
        long long36 = dateTimeZone31.convertLocalToUTC((long) 2000, false);
        org.joda.time.Chronology chronology37 = chronology7.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.DurationField durationField39 = chronology37.centuries();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-49881509L) + "'", long15 == (-49881509L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2000L + "'", long36 == 2000L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(79019, (-68), 62220, 26, 973587, 7, 2022, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("millis");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.LocalTime localTime16 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime18 = property13.addCopy(6);
        org.joda.time.DurationField durationField19 = property13.getDurationField();
        int int20 = property13.get();
        org.joda.time.LocalTime localTime21 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime22 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime23 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime24 = property13.withMaximumValue();
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        boolean boolean26 = languageRange1.equals((java.lang.Object) property25);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "millis" + "'", str3, "millis");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millis" + "'", str6, "millis");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology7);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology7.add(readablePeriod17, (long) 79200152, 53);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-49881509L) + "'", long15 == (-49881509L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 79200152L + "'", long20 == 79200152L);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        int int14 = dateTimeField12.getMaximumValue(139680L);
        long long16 = dateTimeField12.roundHalfEven((long) (-292275054));
        long long18 = dateTimeField12.roundHalfEven(10059L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = dateTimeField26.getAsText(32770, locale28);
        java.lang.String str33 = dateTimeField26.getAsText((long) (short) 0);
        long long35 = dateTimeField26.roundHalfFloor((-1L));
        long long37 = dateTimeField26.roundCeiling((long) (short) 0);
        boolean boolean39 = dateTimeField26.isLeap((long) 5);
        long long42 = dateTimeField26.add((long) 14, 0);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = dateTimeField26.getAsShortText(25105L, locale44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 100, chronology48);
        int int50 = localTime49.getMillisOfSecond();
        org.joda.time.LocalTime localTime52 = localTime49.plusMillis((int) (short) -1);
        int int53 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localTime52);
        int int54 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localTime52);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-292275054L) + "'", long16 == (-292275054L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10059L + "'", long18 == 10059L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str30, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32770" + "'", str31, "32770");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 14L + "'", long42 == 14L);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "105" + "'", str46, "105");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 999 + "'", int53 == 999);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 999 + "'", int54 == 999);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(11);
        int int28 = dateTime27.getWeekOfWeekyear();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int43 = dateTimeZone41.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.setTimeInMillis(100L);
        boolean boolean47 = calendar44.isWeekDateSupported();
        calendar44.roll(2, false);
        calendar44.setTimeInMillis(0L);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long56 = dateTimeZone41.getMillisKeepLocal(dateTimeZone54, (long) 2);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 8, dateTimeZone41);
        java.lang.String str58 = dateTimeZone41.getID();
        java.lang.String str60 = dateTimeZone41.getShortName((long) 19);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property63 = dateTime62.minuteOfHour();
        org.joda.time.DateTime dateTime65 = dateTime62.minusDays((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTime();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance();
        calendar67.setTimeInMillis(100L);
        boolean boolean70 = calendar67.isWeekDateSupported();
        calendar67.roll(2, false);
        calendar67.setTimeInMillis(0L);
        java.util.TimeZone timeZone76 = calendar67.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        int int79 = dateTimeZone77.getOffset((long) 70);
        java.lang.String str81 = dateTimeZone77.getShortName(1L);
        long long85 = dateTimeZone77.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime86 = dateTime65.withZoneRetainFields(dateTimeZone77);
        boolean boolean87 = dateTimeZone41.equals((java.lang.Object) dateTimeZone77);
        java.lang.String str89 = dateTimeZone77.getName(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((java.lang.Object) int28, dateTimeZone77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 39 + "'", int28 == 39);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00" + "'", str89, "+00:00");
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int10 = localTime2.get(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay(35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.hourOfHalfday();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572906856,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=26,MILLISECOND=856,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = calendar0.getWeeksInWeekYear();
        calendar0.setLenient(true);
        int int6 = calendar0.getWeekYear();
        calendar0.setFirstDayOfWeek(59);
        int int9 = calendar0.getFirstDayOfWeek();
        int int10 = calendar0.getWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572906864,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=59,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=26,MILLISECOND=864,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 100, chronology6);
        int int8 = localTime7.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 100, chronology10);
        boolean boolean12 = localTime7.isAfter((org.joda.time.ReadablePartial) localTime11);
        int int13 = property2.compareTo((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        boolean boolean25 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property26 = dateTime18.dayOfMonth();
        int int27 = property2.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays((int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(3);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.joda.time.DateTime dateTime38 = dateTime35.minus((-251999990L));
        int int39 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime18.plus((long) 20);
        org.joda.time.DateTime dateTime43 = dateTime18.minusMonths(5);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime18.plus(readableDuration44);
        org.joda.time.DateTime dateTime46 = dateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime18.withDurationAdded(readableDuration47, (int) (byte) 100);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 139680 + "'", int27 == 139680);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        java.util.Locale locale2 = new java.util.Locale("deu", "-1");
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "deu_-1");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu_-1" + "'", str4, "deu_-1");
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        int[] intArray8 = localTime5.getValues();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds((int) (short) 100);
        org.joda.time.LocalTime.Property property11 = localTime5.secondOfMinute();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.LocalTime localTime13 = property11.roundHalfFloorCopy();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        java.lang.String str15 = localTime13.toString();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0, 97]");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10:00:00.000" + "'", str15, "10:00:00.000");
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(448, 27408600);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 27408600");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(58232770, (-63119927), 31, (-36002075), (int) (short) 0, 79140000, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -36002075 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.minusDays((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField15 = chronology13.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-456825), 432000000, 6, 35248, 0, 252000000, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35248 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        int int15 = dateTime12.getYearOfEra();
        boolean boolean16 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean23 = dateTime18.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        int int25 = dateTime5.get(dateTimeFieldType22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime5.withDurationAdded(readableDuration26, 4502724);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology2 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        boolean boolean11 = localTime4.equals((java.lang.Object) dateTime9);
        org.joda.time.LocalTime localTime13 = localTime4.withMillisOfDay(4);
        int[] intArray15 = chronology2.get((org.joda.time.ReadablePartial) localTime4, 9223371986234400089L);
        org.joda.time.DateTimeField dateTimeField16 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology2.weekyear();
        org.joda.time.DurationField durationField18 = chronology2.eras();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[8, 0, 0, 89]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withZoneUTC();
        org.joda.time.Chronology chronology19 = dateTimeFormatter17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (byte) 100);
        boolean boolean24 = dateTimeZone20.isStandardOffset((long) (short) 10);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone20);
        int int27 = dateTimeZone20.getOffsetFromLocal(292278L);
        org.joda.time.Chronology chronology28 = chronology19.withZone(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = chronology19.get(readablePeriod29, (long) 36030850);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 252000000 + "'", int27 == 252000000);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("KR");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) ' ', 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        java.lang.String str12 = property6.getAsText(locale7);
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        org.joda.time.DateTime.Property property16 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = property16.addToCopy((-49881509L));
        boolean boolean19 = property16.isLeap();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "KOR" + "'", str8, "KOR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Corea del Sud" + "'", str11, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "79140000" + "'", str12, "79140000");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italienisch (Italien)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=italienisch (italien)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        int int8 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillis(32770L);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(32770);
        org.joda.time.DateTime dateTime14 = dateTime12.withYear((-1));
        int int15 = dateTime12.getMillisOfDay();
        int int16 = dateTime12.getDayOfWeek();
        int int17 = dateTime12.getCenturyOfEra();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime12.toGregorianCalendar();
        java.util.Locale locale24 = new java.util.Locale("cor\351en (Cor\351e du Sud)", "91", "java.util.GregorianCalendar[time=1644572587079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=7,MILLISECOND=79,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str25 = locale24.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap26 = gregorianCalendar18.getDisplayNames(18, 0, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 58232770 + "'", int15 == 58232770);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertEquals(locale24.toString(), "cor\351en (cor\351e du sud)_91_java.util.GregorianCalendar[time=1644572587079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=7,MILLISECOND=79,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cor\351en (cor\351e du sud) (91,java.util.GregorianCalendar[time=1644572587079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK,OF,YEAR=7,WEEK,OF,MONTH=2,DAY,OF,MONTH=11,DAY,OF,YEAR=42,DAY,OF,WEEK=6,DAY,OF,WEEK,IN,MONTH=2,AM,PM=0,HOUR=9,HOUR,OF,DAY=9,MINUTE=43,SECOND=7,MILLISECOND=79,ZONE,OFFSET=0,DST,OFFSET=0])" + "'", str25, "cor\351en (cor\351e du sud) (91,java.util.GregorianCalendar[time=1644572587079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK,OF,YEAR=7,WEEK,OF,MONTH=2,DAY,OF,MONTH=11,DAY,OF,YEAR=42,DAY,OF,WEEK=6,DAY,OF,WEEK,IN,MONTH=2,AM,PM=0,HOUR=9,HOUR,OF,DAY=9,MINUTE=43,SECOND=7,MILLISECOND=79,ZONE,OFFSET=0,DST,OFFSET=0])");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar.Builder builder76 = builder74.setLenient(false);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar.Builder builder78 = builder74.setLocale(locale77);
        java.util.Calendar.Builder builder82 = builder74.setDate(0, 62220, 45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder85 = builder74.set(18, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572907316,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=316,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) ' ');
        boolean boolean58 = dateTime51.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime51.dayOfMonth();
        boolean boolean61 = dateTime51.isBefore((long) 100);
        long long62 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        java.lang.String str63 = property6.getAsShortText();
        org.joda.time.DateTimeField dateTimeField64 = property6.getField();
        org.joda.time.LocalTime localTime65 = property6.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property6.getFieldType();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfHour();
        org.joda.time.DateTime dateTime71 = dateTime68.minusDays((int) 'a');
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks(0);
        org.joda.time.DateTime dateTime75 = dateTime71.plusMinutes(1);
        org.joda.time.DateTime dateTime77 = dateTime75.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime80 = dateTime77.withPeriodAdded(readablePeriod78, 36000097);
        org.joda.time.Chronology chronology81 = dateTime80.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType66.getField(chronology81);
        org.joda.time.DateTimeField dateTimeField84 = chronology81.weekyearOfCentury();
        org.joda.time.DurationField durationField85 = chronology81.months();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(chronology81);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 8416800097L + "'", long62 == 8416800097L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "97" + "'", str63, "97");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) 0);
        long long17 = dateTimeZone12.convertLocalToUTC((long) 2000, false);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(1973L, dateTimeZone12);
        java.lang.String str20 = dateTimeZone12.getShortName(1590468289147092000L);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime23 = localTime21.plusSeconds(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = localTime23.withMinuteOfHour(36030850);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36030850 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2000L + "'", long17 == 2000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        calendar26.setTimeInMillis((long) 16);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromCalendarFields(calendar26);
        java.lang.String str30 = localTime29.toString();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        java.lang.String str32 = durationFieldType31.toString();
        java.lang.String str33 = durationFieldType31.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime35 = localTime29.withFieldAdded(durationFieldType31, 35303);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'months' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "KOR" + "'", str19, "KOR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko-KR" + "'", str20, "ko-KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Corea del Sud" + "'", str22, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=16,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=16,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "00:00:00.016" + "'", str30, "00:00:00.016");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "months" + "'", str32, "months");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "months" + "'", str33, "months");
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long18 = dateTimeZone16.nextTransition((-36000094L));
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime23 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes(1);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.DateTime dateTime27 = property26.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight28 = dateTime27.toDateMidnight();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = dateTimeField36.getAsText(32770, locale38);
        int int43 = dateTimeField36.getMaximumValue((long) 0);
        int int44 = dateTime27.get(dateTimeField36);
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = dateTimeField36.getAsText(1967, locale46);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology52);
        org.joda.time.LocalTime.Property property54 = localTime53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        long long57 = dateTimeField55.roundFloor((long) (short) 100);
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category58, locale59);
        int int61 = dateTimeField55.getMaximumTextLength(locale59);
        java.util.Locale locale62 = locale59.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale46.getDisplayLanguage(locale62);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone19, locale46);
        java.lang.String str67 = calendar66.getCalendarType();
        calendar66.set(36000156, 29, 79200, 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            calendar66.setWeekDate(35222, (-979), 79140);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 79140");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-36000094L) + "'", long18 == (-36000094L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str40, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32770" + "'", str41, "32770");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999 + "'", int43 == 999);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1967" + "'", str47, "1967");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L + "'", long57 == 100L);
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "allemand" + "'", str64, "allemand");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Franz\366sisch" + "'", str65, "Franz\366sisch");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=36000156,MONTH=29,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=79200,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=0,MINUTE=2,SECOND=27,MILLISECOND=410,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "gregory" + "'", str67, "gregory");
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        org.joda.time.DurationField durationField24 = chronology20.centuries();
        long long28 = chronology20.add((-50399903L), (long) 86399, 6);
        org.joda.time.Chronology chronology29 = chronology20.withUTC();
        boolean boolean30 = durationFieldType12.isSupported(chronology29);
        org.joda.time.DurationField durationField31 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfMonth();
        org.joda.time.DurationField durationField33 = dateTimeField32.getDurationField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-04T00:00:00.000+70:00" + "'", str9, "1970-01-04T00:00:00.000+70:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-49881509L) + "'", long28 == (-49881509L));
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str9 = dateTimeField7.getAsShortText((long) 121);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 100, locale11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        long long23 = dateTimeField21.roundFloor((long) (short) 100);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category24, locale25);
        int int27 = dateTimeField21.getMaximumTextLength(locale25);
        java.lang.String str28 = dateTimeField7.getAsShortText((int) (byte) 1, locale25);
        java.lang.String str30 = locale25.getExtension('a');
        java.lang.String str31 = locale25.getLanguage();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "121" + "'", str9, "121");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100" + "'", str12, "100");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "de" + "'", str31, "de");
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale1.getDisplayVariant(locale2);
        java.lang.String str8 = locale0.getDisplayScript(locale2);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale2);
        calendar9.setMinimalDaysInFirstWeek(57600000);
        // The following exception was thrown during execution in test generation
        try {
            calendar9.add(1320, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KOR" + "'", str3, "KOR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko-KR" + "'", str4, "ko-KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Corea del Sud" + "'", str6, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572907483,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=57600000,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=483,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime.Property property16 = dateTime12.secondOfMinute();
        int int17 = property16.getMinimumValueOverall();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        java.lang.String str19 = calendar18.getCalendarType();
        java.time.Instant instant20 = calendar18.toInstant();
        int int21 = calendar18.getWeekYear();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields(calendar18);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime22.minus(readablePeriod24);
        org.joda.time.LocalTime localTime27 = localTime25.minusMinutes(32772);
        int int28 = property16.compareTo((org.joda.time.ReadablePartial) localTime25);
        int int29 = localTime25.size();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        org.joda.time.DateTime dateTime36 = property35.withMinimumValue();
        org.joda.time.DateTime dateTime37 = localTime25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime36.dayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology43);
        org.joda.time.LocalTime.Property property45 = localTime44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        org.joda.time.LocalTime localTime47 = property45.getLocalTime();
        org.joda.time.LocalTime localTime48 = property45.roundCeilingCopy();
        org.joda.time.LocalTime localTime50 = property45.addCopy(6);
        org.joda.time.DateTimeField dateTimeField51 = property45.getField();
        org.joda.time.LocalTime localTime52 = property45.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField53 = property45.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property45.getFieldType();
        org.joda.time.DateTime.Property property55 = dateTime36.property(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getRangeDurationType();
        java.lang.String str57 = dateTimeFieldType54.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572907499,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=499,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "millisOfSecond" + "'", str57, "millisOfSecond");
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int25 = dateTimeZone23.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(6, 16);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter2.withZone(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = dateTimeFormatter34.parseLocalDateTime("Sun Mar 09 00:19:25 UTC 2549");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        java.lang.String str12 = property6.getAsText(locale7);
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime14 = property6.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight16 = dateTime15.toDateMidnight();
        org.joda.time.DateTime dateTime18 = dateTime15.plusHours(11826);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "KOR" + "'", str8, "KOR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Corea del Sud" + "'", str11, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "79140000" + "'", str12, "79140000");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.setLenient(false);
        boolean boolean4 = calendar0.isWeekDateSupported();
        java.lang.Object obj5 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572907569,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "java.util.GregorianCalendar[time=1644572907569,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "java.util.GregorianCalendar[time=1644572907569,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "java.util.GregorianCalendar[time=1644572907569,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        int int3 = property2.getMaximumValue();
        org.joda.time.DateTime dateTime5 = property2.setCopy(1969);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 86399999 + "'", int3 == 86399999);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime7.era();
        boolean boolean12 = dateTime7.isEqualNow();
        boolean boolean13 = dateTime7.isEqualNow();
        int int14 = dateTime7.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.util.Date date6 = new java.util.Date(9, 252690035, 25200000, 1977, 4, 30);
        java.lang.String str7 = date6.toGMTString();
        int int8 = date6.getTimezoneOffset();
        org.junit.Assert.assertEquals(date6.toString(), "Thu May 24 09:04:30 UTC 21128407");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "24 May 21128407 09:04:30 GMT" + "'", str7, "24 May 21128407 09:04:30 GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale27.getISO3Country();
        java.lang.String str29 = locale27.toLanguageTag();
        java.lang.String str30 = dateTimeZone25.getName((long) 4, locale27);
        int int32 = dateTimeZone25.getOffsetFromLocal((-1680047639000L));
        boolean boolean33 = dateTimeZone25.isFixed();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 161, dateTimeZone25);
        boolean boolean36 = dateTimeZone25.isStandardOffset(1057773110593000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "KOR" + "'", str28, "KOR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ko-KR" + "'", str29, "ko-KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        int int10 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withEra((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime14.plusSeconds((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        java.lang.String str18 = property17.getAsText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1901" + "'", str18, "1901");
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 100, chronology15);
        java.lang.String str21 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.centuryOfEra();
        java.util.Locale locale27 = new java.util.Locale("und", "Property[yearOfEra]");
        java.lang.String str28 = dateTimeField23.getAsText(121L, locale27);
        java.util.Locale.setDefault(locale27);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(locale27.toString(), "und_PROPERTY[YEAROFERA]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "19" + "'", str28, "19");
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.withWeekyear(9);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localTime15.get(dateTimeFieldType18);
        int int20 = dateTime7.get(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weeks();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology5.getDateTimeMillis(1130923506332822100L, 36100918, 0, 86399, 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36100918 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572907742,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=742,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter7.withDefaultYear(999);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = dateTimeFormatter12.print((long) 35400091);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime.Property property12 = dateTime10.weekOfWeekyear();
        int int13 = property12.getLeapAmount();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.toLanguageTag();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.lang.String str26 = dateTimeField24.getAsShortText((long) 121);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = dateTimeField24.getAsShortText((-1), locale28);
        java.lang.String str30 = locale14.getDisplayLanguage(locale28);
        java.lang.String str31 = locale28.getISO3Country();
        java.lang.String str32 = property12.getAsText(locale28);
        org.joda.time.DateTime dateTime34 = property12.addToCopy(97);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMonths(35400091);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "KOR" + "'", str15, "KOR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ko-KR" + "'", str16, "ko-KR");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "121" + "'", str26, "121");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1" + "'", str29, "-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cor\351en" + "'", str30, "cor\351en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FRA" + "'", str31, "FRA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        int int3 = dateTime1.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone9);
        calendar10.setFirstDayOfWeek(15);
        int int13 = calendar10.getWeekYear();
        calendar10.setFirstDayOfWeek(152);
        java.time.Instant instant16 = calendar10.toInstant();
        int int17 = calendar10.getMinimalDaysInFirstWeek();
        java.lang.String str18 = calendar10.toString();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572907816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=152,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=816,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.util.GregorianCalendar[time=1644572907816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=152,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=816,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str18, "java.util.GregorianCalendar[time=1644572907816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=152,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=816,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(976);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        long long16 = dateTimeField7.roundHalfFloor((-1L));
        long long18 = dateTimeField7.roundCeiling((long) (short) 0);
        boolean boolean20 = dateTimeField7.isLeap((long) 5);
        long long23 = dateTimeField7.add((long) 14, 0);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = dateTimeField7.getAsShortText(25105L, locale25);
        java.lang.String str28 = locale25.getScript();
        java.lang.String str29 = locale25.getVariant();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale25);
        java.lang.String str31 = locale25.getISO3Country();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 14L + "'", long23 == 14L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "105" + "'", str27, "105");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572907890,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=890,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ITA" + "'", str31, "ITA");
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        int int12 = localTime5.size();
        org.joda.time.LocalTime localTime14 = localTime5.plusMillis(2000);
        org.joda.time.LocalTime localTime16 = localTime14.withMillisOfDay(8);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes(1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        int int18 = dateTime15.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime15.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime21 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime21.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond(36000545);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000545 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.set(6, 52, 0, 8, 20);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        java.lang.String str11 = calendar0.getCalendarType();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61841461199900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=20,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime.Property property8 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property8.roundFloorCopy();
        int int10 = localTime9.size();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 100, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean15 = localTime13.isSupported(dateTimeFieldType14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar16);
        int int18 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.DateTime dateTime19 = localTime13.toDateTimeToday();
        org.joda.time.LocalTime localTime21 = localTime13.withMillisOfDay(9);
        org.joda.time.LocalTime localTime23 = localTime21.plusMinutes(86340000);
        boolean boolean24 = localTime9.isEqual((org.joda.time.ReadablePartial) localTime21);
        java.lang.String str25 = localTime21.toString();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572907999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=27,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "00:00:00.009" + "'", str25, "00:00:00.009");
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfWeek();
        long long15 = dateTimeField12.getDifferenceAsLong((long) 32399999, 1429L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes(1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        int int44 = localTime42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime54 = dateTime36.withFields((org.joda.time.ReadablePartial) localTime42);
        boolean boolean55 = dateTime28.equals((java.lang.Object) localTime42);
        org.joda.time.LocalTime localTime57 = localTime42.plusMillis(10);
        java.util.Date date63 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromDateFields(date63);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology69);
        int int71 = localTime64.compareTo((org.joda.time.ReadablePartial) localTime70);
        boolean boolean72 = localTime57.isBefore((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int74 = localTime57.indexOf(dateTimeFieldType73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) 100, chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean79 = localTime77.isSupported(dateTimeFieldType78);
        org.joda.time.LocalTime localTime81 = localTime77.plusMillis(52);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalTime localTime84 = localTime77.withPeriodAdded(readablePeriod82, (int) (byte) -1);
        int int85 = localTime84.getSecondOfMinute();
        org.joda.time.Chronology chronology86 = localTime84.getChronology();
        org.joda.time.DurationField durationField87 = chronology86.months();
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime(chronology86);
        boolean boolean89 = localTime57.isEqual((org.joda.time.ReadablePartial) localTime88);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime4.minusDays(999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withDayOfWeek(59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property6.addWrapFieldToCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property6.getFieldType();
        java.lang.String str15 = dateTimeFieldType14.toString();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        int int10 = property9.getMaximumValue();
        boolean boolean11 = property9.isLeap();
        org.joda.time.LocalTime localTime13 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime14 = property9.roundFloorCopy();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone40, (long) 2);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 8, dateTimeZone27);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        int int46 = dateTime45.getEra();
        org.joda.time.DateTime dateTime47 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime49 = dateTime45.minusMinutes(1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfYear();
        org.joda.time.DateTime dateTime51 = property50.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology56);
        org.joda.time.LocalTime.Property property58 = localTime57.millisOfSecond();
        int int59 = localTime57.size();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 100, chronology61);
        int int63 = localTime62.getMillisOfSecond();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 100, chronology65);
        boolean boolean67 = localTime62.isAfter((org.joda.time.ReadablePartial) localTime66);
        int int68 = localTime57.compareTo((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.DateTime dateTime69 = dateTime51.withFields((org.joda.time.ReadablePartial) localTime57);
        boolean boolean70 = dateTime43.equals((java.lang.Object) localTime57);
        org.joda.time.LocalTime localTime72 = localTime57.plusMillis(10);
        java.util.Date date78 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromDateFields(date78);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology84);
        int int86 = localTime79.compareTo((org.joda.time.ReadablePartial) localTime85);
        boolean boolean87 = localTime72.isBefore((org.joda.time.ReadablePartial) localTime85);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int89 = localTime72.indexOf(dateTimeFieldType88);
        int int90 = localTime14.get(dateTimeFieldType88);
        org.joda.time.Chronology chronology91 = localTime14.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray92 = localTime14.getFieldTypes();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertEquals(date78.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray92);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        java.util.Date date5 = new java.util.Date(50400000, 36002172, 200, 100, 447);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Jul 23 11:27:00 UTC 53402081");
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property8 = localTime2.secondOfMinute();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalTime localTime11 = property8.addCopy(0);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours(70);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 999, dateTimeZone27);
        java.lang.String str31 = dateTimeZone27.getID();
        long long34 = dateTimeZone27.convertLocalToUTC((long) 14, false);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(86399999L, dateTimeZone27);
        boolean boolean36 = dateTimeZone27.isFixed();
        org.joda.time.DateTime dateTime37 = localTime13.toDateTimeToday(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology46);
        org.joda.time.LocalTime.Property property48 = localTime47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.LocalTime localTime50 = property48.getLocalTime();
        org.joda.time.LocalTime localTime51 = property48.roundCeilingCopy();
        org.joda.time.LocalTime localTime53 = property48.addCopy(6);
        org.joda.time.LocalTime.Property property54 = localTime53.hourOfDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology59);
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfSecond();
        int int62 = localTime60.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int64 = localTime60.get(dateTimeFieldType63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        int int66 = localTime60.indexOf(dateTimeFieldType65);
        boolean boolean67 = localTime53.isSupported(dateTimeFieldType65);
        org.joda.time.DateTime dateTime69 = dateTime41.withField(dateTimeFieldType65, 45);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = localTime13.get(dateTimeFieldType65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572908152,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=28,MILLISECOND=152,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Etc/UTC" + "'", str31, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 14L + "'", long34 == 14L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.009" + "'", str40, "+00:00:00.009");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getShortName((-1680047639000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withDefaultYear((-599));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withDefaultYear(35126);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = dateTimeFormatter2.parseLocalDate("59");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+70:00" + "'", str15, "+70:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        int int20 = localTime18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        int int24 = localTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        boolean boolean28 = localTime23.isAfter((org.joda.time.ReadablePartial) localTime27);
        int int29 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        int int37 = localTime35.size();
        int[] intArray38 = localTime35.getValues();
        int int39 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime27, intArray38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        calendar40.setTimeInMillis(100L);
        boolean boolean43 = calendar40.isWeekDateSupported();
        calendar40.roll(2, false);
        calendar40.setTimeInMillis(0L);
        java.util.TimeZone timeZone49 = calendar40.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int53 = dateTimeZone51.getOffsetFromLocal((long) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime27.toDateTimeToday(dateTimeZone51);
        boolean boolean56 = dateTimeZone51.isStandardOffset(132L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 0, 0, 97]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 999 + "'", int39 == 999);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone9);
        calendar10.setFirstDayOfWeek(15);
        int int13 = calendar10.getWeekYear();
        calendar10.setFirstDayOfWeek(152);
        java.time.Instant instant16 = calendar10.toInstant();
        boolean boolean17 = calendar10.isWeekDateSupported();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = dateTimeField35.getAsText(32770, locale37);
        java.lang.String str42 = dateTimeField35.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        int int46 = localTime45.getMillisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 100, chronology48);
        boolean boolean50 = localTime45.isAfter((org.joda.time.ReadablePartial) localTime49);
        int int51 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        java.lang.String str52 = dateTimeField35.getName();
        java.util.Date date58 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromDateFields(date58);
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale61.getISO3Country();
        java.lang.String str63 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localTime59, (int) 'a', locale61);
        java.lang.String str64 = property26.getAsText(locale61);
        java.util.Locale locale65 = java.util.Locale.PRC;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology70);
        org.joda.time.LocalTime.Property property72 = localTime71.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField73 = property72.getField();
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.lang.String str78 = dateTimeField73.getAsText(32770, locale75);
        java.lang.String str79 = locale65.getDisplayVariant(locale75);
        java.lang.String str80 = locale61.getDisplayVariant(locale65);
        java.util.Locale locale81 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology86);
        org.joda.time.LocalTime.Property property88 = localTime87.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField89 = property88.getField();
        java.util.Locale locale91 = java.util.Locale.KOREA;
        java.util.Locale locale92 = java.util.Locale.FRENCH;
        java.lang.String str93 = locale91.getDisplayName(locale92);
        java.lang.String str94 = dateTimeField89.getAsText(32770, locale91);
        java.lang.String str95 = locale81.getDisplayLanguage(locale91);
        java.lang.String str96 = locale65.getDisplayLanguage(locale91);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap97 = calendar10.getDisplayNames((-1), 49352, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572908211,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=152,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=28,MILLISECOND=211,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str39, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "32770" + "'", str40, "32770");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 999 + "'", int51 == 999);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "millisOfSecond" + "'", str52, "millisOfSecond");
        org.junit.Assert.assertEquals(date58.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "KOR" + "'", str62, "KOR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "97" + "'", str63, "97");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "97" + "'", str64, "97");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str77, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "32770" + "'", str78, "32770");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str93, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "32770" + "'", str94, "32770");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str95, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str96, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        java.lang.String str9 = date8.toGMTString();
        java.util.Date date15 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date15.setMonth((int) ' ');
        java.util.Date date23 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date23);
        boolean boolean25 = date15.before(date23);
        int int26 = date23.getTimezoneOffset();
        java.util.Date date33 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean34 = date23.after(date33);
        int int35 = date33.getHours();
        boolean boolean36 = date8.after(date33);
        java.lang.Object obj37 = date8.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572908233,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=28,MILLISECOND=233,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:48:28 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11 Feb 2022 09:48:28 GMT" + "'", str9, "11 Feb 2022 09:48:28 GMT");
        org.junit.Assert.assertEquals(date15.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date23.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(date33.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "Fri Feb 11 09:48:28 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "Fri Feb 11 09:48:28 UTC 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "Fri Feb 11 09:48:28 UTC 2022");
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        java.util.Date date1 = new java.util.Date((long) 8);
        date1.setSeconds(71);
        int int4 = date1.getYear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:11 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 70 + "'", int4 == 70);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.lang.String str48 = property6.toString();
        org.joda.time.DateTimeField dateTimeField49 = property6.getField();
        org.joda.time.DurationField durationField50 = dateTimeField49.getRangeDurationField();
        int int52 = dateTimeField49.getLeapAmount(22115663803471000L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[millisOfSecond]" + "'", str48, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        long long56 = property6.remainder();
        org.joda.time.DateTimeField dateTimeField57 = property6.getField();
        boolean boolean59 = dateTimeField57.isLeap((-961379723L));
        long long62 = dateTimeField57.getDifferenceAsLong((long) 31, 1644572860241L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572908345,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=28,MILLISECOND=345,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1644572860210L) + "'", long62 == (-1644572860210L));
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(292269054);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((long) 53);
        org.joda.time.DateTime.Property property9 = dateTime8.weekOfWeekyear();
        java.util.GregorianCalendar gregorianCalendar10 = dateTime8.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = gregorianCalendar10.get(58232770);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58232770");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 59);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronolgy();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone9);
        calendar10.setFirstDayOfWeek(15);
        int int13 = calendar10.getWeekYear();
        calendar10.setFirstDayOfWeek(152);
        java.util.Date date16 = calendar10.getTime();
        int int17 = date16.getYear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572908411,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=152,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=28,MILLISECOND=411,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:48:28 UTC 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 122 + "'", int17 == 122);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfEvenCopy();
        java.util.Date date17 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromDateFields(date17);
        boolean boolean19 = localTime11.equals((java.lang.Object) localTime18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime32 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int33 = localTime18.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localTime15.get(dateTimeFieldType18);
        int int20 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.Chronology chronology21 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology21.getDateTimeMillis((long) 86400549, 365, 72000000, 29, 277);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        int int22 = property13.getDifference((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DurationField durationField23 = property13.getDurationField();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property28 = dateTime25.weekyear();
        org.joda.time.DateTime dateTime30 = property28.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.minus(readablePeriod33);
        int int35 = dateTime34.getMonthOfYear();
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTimeISO();
        int int37 = property13.getDifference((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar39 = dateTime36.toGregorianCalendar();
        int int40 = gregorianCalendar39.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = gregorianCalendar39.getMinimum(86340100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86340100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusHours((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime3.withMillisOfDay(1);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(0);
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 2);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DateTime dateTime30 = dateTime14.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfDay();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DurationField durationField34 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.year();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology40);
        org.joda.time.LocalTime.Property property42 = localTime41.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        int int47 = localTime46.getMillisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        boolean boolean51 = localTime46.isAfter((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology53 = null;
        boolean boolean54 = dateTimeFieldType52.isSupported(chronology53);
        int int55 = localTime46.indexOf(dateTimeFieldType52);
        int int56 = localTime43.indexOf(dateTimeFieldType52);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology61);
        org.joda.time.LocalTime.Property property63 = localTime62.millisOfSecond();
        org.joda.time.LocalTime localTime64 = property63.withMaximumValue();
        org.joda.time.LocalTime localTime65 = property63.getLocalTime();
        org.joda.time.LocalTime.Property property66 = localTime65.millisOfDay();
        org.joda.time.LocalTime localTime68 = property66.addCopy(2);
        org.joda.time.LocalTime localTime69 = localTime43.withFields((org.joda.time.ReadablePartial) localTime68);
        long long71 = chronology27.set((org.joda.time.ReadablePartial) localTime69, (long) 1977);
        org.joda.time.DateTimeField dateTimeField72 = chronology27.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-43199901L) + "'", long71 == (-43199901L));
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime5.plusYears(11);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = property11.addWrapFieldToCopy(139680);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.Chronology chronology26 = dateTime7.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        long long27 = dateTimeField25.roundFloor((long) 99);
        java.lang.String str29 = dateTimeField25.getAsText((long) 32000);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology43);
        org.joda.time.LocalTime.Property property45 = localTime44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = dateTimeField46.getAsText(32770, locale48);
        java.lang.String str53 = dateTimeField46.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) 100, chronology55);
        int int57 = localTime56.getMillisOfSecond();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 100, chronology59);
        boolean boolean61 = localTime56.isAfter((org.joda.time.ReadablePartial) localTime60);
        int int62 = dateTimeField46.getMaximumValue((org.joda.time.ReadablePartial) localTime56);
        java.lang.String str63 = dateTimeField46.getName();
        java.util.Date date69 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.fromDateFields(date69);
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.lang.String str73 = locale72.getISO3Country();
        java.lang.String str74 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localTime70, (int) 'a', locale72);
        java.lang.String str75 = property37.getAsText(locale72);
        java.util.Locale locale76 = java.util.Locale.PRC;
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology81);
        org.joda.time.LocalTime.Property property83 = localTime82.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField84 = property83.getField();
        java.util.Locale locale86 = java.util.Locale.KOREA;
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.lang.String str88 = locale86.getDisplayName(locale87);
        java.lang.String str89 = dateTimeField84.getAsText(32770, locale86);
        java.lang.String str90 = locale76.getDisplayVariant(locale86);
        java.lang.String str91 = locale72.getDisplayVariant(locale76);
        java.lang.String str92 = dateTimeField25.getAsText(14, locale72);
        java.lang.String str93 = locale72.getLanguage();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22" + "'", str29, "22");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str50, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "32770" + "'", str51, "32770");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 999 + "'", int62 == 999);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
        org.junit.Assert.assertEquals(date69.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "KOR" + "'", str73, "KOR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "97" + "'", str74, "97");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "97" + "'", str75, "97");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str88, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "32770" + "'", str89, "32770");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "14" + "'", str92, "14");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ko" + "'", str93, "ko");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 491);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology25);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        java.util.Locale locale29 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        int int31 = dateTimeField28.getMaximumShortTextLength(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale29.toLanguageTag();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale35.getDisplayVariant(locale36);
        java.lang.String str42 = locale34.getDisplayScript(locale36);
        java.lang.String str43 = locale34.getISO3Language();
        java.lang.String str44 = locale34.getISO3Country();
        java.util.Set<java.lang.Character> charSet45 = locale34.getExtensionKeys();
        java.lang.String str46 = locale29.getDisplayCountry(locale34);
        java.util.Set<java.lang.String> strSet47 = locale34.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter18.withLocale(locale34);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter18.getPrinter();
        org.joda.time.Chronology chronology50 = dateTimeFormatter18.getChronolgy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en-US" + "'", str33, "en-US");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "KOR" + "'", str37, "KOR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ko-KR" + "'", str38, "ko-KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Corea del Sud" + "'", str40, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "deu" + "'", str43, "deu");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Vereinigte Staaten von Amerika" + "'", str46, "Vereinigte Staaten von Amerika");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimePrinter49);
        org.junit.Assert.assertNull(chronology50);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 100, chronology16);
        int int18 = localTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        boolean boolean22 = localTime17.isAfter((org.joda.time.ReadablePartial) localTime21);
        int int23 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime17);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar24);
        int int26 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean31 = localTime29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalTime localTime33 = localTime29.plusMillis(52);
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = localTime33.equals(obj34);
        int int36 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.LocalTime localTime38 = localTime33.minusSeconds(1200);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572908753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=28,MILLISECOND=753,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 999 + "'", int36 == 999);
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTime dateTime12 = dateTime6.minusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 4);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(1, 86399999, 0);
        java.util.Calendar.Builder builder12 = builder0.setDate(0, (int) (byte) 10, 36000107);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        int int20 = localTime18.size();
        org.joda.time.LocalTime localTime22 = localTime18.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime24 = localTime18.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        int int28 = localTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        boolean boolean32 = localTime27.isAfter((org.joda.time.ReadablePartial) localTime31);
        boolean boolean33 = localTime24.isEqual((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.minus(readablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withZone(dateTimeZone45);
        boolean boolean47 = localTime24.equals((java.lang.Object) dateTimeZone45);
        org.joda.time.LocalTime localTime49 = localTime24.minusMinutes(0);
        org.joda.time.DateTimeField dateTimeField51 = localTime24.getField((int) (short) 0);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance();
        calendar52.setTimeInMillis(100L);
        boolean boolean55 = calendar52.isWeekDateSupported();
        calendar52.roll(2, false);
        calendar52.setTimeInMillis(0L);
        java.util.TimeZone timeZone61 = calendar52.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology68);
        org.joda.time.LocalTime.Property property70 = localTime69.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        java.util.Locale locale73 = java.util.Locale.KOREA;
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.lang.String str75 = locale73.getDisplayName(locale74);
        java.lang.String str76 = dateTimeField71.getAsText(32770, locale73);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone61, locale73);
        int int78 = dateTimeField51.getMaximumShortTextLength(locale73);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology83);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = localTime84.getFieldTypes();
        org.joda.time.LocalTime localTime87 = localTime84.withMillisOfSecond(17);
        org.joda.time.LocalTime localTime88 = org.joda.time.LocalTime.MIDNIGHT;
        int[] intArray89 = localTime88.getValues();
        int int90 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localTime84, intArray89);
        java.util.Calendar.Builder builder91 = builder12.setFields(intArray89);
        java.util.Calendar.Builder builder95 = builder12.setTimeOfDay((int) (byte) 100, 19, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder98 = builder12.set((-1368), 35126);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str75, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "32770" + "'", str76, "32770");
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1644572908777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=28,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray85);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property6.setCopy((int) 'u');
        int int9 = property6.getMaximumValueOverall();
        int int10 = property6.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1439 + "'", int9 == 1439);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime1.plusHours(6);
        org.joda.time.DateTime dateTime17 = dateTime1.minus((-1L));
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        boolean boolean23 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        int int26 = dateTime25.getEra();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology38);
        boolean boolean43 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime29.plus(readablePeriod44);
        org.joda.time.Chronology chronology46 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfMonth();
        org.joda.time.DateTime dateTime50 = dateTime1.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.secondOfMinute();
        org.joda.time.DurationField durationField52 = dateTimeField51.getLeapDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNull(durationField52);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        long long4 = property2.remainder();
        org.joda.time.DateTime dateTime5 = property2.roundFloorCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 10, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime31.plus(readablePeriod32);
        org.joda.time.LocalTime localTime35 = localTime33.minusSeconds(10);
        int[] intArray36 = localTime33.getValues();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes(1);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfYear();
        org.joda.time.DateTime dateTime49 = property48.roundHalfCeilingCopy();
        boolean boolean50 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime49.getEra();
        org.joda.time.DateTime dateTime52 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean54 = dateTime49.isAfter(36000990L);
        org.joda.time.DateTime.Property property55 = dateTime49.dayOfMonth();
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = property15.setCopy(79140000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79140000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        int int7 = dateTime5.getYearOfEra();
        int int8 = dateTime5.getYear();
        org.joda.time.DateTime.Property property9 = dateTime5.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        int int16 = localTime14.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int18 = localTime14.get(dateTimeFieldType17);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        int int26 = localTime24.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = localTime24.get(dateTimeFieldType27);
        int int29 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.Chronology chronology30 = localTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfSecond();
        boolean boolean33 = durationFieldType8.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField34 = chronology30.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(32, (int) (short) 0, 79200000, 1439, 1969, 36002172, 36000053, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime17 = localTime14.withPeriodAdded(readablePeriod15, 28);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property6.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime15.era();
        org.joda.time.DateTime.Property property21 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        int int23 = property6.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime26 = dateTime22.withFieldAdded(durationFieldType24, (int) (byte) 10);
        java.lang.String str27 = durationFieldType24.getName();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "seconds" + "'", str27, "seconds");
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((-2203656180000L));
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.year();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str15 = durationFieldType14.toString();
        java.lang.String str16 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology24.getZone();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.Chronology chronology38 = chronology24.withZone(dateTimeZone37);
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DurationField durationField40 = durationFieldType14.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime11.toMutableDateTime(chronology38);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "seconds" + "'", str15, "seconds");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "seconds" + "'", str16, "seconds");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str39, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        java.util.Date date1 = new java.util.Date(588452L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:09:48 UTC 1970");
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.lang.String str48 = property6.toString();
        org.joda.time.DateTimeField dateTimeField49 = property6.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property6.getFieldType();
        org.joda.time.LocalTime localTime52 = property6.addCopy(86340009);
        org.joda.time.LocalTime localTime53 = property6.getLocalTime();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[millisOfSecond]" + "'", str48, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        long long16 = dateTimeField7.roundHalfFloor((-1L));
        long long18 = dateTimeField7.roundCeiling((long) (short) 0);
        boolean boolean20 = dateTimeField7.isLeap((long) 5);
        long long23 = dateTimeField7.add((long) 14, 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology28);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        org.joda.time.LocalTime localTime31 = property30.withMaximumValue();
        org.joda.time.LocalTime localTime32 = property30.getLocalTime();
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime35 = property33.addCopy(2);
        org.joda.time.LocalTime localTime37 = property33.addCopy((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.lang.String str41 = dateTimeZone39.getNameKey((long) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology48);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.lang.String str56 = dateTimeField51.getAsText(32770, locale53);
        java.lang.String str57 = locale43.getDisplayLanguage(locale53);
        java.lang.String str58 = dateTimeZone39.getShortName((long) 6, locale53);
        java.lang.String str59 = locale53.getScript();
        java.lang.String str60 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime37, locale53);
        long long62 = dateTimeField7.roundCeiling((long) (-2328));
        int int64 = dateTimeField7.get((long) 39);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 14L + "'", long23 == 14L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str55, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "32770" + "'", str56, "32770");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str57, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "97" + "'", str60, "97");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-2328L) + "'", long62 == (-2328L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 39 + "'", int64 == 39);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) 0);
        java.util.Locale locale5 = new java.util.Locale("DateTimeField[millisOfSecond]");
        java.util.Calendar.Builder builder6 = builder3.setLocale(locale5);
        java.util.Calendar.Builder builder10 = builder3.setDate(84326400, 86220268, 65432779);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder3.set(36000097, (-1644572712));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals(locale5.toString(), "datetimefield[millisofsecond]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter7.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 100, chronology15);
        java.lang.String str21 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField23 = chronology15.years();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology15.getDateTimeMillis((long) 32000, 333, 11826, 0, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 333 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime4.minus(readablePeriod6);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.getLocalTime();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.plusHours(32770);
        int int20 = localTime19.getMinuteOfHour();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int36 = dateTimeZone34.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        calendar37.setTimeInMillis(100L);
        boolean boolean40 = calendar37.isWeekDateSupported();
        calendar37.roll(2, false);
        calendar37.setTimeInMillis(0L);
        java.util.TimeZone timeZone46 = calendar37.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        long long49 = dateTimeZone34.getMillisKeepLocal(dateTimeZone47, (long) 2);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 8, dateTimeZone34);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(dateTimeZone34);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 10, dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalTime localTime54 = localTime52.plus(readablePeriod53);
        org.joda.time.LocalTime.Property property55 = localTime52.millisOfDay();
        boolean boolean56 = localTime19.isEqual((org.joda.time.ReadablePartial) localTime52);
        boolean boolean57 = localTime4.isBefore((org.joda.time.ReadablePartial) localTime52);
        int int58 = localTime4.getMinuteOfHour();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572909129,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=29,MILLISECOND=129,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 48 + "'", int58 == 48);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        int int8 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes(1);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(0);
        org.joda.time.DateTime dateTime20 = dateTime18.minus((long) 2);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfHour();
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.centuries();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(chronology22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) dateTime5, chronology22);
        org.joda.time.DurationField durationField27 = chronology22.halfdays();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType30 = localTime28.getFieldType(79019);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 79019");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean12 = dateTime8.isSupported(dateTimeFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType11.getDurationType();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        org.joda.time.DurationField durationField24 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfYear();
        boolean boolean27 = durationFieldType13.isSupported(chronology21);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 5, chronology21);
        java.lang.String str29 = dateTime28.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-04T00:00:00.000+70:00" + "'", str10, "1970-01-04T00:00:00.000+70:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.005Z" + "'", str29, "1970-01-01T00:00:00.005Z");
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property30 = dateTime27.weekyear();
        org.joda.time.DateTime dateTime32 = property30.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.minus(readablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.withZone(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime41 = dateTime38.withField(dateTimeFieldType39, 1);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime47.toYearMonthDay();
        org.joda.time.Chronology chronology49 = yearMonthDay48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfDay();
        org.joda.time.DurationField durationField51 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType39.getField(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.dayOfYear();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfHour();
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale58.getDisplayCountry(locale61);
        java.lang.String str63 = locale61.getISO3Language();
        int int64 = property57.getMaximumShortTextLength(locale61);
        int int65 = dateTimeField54.getMaximumShortTextLength(locale61);
        java.lang.String str66 = dateTimeField24.getAsText(36002172, locale61);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "KOR" + "'", str59, "KOR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ko-KR" + "'", str60, "ko-KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Corea del Sud" + "'", str62, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ita" + "'", str63, "ita");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "36002172" + "'", str66, "36002172");
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        int int17 = dateTimeField14.getMaximumShortTextLength(locale15);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder19 = builder6.setLocale(locale15);
        java.util.Locale locale20 = builder6.build();
        java.util.Locale.Builder builder21 = builder6.clear();
        java.util.Locale.Builder builder22 = builder6.clearExtensions();
        java.util.Locale.Builder builder25 = builder6.setUnicodeLocaleKeyword("24", "587");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder6.setVariant("0017-05-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 0017-05-01T00:00:00.000Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(25200999, 36002172, 168, (-25199));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25200999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime12.toMutableDateTime();
        org.joda.time.LocalTime localTime15 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime17 = localTime15.minusMillis(5);
        org.joda.time.LocalTime.Property property18 = localTime15.millisOfDay();
        org.joda.time.LocalTime localTime19 = property18.roundHalfFloorCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = dateTimeField35.getAsText(32770, locale37);
        java.lang.String str42 = dateTimeField35.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        int int46 = localTime45.getMillisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 100, chronology48);
        boolean boolean50 = localTime45.isAfter((org.joda.time.ReadablePartial) localTime49);
        int int51 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        java.lang.String str52 = dateTimeField35.getName();
        java.util.Date date58 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromDateFields(date58);
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale61.getISO3Country();
        java.lang.String str63 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localTime59, (int) 'a', locale61);
        java.lang.String str64 = property26.getAsText(locale61);
        org.joda.time.LocalTime localTime66 = property26.addCopy(0L);
        org.joda.time.LocalTime localTime67 = property26.roundCeilingCopy();
        org.joda.time.LocalTime localTime68 = property26.withMaximumValue();
        org.joda.time.LocalTime.Property property69 = localTime68.millisOfDay();
        org.joda.time.LocalTime localTime70 = property69.roundHalfEvenCopy();
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        int int72 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime70);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str39, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "32770" + "'", str40, "32770");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 999 + "'", int51 == 999);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "millisOfSecond" + "'", str52, "millisOfSecond");
        org.junit.Assert.assertEquals(date58.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "KOR" + "'", str62, "KOR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "97" + "'", str63, "97");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "97" + "'", str64, "97");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(999);
        org.joda.time.DateTime dateTime17 = dateTime12.withTimeAtStartOfDay();
        int int18 = dateTime12.getDayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime12.plusWeeks(30);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology25);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime31.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.LocalTime localTime37 = dateTime31.toLocalTime();
        org.joda.time.LocalTime localTime39 = localTime37.plusHours(99);
        org.joda.time.LocalTime localTime41 = localTime37.minusHours(33342);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone43.nextTransition(0L);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getDisplayVariant();
        java.lang.String str49 = dateTimeZone43.getShortName((long) 16, locale47);
        java.lang.String str50 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localTime37, 33342, locale47);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        int int53 = dateTime52.getEra();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime56 = dateTime52.minusMinutes(1);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfYear();
        org.joda.time.DateTime dateTime58 = property57.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology63);
        org.joda.time.LocalTime.Property property65 = localTime64.millisOfSecond();
        int int66 = localTime64.size();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 100, chronology68);
        int int70 = localTime69.getMillisOfSecond();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 100, chronology72);
        boolean boolean74 = localTime69.isAfter((org.joda.time.ReadablePartial) localTime73);
        int int75 = localTime64.compareTo((org.joda.time.ReadablePartial) localTime73);
        org.joda.time.DateTime dateTime76 = dateTime58.withFields((org.joda.time.ReadablePartial) localTime64);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime78 = dateTime58.plus(readablePeriod77);
        org.joda.time.DateTime dateTime80 = dateTime58.plusYears(2);
        org.joda.time.DateTime dateTime82 = dateTime58.plusSeconds(4);
        java.util.Locale locale83 = java.util.Locale.US;
        java.lang.String str84 = locale83.getDisplayName();
        java.util.Calendar calendar85 = dateTime58.toCalendar(locale83);
        java.lang.String str86 = locale83.getDisplayName();
        java.lang.String str87 = locale47.getDisplayLanguage(locale83);
        java.lang.String str88 = locale47.getDisplayCountry();
        java.util.Locale locale90 = new java.util.Locale("1970");
        java.lang.String str91 = locale90.toLanguageTag();
        java.lang.String str92 = locale47.getDisplayCountry(locale90);
        java.lang.String str93 = locale90.getDisplayScript();
        java.util.Calendar calendar94 = dateTime20.toCalendar(locale90);
        int int95 = calendar94.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 79200000 + "'", int14 == 79200000);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+70:00" + "'", str49, "+70:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "33342" + "'", str50, "33342");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str84, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=7200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str86, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Italian" + "'", str87, "Italian");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Italien" + "'", str88, "Italien");
        org.junit.Assert.assertEquals(locale90.toString(), "1970");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "und" + "'", str91, "und");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Italy" + "'", str92, "Italy");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(calendar94);
        org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=18144000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = dateTimeField19.getAsText(32770, locale21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology29);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        int int32 = localTime30.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        int int36 = localTime35.getMillisOfSecond();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 100, chronology38);
        boolean boolean40 = localTime35.isAfter((org.joda.time.ReadablePartial) localTime39);
        int int41 = localTime30.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology46);
        org.joda.time.LocalTime.Property property48 = localTime47.millisOfSecond();
        int int49 = localTime47.size();
        int[] intArray50 = localTime47.getValues();
        int int51 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localTime39, intArray50);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology56);
        org.joda.time.LocalTime.Property property58 = localTime57.millisOfSecond();
        int int59 = localTime57.size();
        org.joda.time.LocalTime localTime61 = localTime57.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime63 = localTime57.minusMillis((int) ' ');
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology69);
        org.joda.time.LocalTime.Property property71 = localTime70.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField72 = property71.getField();
        java.lang.String str74 = dateTimeField72.getAsShortText((long) 121);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = dateTimeField72.getAsShortText((long) (byte) 100, locale76);
        java.lang.String str78 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localTime63, (int) (byte) 100, locale76);
        int int79 = dateTime9.get(dateTimeField19);
        org.joda.time.DateTime dateTime81 = dateTime9.minusWeeks(0);
        org.joda.time.Instant instant82 = dateTime9.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str23, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32770" + "'", str24, "32770");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 0, 0, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 999 + "'", int51 == 999);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "121" + "'", str74, "121");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "100" + "'", str77, "100");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100" + "'", str78, "100");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 985 + "'", int79 == 985);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(instant82);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long9 = dateTimeField7.roundFloor((long) (short) 100);
        java.lang.String str11 = dateTimeField7.getAsText((long) '#');
        long long13 = dateTimeField7.roundHalfCeiling((long) 'x');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean18 = localTime16.isSupported(dateTimeFieldType17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromCalendarFields(calendar19);
        int int21 = localTime16.compareTo((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTime dateTime22 = localTime16.toDateTimeToday();
        org.joda.time.LocalTime localTime24 = localTime16.withMillisOfDay(9);
        org.joda.time.LocalTime.Property property25 = localTime16.secondOfMinute();
        org.joda.time.LocalTime.Property property26 = localTime16.hourOfDay();
        int int27 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime16);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "35" + "'", str11, "35");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 120L + "'", long13 == 120L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572909547,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=29,MILLISECOND=547,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        int int5 = localTime4.getMinuteOfHour();
        org.joda.time.LocalTime localTime7 = localTime4.minusMillis(1320);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime4.withMillisOfDay((-1459));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1459 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("86340009");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=86340009");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        java.time.Instant instant9 = calendar0.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar0.getLeastMaximum(158);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 158");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572909601,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=29,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:48:29 UTC 2022");
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology20.getZone();
        org.joda.time.DurationField durationField24 = chronology20.centuries();
        long long28 = chronology20.add((-50399903L), (long) 86399, 6);
        org.joda.time.Chronology chronology29 = chronology20.withUTC();
        boolean boolean30 = durationFieldType12.isSupported(chronology29);
        org.joda.time.DurationField durationField31 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.monthOfYear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.minus(readablePeriod43);
        int int45 = dateTime44.getMonthOfYear();
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = dateTime46.withMillisOfDay(14);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology54);
        org.joda.time.LocalTime.Property property56 = localTime55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = dateTimeField57.getAsText(32770, locale59);
        java.lang.String str63 = locale49.getDisplayLanguage(locale59);
        java.util.Set<java.lang.Character> charSet64 = locale49.getExtensionKeys();
        java.util.Calendar calendar65 = dateTime48.toCalendar(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = dateTimeField32.getAsShortText(38, locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-04T00:00:00.000+70:00" + "'", str9, "1970-01-04T00:00:00.000+70:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-49881509L) + "'", long28 == (-49881509L));
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str61, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "32770" + "'", str62, "32770");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str63, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(calendar65);
        org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=-79199986,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=0,SECOND=0,MILLISECOND=14,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = dateTimeFormatter7.parseLocalTime("39");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.set(19, (int) (byte) -1, (int) (short) 10, 14, 15);
        boolean boolean9 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=19,MONTH=-1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=14,MINUTE=15,SECOND=29,MILLISECOND=646,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-215999911L), chronology1);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        int int9 = dateTime7.getHourOfDay();
        java.util.Locale locale13 = new java.util.Locale("UTC", "Italie");
        java.lang.String str14 = dateTime7.toString("09:28:00.097", locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale13);
        calendar15.set(107, 32772, 109, 1439, 152, 36000089);
        int int23 = calendar15.getFirstDayOfWeek();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.setTimeInMillis(100L);
        boolean boolean29 = calendar26.isWeekDateSupported();
        calendar26.roll(2, false);
        calendar26.setTimeInMillis(0L);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long38 = dateTimeZone36.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property43 = dateTime40.weekyear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(6);
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTimeISO();
        int int49 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology56);
        org.joda.time.LocalTime.Property property58 = localTime57.millisOfSecond();
        java.util.Locale locale59 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale59.getCountry();
        java.lang.String str62 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) localTime57, locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = calendar15.getDisplayName((-292275054), 73, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertEquals(locale13.toString(), "utc_ITALIE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "09:28:00.097" + "'", str14, "09:28:00.097");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=107,MONTH=32772,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=109,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1439,MINUTE=152,SECOND=36000089,MILLISECOND=683,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "US" + "'", str61, "US");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "10" + "'", str62, "10");
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        java.util.Date date1 = new java.util.Date((long) 31);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        boolean boolean11 = dateTimeFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.halfdayOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.secondOfMinute();
        int int18 = dateTimeField17.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField13 = property6.getField();
        boolean boolean14 = property6.isLeap();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        int int28 = property19.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        int int30 = property6.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalTime localTime31 = property6.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = localTime31.toString("en");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000097 + "'", int30 == 36000097);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        java.util.Date date3 = new java.util.Date(1969, (int) (byte) 100, (int) '#');
        int int4 = date3.getDay();
        date3.setTime((long) 86399999);
        java.util.Date date12 = new java.util.Date(7, (int) (byte) -1, 16, (int) (byte) 10, (int) (short) 0);
        int int13 = date12.getDate();
        boolean boolean14 = date3.before(date12);
        int int15 = date3.getMinutes();
        date3.setDate(161);
        int int18 = date3.getYear();
        java.lang.String str19 = date3.toString();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Jun 10 23:59:59 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 16 10:00:00 UTC 1906");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Wed Jun 10 23:59:59 UTC 1970" + "'", str19, "Wed Jun 10 23:59:59 UTC 1970");
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar.Builder builder76 = builder74.setLenient(false);
        java.util.Calendar.Builder builder80 = builder76.setDate(41, 161, 365);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder82 = builder80.setCalendarType("0001-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 0001-01-01T00:00:00.000Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572909738,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=29,MILLISECOND=738,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(14);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, 991);
        org.joda.time.DateTime dateTime10 = dateTime5.minusMonths(9);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setLanguage("Fri Feb 11 09:46:52 UTC 2022");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Fri Feb 11 09:46:52 UTC 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        calendar25.setTimeInMillis(100L);
        boolean boolean28 = calendar25.isWeekDateSupported();
        calendar25.roll(2, false);
        calendar25.setTimeInMillis(0L);
        java.util.TimeZone timeZone34 = calendar25.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long37 = dateTimeZone22.getMillisKeepLocal(dateTimeZone35, (long) 2);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 8, dateTimeZone22);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(dateTimeZone22);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 10, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalTime localTime42 = localTime40.plus(readablePeriod41);
        org.joda.time.LocalTime localTime44 = localTime42.minusSeconds(10);
        org.joda.time.DateTime dateTime45 = localTime42.toDateTimeToday();
        java.lang.String str47 = localTime42.toString("70");
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = localTime48.getFieldType(0);
        int int51 = localTime42.indexOf(dateTimeFieldType50);
        boolean boolean52 = calendar0.before((java.lang.Object) dateTimeFieldType50);
        java.lang.String str53 = calendar0.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = calendar0.getMinimum(67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 67");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2L + "'", long37 == 2L);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "70" + "'", str47, "70");
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "gregory" + "'", str53, "gregory");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 139680);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property12 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) (short) 0);
        int int15 = property12.get();
        org.joda.time.DateTime dateTime16 = property12.roundCeilingCopy();
        int int17 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime1.minusMillis(19);
        org.joda.time.TimeOfDay timeOfDay20 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime22 = dateTime1.withDayOfYear(3);
        org.joda.time.DateTime.Property property23 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime1.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime27.minusDays((int) 'a');
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        calendar40.setTimeInMillis(100L);
        boolean boolean43 = calendar40.isWeekDateSupported();
        calendar40.roll(2, false);
        calendar40.setTimeInMillis(0L);
        java.util.TimeZone timeZone49 = calendar40.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset((long) 70);
        java.lang.String str54 = dateTimeZone50.getShortName(1L);
        long long58 = dateTimeZone50.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime59 = dateTime38.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime60 = dateTime33.withZoneRetainFields(dateTimeZone50);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance();
        calendar61.setTimeInMillis(100L);
        boolean boolean64 = calendar61.isWeekDateSupported();
        calendar61.roll(2, false);
        calendar61.setTimeInMillis(0L);
        java.util.TimeZone timeZone70 = calendar61.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        int int73 = dateTimeZone71.getOffset((long) 70);
        java.lang.String str75 = dateTimeZone71.getShortName(1L);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property78 = dateTime77.minuteOfHour();
        org.joda.time.DateTime dateTime80 = dateTime77.minusDays((int) 'a');
        int int81 = dateTimeZone71.getOffset((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime86 = dateTime84.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime87 = dateTime86.toDateTimeISO();
        int int88 = dateTime86.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.DateTime dateTime90 = dateTime86.plus(readableDuration89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.DateTime dateTime92 = dateTime86.plus(readablePeriod91);
        int int93 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime95 = dateTime86.withMillisOfDay(1320);
        boolean boolean96 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime98 = dateTime86.plusYears(52);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property8 = localTime2.secondOfMinute();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalTime localTime11 = property8.addCopy(0);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours(70);
        int int14 = localTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572909898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=29,MILLISECOND=898,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 0);
        int int58 = dateTime57.getEra();
        org.joda.time.DateTime dateTime59 = dateTime57.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime61 = dateTime57.minusMinutes(1);
        org.joda.time.DateTime.Property property62 = dateTime61.dayOfYear();
        org.joda.time.DateTime dateTime63 = property62.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = dateTime63.toString(dateTimeFormatter64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean67 = dateTime63.isSupported(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getDurationType();
        org.joda.time.LocalTime localTime70 = localTime52.withFieldAdded(durationFieldType68, 36000107);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property73 = dateTime72.minuteOfHour();
        org.joda.time.DateTime dateTime75 = dateTime72.minusDays((int) 'a');
        org.joda.time.DateTime dateTime76 = dateTime72.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int78 = dateTime76.get(dateTimeFieldType77);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType77.getRangeDurationType();
        int int80 = localTime70.get(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572909908,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=29,MILLISECOND=908,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-04T00:00:00.000+70:00" + "'", str65, "1970-01-04T00:00:00.000+70:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        java.lang.String str5 = property4.getAsText();
        java.lang.String str6 = property4.toString();
        java.lang.Object obj7 = null;
        boolean boolean8 = property4.equals(obj7);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970" + "'", str5, "1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[weekyear]" + "'", str6, "Property[weekyear]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getStandardOffset((-1L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter17.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = chronology40.withZone(dateTimeZone53);
        long long57 = dateTimeZone53.convertLocalToUTC((long) 32770, false);
        boolean boolean59 = dateTimeZone53.isStandardOffset((long) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter17.withZone(dateTimeZone53);
        org.joda.time.format.DateTimeParser dateTimeParser61 = dateTimeFormatter17.getParser();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology66);
        org.joda.time.LocalTime.Property property68 = localTime67.millisOfSecond();
        org.joda.time.LocalTime localTime69 = property68.withMaximumValue();
        org.joda.time.LocalTime localTime70 = property68.getLocalTime();
        org.joda.time.LocalTime.Property property71 = localTime70.millisOfDay();
        org.joda.time.LocalTime localTime73 = property71.addCopy(2);
        org.joda.time.LocalTime localTime75 = localTime73.minusMinutes(4);
        java.lang.String str76 = localTime75.toString();
        org.joda.time.LocalTime localTime78 = localTime75.withSecondOfMinute(23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = dateTimeFormatter17.print((org.joda.time.ReadablePartial) localTime78);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32770L + "'", long57 == 32770L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNull(dateTimeParser61);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "09:56:00.099" + "'", str76, "09:56:00.099");
        org.junit.Assert.assertNotNull(localTime78);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.withMinimumValue();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        int int63 = dateTime62.getEra();
        org.joda.time.DateTime dateTime64 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime66 = dateTime62.plusSeconds(6);
        org.joda.time.DateTime dateTime67 = dateTime66.withLaterOffsetAtOverlap();
        boolean boolean68 = localTime60.equals((java.lang.Object) dateTime66);
        int int69 = dateTime66.getDayOfMonth();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572910001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=30,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        boolean boolean12 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime5.withDurationAdded((long) 8, (int) '#');
        org.joda.time.DateTime dateTime17 = dateTime5.plusSeconds((int) ' ');
        org.joda.time.DateTime.Property property18 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime19 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int int20 = dateTime5.getMinuteOfHour();
        int int21 = dateTime5.getDayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.withMinimumValue();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        int int63 = dateTime62.getEra();
        org.joda.time.DateTime dateTime64 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime66 = dateTime62.plusSeconds(6);
        org.joda.time.DateTime dateTime67 = dateTime66.withLaterOffsetAtOverlap();
        boolean boolean68 = localTime60.equals((java.lang.Object) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        org.joda.time.LocalTime.Property property71 = localTime60.property(dateTimeFieldType69);
        org.joda.time.LocalTime localTime72 = property71.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime74 = localTime72.withMillisOfSecond(28026832);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28026832 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572910039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=30,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime72);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime5 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMinutes(1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths(0);
        int int21 = dateTime18.getYearOfEra();
        boolean boolean22 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property24 = dateTime11.era();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category25);
        int int28 = property24.getMaximumTextLength(locale27);
        org.joda.time.DateTime dateTime29 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField30 = property24.getField();
        java.lang.String str31 = property24.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "de");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "era" + "'", str31, "era");
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfDay((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime5.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime5.withMillisOfDay(7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime17.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime17.minusMillis(15);
        org.joda.time.DateTime dateTime25 = dateTime23.plus((long) 121);
        boolean boolean26 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 79140000 + "'", int10 == 79140000);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(59);
        org.joda.time.Chronology chronology11 = dateTimeFormatter7.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter7.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZoneUTC();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone40, (long) 2);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 8, dateTimeZone27);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(dateTimeZone27);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 10, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalTime localTime47 = localTime45.plus(readablePeriod46);
        org.joda.time.LocalTime localTime49 = localTime47.minusSeconds(10);
        org.joda.time.DateTime dateTime50 = localTime47.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        boolean boolean53 = dateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime54, "23-gen-35242 6.17.00", 32399999);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        int int14 = dateTimeField7.getMaximumValue((long) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology19);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = dateTimeField22.getAsText(32770, locale24);
        java.lang.String str28 = dateTimeField22.getName();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale35.getDisplayVariant(locale36);
        java.lang.String str42 = locale34.getDisplayScript(locale36);
        java.lang.String str43 = dateTimeField32.getAsShortText((long) 0, locale36);
        int int44 = dateTimeField22.getMaximumTextLength(locale36);
        int int45 = dateTimeField7.getMaximumShortTextLength(locale36);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 100, chronology47);
        int int49 = localTime48.getMillisOfSecond();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 100, chronology51);
        boolean boolean53 = localTime48.isAfter((org.joda.time.ReadablePartial) localTime52);
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale56.getDisplayVariant();
        java.lang.String str59 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime48, 121, locale56);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property64 = dateTime61.weekyear();
        int int65 = property64.getLeapAmount();
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder69 = builder66.setExtension('u', "deu");
        java.util.Locale.Builder builder71 = builder69.setRegion("");
        java.util.Locale.Builder builder73 = builder71.setVariant("86340000");
        java.util.Locale.Category category74 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category74, locale75);
        java.util.Locale.Builder builder77 = builder73.setLocale(locale75);
        int int78 = property64.getMaximumShortTextLength(locale75);
        java.lang.String str79 = locale56.getDisplayName(locale75);
        java.util.Set<java.lang.String> strSet80 = locale75.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str26, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "32770" + "'", str27, "32770");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfSecond" + "'", str28, "millisOfSecond");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "KOR" + "'", str37, "KOR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ko-KR" + "'", str38, "ko-KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Corea del Sud" + "'", str40, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str57, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "121" + "'", str59, "121");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + category74 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category74.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Franz\366sisch" + "'", str79, "Franz\366sisch");
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(6);
        org.joda.time.LocalTime localTime12 = localTime10.minusMinutes((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = localTime12.withMillisOfSecond(57600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57600000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }
}

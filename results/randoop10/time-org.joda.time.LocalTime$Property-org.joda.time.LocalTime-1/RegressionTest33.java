import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest33 {

    public static boolean debug = false;

    @Test
    public void test16501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16501");
        java.util.Locale locale1 = new java.util.Locale("PM");
        org.junit.Assert.assertEquals(locale1.toString(), "pm");
    }

    @Test
    public void test16502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16502");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.008Z");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test16503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16503");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        java.util.Date date7 = calendar0.getTime();
        java.lang.String str8 = date7.toGMTString();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=28857600100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Dec 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1 Dec 1970 00:00:00 GMT" + "'", str8, "1 Dec 1970 00:00:00 GMT");
    }

    @Test
    public void test16504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16504");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getCountry();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        calendar4.clear();
        calendar4.set(31, 6, (int) (byte) 0);
        boolean boolean10 = calendar4.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "KOR" + "'", str1, "KOR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko-KR" + "'", str2, "ko-KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KR" + "'", str3, "KR");
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=31,MONTH=6,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test16505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16505");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 139680);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property12 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) (short) 0);
        int int15 = property12.get();
        org.joda.time.DateTime dateTime16 = property12.roundCeilingCopy();
        int int17 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime16.withCenturyOfEra((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTimeISO();
        int int23 = dateTime21.getYearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime21.withMillisOfDay(100);
        org.joda.time.DateTime.Property property26 = dateTime21.hourOfDay();
        org.joda.time.ReadablePartial readablePartial27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = property26.compareTo(readablePartial27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10071 + "'", int23 == 10071);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test16506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16506");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withDurationAdded(readableDuration6, 32770);
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfSecond();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(35135652);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((-251999990L), chronology14);
        org.joda.time.LocalTime localTime17 = localTime15.plusHours((int) (byte) 1);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.DateTime dateTime21 = dateTime10.withField(dateTimeFieldType19, (int) (byte) 100);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology27);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = dateTimeField30.getAsText(32770, locale32);
        java.lang.String str37 = dateTimeField30.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        int int41 = localTime40.getMillisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 100, chronology43);
        boolean boolean45 = localTime40.isAfter((org.joda.time.ReadablePartial) localTime44);
        int int46 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime40);
        int int48 = localTime40.getValue(1);
        org.joda.time.Chronology chronology49 = localTime40.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        org.joda.time.DateTime dateTime51 = dateTime21.withChronology(chronology49);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str34, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "32770" + "'", str35, "32770");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 200 + "'", int41 == 200);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test16507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16507");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        calendar0.setTimeInMillis((long) 292269054);
        int int10 = calendar0.getGreatestMinimum(0);
        calendar0.set(86340009, 738196, 600, 448, (-119400), 2);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar0.getGreatestMinimum(103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=86340009,MONTH=738196,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=600,DAY_OF_YEAR=4,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=448,MINUTE=-119400,SECOND=2,MILLISECOND=54,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test16508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16508");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) 70);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) (short) 0);
        long long28 = dateTimeZone10.getMillisKeepLocal(dateTimeZone24, (long) (short) 10);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = dateTimeZone10.getShortName(86399L, locale30);
        java.lang.String str33 = dateTimeZone10.getShortName((long) '4');
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.TimeZone timeZone35 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str37 = dateTimeZone10.getID();
        java.lang.String str39 = dateTimeZone10.getNameKey(9122239L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
    }

    @Test
    public void test16509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16509");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        boolean boolean17 = dateTimeFormatter10.isPrinter();
        org.joda.time.Chronology chronology18 = dateTimeFormatter10.getChronology();
        boolean boolean19 = dateTimeFormatter10.isPrinter();
        java.util.Locale locale20 = dateTimeFormatter10.getLocale();
        int int21 = dateTimeFormatter10.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
    }

    @Test
    public void test16510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16510");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.centuries();
        org.joda.time.DurationField durationField13 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test16511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16511");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setRegion("86340009");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 86340009 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test16512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16512");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(2);
        boolean boolean3 = dateTimeZone1.isStandardOffset(662695992000000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test16513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16513");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.monthOfYear();
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long17 = dateTimeField13.roundHalfFloor((-251920800L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 946684800000L + "'", long17 == 946684800000L);
    }

    @Test
    public void test16514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16514");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) 1970);
        long long8 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 52, dateTimeZone2);
        long long12 = dateTimeZone2.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        int int17 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withDayOfYear(69);
        boolean boolean21 = dateTime19.isAfter((long) 14);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.withDurationAdded(readableDuration22, 720);
        org.joda.time.DateTime dateTime26 = dateTime19.withWeekOfWeekyear(40);
        org.joda.time.DateTime.Property property27 = dateTime19.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-251999990L) + "'", long8 == (-251999990L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86399L + "'", long12 == 86399L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 252000000 + "'", int17 == 252000000);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test16515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16515");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.DurationField durationField25 = chronology22.hours();
        java.lang.String str26 = chronology22.toString();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(432529113615000L, chronology22);
        org.joda.time.DateTimeField dateTimeField28 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology22.halfdayOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str26, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test16516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16516");
        long long6 = java.util.Date.UTC(0, 36000204, 35237999, 54, (-36002075), 12);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 97711586565912000L + "'", long6 == 97711586565912000L);
    }

    @Test
    public void test16517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16517");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = builder61.build();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime64.minusDays((int) 'a');
        org.joda.time.DateTime dateTime69 = dateTime67.minusWeeks(0);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMonths((int) ' ');
        boolean boolean74 = dateTime67.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean76 = dateTime71.isAfter((long) 10);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime71.getZone();
        java.util.TimeZone timeZone78 = dateTimeZone77.toTimeZone();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone78);
        java.util.Calendar.Builder builder80 = builder61.setTimeZone(timeZone78);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 200 + "'", int19 == 200);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573080152,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=20,MILLISECOND=152,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1644573080153,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.100,offset=100,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=20,MILLISECOND=253,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test16518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16518");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusMinutes(1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.DateTime dateTime25 = property24.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime25.withYearOfEra(11);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((int) ' ');
        org.joda.time.DateTime dateTime33 = dateTime31.withMillisOfDay(7201951);
        long long34 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property35 = dateTime31.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 19L + "'", long34 == 19L);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test16519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16519");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(23);
        boolean boolean8 = dateTime4.isEqual(132L);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.withDurationAdded(readableDuration9, 292278993);
        org.joda.time.DateTime dateTime12 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime4.getZone();
        org.joda.time.DateTime dateTime15 = dateTime4.plusMonths(43200000);
        int int16 = dateTime15.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test16520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16520");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar.Builder builder76 = builder74.setLenient(false);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance();
        calendar77.setTimeInMillis(100L);
        boolean boolean80 = calendar77.isWeekDateSupported();
        calendar77.roll(2, false);
        calendar77.setTimeInMillis(0L);
        java.util.TimeZone timeZone86 = calendar77.getTimeZone();
        java.util.Calendar.Builder builder87 = builder74.setTimeZone(timeZone86);
        java.util.Calendar calendar88 = builder87.build();
        int int89 = calendar88.getWeeksInWeekYear();
        int int90 = calendar88.getWeekYear();
        calendar88.setFirstDayOfWeek(292278993);
        calendar88.setTimeInMillis(667192406829579000L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 200 + "'", int19 == 200);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573080256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=20,MILLISECOND=256,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(calendar88);
        org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=667192406829579000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=292278993,minimalDaysInFirstWeek=1,ERA=1,YEAR=21144455,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=261,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=39,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1970 + "'", int90 == 1970);
    }

    @Test
    public void test16521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16521");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = property6.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test16522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16522");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withDurationAdded((long) (short) 1, 999);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear(106);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test16523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16523");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology7);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        long long12 = dateTimeField10.roundFloor((long) (short) 100);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category13, locale14);
        int int16 = dateTimeField10.getMaximumTextLength(locale14);
        boolean boolean17 = locale14.hasExtensions();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder19.setExtension('u', "deu");
        java.util.Locale.Builder builder24 = builder22.setRegion("");
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.util.Locale.Builder builder28 = builder24.setLocale(locale26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = dateTimeField37.getAsText(32770, locale39);
        java.lang.String str43 = locale29.getDisplayLanguage(locale39);
        java.util.Set<java.lang.Character> charSet44 = locale29.getExtensionKeys();
        java.util.Locale.setDefault(locale29);
        java.lang.String str46 = locale26.getDisplayLanguage(locale29);
        java.lang.String str47 = locale29.getDisplayScript();
        java.util.Locale.setDefault(category0, locale29);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Englisch" + "'", str27, "Englisch");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str41, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "32770" + "'", str42, "32770");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str43, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "anglais" + "'", str46, "anglais");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test16524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16524");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        int int15 = dateTime12.getYearOfEra();
        boolean boolean16 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime5.plus(readablePeriod17);
        org.joda.time.DateTime.Property property19 = dateTime5.hourOfDay();
        java.lang.String str20 = property19.getName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hourOfDay" + "'", str20, "hourOfDay");
    }

    @Test
    public void test16525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16525");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 121);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter10.withZone(dateTimeZone22);
        int int26 = dateTimeFormatter10.getDefaultYear();
        int int27 = dateTimeFormatter10.getDefaultYear();
        boolean boolean28 = dateTimeFormatter10.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 11);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.Chronology chronology52 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField53 = chronology52.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.halfdayOfDay();
        org.joda.time.Chronology chronology57 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter30.withChronology(chronology52);
        java.lang.StringBuffer stringBuffer60 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property65 = dateTime62.weekyear();
        int int66 = property65.getLeapAmount();
        int int67 = property65.get();
        org.joda.time.DateTime dateTime68 = property65.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime69 = property65.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter59.printTo(stringBuffer60, (org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test16526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16526");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay(17);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset((long) 70);
        java.lang.String str62 = dateTimeZone58.getShortName(1L);
        long long66 = dateTimeZone58.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime67 = dateTime46.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime68 = dateTime41.withZoneRetainFields(dateTimeZone58);
        java.util.GregorianCalendar gregorianCalendar69 = dateTime68.toGregorianCalendar();
        org.joda.time.DateTime dateTime70 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        int int71 = dateTime68.getYear();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(gregorianCalendar69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1969 + "'", int71 == 1969);
    }

    @Test
    public void test16527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16527");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        int int10 = dateTime7.getHourOfDay();
        org.joda.time.DateTime.Property property11 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime7.plusHours(25200999);
        org.joda.time.DateTime.Property property15 = dateTime7.secondOfMinute();
        int int16 = property15.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
    }

    @Test
    public void test16528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16528");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology6);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = dateTimeField9.getAsText(32770, locale11);
        java.lang.String str16 = dateTimeField9.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        boolean boolean24 = localTime19.isAfter((org.joda.time.ReadablePartial) localTime23);
        int int25 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime19);
        java.lang.String str26 = dateTimeField9.getName();
        java.util.Date date32 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromDateFields(date32);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime33, (int) 'a', locale35);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale35.getDisplayLanguage(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = locale42.toLanguageTag();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale42.getDisplayCountry(locale45);
        java.lang.String str47 = locale41.getDisplayVariant(locale42);
        java.lang.String str48 = locale40.getDisplayScript(locale42);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale42);
        java.lang.String str50 = locale38.getDisplayName(locale42);
        java.lang.String str51 = locale0.getDisplayCountry(locale42);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology56);
        org.joda.time.LocalTime.Property property58 = localTime57.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        java.lang.String str61 = dateTimeField59.getAsShortText((long) 121);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = dateTimeField59.getAsShortText((long) (byte) 100, locale63);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale67.getISO3Country();
        java.lang.String str69 = locale67.toLanguageTag();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.lang.String str71 = locale67.getDisplayCountry(locale70);
        java.lang.String str72 = locale66.getDisplayVariant(locale67);
        java.lang.String str73 = locale65.getDisplayScript(locale67);
        java.lang.String str74 = locale65.getISO3Language();
        java.lang.String str75 = locale65.getISO3Country();
        java.lang.String str76 = locale63.getDisplayLanguage(locale65);
        java.lang.String str77 = locale0.getDisplayCountry(locale63);
        java.lang.String str78 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str13, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32770" + "'", str14, "32770");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 200 + "'", int20 == 200);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 999 + "'", int25 == 999);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millisOfSecond" + "'", str26, "millisOfSecond");
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "KOR" + "'", str36, "KOR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "97" + "'", str37, "97");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "KOR" + "'", str43, "KOR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko-KR" + "'", str44, "ko-KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Corea del Sud" + "'", str46, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573080435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=20,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str50, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str51, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "121" + "'", str61, "121");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100" + "'", str64, "100");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "KOR" + "'", str68, "KOR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ko-KR" + "'", str69, "ko-KR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Corea del Sud" + "'", str71, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "deu" + "'", str74, "deu");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Italy" + "'", str77, "Italy");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "it" + "'", str78, "it");
    }

    @Test
    public void test16529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16529");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        int[] intArray8 = localTime5.getValues();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds((int) (short) 100);
        org.joda.time.LocalTime.Property property11 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime13 = localTime5.plusHours(86399);
        org.joda.time.LocalTime localTime15 = localTime5.withMinuteOfHour(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology20);
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.LocalTime localTime23 = property22.withMaximumValue();
        int int25 = localTime23.getValue(0);
        java.lang.String str26 = localTime23.toString();
        org.joda.time.LocalTime localTime28 = localTime23.minusSeconds(12);
        boolean boolean29 = localTime5.isEqual((org.joda.time.ReadablePartial) localTime23);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0, 97]");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10:00:00.999" + "'", str26, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test16530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16530");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        int int13 = dateTimeField11.getMaximumValue((-292275054L));
        int int15 = dateTimeField11.getLeapAmount(946684800000L);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder20 = builder17.clearExtensions();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getDisplayCountry();
        java.util.Locale.Builder builder25 = builder17.setLocale(locale22);
        java.lang.String str26 = dateTimeField11.getAsShortText((-292275054), locale22);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-292275054" + "'", str26, "-292275054");
    }

    @Test
    public void test16531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16531");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setHours(292269054);
        int int8 = date5.getDay();
        int int9 = date5.getMonth();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 23 06:17:00 UTC 35242");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test16532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16532");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property23.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = property23.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.String str35 = localTime28.toString();
        boolean boolean36 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes(1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime49 = dateTime44.plusMillis(36000107);
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfYear((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime49.minusWeeks(63);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 200 + "'", int15 == 200);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 200 + "'", int29 == 200);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "00:00:00.200" + "'", str35, "00:00:00.200");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test16533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16533");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "FRA" + "'", str1, "FRA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
    }

    @Test
    public void test16534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16534");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfYear();
        boolean boolean26 = durationFieldType12.isSupported(chronology20);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTime dateTime29 = dateTime27.plus((long) 2000);
        java.lang.String str30 = dateTime27.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.100" + "'", str9, "1970-01-01T00:00:00.000+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:51:20.562Z" + "'", str30, "2022-02-11T09:51:20.562Z");
    }

    @Test
    public void test16535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16535");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.withMinimumValue();
        org.joda.time.LocalTime localTime62 = property58.addWrapFieldToCopy(25);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology67);
        org.joda.time.LocalTime.Property property69 = localTime68.millisOfSecond();
        org.joda.time.LocalTime localTime70 = property69.withMaximumValue();
        org.joda.time.LocalTime localTime71 = property69.getLocalTime();
        org.joda.time.DurationField durationField72 = property69.getDurationField();
        org.joda.time.DateTimeField dateTimeField73 = property69.getField();
        org.joda.time.LocalTime localTime74 = property69.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime75 = property69.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property69.getFieldType();
        boolean boolean77 = localTime62.isSupported(dateTimeFieldType76);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology82);
        org.joda.time.LocalTime.Property property84 = localTime83.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField85 = property84.getField();
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime(7, 1);
        int int89 = dateTimeField85.getMaximumValue((org.joda.time.ReadablePartial) localTime88);
        org.joda.time.LocalTime localTime91 = new org.joda.time.LocalTime(1970L);
        java.util.Locale locale93 = java.util.Locale.US;
        java.lang.String str94 = dateTimeField85.getAsText((org.joda.time.ReadablePartial) localTime91, 79200, locale93);
        int int95 = localTime62.compareTo((org.joda.time.ReadablePartial) localTime91);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 200 + "'", int26 == 200);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573080584,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=20,MILLISECOND=584,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 999 + "'", int89 == 999);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "79200" + "'", str94, "79200");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test16536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16536");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        java.util.Date date13 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date13);
        boolean boolean15 = date5.before(date13);
        int int16 = date13.getTimezoneOffset();
        int int17 = date13.getHours();
        int int18 = date13.getMinutes();
        java.util.Date date22 = new java.util.Date(1969, (int) (byte) 100, (int) '#');
        int int23 = date22.getDate();
        boolean boolean24 = date13.after(date22);
        int int25 = date13.getMonth();
        int int26 = date13.getSeconds();
        int int27 = date13.getMinutes();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 17 + "'", int18 == 17);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Jun 04 00:00:00 UTC 3877");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 17 + "'", int27 == 17);
    }

    @Test
    public void test16537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16537");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localTime15.get(dateTimeFieldType18);
        int int20 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.Chronology chronology21 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfSecond();
        java.lang.String str24 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.year();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalTime localTime34 = localTime30.plusMillis(52);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalTime localTime37 = localTime30.withPeriodAdded(readablePeriod35, (int) (byte) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localTime30.getFields();
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category40, locale41);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology47);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = dateTimeField50.getAsText(32770, locale52);
        java.lang.String str57 = dateTimeField50.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 100, chronology59);
        int int61 = localTime60.getMillisOfSecond();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) 100, chronology63);
        boolean boolean65 = localTime60.isAfter((org.joda.time.ReadablePartial) localTime64);
        int int66 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localTime60);
        java.lang.String str67 = dateTimeField50.getName();
        java.util.Date date73 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.fromDateFields(date73);
        java.util.Locale locale76 = java.util.Locale.KOREA;
        java.lang.String str77 = locale76.getISO3Country();
        java.lang.String str78 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) localTime74, (int) 'a', locale76);
        java.util.Locale.setDefault(category40, locale76);
        java.util.Locale locale80 = java.util.Locale.getDefault(category40);
        java.lang.String str81 = locale80.getISO3Country();
        java.lang.String str82 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localTime30, 448, locale80);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str54, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "32770" + "'", str55, "32770");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 200 + "'", int61 == 200);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 999 + "'", int66 == 999);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfSecond" + "'", str67, "millisOfSecond");
        org.junit.Assert.assertEquals(date73.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "KOR" + "'", str77, "KOR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "97" + "'", str78, "97");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "KOR" + "'", str81, "KOR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "448" + "'", str82, "448");
    }

    @Test
    public void test16538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16538");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) ' ');
        boolean boolean58 = dateTime51.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime51.dayOfMonth();
        boolean boolean61 = dateTime51.isBefore((long) 100);
        long long62 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean63 = property6.isLeap();
        org.joda.time.LocalTime localTime65 = property6.addCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = property6.getField();
        org.joda.time.DateTimeField dateTimeField67 = property6.getField();
        java.lang.String str68 = property6.getAsText();
        org.joda.time.LocalTime localTime69 = property6.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 200 + "'", int26 == 200);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 8416800097L + "'", long62 == 8416800097L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "97" + "'", str68, "97");
        org.junit.Assert.assertNotNull(localTime69);
    }

    @Test
    public void test16539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16539");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = dateTimeField26.getAsText(32770, locale28);
        int int33 = dateTimeField26.getMaximumValue((long) 0);
        int int34 = dateTime17.get(dateTimeField26);
        int int35 = dateTime3.get(dateTimeField26);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(0);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMinutes(1);
        org.joda.time.DateTime dateTime46 = dateTime44.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, 36000097);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime3.withChronology(chronology50);
        java.util.Date date52 = dateTime3.toDate();
        date52.setHours(32769);
        int int55 = date52.getMonth();
        int int56 = date52.getMinutes();
        java.lang.String str57 = date52.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str30, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32770" + "'", str31, "32770");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999 + "'", int33 == 999);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 900 + "'", int34 == 900);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Mon Jan 25 09:00:00 UTC 1971");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Mon Jan 25 09:00:00 UTC 1971" + "'", str57, "Mon Jan 25 09:00:00 UTC 1971");
    }

    @Test
    public void test16540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16540");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        boolean boolean7 = dateTime5.isEqualNow();
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((-16));
        long long10 = dateTime9.getMillis();
        int int11 = dateTime9.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-42076860000L) + "'", long10 == (-42076860000L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1968 + "'", int11 == 1968);
    }

    @Test
    public void test16541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16541");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        int int4 = dateTime3.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime3.getZone();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears(985);
        int int8 = dateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 121 + "'", int4 == 121);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test16542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16542");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((long) 'u');
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(57600000);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(21);
        org.joda.time.DateTime dateTime13 = dateTime9.plusYears((-979));
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes(1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = dateTime21.toString(dateTimeFormatter22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean25 = dateTime21.isSupported(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.DateTime.Property property27 = dateTime9.property(dateTimeFieldType24);
        org.joda.time.DateTime.Property property28 = dateTime9.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.100" + "'", str23, "1970-01-01T00:00:00.000+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test16543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16543");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DurationField durationField17 = chronology7.minutes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-49881509L) + "'", long15 == (-49881509L));
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test16544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16544");
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(25198739224743421L);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.Chronology chronology7 = chronology6.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(36802371, 86399991, 34, 25200999, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36802371 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test16545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16545");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.setTimeInMillis(100L);
        boolean boolean20 = calendar17.isWeekDateSupported();
        calendar17.roll(2, false);
        calendar17.setTimeInMillis(0L);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.Chronology chronology28 = chronology14.withZone(dateTimeZone27);
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.getDefault(category30);
        java.util.Locale locale32 = java.util.Locale.getDefault(category30);
        java.lang.String str33 = dateTimeZone27.getName(10L, locale32);
        java.util.Locale.Builder builder34 = builder5.setLocale(locale32);
        java.util.Locale.Builder builder36 = builder34.removeUnicodeLocaleAttribute("320");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test16546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16546");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        calendar0.roll(0, 13);
        calendar0.setTimeInMillis((long) 10);
        calendar0.clear();
        int int9 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(36000107, 25, 26356320, 252000000, 2);
        int int17 = calendar0.getMinimum((int) (byte) 1);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=36000107,MONTH=25,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=26356320,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=252000000,MINUTE=2,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test16547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16547");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(3);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.minus((-251999990L));
        boolean boolean24 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime10.withYear(0);
        org.joda.time.DateTime dateTime28 = dateTime10.withYearOfEra(96);
        org.joda.time.DateTime.Property property29 = dateTime10.monthOfYear();
        org.joda.time.DateTime dateTime31 = dateTime10.withYear(0);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths(948);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test16548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16548");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localTime6.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.LocalTime localTime17 = localTime13.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime19 = localTime13.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        int int23 = localTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 100, chronology25);
        boolean boolean27 = localTime22.isAfter((org.joda.time.ReadablePartial) localTime26);
        boolean boolean28 = localTime19.isEqual((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = property31.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 100, chronology35);
        int int37 = localTime36.getMillisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        boolean boolean41 = localTime36.isAfter((org.joda.time.ReadablePartial) localTime40);
        int int42 = property31.compareTo((org.joda.time.ReadablePartial) localTime36);
        java.lang.String str43 = localTime36.toString();
        boolean boolean44 = localTime26.isAfter((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        int int47 = dateTime46.getEra();
        org.joda.time.DateTime dateTime48 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime50 = dateTime46.minusMinutes(1);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.DateTime dateTime52 = property51.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readablePeriod53);
        org.joda.time.DateTime dateTime55 = localTime36.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = localTime6.equals((java.lang.Object) dateTime55);
        org.joda.time.LocalTime localTime58 = localTime6.minusSeconds((-259200985));
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 200 + "'", int23 == 200);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 200 + "'", int37 == 200);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "00:00:00.200" + "'", str43, "00:00:00.200");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localTime58);
    }

    @Test
    public void test16549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16549");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.LocalTime localTime11 = property6.setCopy(15);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds(6);
        int int18 = dateTime17.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfDay();
        long long22 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime23 = property6.roundHalfEvenCopy();
        int int24 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "97" + "'", str9, "97");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35994097L + "'", long22 == 35994097L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test16550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16550");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.LocalTime localTime54 = property53.withMaximumValue();
        int int56 = localTime54.getValue(0);
        java.lang.String str57 = localTime54.toString();
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds(12);
        boolean boolean60 = localTime46.equals((java.lang.Object) localTime54);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime46.plus(readablePeriod61);
        org.joda.time.LocalTime.Property property63 = localTime46.minuteOfHour();
        org.joda.time.LocalTime localTime65 = property63.addNoWrapToCopy((int) (short) -1);
        int[] intArray66 = localTime65.getValues();
        org.joda.time.LocalTime.Property property67 = localTime65.minuteOfHour();
        java.util.Locale locale69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = localTime65.toString("1970-01-01t00:00:00.000z (1970-01-01T00:00:00.000Z,1970-01-01T00:00:00.000Z)", locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 200 + "'", int26 == 200);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10:00:00.999" + "'", str57, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[9, 59, 0, 97]");
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test16551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16551");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(52);
        java.lang.StringBuffer stringBuffer7 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime9.withYear(1);
        int int14 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.Chronology chronology32 = yearMonthDay31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter24.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.dayOfWeek();
        org.joda.time.DateTime dateTime37 = dateTime13.withChronology(chronology32);
        org.joda.time.DateTime dateTime39 = dateTime13.plus((-2177452800009L));
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer7, (org.joda.time.ReadableInstant) dateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test16552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16552");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfEvenCopy();
        java.util.Date date17 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromDateFields(date17);
        boolean boolean19 = localTime11.equals((java.lang.Object) localTime18);
        org.joda.time.LocalTime.Property property20 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property20.addWrapFieldToCopy(36002097);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder23.setExtension('u', "deu");
        java.util.Locale.Builder builder28 = builder26.setRegion("");
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        java.util.Locale locale38 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        int int40 = dateTimeField37.getMaximumShortTextLength(locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder42 = builder29.setLocale(locale38);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder43.setExtension('u', "deu");
        java.util.Locale.Builder builder48 = builder46.setRegion("");
        java.util.Locale.Builder builder50 = builder48.setVariant("86340000");
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category51, locale52);
        java.util.Locale.Builder builder54 = builder50.setLocale(locale52);
        java.util.Locale.Builder builder55 = builder42.setLocale(locale52);
        java.util.Locale locale56 = locale52.stripExtensions();
        java.lang.String str57 = property20.getAsText(locale56);
        org.joda.time.DateTimeField dateTimeField58 = property20.getField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test16553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16553");
        java.util.Date date6 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        java.lang.String str7 = date6.toGMTString();
        date6.setHours(1970);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date6);
        int int11 = date6.getDay();
        long long12 = date6.getTime();
        date6.setMinutes(431);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Mar 02 09:11:06 UTC 1903");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10 Dec 1902 03:10:06 GMT" + "'", str7, "10 Dec 1902 03:10:06 GMT");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2109188994000L) + "'", long12 == (-2109188994000L));
    }

    @Test
    public void test16554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16554");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = dateTime1.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime10 = dateTime1.plusHours(1);
        org.joda.time.TimeOfDay timeOfDay11 = dateTime10.toTimeOfDay();
        int int12 = dateTime10.getMillisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime10.withMillis((long) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime10.minusMillis(0);
        java.lang.String str17 = dateTime10.toString();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime10.minus(readableDuration18);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T01:00:00.100+00:00:00.100" + "'", str17, "1970-01-01T01:00:00.100+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test16555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16555");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.LocalTime localTime54 = property53.withMaximumValue();
        int int56 = localTime54.getValue(0);
        java.lang.String str57 = localTime54.toString();
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds(12);
        boolean boolean60 = localTime46.equals((java.lang.Object) localTime54);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime46.plus(readablePeriod61);
        org.joda.time.LocalTime.Property property63 = localTime46.minuteOfHour();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime69 = dateTime65.withYear(1);
        org.joda.time.DateTime dateTime70 = localTime46.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalTime.Property property71 = localTime46.millisOfSecond();
        org.joda.time.LocalTime localTime73 = property71.addNoWrapToCopy(13);
        int int74 = property71.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime76 = property71.setCopy((-456825));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -456825 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 200 + "'", int26 == 200);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10:00:00.999" + "'", str57, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 999 + "'", int74 == 999);
    }

    @Test
    public void test16556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16556");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder5.setVariant("86340000");
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.Builder builder11 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder11.setVariant("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = dateTimeField21.getAsText(32770, locale23);
        java.lang.String str28 = dateTimeField21.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        boolean boolean36 = localTime31.isAfter((org.joda.time.ReadablePartial) localTime35);
        int int37 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localTime31);
        java.lang.String str38 = dateTimeField21.getName();
        java.util.Date date44 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date44);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime45, (int) 'a', locale47);
        int int50 = localTime45.size();
        org.joda.time.LocalTime localTime52 = localTime45.minusSeconds(1969);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        int int56 = localTime55.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 100, chronology58);
        boolean boolean60 = localTime55.isAfter((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.Chronology chronology61 = localTime59.getChronology();
        org.joda.time.LocalTime localTime62 = localTime45.withFields((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology68);
        org.joda.time.LocalTime.Property property70 = localTime69.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        java.lang.String str73 = dateTimeField71.getAsShortText((long) 121);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str79 = locale77.toLanguageTag();
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale77.getDisplayCountry(locale80);
        java.lang.String str82 = locale76.getDisplayVariant(locale77);
        java.lang.String str83 = locale75.getDisplayScript(locale77);
        java.lang.String str84 = locale75.getISO3Language();
        java.util.Locale locale85 = locale75.stripExtensions();
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale85);
        java.lang.String str87 = locale85.getISO3Language();
        java.lang.String str88 = dateTimeField71.getAsShortText(109, locale85);
        java.lang.String str89 = localTime45.toString("22:00:00.100", locale85);
        java.util.Locale.Builder builder90 = builder11.setLocale(locale85);
        java.util.Locale.Builder builder91 = builder11.clear();
        java.util.Locale.Builder builder93 = builder11.setVariant("1320");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder95 = builder93.setRegion("09:50:40.567");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 09:50:40.567 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str25, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32770" + "'", str26, "32770");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 200 + "'", int32 == 200);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertEquals(date44.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "KOR" + "'", str48, "KOR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "97" + "'", str49, "97");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(localTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 200 + "'", int56 == 200);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "121" + "'", str73, "121");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "KOR" + "'", str78, "KOR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ko-KR" + "'", str79, "ko-KR");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Corea del Sud" + "'", str81, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "deu" + "'", str84, "deu");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=1644573081069,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=21,MILLISECOND=69,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "deu" + "'", str87, "deu");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "109" + "'", str88, "109");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "22:00:00.100" + "'", str89, "22:00:00.100");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test16557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16557");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 999, dateTimeZone12);
        long long18 = dateTimeZone12.adjustOffset(36000097L, false);
        long long22 = dateTimeZone12.convertLocalToUTC((long) (short) -1, true, (-49881509L));
        java.lang.String str24 = dateTimeZone12.getNameKey((-62135596800000L));
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 36000097L + "'", long18 == 36000097L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
    }

    @Test
    public void test16558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16558");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        int int15 = dateTime14.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.minus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime14.withYear(27408960);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test16559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16559");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        boolean boolean30 = dateTime28.isAfterNow();
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime28.minus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillis((long) 139680);
        org.joda.time.DateTime.Property property36 = dateTime33.yearOfEra();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test16560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16560");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(292269054);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((long) 53);
        org.joda.time.DateTime.Property property9 = dateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) dateTime8);
        org.joda.time.DateTime.Property property11 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis(9L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test16561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16561");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.secondOfDay();
        int int2 = property1.getMaximumValue();
        java.util.Locale locale5 = new java.util.Locale("dayOfWeek", "weekyear");
        java.util.Locale locale7 = new java.util.Locale("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        java.lang.String str8 = locale5.getDisplayCountry(locale7);
        int int9 = property1.getMaximumShortTextLength(locale7);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getCountry();
        java.lang.String str12 = locale7.getDisplayLanguage(locale10);
        java.lang.String str13 = locale7.getDisplayCountry();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399 + "'", int2 == 86399);
        org.junit.Assert.assertEquals(locale5.toString(), "dayofweek_WEEKYEAR");
        org.junit.Assert.assertEquals(locale7.toString(), "java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=?,year=-1,month=3,week_of_year=?,week_of_month=?,day_of_month=12,day_of_year=?,day_of_week=?,day_of_week_in_month=?,am_pm=?,hour=?,hour_of_day=?,minute=?,second=?,millisecond=?,zone_offset=?,dst_offset=?]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "WEEKYEAR" + "'", str8, "WEEKYEAR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=?,year=-1,month=3,week_of_year=?,week_of_month=?,day_of_month=12,day_of_year=?,day_of_week=?,day_of_week_in_month=?,am_pm=?,hour=?,hour_of_day=?,minute=?,second=?,millisecond=?,zone_offset=?,dst_offset=?]" + "'", str12, "java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=?,year=-1,month=3,week_of_year=?,week_of_month=?,day_of_month=12,day_of_year=?,day_of_week=?,day_of_week_in_month=?,am_pm=?,hour=?,hour_of_day=?,minute=?,second=?,millisecond=?,zone_offset=?,dst_offset=?]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test16562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16562");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test16563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16563");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property6.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime14 = property6.getLocalTime();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test16564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16564");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readablePeriod5);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('u', "deu");
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.Builder builder14 = builder8.setLocale(locale12);
        int int15 = property7.getMaximumShortTextLength(locale12);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Englisch" + "'", str13, "Englisch");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test16565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16565");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str4 = dateTimeZone2.getName((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        int int7 = dateTimeZone2.getStandardOffset((long) (short) 100);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(86399999L, dateTimeZone2);
        long long10 = dateTimeZone2.previousTransition((-19035L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.009" + "'", str4, "+00:00:00.009");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-19035L) + "'", long10 == (-19035L));
    }

    @Test
    public void test16566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16566");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime8.withPeriodAdded(readablePeriod9, 292278993);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime8.plus(readablePeriod12);
        java.lang.String str14 = localTime13.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23:58:20.109" + "'", str14, "23:58:20.109");
    }

    @Test
    public void test16567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16567");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.LocalTime localTime12 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime14 = localTime12.plusMillis(59);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localTime12.getValue(43200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 43200000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test16568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16568");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(8416800097L, chronology1);
        int int3 = dateTime2.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withDurationAdded(readableDuration4, 2);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime8.minus(11826L);
        java.lang.String str11 = dateTime8.toString();
        org.joda.time.DateTime.Property property12 = dateTime8.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-04-08T10:00:00.106+00:00:00.009" + "'", str11, "1970-04-08T10:00:00.106+00:00:00.009");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test16569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16569");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        java.lang.String str5 = property4.getName();
        org.joda.time.DateTime dateTime6 = property4.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("anglais");
        java.lang.String str11 = dateTimeField7.getAsText((long) 32000, locale10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        int int19 = localTime17.size();
        org.joda.time.LocalTime localTime21 = localTime17.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime23 = localTime17.minusSeconds((int) 'a');
        int int24 = localTime17.size();
        org.joda.time.LocalTime localTime26 = localTime17.plusMillis(2000);
        org.joda.time.LocalTime localTime28 = localTime26.withMillisOfDay(8);
        org.joda.time.LocalTime localTime30 = localTime26.plusMinutes(62220);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfDay();
        org.joda.time.LocalTime localTime32 = property31.roundHalfFloorCopy();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology37);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.LocalTime localTime41 = property39.getLocalTime();
        org.joda.time.LocalTime localTime42 = property39.roundCeilingCopy();
        java.lang.String str43 = localTime42.toString();
        int int44 = localTime42.getSecondOfMinute();
        org.joda.time.LocalTime localTime46 = localTime42.withSecondOfMinute(14);
        boolean boolean47 = localTime32.isAfter((org.joda.time.ReadablePartial) localTime46);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime46, (-1560), locale49);
        org.joda.time.DurationField durationField51 = dateTimeField7.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyear" + "'", str5, "weekyear");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970" + "'", str11, "1970");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10:00:00.097" + "'", str43, "10:00:00.097");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1560" + "'", str50, "-1560");
        org.junit.Assert.assertNull(durationField51);
    }

    @Test
    public void test16570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16570");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localTime15.get(dateTimeFieldType18);
        int int20 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime localTime22 = localTime5.plusHours(30000100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        int int25 = dateTime24.getEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean30 = localTime28.isSupported(dateTimeFieldType29);
        java.lang.String str31 = localTime28.toString();
        org.joda.time.LocalTime localTime33 = localTime28.plusSeconds(121);
        org.joda.time.DateTime dateTime34 = dateTime24.withFields((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.Chronology chronology35 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        boolean boolean39 = dateTime37.isBefore((long) 737);
        org.joda.time.DateTime dateTime40 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "00:00:00.109" + "'", str31, "00:00:00.109");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test16571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16571");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.LocalTime localTime16 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime18 = property13.addCopy(6);
        org.joda.time.DateTimeField dateTimeField19 = property13.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.LocalTime localTime28 = property26.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime29 = property26.roundHalfEvenCopy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = dateTimeField38.getAsText(32770, locale40);
        java.lang.String str45 = dateTimeField38.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 100, chronology47);
        int int49 = localTime48.getMillisOfSecond();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 100, chronology51);
        boolean boolean53 = localTime48.isAfter((org.joda.time.ReadablePartial) localTime52);
        int int54 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localTime48);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromCalendarFields(calendar55);
        int int57 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localTime56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology62);
        org.joda.time.LocalTime.Property property64 = localTime63.millisOfSecond();
        int int65 = localTime63.size();
        org.joda.time.LocalTime localTime67 = localTime63.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime69 = localTime63.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((long) 100, chronology71);
        int int73 = localTime72.getMillisOfSecond();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((long) 100, chronology75);
        boolean boolean77 = localTime72.isAfter((org.joda.time.ReadablePartial) localTime76);
        boolean boolean78 = localTime69.isEqual((org.joda.time.ReadablePartial) localTime76);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.util.Locale locale82 = java.util.Locale.KOREA;
        java.lang.String str83 = locale82.getISO3Country();
        java.lang.String str84 = locale82.toLanguageTag();
        java.util.Locale locale85 = java.util.Locale.ITALY;
        java.lang.String str86 = locale82.getDisplayCountry(locale85);
        java.lang.String str87 = locale81.getDisplayVariant(locale82);
        java.lang.String str88 = locale80.getDisplayScript(locale82);
        java.lang.String str89 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localTime69, (int) (short) 100, locale82);
        java.lang.String str90 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localTime29, 0, locale82);
        java.lang.String str91 = locale82.getISO3Country();
        java.lang.String str92 = locale82.getISO3Language();
        java.lang.String str93 = property4.getAsShortText(locale82);
        java.util.Locale locale94 = locale82.stripExtensions();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str42, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "32770" + "'", str43, "32770");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 109 + "'", int49 == 109);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 999 + "'", int54 == 999);
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1644573081273,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=21,MILLISECOND=273,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 999 + "'", int57 == 999);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 109 + "'", int73 == 109);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "KOR" + "'", str83, "KOR");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ko-KR" + "'", str84, "ko-KR");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Corea del Sud" + "'", str86, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "100" + "'", str89, "100");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "0" + "'", str90, "0");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "KOR" + "'", str91, "KOR");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "kor" + "'", str92, "kor");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970" + "'", str93, "1970");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "ko_KR");
    }

    @Test
    public void test16572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16572");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("09:48:55.529");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=09:48:55.529");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16573");
        java.util.Date date6 = new java.util.Date(35248, 1979, (-2328), 79140000, 2022, 269);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 17 09:46:29 UTC 46334");
    }

    @Test
    public void test16574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16574");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.setLanguageTag("IT");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("\uc6d4\uc694\uc77c");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test16575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16575");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DurationField durationField14 = property4.getDurationField();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.minus(readablePeriod24);
        int int26 = dateTime25.getMonthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTimeISO();
        int int28 = property4.getDifference((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime27.plusMillis(35041737);
        org.joda.time.DateTime dateTime33 = dateTime27.minusHours(63);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test16576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16576");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        int int12 = localTime5.size();
        org.joda.time.LocalTime localTime14 = localTime5.plusMillis(2000);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(86340000);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-50399903L));
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        int int26 = localTime24.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = localTime24.get(dateTimeFieldType27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        int int36 = localTime34.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int38 = localTime34.get(dateTimeFieldType37);
        int int39 = localTime24.compareTo((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.Chronology chronology40 = localTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfMonth();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfHalfday();
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DurationField durationField49 = durationFieldType43.getField(chronology46);
        java.lang.String str50 = durationFieldType43.toString();
        java.lang.String str51 = durationFieldType43.getName();
        boolean boolean52 = localTime42.isSupported(durationFieldType43);
        org.joda.time.Chronology chronology53 = null;
        boolean boolean54 = durationFieldType43.isSupported(chronology53);
        java.lang.String str55 = durationFieldType43.toString();
        boolean boolean56 = localTime18.isSupported(durationFieldType43);
        org.joda.time.LocalTime localTime58 = localTime16.withFieldAdded(durationFieldType43, 35279353);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'x', 14);
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.DateTime dateTime63 = localTime58.toDateTimeToday(dateTimeZone61);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "minutes" + "'", str50, "minutes");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "minutes" + "'", str51, "minutes");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "minutes" + "'", str55, "minutes");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test16577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16577");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.DurationField durationField25 = chronology22.hours();
        java.lang.String str26 = chronology22.toString();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(432529113615000L, chronology22);
        org.joda.time.DateTimeField dateTimeField28 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology22.days();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = chronology22.getDateTimeMillis(448, (-456825), 1320, 86354009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -456825 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str26, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test16578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16578");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.halfdayOfDay();
        org.joda.time.DurationField durationField26 = dateTimeField25.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test16579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16579");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.Chronology chronology8 = localTime6.getChronology();
        int int9 = localTime6.getMinuteOfHour();
        org.joda.time.Chronology chronology10 = localTime6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        java.lang.String str14 = dateTimeField12.getAsShortText((long) 594);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 109 + "'", int3 == 109);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jeu." + "'", str14, "jeu.");
    }

    @Test
    public void test16580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16580");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        boolean boolean8 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology11 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter3.withZone(dateTimeZone28);
        boolean boolean31 = dateTimeFormatter30.isOffsetParsed();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        int int35 = localTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        boolean boolean39 = localTime34.isAfter((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = dateTimeFieldType40.isSupported(chronology41);
        int int43 = localTime34.indexOf(dateTimeFieldType40);
        org.joda.time.Chronology chronology44 = localTime34.getChronology();
        long long48 = chronology44.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter30.withChronology(chronology44);
        org.joda.time.DurationField durationField53 = chronology44.weeks();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(209401030559000L, chronology44);
        org.joda.time.DurationField durationField55 = chronology44.weeks();
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 109 + "'", int35 == 109);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 310L + "'", long48 == 310L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test16581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16581");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        int int16 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime localTime18 = localTime5.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean20 = localTime5.isSupported(dateTimeFieldType19);
        org.joda.time.LocalTime.Property property21 = localTime5.millisOfDay();
        int int22 = property21.get();
        org.joda.time.LocalTime localTime24 = property21.setCopy(33342);
        int int25 = property21.getMinimumValueOverall();
        org.joda.time.DurationField durationField26 = property21.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField27 = property21.getField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 109 + "'", int11 == 109);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000097 + "'", int22 == 36000097);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test16582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16582");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getScript();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.toLanguageTag();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.lang.String str10 = locale6.getDisplayCountry(locale9);
        java.lang.String str11 = locale5.getDisplayVariant(locale6);
        java.lang.String str12 = locale4.getDisplayScript(locale6);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale4.getDisplayLanguage(locale13);
        boolean boolean18 = locale13.hasExtensions();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        java.lang.String str20 = calendar19.getCalendarType();
        calendar19.roll((int) (short) 0, 4);
        calendar19.setFirstDayOfWeek((-1));
        boolean boolean26 = calendar19.isWeekDateSupported();
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Map<java.lang.String, java.lang.Integer> strMap31 = calendar19.getDisplayNames((int) (short) 1, 0, locale30);
        java.lang.String str32 = locale13.getDisplayVariant(locale30);
        java.lang.String str33 = locale13.getISO3Language();
        java.util.Set<java.lang.String> strSet34 = locale13.getUnicodeLocaleKeys();
        java.lang.String str35 = locale0.getDisplayVariant(locale13);
        java.lang.String str36 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English (United States)" + "'", str1, "English (United States)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US" + "'", str2, "US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "KOR" + "'", str7, "KOR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko-KR" + "'", str8, "ko-KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Corea del Sud" + "'", str10, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str15, "cor\351en (Cor\351e du Sud)");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "South Korea" + "'", str16, "South Korea");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str17, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=21,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test16583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16583");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        int int10 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withEra((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime.Property property19 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        java.util.Date date21 = dateTime20.toDate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2177452800009L) + "'", long17 == (-2177452800009L));
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Dec 31 23:59:59 UTC 292278992");
    }

    @Test
    public void test16584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16584");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale14.getDisplayCountry(locale17);
        java.lang.String str19 = locale13.getDisplayVariant(locale14);
        java.lang.String str20 = locale12.getDisplayScript(locale14);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone9, locale12);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder22.setExtension('u', "deu");
        java.util.Locale.Builder builder27 = builder25.setRegion("");
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.Builder builder31 = builder27.setLocale(locale29);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology37);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = dateTimeField40.getAsText(32770, locale42);
        java.lang.String str46 = locale32.getDisplayLanguage(locale42);
        java.util.Set<java.lang.Character> charSet47 = locale32.getExtensionKeys();
        java.util.Locale.setDefault(locale32);
        java.lang.String str49 = locale29.getDisplayLanguage(locale32);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone9, locale32);
        java.util.TimeZone timeZone51 = calendar50.getTimeZone();
        boolean boolean52 = calendar50.isWeekDateSupported();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "KOR" + "'", str15, "KOR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ko-KR" + "'", str16, "ko-KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Corea del Sud" + "'", str18, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644573081501,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=21,MILLISECOND=501,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str44, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "32770" + "'", str45, "32770");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str46, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "anglais" + "'", str49, "anglais");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644573081501,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=21,MILLISECOND=501,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test16585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16585");
        java.util.Date date6 = new java.util.Date(20, 69, 86, 152, 16, 86399999);
        date6.setSeconds((int) (short) 1);
        date6.setDate(79140);
        org.junit.Assert.assertEquals(date6.toString(), "Wed May 05 08:15:01 UTC 2145");
    }

    @Test
    public void test16586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16586");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        boolean boolean8 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology11 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter3.withZone(dateTimeZone28);
        boolean boolean31 = dateTimeFormatter30.isOffsetParsed();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        int int35 = localTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        boolean boolean39 = localTime34.isAfter((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = dateTimeFieldType40.isSupported(chronology41);
        int int43 = localTime34.indexOf(dateTimeFieldType40);
        org.joda.time.Chronology chronology44 = localTime34.getChronology();
        long long48 = chronology44.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter30.withChronology(chronology44);
        org.joda.time.DurationField durationField53 = chronology44.weeks();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(209401030559000L, chronology44);
        org.joda.time.LocalTime.Property property55 = localTime54.millisOfDay();
        org.joda.time.LocalTime localTime57 = property55.addCopy(0L);
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = null;
        org.joda.time.format.DateTimeParser dateTimeParser59 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter58, dateTimeParser59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter60.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter62.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter64.withOffsetParsed();
        boolean boolean66 = dateTimeFormatter64.isOffsetParsed();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance();
        calendar67.setTimeInMillis(100L);
        boolean boolean70 = calendar67.isWeekDateSupported();
        calendar67.roll(2, false);
        calendar67.setTimeInMillis(0L);
        java.util.TimeZone timeZone76 = calendar67.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        int int80 = dateTimeZone78.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar81 = java.util.Calendar.getInstance();
        calendar81.setTimeInMillis(100L);
        boolean boolean84 = calendar81.isWeekDateSupported();
        calendar81.roll(2, false);
        calendar81.setTimeInMillis(0L);
        java.util.TimeZone timeZone90 = calendar81.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forTimeZone(timeZone90);
        long long93 = dateTimeZone78.getMillisKeepLocal(dateTimeZone91, (long) 2);
        boolean boolean94 = dateTimeZone91.isFixed();
        long long97 = dateTimeZone91.adjustOffset((long) 139680, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter64.withZone(dateTimeZone91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = localTime57.toString(dateTimeFormatter64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 109 + "'", int35 == 109);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 310L + "'", long48 == 310L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 2L + "'", long93 == 2L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 139680L + "'", long97 == 139680L);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
    }

    @Test
    public void test16587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16587");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str9 = dateTimeField7.getAsShortText((long) 121);
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        java.lang.String str11 = dateTimeField7.toString();
        int int13 = dateTimeField7.get(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.LocalTime localTime22 = property20.getLocalTime();
        org.joda.time.LocalTime localTime24 = property20.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime25 = property20.roundHalfCeilingCopy();
        java.lang.String str26 = localTime25.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        long long37 = dateTimeField35.roundFloor((long) (short) 100);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category38, locale39);
        int int41 = dateTimeField35.getMaximumTextLength(locale39);
        java.util.Locale locale42 = locale39.stripExtensions();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str46 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime25, 55, locale42);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "121" + "'", str9, "121");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str11, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10:00:00.097" + "'", str26, "10:00:00.097");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "allemand" + "'", str44, "allemand");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "55" + "'", str46, "55");
    }

    @Test
    public void test16588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16588");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.LocalTime localTime54 = property53.withMaximumValue();
        int int56 = localTime54.getValue(0);
        java.lang.String str57 = localTime54.toString();
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds(12);
        boolean boolean60 = localTime46.equals((java.lang.Object) localTime54);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime46.plus(readablePeriod61);
        org.joda.time.LocalTime.Property property63 = localTime46.minuteOfHour();
        org.joda.time.LocalTime.Property property64 = localTime46.minuteOfHour();
        org.joda.time.LocalTime localTime65 = property64.getLocalTime();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance();
        calendar66.setTimeInMillis(100L);
        boolean boolean69 = calendar66.isWeekDateSupported();
        calendar66.roll(2, false);
        calendar66.setTimeInMillis(0L);
        java.util.TimeZone timeZone75 = calendar66.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        long long78 = dateTimeZone76.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property83 = dateTime80.weekyear();
        org.joda.time.DateTime dateTime85 = property83.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime87 = dateTime85.withHourOfDay(6);
        org.joda.time.DateTime dateTime88 = dateTime87.toDateTimeISO();
        int int89 = dateTimeZone76.getOffset((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime.Property property90 = dateTime88.hourOfDay();
        org.joda.time.DateTimeField dateTimeField91 = property90.getField();
        org.joda.time.LocalTime localTime92 = org.joda.time.LocalTime.now();
        int int93 = dateTimeField91.getMaximumValue((org.joda.time.ReadablePartial) localTime92);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = dateTimeField91.getType();
        int int95 = localTime65.get(dateTimeFieldType94);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = null;
        java.lang.String str97 = localTime65.toString(dateTimeFormatter96);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 109 + "'", int26 == 109);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10:00:00.999" + "'", str57, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(calendar66);
        org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 23 + "'", int93 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "10:00:00.097" + "'", str97, "10:00:00.097");
    }

    @Test
    public void test16589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16589");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 999, dateTimeZone12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes(1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.DateTime dateTime28 = property27.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime28.toString(dateTimeFormatter29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean32 = dateTime28.isSupported(dateTimeFieldType31);
        int int33 = dateTime17.get(dateTimeFieldType31);
        org.joda.time.LocalTime.Property property34 = localTime15.property(dateTimeFieldType31);
        org.joda.time.LocalTime localTime35 = property34.roundHalfCeilingCopy();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = dateTimeField44.getAsText(32770, locale46);
        java.lang.String str50 = dateTimeField44.getName();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField54 = property53.getField();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale58.getDisplayCountry(locale61);
        java.lang.String str63 = locale57.getDisplayVariant(locale58);
        java.lang.String str64 = locale56.getDisplayScript(locale58);
        java.lang.String str65 = dateTimeField54.getAsShortText((long) 0, locale58);
        int int66 = dateTimeField44.getMaximumTextLength(locale58);
        java.lang.String str67 = locale36.getDisplayCountry(locale58);
        java.util.Locale locale68 = locale36.stripExtensions();
        int int69 = property34.getMaximumShortTextLength(locale68);
        java.lang.String str70 = locale68.getDisplayVariant();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.000+00:00:00.009" + "'", str30, "1970-01-01T00:00:00.000+00:00:00.009");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str48, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "32770" + "'", str49, "32770");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "millisOfSecond" + "'", str50, "millisOfSecond");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "KOR" + "'", str59, "KOR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ko-KR" + "'", str60, "ko-KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Corea del Sud" + "'", str62, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test16590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16590");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DurationField durationField12 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        org.joda.time.DurationField durationField14 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology7.years();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test16591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16591");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 738196);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimePrinter10);
    }

    @Test
    public void test16592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16592");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        org.joda.time.DurationField durationField17 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(30, 1200, 135, 3000074, (-1459), 0, (-979), chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3000074 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test16593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16593");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll((int) (short) 10, (int) (byte) 10);
        calendar0.setLenient(true);
        java.time.Instant instant6 = calendar0.toInstant();
        java.lang.String str7 = calendar0.getCalendarType();
        calendar0.set(16, 0, 11, 23, (int) ' ', 26);
        long long15 = calendar0.getTimeInMillis();
        calendar0.setFirstDayOfWeek(720);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61661521653307,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=720,minimalDaysInFirstWeek=4,ERA=1,YEAR=16,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=11,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=32,SECOND=26,MILLISECOND=693,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61661521653307L) + "'", long15 == (-61661521653307L));
    }

    @Test
    public void test16594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16594");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        int int26 = localTime18.getValue(1);
        org.joda.time.Chronology chronology27 = localTime18.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(33642000000L, chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 109 + "'", int19 == 109);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test16595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16595");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime5.withHourOfDay(16);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(1970L);
        org.joda.time.DateTime dateTime12 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTime dateTime14 = dateTime5.withCenturyOfEra(999);
        org.joda.time.DateTime dateTime16 = dateTime5.plusSeconds(14);
        org.joda.time.DateTime dateTime18 = dateTime5.withMillis(345600000L);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test16596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16596");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long9 = dateTimeField7.roundFloor((long) (short) 100);
        java.lang.String str11 = dateTimeField7.getAsText((long) '#');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        boolean boolean22 = dateTimeFieldType20.isSupported(chronology21);
        int int23 = localTime14.indexOf(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = localTime14.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology29);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalTime localTime33 = property31.getLocalTime();
        org.joda.time.LocalTime localTime34 = property31.roundCeilingCopy();
        boolean boolean35 = localTime14.equals((java.lang.Object) property31);
        org.joda.time.LocalTime localTime37 = localTime14.plusMinutes((int) (byte) 10);
        org.joda.time.LocalTime localTime39 = localTime14.plusHours(86);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = property42.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = property42.compareTo((org.joda.time.ReadablePartial) localTime47);
        java.lang.String str54 = localTime47.toString();
        org.joda.time.LocalTime localTime56 = localTime47.minusSeconds(100);
        int[] intArray57 = localTime56.getValues();
        int int58 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime14, intArray57);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder60.clear();
        java.util.Locale.Builder builder62 = builder61.clearExtensions();
        java.util.Locale.Builder builder63 = builder61.clearExtensions();
        java.util.Locale.Builder builder64 = builder61.clear();
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str67 = locale65.getCountry();
        java.util.Locale.Builder builder68 = builder64.setLocale(locale65);
        java.util.Locale.setDefault(locale65);
        java.lang.String str70 = dateTimeField7.getAsText(88L, locale65);
        java.lang.Class<?> wildcardClass71 = locale65.getClass();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "35" + "'", str11, "35");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 109 + "'", int15 == 109);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 109 + "'", int48 == 109);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "00:00:00.109" + "'", str54, "00:00:00.109");
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[23, 58, 20, 109]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 999 + "'", int58 == 999);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "US" + "'", str67, "US");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "88" + "'", str70, "88");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test16597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16597");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(887, 1989, 36, 106);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 887 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16598");
        java.util.Date date6 = new java.util.Date(19, 6, 18, 21, 292275055, (-292275054));
        java.util.Date date8 = new java.util.Date((long) 35222);
        int int9 = date8.getDate();
        boolean boolean10 = date6.after(date8);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 27 20:24:06 UTC 2465");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:35 UTC 1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test16599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16599");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.set(59, (int) 'x', (int) (byte) 100, 59, 1);
        int int8 = calendar0.getWeeksInWeekYear();
        calendar0.set((-25201), 11, (int) (short) -1);
        boolean boolean13 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-25201,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=-1,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=59,MINUTE=1,SECOND=21,MILLISECOND=823,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test16600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16600");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        boolean boolean8 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology11 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter3.getParser();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter3.withZone(dateTimeZone28);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(2569671861450000L, dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test16601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16601");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        int int20 = localTime18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        int int24 = localTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        boolean boolean28 = localTime23.isAfter((org.joda.time.ReadablePartial) localTime27);
        int int29 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        int int37 = localTime35.size();
        int[] intArray38 = localTime35.getValues();
        int int39 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime27, intArray38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        calendar40.setTimeInMillis(100L);
        boolean boolean43 = calendar40.isWeekDateSupported();
        calendar40.roll(2, false);
        calendar40.setTimeInMillis(0L);
        java.util.TimeZone timeZone49 = calendar40.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int53 = dateTimeZone51.getOffsetFromLocal((long) (short) 0);
        org.joda.time.DateTime dateTime54 = localTime27.toDateTimeToday(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = dateTime54.withMillisOfDay(36100918);
        org.joda.time.DateTime dateTime58 = dateTime56.withCenturyOfEra(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = dateTime56.withMillisOfSecond(27410400);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27410400 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 109 + "'", int24 == 109);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 0, 0, 97]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 999 + "'", int39 == 999);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test16602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16602");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes(1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        int int44 = localTime42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime54 = dateTime36.withFields((org.joda.time.ReadablePartial) localTime42);
        boolean boolean55 = dateTime28.equals((java.lang.Object) localTime42);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalTime localTime57 = localTime42.minus(readablePeriod56);
        org.joda.time.LocalTime localTime59 = localTime57.plusHours((int) (short) 10);
        java.lang.String str60 = localTime59.toString();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance();
        calendar63.setTimeInMillis(100L);
        boolean boolean66 = calendar63.isWeekDateSupported();
        calendar63.roll(2, false);
        calendar63.setTimeInMillis(0L);
        java.util.TimeZone timeZone72 = calendar63.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        int int76 = dateTimeZone74.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance();
        calendar77.setTimeInMillis(100L);
        boolean boolean80 = calendar77.isWeekDateSupported();
        calendar77.roll(2, false);
        calendar77.setTimeInMillis(0L);
        java.util.TimeZone timeZone86 = calendar77.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone86);
        long long89 = dateTimeZone74.getMillisKeepLocal(dateTimeZone87, (long) 2);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) 8, dateTimeZone74);
        org.joda.time.LocalTime localTime91 = org.joda.time.LocalTime.now(dateTimeZone74);
        org.joda.time.LocalTime localTime92 = new org.joda.time.LocalTime((long) 10, dateTimeZone74);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.LocalTime localTime94 = localTime92.plus(readablePeriod93);
        boolean boolean95 = localTime59.isBefore((org.joda.time.ReadablePartial) localTime94);
        org.joda.time.LocalTime.Property property96 = localTime94.hourOfDay();
        org.joda.time.LocalTime localTime97 = property96.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField98 = property96.getField();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 109 + "'", int48 == 109);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "20:00:00.097" + "'", str60, "20:00:00.097");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2L + "'", long89 == 2L);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(localTime97);
        org.junit.Assert.assertNotNull(dateTimeField98);
    }

    @Test
    public void test16603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16603");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        boolean boolean30 = dateTime28.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillis(100L);
        java.util.Date date33 = dateTime32.toDate();
        java.util.Date date39 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date39.setMonth((int) ' ');
        java.util.Date date47 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date47.setMonth((int) ' ');
        java.util.Date date55 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromDateFields(date55);
        boolean boolean57 = date47.before(date55);
        int int58 = date55.getTimezoneOffset();
        java.util.Date date65 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean66 = date55.after(date65);
        boolean boolean67 = date39.after(date65);
        boolean boolean68 = date33.before(date65);
        int int69 = date65.getTimezoneOffset();
        int int70 = date65.getSeconds();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date39.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date47.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date55.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals(date65.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
    }

    @Test
    public void test16604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16604");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfSecond();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology8);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test16605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16605");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter6.isOffsetParsed();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        boolean boolean36 = dateTimeZone33.isFixed();
        long long39 = dateTimeZone33.adjustOffset((long) 139680, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter6.withZone(dateTimeZone33);
        int int41 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean43 = dateTimeFormatter42.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 1644630388);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 100, chronology47);
        org.joda.time.LocalTime localTime50 = localTime48.plusSeconds(0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology55);
        org.joda.time.LocalTime.Property property57 = localTime56.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.LocalTime localTime59 = property57.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalTime localTime61 = localTime59.plus(readablePeriod60);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology66);
        org.joda.time.LocalTime.Property property68 = localTime67.millisOfSecond();
        org.joda.time.LocalTime localTime69 = property68.withMaximumValue();
        org.joda.time.LocalTime localTime70 = property68.getLocalTime();
        boolean boolean71 = localTime59.isAfter((org.joda.time.ReadablePartial) localTime70);
        boolean boolean72 = localTime48.isAfter((org.joda.time.ReadablePartial) localTime59);
        int int73 = localTime59.size();
        org.joda.time.LocalTime localTime75 = localTime59.plusSeconds(32769);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = dateTimeFormatter42.print((org.joda.time.ReadablePartial) localTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 139680L + "'", long39 == 139680L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(localTime75);
    }

    @Test
    public void test16606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16606");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMinutes(1);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withPeriodAdded(readablePeriod12, 36000097);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(0L, chronology15);
        long long21 = chronology15.add((long) 71, (long) 1, 28);
        org.joda.time.DurationField durationField22 = chronology15.centuries();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 99L + "'", long21 == 99L);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test16607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16607");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        int int10 = property9.getMaximumValue();
        boolean boolean11 = property9.isLeap();
        java.lang.String str12 = property9.toString();
        int int13 = property9.get();
        org.joda.time.LocalTime localTime15 = property9.setCopy(2022);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology20);
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = dateTimeField23.getAsText(32770, locale25);
        java.lang.String str30 = dateTimeField23.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        int int34 = localTime33.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        boolean boolean38 = localTime33.isAfter((org.joda.time.ReadablePartial) localTime37);
        int int39 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime33);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromCalendarFields(calendar40);
        int int42 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean47 = localTime45.isSupported(dateTimeFieldType46);
        org.joda.time.LocalTime localTime49 = localTime45.plusMillis(52);
        java.lang.Object obj50 = new java.lang.Object();
        boolean boolean51 = localTime49.equals(obj50);
        int int52 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime49);
        java.lang.String str53 = localTime49.toString();
        int int54 = localTime49.getSecondOfMinute();
        int int55 = localTime49.getMillisOfDay();
        int int56 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime49);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfDay]" + "'", str12, "Property[millisOfDay]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000097 + "'", int13 == 36000097);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str27, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "32770" + "'", str28, "32770");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 109 + "'", int34 == 109);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 999 + "'", int39 == 999);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644573081989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=21,MILLISECOND=989,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 999 + "'", int42 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 999 + "'", int52 == 999);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "00:00:00.161" + "'", str53, "00:00:00.161");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 161 + "'", int55 == 161);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test16608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16608");
        java.util.Locale locale1 = new java.util.Locale("590");
        org.junit.Assert.assertEquals(locale1.toString(), "590");
    }

    @Test
    public void test16609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16609");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekyearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test16610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16610");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getStandardOffset((-1L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter17.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter17.withPivotYear(36000000);
        java.lang.StringBuffer stringBuffer35 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localTime41.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localTime41.getFieldTypes();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTime dateTime48 = property46.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        int int52 = localTime51.getMillisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        boolean boolean56 = localTime51.isAfter((org.joda.time.ReadablePartial) localTime55);
        int int57 = property46.compareTo((org.joda.time.ReadablePartial) localTime51);
        java.lang.String str58 = localTime51.toString();
        org.joda.time.LocalTime localTime60 = localTime51.minusSeconds(100);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime63 = localTime60.withPeriodAdded(readablePeriod61, 39);
        boolean boolean64 = localTime41.isAfter((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalTime localTime66 = localTime41.plus(readablePeriod65);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter34.printTo(stringBuffer35, (org.joda.time.ReadablePartial) localTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 109 + "'", int52 == 109);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "00:00:00.109" + "'", str58, "00:00:00.109");
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test16611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16611");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        int int13 = dateTimeField11.getMaximumValue((long) 86340);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
    }

    @Test
    public void test16612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16612");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.minusHours(32770);
        int int8 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusWeeks(86399999);
        int int11 = dateTime7.getMinuteOfHour();
        org.joda.time.DateTime.Property property12 = dateTime7.millisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 96 + "'", int8 == 96);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test16613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16613");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property6.addWrapFieldToCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property6.getFieldType();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        java.lang.String str16 = durationFieldType15.getName();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        boolean boolean24 = localTime19.isAfter((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        int int28 = localTime19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = localTime19.getChronology();
        long long33 = chronology29.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.yearOfEra();
        boolean boolean35 = durationFieldType15.isSupported(chronology29);
        org.joda.time.DurationField durationField36 = chronology29.years();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millis" + "'", str16, "millis");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 109 + "'", int20 == 109);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 310L + "'", long33 == 310L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test16614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16614");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 121);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter10.withZone(dateTimeZone22);
        int int26 = dateTimeFormatter10.getDefaultYear();
        boolean boolean27 = dateTimeFormatter10.isPrinter();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        int int33 = dateTime31.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.plus(readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime31.minusMillis(15);
        org.joda.time.DateTime.Property property38 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime31.plusHours((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime31.withMillisOfDay(1);
        int int43 = dateTime42.getSecondOfDay();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        int int46 = dateTime45.getEra();
        org.joda.time.DateTime dateTime47 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime49 = dateTime45.minusMinutes(1);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths(0);
        org.joda.time.DateTime dateTime53 = dateTime51.minus((long) 2);
        org.joda.time.DateTime.Property property54 = dateTime51.minuteOfHour();
        org.joda.time.Chronology chronology55 = dateTime51.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.centuries();
        org.joda.time.DurationField durationField57 = chronology55.halfdays();
        org.joda.time.DateTime dateTime58 = dateTime42.toDateTime(chronology55);
        org.joda.time.DateTimeField dateTimeField59 = chronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter10.withChronology(chronology55);
        org.joda.time.Chronology chronology62 = dateTimeFormatter10.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(chronology62);
    }

    @Test
    public void test16615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16615");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime30.minusDays((int) 'a');
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology36.getZone();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance();
        calendar39.setTimeInMillis(100L);
        boolean boolean42 = calendar39.isWeekDateSupported();
        calendar39.roll(2, false);
        calendar39.setTimeInMillis(0L);
        java.util.TimeZone timeZone48 = calendar39.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Chronology chronology50 = chronology36.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfWeek();
        org.joda.time.DurationField durationField52 = chronology50.weekyears();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) dateTime28, chronology50);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = chronology50.getDateTimeMillis(277, 20, 109, 86340000, (-52), 14, 49352);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86340000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test16616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16616");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(6);
        java.util.Date date16 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromDateFields(date16);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        int int24 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime23);
        boolean boolean25 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalTime localTime34 = property32.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalTime localTime36 = localTime34.plus(readablePeriod35);
        int int37 = localTime34.size();
        boolean boolean38 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime34);
        int int39 = localTime8.size();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property44 = dateTime41.weekyear();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        int int53 = property44.getDifference((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime52.toMutableDateTime();
        org.joda.time.LocalTime localTime55 = dateTime52.toLocalTime();
        org.joda.time.LocalTime localTime57 = localTime55.minusMillis(5);
        boolean boolean58 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean60 = localTime57.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        int int63 = dateTime62.getEra();
        org.joda.time.DateTime dateTime65 = dateTime62.plusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean67 = dateTime62.isSupported(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getDurationType();
        java.lang.String str69 = durationFieldType68.toString();
        boolean boolean70 = localTime57.isSupported(durationFieldType68);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "years" + "'", str69, "years");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test16617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16617");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        long long27 = dateTimeField25.roundFloor((long) 99);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = dateTimeField35.getAsText(32770, locale37);
        java.lang.String str42 = dateTimeField35.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        int int46 = localTime45.getMillisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 100, chronology48);
        boolean boolean50 = localTime45.isAfter((org.joda.time.ReadablePartial) localTime49);
        int int51 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        int int53 = localTime45.getValue(1);
        org.joda.time.Chronology chronology54 = localTime45.getChronology();
        int int55 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = localTime45.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-9L) + "'", long27 == (-9L));
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str39, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "32770" + "'", str40, "32770");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 109 + "'", int46 == 109);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 999 + "'", int51 == 999);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
    }

    @Test
    public void test16618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16618");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfWeek();
        long long17 = chronology7.add((long) 1969, (-91755779000L), 86399999);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology7.secondOfDay();
        long long21 = dateTimeField19.roundHalfFloor(25105L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-7927699213844219031L) + "'", long17 == (-7927699213844219031L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 25000L + "'", long21 == 25000L);
    }

    @Test
    public void test16619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16619");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) 0);
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = dateTimeField12.getAsText(32770, locale14);
        java.lang.String str19 = dateTimeField12.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        int int23 = localTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 100, chronology25);
        boolean boolean27 = localTime22.isAfter((org.joda.time.ReadablePartial) localTime26);
        int int28 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localTime22);
        java.lang.String str29 = dateTimeField12.getName();
        java.util.Date date35 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromDateFields(date35);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale38.getISO3Country();
        java.lang.String str40 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localTime36, (int) 'a', locale38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale38.getDisplayLanguage(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = locale45.toLanguageTag();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale45.getDisplayCountry(locale48);
        java.lang.String str50 = locale44.getDisplayVariant(locale45);
        java.lang.String str51 = locale43.getDisplayScript(locale45);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale45);
        java.lang.String str53 = locale41.getDisplayName(locale45);
        java.util.Calendar.Builder builder54 = builder4.setLocale(locale45);
        java.lang.String str55 = locale45.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale58.getDisplayCountry(locale61);
        java.lang.String str63 = locale57.getDisplayVariant(locale58);
        java.lang.String str64 = locale56.getDisplayScript(locale58);
        java.lang.String str65 = locale45.getDisplayCountry(locale58);
        java.util.Calendar.Builder builder66 = builder0.setLocale(locale58);
        java.util.Calendar.Builder builder68 = builder0.setLenient(true);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str16, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32770" + "'", str17, "32770");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 109 + "'", int23 == 109);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "millisOfSecond" + "'", str29, "millisOfSecond");
        org.junit.Assert.assertEquals(date35.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "KOR" + "'", str39, "KOR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "97" + "'", str40, "97");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "KOR" + "'", str46, "KOR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ko-KR" + "'", str47, "ko-KR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Corea del Sud" + "'", str49, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644573082336,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str53, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Koreanisch (S\374dkorea)" + "'", str55, "Koreanisch (S\374dkorea)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "KOR" + "'", str59, "KOR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ko-KR" + "'", str60, "ko-KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Corea del Sud" + "'", str62, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str65, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test16620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16620");
        java.util.Locale locale3 = new java.util.Locale("100", "Taiwan", "");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology8);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        int int14 = dateTimeField11.getMaximumShortTextLength(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale19.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        java.lang.String str24 = locale18.getDisplayVariant(locale19);
        java.lang.String str25 = locale17.getDisplayScript(locale19);
        java.lang.String str26 = locale17.getISO3Language();
        java.lang.String str27 = locale17.getISO3Country();
        java.util.Set<java.lang.Character> charSet28 = locale17.getExtensionKeys();
        java.lang.String str29 = locale12.getDisplayCountry(locale17);
        java.util.Set<java.lang.String> strSet30 = locale17.getUnicodeLocaleKeys();
        java.lang.String str31 = locale3.getDisplayName(locale17);
        java.lang.String str32 = locale17.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "100_TAIWAN");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-US" + "'", str16, "en-US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KOR" + "'", str20, "KOR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko-KR" + "'", str21, "ko-KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Corea del Sud" + "'", str23, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "deu" + "'", str26, "deu");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Vereinigte Staaten von Amerika" + "'", str29, "Vereinigte Staaten von Amerika");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 (TAIWAN)" + "'", str31, "100 (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test16621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16621");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        int int16 = property13.get();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str20 = locale17.getCountry();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale17);
        java.lang.String str22 = property13.getAsShortText(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter8.withLocale(locale17);
        java.util.Locale locale25 = new java.util.Locale("1970");
        java.lang.String str26 = locale17.getDisplayVariant(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale17);
        int int29 = calendar27.getLeastMaximum(13);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        java.lang.String str39 = dateTimeField37.getAsShortText((long) 121);
        org.joda.time.DurationField durationField40 = dateTimeField37.getRangeDurationField();
        java.lang.String str41 = dateTimeField37.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology46);
        org.joda.time.LocalTime.Property property48 = localTime47.millisOfSecond();
        org.joda.time.LocalTime localTime50 = property48.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime51 = property48.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalTime.Property property53 = localTime51.property(dateTimeFieldType52);
        int int54 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DurationField durationField55 = dateTimeField37.getRangeDurationField();
        java.lang.String str57 = dateTimeField37.getAsText(39L);
        boolean boolean58 = calendar27.before((java.lang.Object) dateTimeField37);
        java.lang.Object obj59 = calendar27.clone();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "KOR" + "'", str18, "KOR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ko-KR" + "'", str19, "ko-KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KR" + "'", str20, "KR");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644573082375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals(locale25.toString(), "1970");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644573082375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "121" + "'", str39, "121");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str41, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "39" + "'", str57, "39");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "java.util.GregorianCalendar[time=1644573082375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "java.util.GregorianCalendar[time=1644573082375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "java.util.GregorianCalendar[time=1644573082375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test16622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16622");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) ' ');
        boolean boolean58 = dateTime51.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime51.dayOfMonth();
        boolean boolean61 = dateTime51.isBefore((long) 100);
        long long62 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime68 = dateTime64.withYear(1);
        long long69 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalTime localTime70 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime71 = property6.getLocalTime();
        java.lang.String str72 = property6.toString();
        java.lang.String str73 = property6.getName();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 109 + "'", int26 == 109);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 8416800097L + "'", long62 == 8416800097L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 36000097L + "'", long69 == 36000097L);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Property[millisOfSecond]" + "'", str72, "Property[millisOfSecond]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "millisOfSecond" + "'", str73, "millisOfSecond");
    }

    @Test
    public void test16623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16623");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.LocalTime localTime54 = property53.withMaximumValue();
        int int56 = localTime54.getValue(0);
        java.lang.String str57 = localTime54.toString();
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds(12);
        boolean boolean60 = localTime46.equals((java.lang.Object) localTime54);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime46.plus(readablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone63);
        boolean boolean66 = localTime62.equals((java.lang.Object) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime65.minusMinutes(4);
        boolean boolean70 = dateTime68.isAfter(0L);
        org.joda.time.DateTime.Property property71 = dateTime68.weekOfWeekyear();
        org.joda.time.DateTime dateTime73 = dateTime68.plusMonths(0);
        org.joda.time.DateTime.Property property74 = dateTime68.yearOfCentury();
        org.joda.time.Interval interval75 = property74.toInterval();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 109 + "'", int26 == 109);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10:00:00.999" + "'", str57, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
    }

    @Test
    public void test16624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16624");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property15.getLocalTime();
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        org.joda.time.LocalTime localTime20 = property18.addCopy(2);
        org.joda.time.LocalTime localTime21 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime23 = localTime21.plusMillis(59);
        org.joda.time.LocalTime localTime25 = localTime23.minusMillis(139680);
        org.joda.time.LocalTime localTime27 = localTime23.minusSeconds((int) (byte) 1);
        int int28 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime30 = localTime23.withSecondOfMinute(135);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 135 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test16625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16625");
        java.util.Date date5 = new java.util.Date((int) (short) 1, (-35999977), 970, 0, (int) (byte) 100);
        date5.setMinutes(0);
        date5.setTime((-52319903L));
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 09:28:00 UTC 1969");
    }

    @Test
    public void test16626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16626");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar.Builder builder76 = builder74.setLenient(false);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance();
        calendar77.setTimeInMillis(100L);
        boolean boolean80 = calendar77.isWeekDateSupported();
        calendar77.roll(2, false);
        calendar77.setTimeInMillis(0L);
        java.util.TimeZone timeZone86 = calendar77.getTimeZone();
        java.util.Calendar.Builder builder87 = builder74.setTimeZone(timeZone86);
        java.util.Locale locale90 = new java.util.Locale("97", "");
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(timeZone86, locale90);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(locale90);
        java.util.Set<java.lang.String> strSet93 = locale90.getUnicodeLocaleAttributes();
        boolean boolean94 = locale90.hasExtensions();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 109 + "'", int19 == 109);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573082495,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=495,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeZone86);
// flaky:         org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals(locale90.toString(), "97");
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=1644573082495,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=495,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=1644573082495,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=495,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test16627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16627");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale51.getISO3Country();
        java.lang.String str53 = locale51.toLanguageTag();
        java.lang.String str54 = locale51.getCountry();
        java.util.Calendar.Builder builder55 = builder0.setLocale(locale51);
        java.util.Calendar.Builder builder57 = builder0.setLenient(false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 109 + "'", int19 == 109);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573082525,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=525,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "KOR" + "'", str52, "KOR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ko-KR" + "'", str53, "ko-KR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "KR" + "'", str54, "KR");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test16628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16628");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(227209483962000000L);
    }

    @Test
    public void test16629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16629");
        java.util.Date date5 = new java.util.Date(0, 0, 53, 1021009, 1439);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Aug 15 00:59:00 UTC 2016");
    }

    @Test
    public void test16630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16630");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        int int8 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillis(32770L);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType11.getDurationType();
        org.joda.time.DateTime dateTime15 = dateTime10.withFieldAdded(durationFieldType13, 80);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test16631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16631");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ISOChronology[+00:00:00.100]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test16632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16632");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.setLanguage("weeks");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setUnicodeLocaleKeyword("1969-12-31T08:00:00.000Z", "cor\351en (Cor\351e du Sud)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1969-12-31T08:00:00.000Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test16633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = localTime6.equals(obj7);
        int int9 = localTime6.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded(readableDuration21, 53);
        int int24 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime12.plusDays(27408600);
        org.joda.time.DateTime dateTime28 = dateTime12.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime29 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.withPeriodAdded(readablePeriod30, 0);
        boolean boolean34 = dateTime29.isBefore((-31272962399894L));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 161 + "'", int9 == 161);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test16634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16634");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(52);
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(70);
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 58620000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withZone(dateTimeZone9);
        boolean boolean13 = dateTimeFormatter2.isPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test16635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16635");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfWeek(2);
        int int7 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime6.withDurationAdded((long) (-119400), (int) (short) -1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test16636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16636");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DurationField durationField14 = property4.getDurationField();
        boolean boolean15 = property4.isLeap();
        org.joda.time.DateTimeField dateTimeField16 = property4.getField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test16637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16637");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((int) 'a');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        int int23 = localTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 100, chronology25);
        boolean boolean27 = localTime22.isAfter((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        int int31 = localTime22.indexOf(dateTimeFieldType28);
        org.joda.time.Chronology chronology32 = localTime22.getChronology();
        long long36 = chronology32.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology32.dayOfMonth();
        int int41 = dateTime19.get(dateTimeField40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) dateTimeField40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.BasicDayOfMonthDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 109 + "'", int23 == 109);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 310L + "'", long36 == 310L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test16638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16638");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime.Property property7 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight12 = dateTime8.toDateMidnight();
        int int13 = dateTime8.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 363 + "'", int13 == 363);
    }

    @Test
    public void test16639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16639");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.DurationField durationField9 = property6.getDurationField();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        int int12 = property6.getMaximumTextLength(locale11);
        long long13 = property6.remainder();
        org.joda.time.LocalTime localTime14 = property6.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime17 = localTime14.withPeriodAdded(readablePeriod15, 27410400);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test16640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16640");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.lang.String str78 = locale75.getISO3Language();
        java.util.Calendar.Builder builder79 = builder74.setLocale(locale75);
        java.util.Calendar.Builder builder84 = builder74.setTimeOfDay(35152294, 152, 268, 720);
        java.util.Calendar.Builder builder88 = builder84.setWeekDate(22, 31, (-1459));
        java.util.Calendar.Builder builder93 = builder88.setTimeOfDay(83820000, 79200000, 1644551464, 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar94 = builder93.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: -1459");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 109 + "'", int19 == 109);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573082676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=676,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str77, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "kor" + "'", str78, "kor");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test16641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16641");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(999);
        org.joda.time.DateTime dateTime17 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime12.withMillis((-3360127159509L));
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime21.era();
        org.joda.time.DateTime.Property property27 = dateTime21.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readablePeriod29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime();
        boolean boolean33 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime30.withEra(9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16642");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.DateTime dateTime14 = dateTime1.withDurationAdded((long) 8, 121);
        org.joda.time.DateTime.Property property15 = dateTime1.year();
        org.joda.time.DateTime dateTime17 = dateTime1.plusWeeks(491);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((java.lang.Object) dateTime1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology25);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        int int28 = localTime26.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int30 = localTime26.get(dateTimeFieldType29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        int int38 = localTime36.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int40 = localTime36.get(dateTimeFieldType39);
        int int41 = localTime26.compareTo((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.Chronology chronology42 = localTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.millisOfSecond();
        boolean boolean45 = durationFieldType20.isSupported(chronology42);
        java.lang.String str46 = durationFieldType20.toString();
        org.joda.time.LocalTime localTime48 = localTime18.withFieldAdded(durationFieldType20, 123);
        java.lang.String str49 = durationFieldType20.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.109" + "'", str8, "00:00:00.109");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "halfdays" + "'", str46, "halfdays");
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "halfdays" + "'", str49, "halfdays");
    }

    @Test
    public void test16643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16643");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((-2328), 135, 36000999, 36002172);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2328 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16644");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property8 = localTime2.secondOfMinute();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalTime localTime10 = property8.withMinimumValue();
        int int11 = property8.getMaximumValueOverall();
        java.lang.String str12 = property8.getName();
        org.joda.time.LocalTime localTime13 = property8.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573082772,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=772,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondOfMinute" + "'", str12, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test16645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16645");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.DateTime dateTime13 = property10.addWrapFieldToCopy(991);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, 2);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMinutes(63120000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test16646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16646");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale3 = new java.util.Locale("dayOfWeek", "weekyear");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale3.getExtension('u');
        java.lang.String str7 = locale0.getDisplayLanguage(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale3.toString(), "dayofweek_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
    }

    @Test
    public void test16647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16647");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 35237999);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        boolean boolean10 = dateTimeFormatter9.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 121);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter12.withZone(dateTimeZone24);
        int int28 = dateTimeFormatter12.getDefaultYear();
        int int29 = dateTimeFormatter12.getDefaultYear();
        boolean boolean30 = dateTimeFormatter12.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 11);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = chronology40.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = chronology54.seconds();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.halfdayOfDay();
        org.joda.time.Chronology chronology59 = chronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField60 = chronology54.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter32.withChronology(chronology54);
        org.joda.time.DateTime dateTime62 = dateTime1.toDateTime(chronology54);
        org.joda.time.DateTime.Property property63 = dateTime62.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2000 + "'", int29 == 2000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test16648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16648");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay(17);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset((long) 70);
        java.lang.String str62 = dateTimeZone58.getShortName(1L);
        long long66 = dateTimeZone58.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime67 = dateTime46.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime68 = dateTime41.withZoneRetainFields(dateTimeZone58);
        java.util.GregorianCalendar gregorianCalendar69 = dateTime68.toGregorianCalendar();
        org.joda.time.DateTime dateTime70 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime68.withZone(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime72.getZone();
        org.joda.time.DateTime dateTime75 = dateTime72.plusYears(9);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(gregorianCalendar69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test16649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16649");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime5 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMinutes(1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths(0);
        int int21 = dateTime18.getYearOfEra();
        boolean boolean22 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        int int24 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks(0);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMinutes(1);
        org.joda.time.DateTime dateTime35 = dateTime33.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withPeriodAdded(readablePeriod36, 36000097);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime23.withChronology(chronology39);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((-292275054));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 18 + "'", int24 == 18);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test16650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16650");
        java.util.Locale locale1 = new java.util.Locale("1970");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        int int4 = calendar2.getMaximum(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime6.minusDays((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.Chronology chronology12 = yearMonthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        boolean boolean17 = calendar2.before((java.lang.Object) dateTimeField16);
        calendar2.set(79200, 39, 53, 5, 1901);
        int int24 = calendar2.getWeeksInWeekYear();
        org.junit.Assert.assertEquals(locale1.toString(), "1970");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=79200,MONTH=39,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=53,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=5,MINUTE=1901,SECOND=22,MILLISECOND=897,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test16651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16651");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 100, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean5 = localTime3.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime localTime7 = localTime3.plusMillis(52);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime10 = localTime3.withPeriodAdded(readablePeriod8, (int) (byte) -1);
        int int11 = localTime10.getSecondOfMinute();
        org.joda.time.Chronology chronology12 = localTime10.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((-86399000L), chronology12);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromCalendarFields(calendar17);
        int int20 = calendar17.getWeekYear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) calendar17);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean26 = localTime24.isSupported(dateTimeFieldType25);
        org.joda.time.LocalTime localTime28 = localTime24.plusMillis(52);
        org.joda.time.LocalTime localTime30 = localTime24.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime33 = localTime30.withPeriodAdded(readablePeriod31, 292278993);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime35 = localTime30.plus(readablePeriod34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalTime localTime37 = localTime35.minus(readablePeriod36);
        int int38 = localTime37.getSecondOfMinute();
        boolean boolean39 = localTime21.isEqual((org.joda.time.ReadablePartial) localTime37);
        boolean boolean40 = localTime16.isAfter((org.joda.time.ReadablePartial) localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644573082912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=22,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test16652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16652");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes(1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        int int44 = localTime42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime54 = dateTime36.withFields((org.joda.time.ReadablePartial) localTime42);
        boolean boolean55 = dateTime28.equals((java.lang.Object) localTime42);
        org.joda.time.LocalTime localTime57 = localTime42.plusMillis(10);
        java.util.Date date63 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromDateFields(date63);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology69);
        int int71 = localTime64.compareTo((org.joda.time.ReadablePartial) localTime70);
        boolean boolean72 = localTime57.isBefore((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int74 = localTime57.indexOf(dateTimeFieldType73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = localTime57.getFieldType((int) (short) 1);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property79 = dateTime78.minuteOfHour();
        int int80 = dateTime78.getYearOfCentury();
        int int81 = dateTime78.getSecondOfDay();
        org.joda.time.DateTime dateTime83 = dateTime78.withCenturyOfEra(99);
        boolean boolean84 = dateTime83.isEqualNow();
        org.joda.time.DateTime dateTime85 = localTime57.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.DateTime dateTime87 = dateTime83.plus(readablePeriod86);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 109 + "'", int48 == 109);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals(date63.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 70 + "'", int80 == 70);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test16653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16653");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.US;
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology10);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = dateTimeField13.getAsText(32770, locale15);
        java.lang.String str20 = dateTimeField13.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        int int24 = localTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        boolean boolean28 = localTime23.isAfter((org.joda.time.ReadablePartial) localTime27);
        int int29 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        java.lang.String str30 = dateTimeField13.getName();
        java.util.Date date36 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromDateFields(date36);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localTime37, (int) 'a', locale39);
        java.util.Locale.setDefault(category0, locale39);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = locale45.toLanguageTag();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale45.getDisplayCountry(locale48);
        java.lang.String str50 = locale44.getDisplayVariant(locale45);
        java.lang.String str51 = locale43.getDisplayScript(locale45);
        java.lang.String str52 = locale43.getCountry();
        java.util.Locale.setDefault(category0, locale43);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str17, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "32770" + "'", str18, "32770");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 109 + "'", int24 == 109);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 999 + "'", int29 == 999);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfSecond" + "'", str30, "millisOfSecond");
        org.junit.Assert.assertEquals(date36.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "KOR" + "'", str40, "KOR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "97" + "'", str41, "97");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "KOR" + "'", str46, "KOR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ko-KR" + "'", str47, "ko-KR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Corea del Sud" + "'", str49, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test16654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16654");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.lang.String str7 = property6.getName();
        java.lang.String str8 = property6.getAsString();
        org.joda.time.DurationField durationField9 = property6.getLeapDurationField();
        int int10 = property6.getMinimumValueOverall();
        org.joda.time.DurationField durationField11 = property6.getRangeDurationField();
        org.joda.time.DateTime dateTime12 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField13 = property6.getField();
        int int15 = dateTimeField13.getLeapAmount(1637020035000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "year" + "'", str7, "year");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970" + "'", str8, "1970");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test16655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16655");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder5.setVariant("86340000");
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.Builder builder11 = builder7.setLocale(locale9);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale13.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = builder11.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder11.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.setLanguage("FR");
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category22, locale23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology29);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = dateTimeField32.getAsText(32770, locale34);
        java.lang.String str39 = dateTimeField32.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        int int43 = localTime42.getMillisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        boolean boolean47 = localTime42.isAfter((org.joda.time.ReadablePartial) localTime46);
        int int48 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localTime42);
        java.lang.String str49 = dateTimeField32.getName();
        java.util.Date date55 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromDateFields(date55);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localTime56, (int) 'a', locale58);
        java.util.Locale.setDefault(category22, locale58);
        java.util.Locale locale62 = java.util.Locale.getDefault(category22);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category65 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale66 = java.util.Locale.getDefault(category65);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale66);
        java.lang.String str68 = locale64.getDisplayLanguage(locale66);
        java.util.Locale.setDefault(category22, locale66);
        java.util.Locale locale70 = java.util.Locale.getDefault(category22);
        java.lang.String str71 = locale70.getDisplayLanguage();
        java.util.Locale.Builder builder72 = builder21.setLocale(locale70);
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str14, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "francese" + "'", str17, "francese");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str36, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32770" + "'", str37, "32770");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 109 + "'", int43 == 109);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 999 + "'", int48 == 999);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "millisOfSecond" + "'", str49, "millisOfSecond");
        org.junit.Assert.assertEquals(date55.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "KOR" + "'", str59, "KOR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "97" + "'", str60, "97");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + category65 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category65.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644573083000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=23,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str71, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test16656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16656");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.LocalTime localTime54 = property53.withMaximumValue();
        int int56 = localTime54.getValue(0);
        java.lang.String str57 = localTime54.toString();
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds(12);
        boolean boolean60 = localTime46.equals((java.lang.Object) localTime54);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime46.plus(readablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone63);
        boolean boolean66 = localTime62.equals((java.lang.Object) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime65.minusMinutes(4);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance();
        calendar69.setTimeInMillis(100L);
        boolean boolean72 = calendar69.isWeekDateSupported();
        calendar69.roll(2, false);
        calendar69.setTimeInMillis(0L);
        java.util.TimeZone timeZone78 = calendar69.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        int int81 = dateTimeZone79.getOffset((long) 70);
        java.lang.String str83 = dateTimeZone79.getShortName(1L);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property86 = dateTime85.minuteOfHour();
        org.joda.time.DateTime dateTime88 = dateTime85.minusDays((int) 'a');
        int int89 = dateTimeZone79.getOffset((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime.Property property90 = dateTime88.hourOfDay();
        org.joda.time.DurationField durationField91 = property90.getDurationField();
        java.lang.String str92 = property90.getAsString();
        org.joda.time.DateTime dateTime94 = property90.addToCopy(86399999);
        org.joda.time.DateTime dateTime96 = dateTime94.plusYears((int) (short) 1);
        boolean boolean97 = dateTime65.isAfter((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTime dateTime99 = dateTime96.minusDays(79200100);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 109 + "'", int26 == 109);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10:00:00.999" + "'", str57, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0" + "'", str92, "0");
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test16657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16657");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale1.getDisplayVariant(locale2);
        java.lang.String str8 = locale0.getDisplayScript(locale2);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getDisplayCountry();
        java.lang.String str13 = locale0.getDisplayLanguage(locale9);
        boolean boolean14 = locale9.hasExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        java.lang.String str16 = calendar15.getCalendarType();
        calendar15.roll((int) (short) 0, 4);
        calendar15.setFirstDayOfWeek((-1));
        boolean boolean22 = calendar15.isWeekDateSupported();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Map<java.lang.String, java.lang.Integer> strMap27 = calendar15.getDisplayNames((int) (short) 1, 0, locale26);
        java.lang.String str28 = locale9.getDisplayVariant(locale26);
        java.lang.String str29 = locale9.getISO3Language();
        java.lang.String str31 = locale9.getExtension('a');
        java.util.Set<java.lang.String> strSet32 = locale9.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KOR" + "'", str3, "KOR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko-KR" + "'", str4, "ko-KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Corea del Sud" + "'", str6, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str12, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str13, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=23,MILLISECOND=70,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test16658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16658");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test16659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16659");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(8416800097L, chronology1);
        int int3 = dateTime2.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withDurationAdded(readableDuration4, 2);
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test16660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16660");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.halfdayOfDay();
        org.joda.time.Chronology chronology26 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfDay();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test16661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16661");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 10, 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.minusDays((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        org.joda.time.DurationField durationField14 = durationFieldType5.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) chronology3, chronology13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test16662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16662");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.YearMonthDay yearMonthDay3 = dateTime1.toYearMonthDay();
        org.joda.time.Chronology chronology4 = yearMonthDay3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeField6.set((-315119927L), 1644573600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1644573600 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test16663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16663");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(8416800097L, chronology1);
        int int3 = dateTime2.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withDurationAdded(readableDuration4, 2);
        int int7 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime2.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test16664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16664");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.MIDNIGHT;
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        int int19 = localTime17.size();
        org.joda.time.LocalTime localTime21 = localTime17.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime23 = localTime17.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 100, chronology25);
        int int27 = localTime26.getMillisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        boolean boolean31 = localTime26.isAfter((org.joda.time.ReadablePartial) localTime30);
        boolean boolean32 = localTime23.isEqual((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.LocalTime localTime33 = localTime10.withFields((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.LocalTime localTime36 = localTime30.withField(dateTimeFieldType34, (int) ' ');
        int int37 = localTime5.get(dateTimeFieldType34);
        int[] intArray38 = localTime5.getValues();
        org.joda.time.LocalTime.Property property39 = localTime5.minuteOfHour();
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setExtension('u', "deu");
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale.Builder builder46 = builder40.setLocale(locale44);
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale44.getDisplayCountry(locale47);
        java.util.Locale.setDefault(locale47);
        int int51 = property39.getMaximumTextLength(locale47);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 0, 0, 97]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4" + "'", str45, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "CHN" + "'", str48, "CHN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test16665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16665");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        int int10 = dateTimeField7.getMaximumShortTextLength(locale8);
        java.lang.String str11 = dateTimeField7.getName();
        int int12 = dateTimeField7.getMaximumValue();
        java.lang.String str14 = dateTimeField7.getAsText(70L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfSecond" + "'", str11, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "70" + "'", str14, "70");
    }

    @Test
    public void test16666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16666");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 491);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.Chronology chronology42 = chronology28.withZone(dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 32770, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter20.withZone(dateTimeZone41);
        java.util.TimeZone timeZone47 = dateTimeZone41.toTimeZone();
        java.lang.String str49 = dateTimeZone41.getNameKey(3L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property54 = dateTime51.weekyear();
        org.joda.time.DateTime dateTime56 = property54.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime58 = dateTime56.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.minus(readablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.withZone(dateTimeZone61);
        int int63 = dateTime62.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getNameKey((long) (byte) 100);
        java.lang.String str67 = dateTimeZone64.getID();
        java.lang.String str69 = dateTimeZone64.getName((long) 0);
        org.joda.time.DateTime dateTime70 = dateTime62.withZone(dateTimeZone64);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        boolean boolean72 = dateTimeZone41.equals((java.lang.Object) dateTimeZone64);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property75 = dateTime74.minuteOfHour();
        org.joda.time.DateTime dateTime77 = dateTime74.minusDays((int) 'a');
        org.joda.time.DateTime dateTime78 = dateTime74.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay79 = dateTime78.toYearMonthDay();
        org.joda.time.Chronology chronology80 = yearMonthDay79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology80.getZone();
        org.joda.time.DurationField durationField83 = chronology80.days();
        org.joda.time.DateTimeField dateTimeField84 = chronology80.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = chronology80.centuryOfEra();
        boolean boolean86 = dateTimeZone64.equals((java.lang.Object) dateTimeField85);
        long long90 = dateTimeZone64.convertLocalToUTC(2000L, false, (long) 80);
        int int92 = dateTimeZone64.getOffset(769L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32770L + "'", long45 == 32770L);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 2000L + "'", long90 == 2000L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test16667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16667");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long9 = dateTimeField7.roundFloor((long) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = dateTimeField17.getAsText(32770, locale19);
        java.lang.String str24 = dateTimeField17.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        int int28 = localTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        boolean boolean32 = localTime27.isAfter((org.joda.time.ReadablePartial) localTime31);
        int int33 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime27);
        java.lang.String str34 = dateTimeField17.getName();
        java.util.Date date40 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromDateFields(date40);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale43.getISO3Country();
        java.lang.String str45 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localTime41, (int) 'a', locale43);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology50);
        org.joda.time.LocalTime.Property property52 = localTime51.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = dateTimeField53.getAsText(32770, locale55);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology63);
        org.joda.time.LocalTime.Property property65 = localTime64.millisOfSecond();
        int int66 = localTime64.size();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 100, chronology68);
        int int70 = localTime69.getMillisOfSecond();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 100, chronology72);
        boolean boolean74 = localTime69.isAfter((org.joda.time.ReadablePartial) localTime73);
        int int75 = localTime64.compareTo((org.joda.time.ReadablePartial) localTime73);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology80);
        org.joda.time.LocalTime.Property property82 = localTime81.millisOfSecond();
        int int83 = localTime81.size();
        int[] intArray84 = localTime81.getValues();
        int int85 = dateTimeField53.getMaximumValue((org.joda.time.ReadablePartial) localTime73, intArray84);
        int int86 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime41, intArray84);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property89 = dateTime88.minuteOfHour();
        org.joda.time.DateTime dateTime91 = dateTime88.minusDays(0);
        org.joda.time.DateTime.Property property92 = dateTime88.dayOfWeek();
        org.joda.time.DateTime dateTime93 = property92.roundCeilingCopy();
        org.joda.time.DateTime dateTime94 = localTime41.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        int int95 = localTime41.getMillisOfSecond();
        org.joda.time.LocalTime.Property property96 = localTime41.hourOfDay();
        org.joda.time.LocalTime localTime97 = property96.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str21, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "32770" + "'", str22, "32770");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999 + "'", int33 == 999);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfSecond" + "'", str34, "millisOfSecond");
        org.junit.Assert.assertEquals(date40.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "KOR" + "'", str44, "KOR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "97" + "'", str45, "97");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str57, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "32770" + "'", str58, "32770");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 0, 0, 97]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 999 + "'", int85 == 999);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 999 + "'", int86 == 999);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(localTime97);
    }

    @Test
    public void test16668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16668");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        long long16 = dateTimeField7.roundHalfFloor((-1L));
        long long18 = dateTimeField7.roundCeiling((long) (short) 0);
        boolean boolean20 = dateTimeField7.isLeap((long) 5);
        long long23 = dateTimeField7.add((long) 14, 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology28);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        org.joda.time.LocalTime localTime31 = property30.withMaximumValue();
        org.joda.time.LocalTime localTime32 = property30.getLocalTime();
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime35 = property33.addCopy(2);
        org.joda.time.LocalTime localTime37 = property33.addCopy((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.lang.String str41 = dateTimeZone39.getNameKey((long) (byte) 10);
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology48);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.lang.String str56 = dateTimeField51.getAsText(32770, locale53);
        java.lang.String str57 = locale43.getDisplayLanguage(locale53);
        java.lang.String str58 = dateTimeZone39.getShortName((long) 6, locale53);
        java.lang.String str59 = locale53.getScript();
        java.lang.String str60 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime37, locale53);
        long long62 = dateTimeField7.roundCeiling((long) (-2328));
        long long65 = dateTimeField7.getDifferenceAsLong(1817618267980800000L, (-8296930223000L));
        int int67 = dateTimeField7.getLeapAmount((-2177452800009L));
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 14L + "'", long23 == 14L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str55, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "32770" + "'", str56, "32770");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str57, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "97" + "'", str60, "97");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-2328L) + "'", long62 == (-2328L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1817626564911023000L + "'", long65 == 1817626564911023000L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test16669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16669");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology22.getZone();
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(662695992000000000L, dateTimeZone26);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Etc/UTC" + "'", str27, "Etc/UTC");
    }

    @Test
    public void test16670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16670");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localTime6.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.LocalTime localTime17 = localTime13.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime19 = localTime13.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        int int23 = localTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 100, chronology25);
        boolean boolean27 = localTime22.isAfter((org.joda.time.ReadablePartial) localTime26);
        boolean boolean28 = localTime19.isEqual((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = property31.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 100, chronology35);
        int int37 = localTime36.getMillisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        boolean boolean41 = localTime36.isAfter((org.joda.time.ReadablePartial) localTime40);
        int int42 = property31.compareTo((org.joda.time.ReadablePartial) localTime36);
        java.lang.String str43 = localTime36.toString();
        boolean boolean44 = localTime26.isAfter((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        int int47 = dateTime46.getEra();
        org.joda.time.DateTime dateTime48 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime50 = dateTime46.minusMinutes(1);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.DateTime dateTime52 = property51.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.minus(readablePeriod53);
        org.joda.time.DateTime dateTime55 = localTime36.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = localTime6.equals((java.lang.Object) dateTime55);
        org.joda.time.DateTime.Property property57 = dateTime55.centuryOfEra();
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "00:00:00.100" + "'", str43, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test16671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16671");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology6);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
        org.joda.time.LocalTime localTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime11 = property8.addNoWrapToCopy(8);
        org.joda.time.LocalTime localTime12 = property8.withMinimumValue();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime18 = dateTime14.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime14.plus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.DateTime.Property property22 = dateTime20.millisOfSecond();
        boolean boolean23 = dateTime20.isAfterNow();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) 'a');
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime25.year();
        java.lang.String str31 = property30.getName();
        java.lang.String str32 = property30.getAsString();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays(0);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        int int40 = dateTime39.getMillisOfSecond();
        int int41 = property30.getDifference((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime();
        int int43 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTimeISO();
        int int49 = dateTime47.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.plus(readableDuration50);
        org.joda.time.DateTime dateTime53 = dateTime47.minusMillis(15);
        org.joda.time.DateTime.Property property54 = dateTime47.minuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime47.plusHours((int) 'a');
        org.joda.time.DateTime dateTime58 = dateTime47.withMillisOfDay(1);
        int int59 = dateTime58.getSecondOfDay();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 0);
        int int62 = dateTime61.getEra();
        org.joda.time.DateTime dateTime63 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime65 = dateTime61.minusMinutes(1);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMonths(0);
        org.joda.time.DateTime dateTime69 = dateTime67.minus((long) 2);
        org.joda.time.DateTime.Property property70 = dateTime67.minuteOfHour();
        org.joda.time.Chronology chronology71 = dateTime67.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.centuries();
        org.joda.time.DurationField durationField73 = chronology71.halfdays();
        org.joda.time.DateTime dateTime74 = dateTime58.toDateTime(chronology71);
        org.joda.time.Chronology chronology75 = dateTime58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = chronology75.getZone();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime(dateTimeZone76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        boolean boolean79 = localTime77.isSupported(dateTimeFieldType78);
        org.joda.time.DateTime.Property property80 = dateTime39.property(dateTimeFieldType78);
        int int81 = localTime12.indexOf(dateTimeFieldType78);
        org.joda.time.DateTime.Property property82 = dateTime1.property(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "year" + "'", str31, "year");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970" + "'", str32, "1970");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test16672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16672");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property25 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime29 = dateTime27.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.minus(readablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZone(dateTimeZone32);
        boolean boolean34 = localTime11.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.LocalTime localTime36 = localTime11.minusMinutes(0);
        org.joda.time.DateTimeField dateTimeField38 = localTime11.getField((int) (short) 0);
        org.joda.time.LocalTime localTime40 = localTime11.minusMinutes((int) (byte) 10);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfDay();
        java.lang.Class<?> wildcardClass42 = localTime40.getClass();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test16673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16673");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = dateTime1.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime10 = dateTime1.plusHours(1);
        org.joda.time.TimeOfDay timeOfDay11 = dateTime10.toTimeOfDay();
        int int12 = dateTime10.getMillisOfSecond();
        org.joda.time.DateTime dateTime14 = dateTime10.withMillis((long) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime10.minusMillis(0);
        org.joda.time.DateTime.Property property17 = dateTime10.monthOfYear();
        int int18 = dateTime10.getSecondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3600 + "'", int18 == 3600);
    }

    @Test
    public void test16674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16674");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfDay();
        java.lang.String str22 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        org.joda.time.DurationField durationField25 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.minuteOfDay();
        org.joda.time.DurationField durationField27 = durationFieldType12.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField28 = chronology20.weekyearOfCentury();
        int int30 = dateTimeField28.get((-820540798004L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str9, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 44 + "'", int30 == 44);
    }

    @Test
    public void test16675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16675");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime5 = property2.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.DateTimeField dateTimeField6 = property2.getField();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime15 = property13.getLocalTime();
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfDay();
        org.joda.time.LocalTime localTime18 = property16.addCopy(2);
        org.joda.time.LocalTime localTime19 = property16.withMaximumValue();
        org.joda.time.LocalTime localTime21 = localTime19.plusMillis(59);
        org.joda.time.LocalTime localTime23 = localTime21.minusMillis(139680);
        org.joda.time.LocalTime localTime25 = localTime21.minusSeconds((int) (byte) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localTime25.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.lang.String str37 = dateTimeField35.getAsShortText((long) 121);
        org.joda.time.DurationField durationField38 = dateTimeField35.getRangeDurationField();
        java.lang.String str39 = dateTimeField35.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology44);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        org.joda.time.LocalTime localTime48 = property46.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime49 = property46.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalTime.Property property51 = localTime49.property(dateTimeFieldType50);
        int int52 = dateTimeField35.getMinimumValue((org.joda.time.ReadablePartial) localTime49);
        org.joda.time.LocalTime localTime54 = localTime49.withMillisOfSecond(600);
        int[] intArray55 = localTime49.getValues();
        int[] intArray57 = dateTimeField6.addWrapField((org.joda.time.ReadablePartial) localTime25, 0, intArray55, 22);
        java.lang.String str59 = dateTimeField6.getAsShortText(17L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "121" + "'", str37, "121");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str39, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 0, 0, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 0, 0, 97]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
    }

    @Test
    public void test16676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16676");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 100, chronology6);
        int int8 = localTime7.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 100, chronology10);
        boolean boolean12 = localTime7.isAfter((org.joda.time.ReadablePartial) localTime11);
        int int13 = property2.compareTo((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        boolean boolean25 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property26 = dateTime18.dayOfMonth();
        int int27 = property2.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime28 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField29 = property2.getField();
        boolean boolean31 = property2.equals((java.lang.Object) "Italien");
        org.joda.time.DateTime dateTime32 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime34 = dateTime32.withMillis((-1581379252883L));
        org.joda.time.DateTime dateTime35 = dateTime34.withTimeAtStartOfDay();
        boolean boolean36 = dateTime34.isBeforeNow();
        boolean boolean37 = dateTime34.isBeforeNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 139680 + "'", int27 == 139680);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test16677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16677");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clearExtensions();
        java.util.Locale locale9 = builder6.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test16678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16678");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        java.lang.String str11 = dateTimeField9.getAsShortText(2239L);
        long long13 = dateTimeField9.roundHalfCeiling(132569952589000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2239" + "'", str11, "2239");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 132569952589000L + "'", long13 == 132569952589000L);
    }

    @Test
    public void test16679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16679");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(292269054);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((long) 53);
        org.joda.time.DateTime.Property property9 = dateTime8.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test16680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16680");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime7 = property4.roundCeilingCopy();
        long long8 = property4.remainder();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.lang.String str15 = locale11.getDisplayLanguage(locale13);
        org.joda.time.DateTime dateTime16 = property4.setCopy("2239", locale13);
        java.lang.String str17 = property4.getAsShortText();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.getDisplayName();
        int int20 = property4.getMaximumShortTextLength(locale18);
        java.util.Locale locale22 = new java.util.Locale("hours");
        java.lang.String str23 = locale22.getDisplayVariant();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = property4.getAsShortText(locale22);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale22);
        java.util.Date date28 = new java.util.Date("11 Feb 2022 09:44:53 GMT");
        int int29 = date28.getYear();
        calendar26.setTime(date28);
        calendar26.setLenient(false);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 259200000L + "'", long8 == 259200000L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644573083603,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=23,MILLISECOND=603,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u6cd5\u6587" + "'", str19, "\u6cd5\u6587");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals(locale22.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572693000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=53,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date28.toString(), "Fri Feb 11 09:44:53 UTC 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 122 + "'", int29 == 122);
    }

    @Test
    public void test16681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16681");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 491);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.Chronology chronology42 = chronology28.withZone(dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 32770, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter20.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.Chronology chronology54 = yearMonthDay53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology54.getZone();
        org.joda.time.DurationField durationField58 = chronology54.centuries();
        long long62 = chronology54.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter46.withChronology(chronology54);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter64.withLocale(locale65);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32770L + "'", long45 == 32770L);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-49881509L) + "'", long62 == (-49881509L));
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
    }

    @Test
    public void test16682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16682");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.LocalTime localTime16 = property14.getLocalTime();
        org.joda.time.LocalTime localTime17 = property14.roundCeilingCopy();
        boolean boolean18 = property14.isLeap();
        org.joda.time.LocalTime localTime19 = property14.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property14.getField();
        org.joda.time.LocalTime localTime21 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField22 = property14.getField();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.LocalTime localTime33 = property32.withMaximumValue();
        org.joda.time.LocalTime localTime34 = property32.getLocalTime();
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfDay();
        java.lang.String str36 = property35.getName();
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale37.getCountry();
        java.lang.String str40 = property35.getAsShortText(locale37);
        java.lang.String str41 = dateTimeZone24.getShortName((long) 1, locale37);
        java.lang.String str42 = dateTimeField22.getAsText(58620000, locale37);
        org.joda.time.DateTime dateTime43 = property4.setCopy("18", locale37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTime43.withHourOfDay(292275055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292275055 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfDay" + "'", str36, "millisOfDay");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "US" + "'", str39, "US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "36000097" + "'", str40, "36000097");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "58620000" + "'", str42, "58620000");
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test16683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16683");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        org.joda.time.LocalTime localTime13 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField14 = property6.getField();
        org.joda.time.LocalTime localTime16 = property6.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime17 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime19 = property6.addCopy(995L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime23 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes(1);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean29 = dateTime25.isSupported(dateTimeFieldType28);
        int int30 = localTime19.indexOf(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test16684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16684");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime1.plusHours(6);
        org.joda.time.DateTime dateTime17 = dateTime1.minus((-1L));
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.withLaterOffsetAtOverlap();
        java.util.Date date20 = dateTime17.toDate();
        org.joda.time.DateTime.Property property21 = dateTime17.monthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test16685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16685");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(13320, 0, 769, 26356320, 36000107, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26356320 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16686");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        int int4 = calendar0.getWeekYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.LocalTime localTime13 = property11.getLocalTime();
        org.joda.time.LocalTime localTime14 = property11.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property11.addCopy(6);
        org.joda.time.DurationField durationField17 = property11.getDurationField();
        int int18 = property11.get();
        org.joda.time.LocalTime localTime19 = property11.withMinimumValue();
        org.joda.time.LocalTime localTime20 = property11.withMaximumValue();
        org.joda.time.DurationField durationField21 = property11.getLeapDurationField();
        org.joda.time.LocalTime localTime22 = property11.roundCeilingCopy();
        boolean boolean23 = calendar0.before((java.lang.Object) property11);
        int int24 = property11.getLeapAmount();
        org.joda.time.LocalTime localTime25 = property11.roundHalfCeilingCopy();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int41 = dateTimeZone39.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.setTimeInMillis(100L);
        boolean boolean45 = calendar42.isWeekDateSupported();
        calendar42.roll(2, false);
        calendar42.setTimeInMillis(0L);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        long long54 = dateTimeZone39.getMillisKeepLocal(dateTimeZone52, (long) 2);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 8, dateTimeZone39);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(dateTimeZone39);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) 10, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalTime localTime59 = localTime57.plus(readablePeriod58);
        org.joda.time.LocalTime.Property property60 = localTime57.minuteOfHour();
        org.joda.time.LocalTime localTime62 = property60.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime63 = property60.roundHalfEvenCopy();
        int int64 = property11.compareTo((org.joda.time.ReadablePartial) localTime63);
        org.joda.time.LocalTime localTime66 = property11.addNoWrapToCopy((-1963));
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = localTime66.isSupported(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test16687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16687");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.withYear(2);
        org.joda.time.DateTime dateTime13 = dateTime7.plusSeconds((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime7.plusMinutes(50400009);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property20 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime22 = property20.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = property23.withMaximumValue();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property29 = dateTime26.weekyear();
        org.joda.time.DateTime dateTime31 = property29.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        int int38 = property29.getDifference((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DurationField durationField39 = property29.getDurationField();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property44 = dateTime41.weekyear();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.minus(readablePeriod49);
        int int51 = dateTime50.getMonthOfYear();
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTimeISO();
        int int53 = property29.getDifference((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 0);
        int int57 = dateTime56.getEra();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime60 = dateTime56.minusMinutes(1);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfYear();
        org.joda.time.DateTime dateTime62 = property61.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology67);
        org.joda.time.LocalTime.Property property69 = localTime68.millisOfSecond();
        int int70 = localTime68.size();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 100, chronology72);
        int int74 = localTime73.getMillisOfSecond();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) 100, chronology76);
        boolean boolean78 = localTime73.isAfter((org.joda.time.ReadablePartial) localTime77);
        int int79 = localTime68.compareTo((org.joda.time.ReadablePartial) localTime77);
        org.joda.time.DateTime dateTime80 = dateTime62.withFields((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.DateTime dateTime82 = dateTime62.plus(readablePeriod81);
        int int83 = dateTime62.getDayOfWeek();
        org.joda.time.DateTime dateTime85 = dateTime62.minus(32770L);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.DateTime dateTime87 = dateTime85.minus(readablePeriod86);
        org.joda.time.DateTime dateTime89 = dateTime87.withYearOfCentury((int) (byte) 1);
        boolean boolean90 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test16688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16688");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.set(59, (int) 'x', (int) (byte) 100, 59, 1);
        int int8 = calendar0.getWeeksInWeekYear();
        calendar0.setLenient(true);
        java.time.Instant instant11 = calendar0.toInstant();
        calendar0.clear();
        int int13 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.setTimeInMillis((long) 200);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(1021009, 2000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=200,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=200,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test16689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16689");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar.Builder builder76 = builder74.setLenient(false);
        java.util.Locale.Category category77 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale78 = java.util.Locale.getDefault(category77);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(locale78);
        java.util.TimeZone timeZone80 = calendar79.getTimeZone();
        java.util.Calendar.Builder builder81 = builder74.setTimeZone(timeZone80);
        java.util.Calendar.Builder builder85 = builder74.setWeekDate(252000000, 720, 0);
        java.util.Calendar.Builder builder89 = builder74.setWeekDate(81, (int) '4', 32772);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573083865,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=23,MILLISECOND=865,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + category77 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category77.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1644573083866,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=23,MILLISECOND=866,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test16690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16690");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        int[] intArray8 = localTime5.getValues();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds((int) (short) 100);
        org.joda.time.LocalTime.Property property11 = localTime5.secondOfMinute();
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.LocalTime localTime14 = localTime5.minusMillis((-25199));
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.DateTime.Property property22 = dateTime20.secondOfMinute();
        org.joda.time.DateTime dateTime24 = dateTime20.withHourOfDay(16);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(1970L);
        org.joda.time.DateTime dateTime27 = dateTime20.withFields((org.joda.time.ReadablePartial) localTime26);
        int int28 = localTime26.getMillisOfSecond();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime30.minusDays((int) 'a');
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int36 = dateTime34.get(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType35.getDurationType();
        java.lang.String str38 = dateTimeFieldType35.toString();
        int int39 = localTime26.get(dateTimeFieldType35);
        org.joda.time.LocalTime localTime41 = localTime26.plusMillis(79199985);
        boolean boolean42 = localTime14.isEqual((org.joda.time.ReadablePartial) localTime41);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0, 97]");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 970 + "'", int28 == 970);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hourOfHalfday" + "'", str38, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test16691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16691");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DurationField durationField12 = chronology8.centuries();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology8);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long41 = dateTimeZone26.getMillisKeepLocal(dateTimeZone39, (long) 2);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 8, dateTimeZone26);
        org.joda.time.Chronology chronology43 = chronology8.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekyearOfCentury();
        org.joda.time.DurationField durationField45 = chronology43.months();
        org.joda.time.Chronology chronology46 = chronology43.withUTC();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 2L + "'", long41 == 2L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test16692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16692");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property6.addCopy(6);
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = dateTimeField21.getAsText(32770, locale23);
        java.lang.String str28 = dateTimeField21.getAsText((long) (short) 0);
        long long30 = dateTimeField21.roundHalfFloor((-1L));
        long long32 = dateTimeField21.roundCeiling((long) (short) 0);
        boolean boolean34 = dateTimeField21.isLeap((long) 5);
        long long37 = dateTimeField21.add((long) 14, 0);
        java.util.Locale locale39 = java.util.Locale.ITALY;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = dateTimeField21.getAsShortText(25105L, locale39);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str43 = locale39.getDisplayCountry(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = locale44.getDisplayVariant();
        java.lang.String str47 = locale42.getDisplayVariant(locale44);
        java.lang.String str48 = locale42.getDisplayScript();
        java.lang.String str49 = dateTimeField12.getAsText(28265071, locale42);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str25, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32770" + "'", str26, "32770");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 14L + "'", long37 == 14L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "105" + "'", str41, "105");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u610f\u5927\u5229" + "'", str43, "\u610f\u5927\u5229");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "28265071" + "'", str49, "28265071");
    }

    @Test
    public void test16693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16693");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.minusDays((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.Chronology chronology9 = yearMonthDay8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology9.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.Chronology chronology23 = chronology9.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        boolean boolean25 = durationFieldType0.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.year();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hours" + "'", str1, "hours");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test16694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16694");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 19, 10);
        org.joda.time.DateTime dateTime12 = dateTime7.plusMillis(268);
        int int13 = dateTime12.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.minus(readablePeriod14);
        org.joda.time.DateTime dateTime16 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(447);
        org.joda.time.DateMidnight dateMidnight19 = dateTime18.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 69);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86220268 + "'", int13 == 86220268);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test16695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16695");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        int int15 = dateTime12.getYearOfEra();
        boolean boolean16 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime5.plus(readablePeriod17);
        org.joda.time.DateTime.Property property19 = dateTime5.hourOfDay();
        org.joda.time.DateTime.Property property20 = dateTime5.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test16696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16696");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        long long19 = dateTimeField17.roundFloor((long) (short) 100);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category20, locale21);
        int int23 = dateTimeField17.getMaximumTextLength(locale21);
        boolean boolean24 = locale21.hasExtensions();
        java.util.Locale.setDefault(category7, locale21);
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category26, locale27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = dateTimeField36.getAsText(32770, locale38);
        java.lang.String str43 = dateTimeField36.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        int int47 = localTime46.getMillisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        boolean boolean51 = localTime46.isAfter((org.joda.time.ReadablePartial) localTime50);
        int int52 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localTime46);
        java.lang.String str53 = dateTimeField36.getName();
        java.util.Date date59 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.fromDateFields(date59);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localTime60, (int) 'a', locale62);
        java.util.Locale.setDefault(category26, locale62);
        java.lang.String str66 = locale62.getLanguage();
        java.util.Locale.setDefault(category7, locale62);
        java.util.Locale locale68 = java.util.Locale.getDefault(category7);
        java.lang.String str69 = locale68.getVariant();
        java.lang.String str70 = property4.getAsText(locale68);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str40, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32770" + "'", str41, "32770");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 999 + "'", int52 == 999);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "millisOfSecond" + "'", str53, "millisOfSecond");
        org.junit.Assert.assertEquals(date59.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "KOR" + "'", str63, "KOR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "97" + "'", str64, "97");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ko" + "'", str66, "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970" + "'", str70, "1970");
    }

    @Test
    public void test16697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16697");
        java.util.Date date3 = new java.util.Date((int) '4', 9, 15);
        int int4 = date3.getHours();
        date3.setYear(109);
        java.util.Date date12 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date12.setMonth((int) ' ');
        java.util.Date date20 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromDateFields(date20);
        boolean boolean22 = date12.before(date20);
        int int23 = date20.getTimezoneOffset();
        java.util.Date date30 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean31 = date20.after(date30);
        date30.setMonth(5);
        date30.setSeconds((-292275054));
        date30.setSeconds(80);
        boolean boolean38 = date3.after(date30);
        date3.setYear(86100009);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Oct 15 00:00:00 UTC 86101909");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date20.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals(date30.toString(), "Tue Jun 10 03:11:20 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test16698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16698");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        int int10 = calendar0.getLeastMaximum((int) (byte) 10);
        int int12 = calendar0.getActualMaximum((int) (byte) 0);
        int int13 = calendar0.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test16699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16699");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime28.weekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology36);
        org.joda.time.LocalTime.Property property38 = localTime37.millisOfSecond();
        int int39 = localTime37.size();
        org.joda.time.LocalTime localTime41 = localTime37.minusMinutes((int) ' ');
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime28.withFields((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.DateTime.Property property44 = dateTime28.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime28.withZoneRetainFields(dateTimeZone45);
        int int47 = dateTime46.getYearOfEra();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
    }

    @Test
    public void test16700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16700");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property6.addWrapFieldToCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property6.getFieldType();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        java.lang.String str16 = durationFieldType15.getName();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        boolean boolean24 = localTime19.isAfter((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        int int28 = localTime19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = localTime19.getChronology();
        long long33 = chronology29.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.yearOfEra();
        boolean boolean35 = durationFieldType15.isSupported(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology29.getDateTimeMillis(27408960, 86399948, 71, 4809);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399948 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millis" + "'", str16, "millis");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 310L + "'", long33 == 310L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test16701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16701");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter2.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = dateTimeField21.getAsText(32770, locale23);
        java.lang.String str27 = locale13.getDisplayLanguage(locale23);
        java.lang.String str28 = dateTimeZone9.getShortName((long) 6, locale23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withLocale(locale23);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatter29.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str25, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32770" + "'", str26, "32770");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str27, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(dateTimePrinter30);
    }

    @Test
    public void test16702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16702");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        int int6 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime8.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime8.minus(17L);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property18 = dateTime8.property(dateTimeFieldType17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.DateTime.Property property20 = dateTime1.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfYear();
        long long35 = chronology28.add(100L, (long) 53, 0);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology28.add(readablePeriod36, (-2124664980000L), (-979));
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType19.getField(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = dateTimeField40.set(152L, 34080097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34080097 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-2124664980000L) + "'", long39 == (-2124664980000L));
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test16703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16703");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay(17);
        org.joda.time.LocalTime localTime35 = localTime31.withMillisOfDay(59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime37 = localTime35.withSecondOfMinute(36000053);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000053 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test16704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16704");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.plus(readablePeriod26);
        int int28 = dateTime7.getDayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime7.minus(32770L);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) (byte) 100);
        java.lang.String str39 = dateTimeZone36.getID();
        java.lang.String str41 = dateTimeZone36.getName((long) 0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime34.toMutableDateTime(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime42);
    }

    @Test
    public void test16705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16705");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.DateTime dateTime12 = localTime11.toDateTimeToday();
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(292278993);
        java.util.Locale locale18 = new java.util.Locale("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        java.lang.String str19 = dateTime15.toString("\ud504\ub791\uc2a4\uc5b4", locale18);
        org.joda.time.DateTime dateTime21 = dateTime15.minusDays((-1963));
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime15.minusSeconds(2865);
        org.joda.time.Instant instant25 = dateTime15.toInstant();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals(locale18.toString(), "java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=?,year=-1,month=3,week_of_year=?,week_of_month=?,day_of_month=12,day_of_year=?,day_of_week=?,day_of_week_in_month=?,am_pm=?,hour=?,hour_of_day=?,minute=?,second=?,millisecond=?,zone_offset=?,dst_offset=?]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str19, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test16706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16706");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) 0);
        java.util.Locale locale5 = new java.util.Locale("DateTimeField[millisOfSecond]");
        java.util.Calendar.Builder builder6 = builder3.setLocale(locale5);
        java.util.Calendar calendar7 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            calendar7.set(2048, 126);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals(locale5.toString(), "datetimefield[millisofsecond]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-124304284800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test16707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16707");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        boolean boolean12 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime5.withDurationAdded((long) 8, (int) '#');
        org.joda.time.DateTime dateTime17 = dateTime5.plusSeconds((int) ' ');
        org.joda.time.DateTime.Property property18 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime19 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology20 = localTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfWeek();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property27 = dateTime24.weekyear();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((long) (short) 0);
        int int30 = property27.get();
        org.joda.time.DateTime dateTime31 = property27.withMinimumValue();
        int int32 = dateTime31.getWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMonths(1439);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getScript();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale35.getCountry();
        java.util.Calendar calendar39 = dateTime34.toCalendar(locale35);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = locale42.toLanguageTag();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale42.getDisplayCountry(locale45);
        java.lang.String str47 = locale41.getDisplayVariant(locale42);
        java.lang.String str48 = locale40.getDisplayScript(locale42);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getDisplayCountry();
        java.lang.String str53 = locale40.getDisplayLanguage(locale49);
        boolean boolean54 = locale49.hasExtensions();
        java.lang.String str55 = locale49.getDisplayName();
        java.lang.String str56 = locale49.getDisplayVariant();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale57.getDisplayLanguage();
        java.lang.String str59 = locale49.getDisplayCountry(locale57);
        java.lang.String str60 = locale35.getDisplayName(locale49);
        java.lang.String str61 = dateTimeField21.getAsText((long) 52, locale35);
        java.lang.String str62 = locale35.getCountry();
        java.util.Set<java.lang.Character> charSet63 = locale35.getExtensionKeys();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-292275054) + "'", int32 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "IT" + "'", str38, "IT");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-9223368232464000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=292268934,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=174,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "KOR" + "'", str43, "KOR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko-KR" + "'", str44, "ko-KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Corea del Sud" + "'", str46, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str51, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str52, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str53, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str55, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\uc601\uc5b4" + "'", str58, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "South Korea" + "'", str59, "South Korea");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)" + "'", str60, "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "gioved\354" + "'", str61, "gioved\354");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "IT" + "'", str62, "IT");
        org.junit.Assert.assertNotNull(charSet63);
    }

    @Test
    public void test16708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16708");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('u', "deu");
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.Builder builder24 = builder18.setLocale(locale22);
        java.util.Locale locale25 = builder18.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withLocale(locale25);
        java.lang.String str27 = locale25.getISO3Language();
        java.util.Locale locale28 = locale25.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = locale25.getUnicodeLocaleType("09:48:37.384");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 09:48:37.384");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4" + "'", str23, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
    }

    @Test
    public void test16709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16709");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property23.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = property23.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.String str35 = localTime28.toString();
        boolean boolean36 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes(1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology52);
        org.joda.time.LocalTime.Property property54 = localTime53.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.lang.String str60 = dateTimeField55.getAsText(32770, locale57);
        java.lang.String str62 = dateTimeField55.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) 100, chronology64);
        int int66 = localTime65.getMillisOfSecond();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 100, chronology68);
        boolean boolean70 = localTime65.isAfter((org.joda.time.ReadablePartial) localTime69);
        int int71 = dateTimeField55.getMaximumValue((org.joda.time.ReadablePartial) localTime65);
        long long73 = dateTimeField55.remainder(0L);
        int int74 = dateTime47.get(dateTimeField55);
        int int76 = dateTimeField55.get((-49881509L));
        boolean boolean77 = dateTimeField55.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((java.lang.Object) boolean77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "00:00:00.100" + "'", str35, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str59, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "32770" + "'", str60, "32770");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 999 + "'", int71 == 999);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 491 + "'", int76 == 491);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test16710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16710");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573084286,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=24,MILLISECOND=286,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644573084286,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=24,MILLISECOND=286,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test16711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16711");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime.Property property7 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((long) 26356320, 58620000);
        org.joda.time.DateTime.Property property12 = dateTime8.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.plus(readablePeriod13);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test16712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16712");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime23 = property21.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test16713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16713");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone11, locale12);
        calendar13.setLenient(true);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.setMinimalDaysInFirstWeek(531);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644573084359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=531,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=24,MILLISECOND=359,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test16714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16714");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        int int20 = localTime18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        int int24 = localTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        boolean boolean28 = localTime23.isAfter((org.joda.time.ReadablePartial) localTime27);
        int int29 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        int int37 = localTime35.size();
        int[] intArray38 = localTime35.getValues();
        int int39 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime27, intArray38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology44);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        int int47 = localTime45.size();
        org.joda.time.LocalTime localTime49 = localTime45.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime51 = localTime45.minusMillis((int) ' ');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology57);
        org.joda.time.LocalTime.Property property59 = localTime58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        java.lang.String str62 = dateTimeField60.getAsShortText((long) 121);
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = dateTimeField60.getAsShortText((long) (byte) 100, locale64);
        java.lang.String str66 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime51, (int) (byte) 100, locale64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField7.getType();
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology74);
        org.joda.time.LocalTime.Property property76 = localTime75.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = property76.getField();
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.util.Locale locale80 = java.util.Locale.FRENCH;
        java.lang.String str81 = locale79.getDisplayName(locale80);
        java.lang.String str82 = dateTimeField77.getAsText(32770, locale79);
        java.lang.String str83 = locale69.getDisplayLanguage(locale79);
        java.lang.String str84 = dateTimeField7.getAsShortText((int) '#', locale79);
        int int87 = dateTimeField7.getDifference((long) 268, (long) (short) 100);
        long long89 = dateTimeField7.roundCeiling(31536000000L);
        long long91 = dateTimeField7.roundFloor((long) 121);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[10, 0, 0, 97]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 999 + "'", int39 == 999);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "121" + "'", str62, "121");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "100" + "'", str65, "100");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100" + "'", str66, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str81, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "32770" + "'", str82, "32770");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str83, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "35" + "'", str84, "35");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 168 + "'", int87 == 168);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 31536000000L + "'", long89 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 121L + "'", long91 == 121L);
    }

    @Test
    public void test16715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16715");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((-2203656180000L));
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfMinute();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime11.toGregorianCalendar();
        java.time.Instant instant14 = gregorianCalendar13.toInstant();
        java.util.Date date15 = java.util.Date.from(instant14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Mar 03 17:17:00 UTC 1900");
    }

    @Test
    public void test16716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16716");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.set(36, 86399999, 36000545);
        calendar0.setFirstDayOfWeek(800);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=800,minimalDaysInFirstWeek=1,ERA=1,YEAR=36,MONTH=86399999,WEEK_OF_YEAR=48,WEEK_OF_MONTH=4,DAY_OF_MONTH=36000545,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=24,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
    }

    @Test
    public void test16717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16717");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.set(6, 52, 0, 8, 20);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int11 = calendar0.getWeeksInWeekYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) calendar0);
        java.lang.String str13 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61841461199900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=20,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.util.GregorianCalendar[time=-61841461199900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=20,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str13, "java.util.GregorianCalendar[time=-61841461199900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=20,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test16718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16718");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll((int) (short) 10, (int) (byte) 10);
        calendar0.setLenient(true);
        int int7 = calendar0.getMaximum(8);
        int int8 = calendar0.getWeekYear();
        java.util.Date date9 = calendar0.getTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        java.lang.String str11 = calendar10.getCalendarType();
        calendar10.roll((int) (short) 0, 4);
        calendar10.setFirstDayOfWeek((-1));
        boolean boolean17 = calendar10.isWeekDateSupported();
        calendar10.set(39, (int) 'x', 32772, 292278993, 1969, 2);
        java.util.TimeZone timeZone25 = calendar10.getTimeZone();
        calendar0.setTimeZone(timeZone25);
        calendar0.set(1968, (int) (byte) -1, 432000000, 161, 36000249);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1968,MONTH=-1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=432000000,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=161,MINUTE=36000249,SECOND=24,MILLISECOND=448,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 07:51:24 UTC 2022");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=39,MONTH=120,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=32772,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=292278993,MINUTE=1969,SECOND=2,MILLISECOND=449,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
    }

    @Test
    public void test16719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16719");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime5.withHourOfDay(16);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(1970L);
        org.joda.time.DateTime dateTime12 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property13 = localTime11.hourOfDay();
        int int14 = localTime11.size();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone25.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property32 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(6);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        int int38 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology45);
        org.joda.time.LocalTime.Property property47 = localTime46.millisOfSecond();
        java.util.Locale locale48 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale48.getCountry();
        java.lang.String str51 = dateTimeField40.getAsShortText((org.joda.time.ReadablePartial) localTime46, locale48);
        java.lang.Object obj52 = null;
        boolean boolean53 = localTime46.equals(obj52);
        int int54 = localTime46.getMinuteOfHour();
        boolean boolean55 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.Chronology chronology56 = localTime46.getChronology();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "US" + "'", str50, "US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "10" + "'", str51, "10");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test16720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16720");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((-62198582364983L));
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property2.roundHalfEvenCopy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology8);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        org.joda.time.LocalTime localTime14 = property10.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime15 = property10.roundHalfEvenCopy();
        java.util.Date date21 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromDateFields(date21);
        boolean boolean23 = localTime15.equals((java.lang.Object) localTime22);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.setTimeInMillis(100L);
        boolean boolean29 = calendar26.isWeekDateSupported();
        calendar26.roll(2, false);
        calendar26.setTimeInMillis(0L);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int39 = dateTimeZone37.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        calendar40.setTimeInMillis(100L);
        boolean boolean43 = calendar40.isWeekDateSupported();
        calendar40.roll(2, false);
        calendar40.setTimeInMillis(0L);
        java.util.TimeZone timeZone49 = calendar40.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        long long52 = dateTimeZone37.getMillisKeepLocal(dateTimeZone50, (long) 2);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 8, dateTimeZone37);
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(dateTimeZone37);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 10, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalTime localTime57 = localTime55.plus(readablePeriod56);
        org.joda.time.LocalTime localTime59 = localTime57.minusSeconds(10);
        org.joda.time.DateTime dateTime60 = localTime57.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getDurationType();
        boolean boolean63 = dateTime60.isSupported(dateTimeFieldType61);
        boolean boolean64 = localTime22.isSupported(dateTimeFieldType61);
        boolean boolean65 = localTime3.equals((java.lang.Object) boolean64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField67 = localTime3.getField(360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 360000000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(calendar40);
        org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2L + "'", long52 == 2L);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test16721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16721");
        java.util.Date date1 = new java.util.Date(432529113615000L);
        int int2 = date1.getTimezoneOffset();
        int int3 = date1.getYear();
        int int4 = date1.getDate();
        org.junit.Assert.assertEquals(date1.toString(), "Mon Apr 20 00:00:15 UTC 15676");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13776 + "'", int3 == 13776);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
    }

    @Test
    public void test16722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16722");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfEvenCopy();
        long long12 = property6.remainder();
        org.joda.time.LocalTime localTime13 = property6.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property6.addCopy(20182690425600000L);
        org.joda.time.LocalTime localTime17 = property6.addNoWrapToCopy(5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test16723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16723");
        java.util.Date date5 = new java.util.Date((-587852), 35237999, 923, 1, 13320);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jun 19 07:00:00 UTC 2350550");
    }

    @Test
    public void test16724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16724");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime3 = dateTime1.minus(10L);
        org.joda.time.DateTime.Property property4 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) 12);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        int int8 = property4.getMinimumValueOverall();
        org.joda.time.DateTime dateTime9 = property4.roundFloorCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology15);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = dateTimeField26.getAsText(32770, locale28);
        java.lang.String str33 = dateTimeField26.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 100, chronology35);
        int int37 = localTime36.getMillisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        boolean boolean41 = localTime36.isAfter((org.joda.time.ReadablePartial) localTime40);
        int int42 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        java.lang.String str43 = dateTimeField26.getName();
        java.util.Date date49 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromDateFields(date49);
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localTime50, (int) 'a', locale52);
        java.lang.String str55 = property17.getAsText(locale52);
        org.joda.time.LocalTime localTime57 = property17.addCopy(0L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology62);
        org.joda.time.LocalTime.Property property64 = localTime63.millisOfSecond();
        org.joda.time.LocalTime localTime65 = property64.withMaximumValue();
        int int67 = localTime65.getValue(0);
        java.lang.String str68 = localTime65.toString();
        org.joda.time.LocalTime localTime70 = localTime65.minusSeconds(12);
        boolean boolean71 = localTime57.equals((java.lang.Object) localTime65);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalTime localTime73 = localTime57.plus(readablePeriod72);
        org.joda.time.LocalTime.Property property74 = localTime57.minuteOfHour();
        org.joda.time.LocalTime localTime76 = property74.addNoWrapToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localTime76.getFieldType(0);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property81 = dateTime80.minuteOfHour();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = dateTime80.toDateTime(chronology82);
        org.joda.time.DateTime dateTime84 = localTime76.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        int int85 = property10.compareTo((org.joda.time.ReadableInstant) dateTime84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = property10.setCopy("1970-01-06T19:56:59.990+70:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-06T19:56:59.990+70:00\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str30, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32770" + "'", str31, "32770");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 999 + "'", int42 == 999);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "millisOfSecond" + "'", str43, "millisOfSecond");
        org.junit.Assert.assertEquals(date49.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "KOR" + "'", str53, "KOR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "97" + "'", str54, "97");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "97" + "'", str55, "97");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "10:00:00.999" + "'", str68, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test16725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16725");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) dateTimeField13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJEraDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.100" + "'", str8, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test16726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16726");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime5 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMinutes(1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths(0);
        int int21 = dateTime18.getYearOfEra();
        boolean boolean22 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        java.lang.String str26 = property24.getName();
        org.joda.time.DateTime dateTime28 = property24.addToCopy(36002566);
        org.joda.time.DateTime dateTime29 = property24.getDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "secondOfDay" + "'", str26, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test16727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16727");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear(6);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter16.withChronology(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter16.withOffsetParsed();
        boolean boolean32 = dateTimeFormatter16.isPrinter();
        java.util.Locale locale33 = dateTimeFormatter16.getLocale();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(locale33);
    }

    @Test
    public void test16728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16728");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((-251999990L), chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusHours((int) (byte) 1);
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField8 = localTime6.getField(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 50");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test16729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16729");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.withPeriodAdded(readablePeriod7, 14);
        int int10 = dateTime5.getDayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test16730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16730");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfYear();
        boolean boolean26 = durationFieldType12.isSupported(chronology20);
        java.lang.String str27 = durationFieldType12.getName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str9, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "halfdays" + "'", str27, "halfdays");
    }

    @Test
    public void test16731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16731");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        int int10 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withEra((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime14.plusSeconds((int) ' ');
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfSecond(17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.minus(readablePeriod20);
        org.joda.time.DateTime.Property property22 = dateTime17.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test16732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16732");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime14 = dateTime4.withDurationAdded((long) 8, (int) '#');
        org.joda.time.DateTime dateTime16 = dateTime4.plusSeconds((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime4.dayOfYear();
        org.joda.time.DateTime.Property property18 = dateTime4.era();
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test16733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16733");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.Chronology chronology7 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter4.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test16734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16734");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int8 = calendar0.getActualMinimum((int) (short) 1);
        calendar0.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = calendar0.isSet(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test16735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16735");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.withMinimumValue();
        org.joda.time.LocalTime localTime62 = property58.addWrapFieldToCopy(25);
        org.joda.time.LocalTime localTime63 = property58.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime64 = property58.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property65 = localTime64.secondOfMinute();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573084710,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=24,MILLISECOND=710,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test16736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16736");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalTime localTime21 = property19.getLocalTime();
        org.joda.time.LocalTime localTime22 = property19.roundCeilingCopy();
        boolean boolean23 = localTime2.equals((java.lang.Object) property19);
        org.joda.time.LocalTime localTime25 = localTime2.plusMinutes((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str27 = dateTimeFieldType26.getName();
        org.joda.time.LocalTime localTime29 = localTime2.withField(dateTimeFieldType26, 7);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        int int37 = dateTime36.getEra();
        org.joda.time.DateTime dateTime38 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes(1);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfYear();
        org.joda.time.DateTime dateTime42 = property41.roundHalfCeilingCopy();
        boolean boolean43 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks(1981);
        org.joda.time.DateTime dateTime47 = dateTime42.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime50 = dateTime42.withDurationAdded(86399999L, (int) (byte) 10);
        boolean boolean51 = localTime2.equals((java.lang.Object) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.yearOfCentury();
        int int53 = dateTime50.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "secondOfMinute" + "'", str27, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
    }

    @Test
    public void test16737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16737");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfMonth();
        org.joda.time.DurationField durationField14 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField16 = chronology12.days();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.100" + "'", str8, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test16738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16738");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime5 = property2.addToCopy((long) 4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusSeconds(9);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test16739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16739");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(39);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.DurationField durationField23 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.centuryOfEra();
        long long28 = chronology21.add(1L, 100L, 0);
        java.lang.String str29 = chronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology21.getZone();
        boolean boolean32 = dateTimeZone30.equals((java.lang.Object) 36002097);
        java.lang.String str33 = dateTimeZone30.getID();
        org.joda.time.DateTime dateTime34 = dateTime13.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = dateTime34.minusHours((-979));
        java.lang.String str37 = dateTime34.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1969-12-29T00:00:00.000Z" + "'", str37, "1969-12-29T00:00:00.000Z");
    }

    @Test
    public void test16740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16740");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) ' ');
        boolean boolean58 = dateTime51.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime51.dayOfMonth();
        boolean boolean61 = dateTime51.isBefore((long) 100);
        long long62 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean63 = property6.isLeap();
        long long64 = property6.remainder();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) 100, chronology66);
        int int68 = localTime67.getMillisOfSecond();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) 100, chronology70);
        boolean boolean72 = localTime67.isAfter((org.joda.time.ReadablePartial) localTime71);
        org.joda.time.Chronology chronology73 = localTime71.getChronology();
        int int74 = localTime71.getMinuteOfHour();
        org.joda.time.LocalTime.Property property75 = localTime71.minuteOfHour();
        org.joda.time.LocalTime localTime76 = property75.roundCeilingCopy();
        int int77 = property6.compareTo((org.joda.time.ReadablePartial) localTime76);
        org.joda.time.LocalTime localTime79 = property6.addNoWrapToCopy(1320);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 8416800097L + "'", long62 == 8416800097L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(localTime79);
    }

    @Test
    public void test16741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16741");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc6d4");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test16742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16742");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(39);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.DurationField durationField23 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.centuryOfEra();
        long long28 = chronology21.add(1L, 100L, 0);
        java.lang.String str29 = chronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology21.getZone();
        boolean boolean32 = dateTimeZone30.equals((java.lang.Object) 36002097);
        java.lang.String str33 = dateTimeZone30.getID();
        org.joda.time.DateTime dateTime34 = dateTime13.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test16743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16743");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        calendar0.set(139680, (-9), (-2328), 18, (int) (short) 100);
        java.util.TimeZone timeZone14 = calendar0.getTimeZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        int int22 = dateTime21.getEra();
        org.joda.time.DateTime dateTime23 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes(1);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.DateTime dateTime27 = property26.roundHalfCeilingCopy();
        boolean boolean28 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property29 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        int int32 = dateTime31.getEra();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes(1);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean39 = dateTime35.isSupported(dateTimeFieldType38);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime35.toGregorianCalendar();
        int int41 = property29.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime42 = property29.roundCeilingCopy();
        org.joda.time.DateTime dateTime43 = property29.roundFloorCopy();
        org.joda.time.DurationField durationField44 = property29.getLeapDurationField();
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.lang.String str47 = property29.getAsText(locale45);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone14, locale45);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = calendar48.getLeastMaximum(36000091);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36000091");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=139680,MONTH=-9,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=-2328,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=18,MINUTE=100,SECOND=24,MILLISECOND=905,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str46, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573084905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=24,MILLISECOND=905,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test16744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16744");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        boolean boolean6 = dateTimeFormatter2.isOffsetParsed();
        java.lang.Appendable appendable7 = null;
        org.joda.time.ReadablePartial readablePartial8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable7, readablePartial8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test16745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16745");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) 70);
        java.lang.String str19 = dateTimeZone15.getShortName(1L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        int int25 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter4.withZone(dateTimeZone15);
        boolean boolean27 = dateTimeZone15.isFixed();
        java.lang.String str28 = dateTimeZone15.getID();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
    }

    @Test
    public void test16746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16746");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 10, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime31.plus(readablePeriod32);
        org.joda.time.LocalTime localTime35 = localTime33.minusSeconds(10);
        org.joda.time.LocalTime localTime37 = localTime35.plusMinutes(86399999);
        org.joda.time.LocalTime localTime39 = localTime37.plusMillis(36000053);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfDay();
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test16747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16747");
        java.util.Locale locale3 = new java.util.Locale("Feb 11, 2022 7:49:05 AM", "79200000", "586");
        org.junit.Assert.assertEquals(locale3.toString(), "feb 11, 2022 7:49:05 am_79200000_586");
    }

    @Test
    public void test16748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16748");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        java.lang.String str45 = locale41.getLanguage();
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = locale46.getISO3Language();
        java.lang.String str50 = locale41.getDisplayCountry(locale46);
        boolean boolean51 = locale46.hasExtensions();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ko" + "'", str45, "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str48, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str50, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test16749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16749");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test16750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16750");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone11.getName(8416800097L, locale28);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(dateTimeZone11);
        java.lang.String str33 = dateTimeZone11.getShortName(1343862167807021000L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
    }

    @Test
    public void test16751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16751");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 4);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar calendar6 = builder0.build();
        int int8 = calendar6.getActualMaximum((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=28804000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=0,SECOND=4,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=28804000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=0,SECOND=4,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278994 + "'", int8 == 292278994);
    }

    @Test
    public void test16752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.setTimeInMillis(100L);
        boolean boolean23 = calendar20.isWeekDateSupported();
        calendar20.roll(2, false);
        calendar20.setTimeInMillis(0L);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long32 = dateTimeZone17.getMillisKeepLocal(dateTimeZone30, (long) 2);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 8, dateTimeZone17);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(dateTimeZone17);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 10, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalTime localTime37 = localTime35.plus(readablePeriod36);
        org.joda.time.LocalTime localTime39 = localTime37.minusSeconds(10);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property44 = dateTime41.weekyear();
        org.joda.time.DateTime dateTime46 = property44.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.withHourOfDay(6);
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        boolean boolean50 = localTime39.equals((java.lang.Object) dateTime49);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology55);
        org.joda.time.LocalTime.Property property57 = localTime56.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        long long60 = dateTimeField58.roundFloor((long) (short) 100);
        java.util.Locale.Category category61 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category61, locale62);
        int int64 = dateTimeField58.getMaximumTextLength(locale62);
        java.lang.String str66 = dateTimeField58.getAsShortText((long) ' ');
        int int67 = dateTime49.get(dateTimeField58);
        long long70 = dateTimeField58.add(209L, (int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology75);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        org.joda.time.LocalTime localTime78 = property77.withMaximumValue();
        org.joda.time.LocalTime localTime79 = property77.getLocalTime();
        org.joda.time.LocalTime.Property property80 = localTime79.millisOfDay();
        org.joda.time.LocalTime localTime82 = localTime79.minusMinutes(32769);
        java.util.Locale locale85 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category86 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale87 = java.util.Locale.getDefault(category86);
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(locale87);
        java.lang.String str89 = locale85.getDisplayLanguage(locale87);
        java.lang.String str90 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localTime82, 12, locale85);
        java.lang.String str91 = property3.getAsShortText(locale85);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category61.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "32" + "'", str66, "32");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 219L + "'", long70 == 219L);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertTrue("'" + category86 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category86.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=1644573085039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "12" + "'", str90, "12");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "22" + "'", str91, "22");
    }

    @Test
    public void test16753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16753");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.Chronology chronology26 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = dateTimeField35.getAsText(32770, locale37);
        int int42 = dateTimeField35.getMaximumValue((long) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology47);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = dateTimeField50.getAsText(32770, locale52);
        java.lang.String str56 = dateTimeField50.getName();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property59 = dateTime58.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = locale64.toLanguageTag();
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = locale64.getDisplayCountry(locale67);
        java.lang.String str69 = locale63.getDisplayVariant(locale64);
        java.lang.String str70 = locale62.getDisplayScript(locale64);
        java.lang.String str71 = dateTimeField60.getAsShortText((long) 0, locale64);
        int int72 = dateTimeField50.getMaximumTextLength(locale64);
        int int73 = dateTimeField35.getMaximumShortTextLength(locale64);
        long long76 = dateTimeField35.getDifferenceAsLong((long) 109, (long) 252000000);
        java.util.Locale locale79 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str80 = dateTimeField35.getAsShortText(36000097L, locale79);
        int int81 = dateTimeField27.getMaximumTextLength(locale79);
        long long83 = dateTimeField27.roundHalfCeiling(0L);
        long long85 = dateTimeField27.roundFloor(36000097L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str39, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "32770" + "'", str40, "32770");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 999 + "'", int42 == 999);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str54, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "32770" + "'", str55, "32770");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfSecond" + "'", str56, "millisOfSecond");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "KOR" + "'", str65, "KOR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ko-KR" + "'", str66, "ko-KR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Corea del Sud" + "'", str68, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-251999891L) + "'", long76 == (-251999891L));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "97" + "'", str80, "97");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 36000097L + "'", long85 == 36000097L);
    }

    @Test
    public void test16754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16754");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime3 = localTime1.plusMinutes(0);
        java.util.Date date7 = new java.util.Date((int) '4', 86399999, 4);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.LocalTime localTime17 = property15.getLocalTime();
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        boolean boolean19 = property15.isLeap();
        org.joda.time.LocalTime localTime20 = property15.withMinimumValue();
        org.joda.time.LocalTime localTime22 = property15.addWrapFieldToCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property15.getFieldType();
        int int24 = localTime8.get(dateTimeFieldType23);
        org.joda.time.LocalTime localTime26 = localTime8.withSecondOfMinute(6);
        org.joda.time.LocalTime localTime27 = localTime3.withFields((org.joda.time.ReadablePartial) localTime8);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573085111,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=111,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Dec 04 00:00:00 UTC 7201951");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test16755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16755");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(29, (int) (short) 100, 79201970);
        java.util.Calendar calendar6 = builder0.build();
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(36000091, 1644551206, 86354009, 35400091);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=79312370000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1972,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=188,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=12,SECOND=50,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test16756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16756");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfEra(3);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        int int19 = localTime17.size();
        org.joda.time.LocalTime localTime21 = localTime17.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime23 = localTime17.minusSeconds((int) 'a');
        int int24 = localTime17.size();
        org.joda.time.LocalTime localTime26 = localTime17.plusMillis(2000);
        org.joda.time.LocalTime localTime28 = localTime26.plusSeconds(86340000);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((-50399903L));
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        int int38 = localTime36.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int40 = localTime36.get(dateTimeFieldType39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology45);
        org.joda.time.LocalTime.Property property47 = localTime46.millisOfSecond();
        int int48 = localTime46.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int50 = localTime46.get(dateTimeFieldType49);
        int int51 = localTime36.compareTo((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.Chronology chronology52 = localTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfMonth();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.clockhourOfHalfday();
        org.joda.time.DurationField durationField60 = chronology58.halfdays();
        org.joda.time.DurationField durationField61 = durationFieldType55.getField(chronology58);
        java.lang.String str62 = durationFieldType55.toString();
        java.lang.String str63 = durationFieldType55.getName();
        boolean boolean64 = localTime54.isSupported(durationFieldType55);
        org.joda.time.Chronology chronology65 = null;
        boolean boolean66 = durationFieldType55.isSupported(chronology65);
        java.lang.String str67 = durationFieldType55.toString();
        boolean boolean68 = localTime30.isSupported(durationFieldType55);
        org.joda.time.LocalTime localTime70 = localTime28.withFieldAdded(durationFieldType55, 35279353);
        org.joda.time.DateTime dateTime72 = dateTime7.withFieldAdded(durationFieldType55, 1977);
        int int73 = dateTime72.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "minutes" + "'", str62, "minutes");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "minutes" + "'", str63, "minutes");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "minutes" + "'", str67, "minutes");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test16757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16757");
        java.util.Date date6 = new java.util.Date(292269054, (-1), (int) (short) 0, 56, 36002097, 86);
        java.util.Date date12 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date12.setMonth((int) ' ');
        java.util.Date date20 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromDateFields(date20);
        boolean boolean22 = date12.before(date20);
        int int23 = date20.getTimezoneOffset();
        java.util.Date date30 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean31 = date20.after(date30);
        date30.setMonth(5);
        date30.setMonth(0);
        date30.setMinutes(10);
        boolean boolean38 = date6.before(date30);
        int int39 = date6.getTimezoneOffset();
        java.util.Date date41 = new java.util.Date((-543196800000L));
        int int42 = date41.getDate();
        boolean boolean43 = date6.after(date41);
        int int44 = date41.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Thu May 16 18:58:26 UTC 292271022");
        org.junit.Assert.assertEquals(date12.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date20.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Jan 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals(date41.toString(), "Wed Oct 15 00:00:00 UTC 1952");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
    }

    @Test
    public void test16758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16758");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(28265071, 292269054, 999, 587852, 0, 8605);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 587852 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16759");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.halfdayOfDay();
        org.joda.time.DurationField durationField26 = dateTimeField25.getRangeDurationField();
        long long29 = dateTimeField25.getDifferenceAsLong((long) 30, 36000090L);
        boolean boolean30 = dateTimeField25.isLenient();
        int int33 = dateTimeField25.getDifference((-63035999894L), 86L);
        long long35 = dateTimeField25.roundHalfFloor((long) 59);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1459) + "'", int33 == (-1459));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test16760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16760");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("23:59:50.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16761");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        int int10 = dateTime7.getHourOfDay();
        org.joda.time.DateTime.Property property11 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(0);
        org.joda.time.DateTime dateTime16 = dateTime12.plusYears(1977);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test16762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16762");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getCountry();
        java.lang.String str36 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localTime31, locale33);
        int int37 = localTime31.getHourOfDay();
        java.lang.String str38 = localTime31.toString();
        org.joda.time.LocalTime.Property property39 = localTime31.minuteOfHour();
        org.joda.time.LocalTime localTime40 = property39.withMaximumValue();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "US" + "'", str35, "US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "10" + "'", str36, "10");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10:00:00.097" + "'", str38, "10:00:00.097");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test16763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16763");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(1);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        int int15 = dateTime14.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime14.withTime(84326400, 970, (-68), 36000156);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 84326400 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test16764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16764");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar.Builder builder52 = builder50.setLenient(true);
        java.util.Calendar.Builder builder56 = builder52.setDate(161, 2000, 21);
        java.util.Calendar.Builder builder60 = builder52.setTimeOfDay((-1644572712), 7, (-2));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder63 = builder52.set(107, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573085319,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=319,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test16765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16765");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        int int8 = gregorianCalendar7.getFirstDayOfWeek();
        java.lang.String str9 = gregorianCalendar7.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.util.GregorianCalendar[time=-8380800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=269,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str9, "java.util.GregorianCalendar[time=-8380800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=269,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test16766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16766");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.plus(readablePeriod26);
        org.joda.time.DateTime dateTime29 = dateTime7.plusYears(2);
        org.joda.time.DateTime dateTime31 = dateTime7.plusSeconds(4);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(0);
        org.joda.time.DateTime dateTime40 = dateTime36.plusMinutes(1);
        org.joda.time.DateTime dateTime42 = dateTime40.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withPeriodAdded(readablePeriod43, 36000097);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DateTime dateTime48 = dateTime7.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.yearOfCentury();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField51 = chronology46.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.yearOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test16767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16767");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.LocalTime localTime14 = localTime5.minusSeconds(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy(10);
        int int20 = dateTime19.getYearOfCentury();
        org.joda.time.DateTime dateTime21 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.minus(readableDuration22);
        org.joda.time.DateMidnight dateMidnight24 = dateTime19.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime19.withMinuteOfHour(32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.100" + "'", str8, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test16768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16768");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(70);
        long long4 = dateTimeZone2.convertUTCToLocal(259200009L);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(662695992000000000L, dateTimeZone2);
        boolean boolean7 = dateTimeZone2.isStandardOffset((long) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 511200009L + "'", long4 == 511200009L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test16769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16769");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        int int27 = calendar26.getFirstDayOfWeek();
        java.time.Instant instant28 = calendar26.toInstant();
        java.lang.String str29 = calendar26.getCalendarType();
        calendar26.setTimeInMillis((long) 121);
        java.time.Instant instant32 = calendar26.toInstant();
        java.util.Date date33 = java.util.Date.from(instant32);
        java.lang.String str34 = date33.toGMTString();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "KOR" + "'", str19, "KOR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko-KR" + "'", str20, "ko-KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Corea del Sud" + "'", str22, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=121,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=121,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "gregory" + "'", str29, "gregory");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str34, "1 Jan 1970 00:00:00 GMT");
    }

    @Test
    public void test16770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16770");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale11.getDisplayVariant(locale12);
        java.lang.String str18 = locale10.getDisplayScript(locale12);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale12);
        java.lang.String str20 = dateTime4.toString("-1", locale12);
        org.joda.time.DateTime dateTime22 = dateTime4.plus((long) 139680);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        java.util.Date date30 = new java.util.Date(15, 985, (-979), 1970, 292269054, 9);
        java.util.Date date37 = new java.util.Date(59, 97, 4, (int) (byte) 0, 17, (int) (short) 1);
        java.time.Instant instant38 = date37.toInstant();
        boolean boolean39 = date30.after(date37);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromDateFields(date37);
        int int41 = localTime40.size();
        int int42 = localTime40.size();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = property23.compareTo((org.joda.time.ReadablePartial) localTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "KOR" + "'", str13, "KOR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Corea del Sud" + "'", str16, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644573085493,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=493,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(date30.toString(), "Wed Apr 29 16:54:09 UTC 2550");
        org.junit.Assert.assertEquals(date37.toString(), "Sat Feb 04 00:17:01 UTC 1967");
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test16771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16771");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.Chronology chronology26 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology26.months();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology26.add(readablePeriod30, 1130923506332822100L, 252690035);
        org.joda.time.DateTimeField dateTimeField34 = chronology26.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1130923506332822100L + "'", long33 == 1130923506332822100L);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test16772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16772");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime22.minusSeconds(27408600);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        int int29 = dateTimeZone27.getOffset((long) 292269054);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test16773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16773");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 738196);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("italiano (Italia)", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test16774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16774");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localTime5.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localTime15.get(dateTimeFieldType18);
        int int20 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime localTime22 = localTime5.plusHours((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology27);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        java.lang.String str32 = dateTimeField30.getAsShortText((long) 121);
        org.joda.time.DurationField durationField33 = dateTimeField30.getRangeDurationField();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int48 = dateTimeZone46.getStandardOffset((-1L));
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone46);
        int int50 = localTime49.getMillisOfSecond();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime55 = property53.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 100, chronology57);
        int int59 = localTime58.getMillisOfSecond();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 100, chronology61);
        boolean boolean63 = localTime58.isAfter((org.joda.time.ReadablePartial) localTime62);
        int int64 = property53.compareTo((org.joda.time.ReadablePartial) localTime58);
        java.lang.String str65 = localTime58.toString();
        org.joda.time.LocalTime localTime67 = localTime58.minusSeconds(100);
        int[] intArray68 = localTime67.getValues();
        int int69 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime49, intArray68);
        boolean boolean70 = localTime22.isBefore((org.joda.time.ReadablePartial) localTime49);
        org.joda.time.LocalTime.Property property71 = localTime49.minuteOfHour();
        org.joda.time.LocalTime localTime73 = property71.addCopy((long) (-9));
        org.joda.time.LocalTime localTime75 = localTime73.minusMillis(0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "121" + "'", str32, "121");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "00:00:00.100" + "'", str65, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[23, 58, 20, 100]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 999 + "'", int69 == 999);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime75);
    }

    @Test
    public void test16775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16775");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        java.lang.String str8 = dateTime1.toString();
        java.util.Date date14 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromDateFields(date14);
        org.joda.time.LocalTime.Property property16 = localTime15.minuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.LocalTime localTime25 = property23.getLocalTime();
        org.joda.time.LocalTime localTime26 = property23.roundCeilingCopy();
        boolean boolean27 = property23.isLeap();
        org.joda.time.LocalTime localTime28 = property23.withMinimumValue();
        org.joda.time.LocalTime localTime29 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean31 = localTime29.isSupported(dateTimeFieldType30);
        int int32 = localTime15.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.DurationField durationField37 = chronology35.halfdays();
        org.joda.time.DurationField durationField38 = chronology35.minutes();
        boolean boolean39 = dateTimeFieldType30.isSupported(chronology35);
        boolean boolean40 = dateTime1.isSupported(dateTimeFieldType30);
        int int41 = dateTime1.getSecondOfMinute();
        org.joda.time.Instant instant42 = dateTime1.toInstant();
        boolean boolean43 = dateTime1.isAfterNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str8, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(date14.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test16776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16776");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, 680, 8, 540, 43890035, (-587852));
        java.lang.String str7 = date6.toGMTString();
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 05 21:17:28 UTC 2039");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "5 Mar 2039 21:17:28 GMT" + "'", str7, "5 Mar 2039 21:17:28 GMT");
    }

    @Test
    public void test16777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16777");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll((int) (short) 10, (int) (byte) 10);
        calendar0.setLenient(true);
        int int7 = calendar0.getMaximum(8);
        int int8 = calendar0.getWeekYear();
        java.util.Date date9 = calendar0.getTime();
        date9.setDate(1439);
        int int12 = date9.getYear();
        date9.setMinutes((int) (byte) 10);
        int int15 = date9.getMinutes();
        java.lang.String str16 = date9.toGMTString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644565885649,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=51,SECOND=25,MILLISECOND=649,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Jan 09 07:10:25 UTC 2026");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 126 + "'", int12 == 126);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9 Jan 2026 07:10:25 GMT" + "'", str16, "9 Jan 2026 07:10:25 GMT");
    }

    @Test
    public void test16778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16778");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        int int19 = dateTime12.getEra();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology29.getZone();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Chronology chronology43 = chronology29.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfWeek();
        boolean boolean45 = durationFieldType20.isSupported(chronology43);
        org.joda.time.DateTime dateTime47 = dateTime12.withFieldAdded(durationFieldType20, 985);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime50.minusDays((int) 'a');
        org.joda.time.DateTime dateTime54 = dateTime53.toDateTime();
        org.joda.time.DateTime dateTime56 = dateTime54.minusMillis((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withDurationAdded(readableDuration57, 53);
        boolean boolean61 = dateTime56.isBefore((long) (byte) 1);
        boolean boolean62 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime56);
        int int63 = dateTime47.getSecondOfMinute();
        org.joda.time.DateTime.Property property64 = dateTime47.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hours" + "'", str21, "hours");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test16779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16779");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        int int14 = dateTimeField7.getMaximumValue((long) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology19);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = dateTimeField22.getAsText(32770, locale24);
        java.lang.String str28 = dateTimeField22.getName();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale35.getDisplayVariant(locale36);
        java.lang.String str42 = locale34.getDisplayScript(locale36);
        java.lang.String str43 = dateTimeField32.getAsShortText((long) 0, locale36);
        int int44 = dateTimeField22.getMaximumTextLength(locale36);
        int int45 = dateTimeField7.getMaximumShortTextLength(locale36);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 100, chronology47);
        int int49 = localTime48.getMillisOfSecond();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 100, chronology51);
        boolean boolean53 = localTime48.isAfter((org.joda.time.ReadablePartial) localTime52);
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale56.getDisplayVariant();
        java.lang.String str59 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime48, 121, locale56);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 100, chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean64 = localTime62.isSupported(dateTimeFieldType63);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromCalendarFields(calendar65);
        int int67 = localTime62.compareTo((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.DateTime dateTime68 = localTime62.toDateTimeToday();
        org.joda.time.LocalTime localTime70 = localTime62.withMillisOfDay(9);
        org.joda.time.LocalTime.Property property71 = localTime62.secondOfMinute();
        org.joda.time.LocalTime.Property property72 = localTime62.hourOfDay();
        org.joda.time.LocalTime localTime73 = property72.roundFloorCopy();
        org.joda.time.LocalTime localTime74 = property72.withMinimumValue();
        org.joda.time.LocalTime.Property property75 = localTime74.hourOfDay();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology80);
        org.joda.time.LocalTime.Property property82 = localTime81.millisOfSecond();
        org.joda.time.LocalTime localTime83 = property82.withMaximumValue();
        org.joda.time.LocalTime localTime84 = property82.getLocalTime();
        int int85 = localTime84.size();
        org.joda.time.LocalTime localTime87 = localTime84.withMillisOfSecond(53);
        int[] intArray88 = localTime87.getValues();
        int int89 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localTime74, intArray88);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str26, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "32770" + "'", str27, "32770");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfSecond" + "'", str28, "millisOfSecond");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "KOR" + "'", str37, "KOR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ko-KR" + "'", str38, "ko-KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Corea del Sud" + "'", str40, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str57, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "121" + "'", str59, "121");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573085686,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=686,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 0, 0, 53]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test16780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16780");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        int int11 = dateTime9.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test16781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16781");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property23 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime25 = property23.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.minus(readablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZone(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime34 = dateTime31.withField(dateTimeFieldType32, 1);
        org.joda.time.DateTime.Property property35 = dateTime31.weekyear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.plus((long) (byte) -1);
        int int39 = dateTime36.getDayOfWeek();
        int int40 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime18.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test16782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16782");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str9 = dateTimeField7.getAsShortText((long) 121);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 100, locale11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        long long23 = dateTimeField21.roundFloor((long) (short) 100);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category24, locale25);
        int int27 = dateTimeField21.getMaximumTextLength(locale25);
        java.lang.String str28 = dateTimeField7.getAsShortText((int) (byte) 1, locale25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        int int36 = localTime34.size();
        org.joda.time.LocalTime localTime38 = localTime34.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime40 = localTime34.minusSeconds((int) 'a');
        int int41 = localTime34.size();
        org.joda.time.LocalTime localTime43 = localTime34.plusMillis(2000);
        org.joda.time.LocalTime localTime45 = localTime43.withMillisOfDay(8);
        int int46 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.Chronology chronology47 = localTime43.getChronology();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "121" + "'", str9, "121");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100" + "'", str12, "100");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test16783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField16 = chronology12.eras();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology12.add(readablePeriod17, (long) 345, 79200152);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 345L + "'", long20 == 345L);
    }

    @Test
    public void test16784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16784");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.withPeriodAdded(readablePeriod2, 24);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        long long8 = dateTimeZone5.nextTransition((-49881518L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-49881518L) + "'", long8 == (-49881518L));
    }

    @Test
    public void test16785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16785");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfDay((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime5.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime5.withMillisOfDay(7);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale22 = new java.util.Locale("UTC", "Italie");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 10);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = dateTimeField36.getAsText(32770, locale38);
        java.lang.String str42 = locale28.getDisplayLanguage(locale38);
        java.lang.String str43 = dateTimeZone24.getShortName((long) 6, locale38);
        java.lang.String str44 = locale22.getDisplayVariant(locale38);
        java.util.Locale.Builder builder45 = builder19.setLocale(locale38);
        java.util.Calendar calendar46 = dateTime5.toCalendar(locale38);
        long long47 = calendar46.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            calendar46.setWeekDate(35303, 431, 61140000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 61140000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86340000 + "'", int10 == 86340000);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals(locale22.toString(), "utc_ITALIE");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str40, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "32770" + "'", str41, "32770");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str42, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-60000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-60000L) + "'", long47 == (-60000L));
    }

    @Test
    public void test16786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16786");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str21 = locale7.getDisplayLanguage(locale17);
        int int22 = property4.getMaximumShortTextLength(locale17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) 'a');
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) 70);
        java.lang.String str43 = dateTimeZone39.getShortName(1L);
        long long47 = dateTimeZone39.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime48 = dateTime27.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime50 = dateTime48.plusMillis(11);
        long long51 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property52 = dateTime48.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = property52.setCopy("1969-12-29T00:00:00.000+00:00:00.009");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-29T00:00:00.000+00:00:00.009\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str21, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test16787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16787");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes((-35999977));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime3.toString(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573085844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "09:51:25.844" + "'", str7, "09:51:25.844");
    }

    @Test
    public void test16788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16788");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        java.lang.String str4 = calendar0.getCalendarType();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        java.lang.String str6 = calendar0.getCalendarType();
        calendar0.set(41, 588, 32000, 540, 86399991, 2044);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=41,MONTH=588,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=32000,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=540,MINUTE=86399991,SECOND=2044,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gregory" + "'", str6, "gregory");
    }

    @Test
    public void test16789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16789");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("100");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.LocalTime localTime17 = property16.withMaximumValue();
        org.joda.time.LocalTime localTime18 = property16.getLocalTime();
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(2);
        org.joda.time.DateTime dateTime22 = localTime21.toDateTimeToday();
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology28);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = dateTimeField31.getAsText(32770, locale33);
        java.lang.String str38 = dateTimeField31.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        int int42 = localTime41.getMillisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        boolean boolean46 = localTime41.isAfter((org.joda.time.ReadablePartial) localTime45);
        int int47 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localTime41);
        java.lang.String str48 = dateTimeField31.getName();
        java.util.Date date54 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.fromDateFields(date54);
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.lang.String str58 = locale57.getISO3Country();
        java.lang.String str59 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localTime55, (int) 'a', locale57);
        java.lang.String str60 = locale57.getDisplayCountry();
        int int61 = property23.getMaximumShortTextLength(locale57);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.util.Locale locale76 = java.util.Locale.KOREA;
        java.lang.String str77 = locale76.getISO3Country();
        java.lang.String str78 = locale76.toLanguageTag();
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = locale76.getDisplayCountry(locale79);
        java.lang.String str81 = locale75.getDisplayVariant(locale76);
        java.lang.String str82 = locale74.getDisplayScript(locale76);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone71, locale74);
        boolean boolean84 = property23.equals((java.lang.Object) timeZone71);
        org.joda.time.DateTime dateTime86 = property23.addToCopy(1981);
        java.util.Locale locale87 = java.util.Locale.KOREA;
        java.util.Locale locale88 = java.util.Locale.FRENCH;
        java.lang.String str89 = locale87.getDisplayName(locale88);
        java.lang.String str90 = locale87.getISO3Language();
        java.lang.String str91 = locale87.getDisplayLanguage();
        int int92 = property23.getMaximumTextLength(locale87);
        java.util.Locale.Builder builder93 = builder7.setLocale(locale87);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder95 = builder93.setRegion("Italy");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Italy [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str35, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "32770" + "'", str36, "32770");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 999 + "'", int47 == 999);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "millisOfSecond" + "'", str48, "millisOfSecond");
        org.junit.Assert.assertEquals(date54.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "KOR" + "'", str58, "KOR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "97" + "'", str59, "97");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "S\374dkorea" + "'", str60, "S\374dkorea");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "KOR" + "'", str77, "KOR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ko-KR" + "'", str78, "ko-KR");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Corea del Sud" + "'", str80, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1644573085880,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=25,MILLISECOND=880,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str89, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "kor" + "'", str90, "kor");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Koreanisch" + "'", str91, "Koreanisch");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test16790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16790");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(1920000L, 32000);
        org.joda.time.DateTime dateTime18 = dateTime12.withMillisOfSecond(36);
        org.joda.time.DateTime dateTime20 = dateTime12.plusHours(81);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test16791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16791");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 36000097);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) 1970);
        long long23 = dateTimeZone17.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays(0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks(23);
        boolean boolean32 = dateTime28.isEqual(132L);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime28.withDurationAdded(readableDuration33, 292278993);
        org.joda.time.LocalDateTime localDateTime36 = dateTime28.toLocalDateTime();
        boolean boolean37 = dateTimeZone17.isLocalDateTimeGap(localDateTime36);
        java.lang.String str39 = dateTimeZone17.getNameKey(129317144400000L);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime41 = dateTime15.toDateTime(dateTimeZone17);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-251999990L) + "'", long23 == (-251999990L));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test16792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16792");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getCountry();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getLanguage();
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale0.getDisplayVariant(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "IT" + "'", str3, "IT");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test16793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16793");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property23.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = property23.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.String str35 = localTime28.toString();
        boolean boolean36 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes(1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(985);
        org.joda.time.DateTime dateTime51 = dateTime47.plus((long) 18);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTime();
        org.joda.time.DateTime dateTime54 = dateTime52.withMillis(6000L);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        calendar55.setTimeInMillis(100L);
        boolean boolean58 = calendar55.isWeekDateSupported();
        calendar55.roll(2, false);
        calendar55.setTimeInMillis(0L);
        java.util.TimeZone timeZone64 = calendar55.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        int int68 = dateTimeZone66.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance();
        calendar69.setTimeInMillis(100L);
        boolean boolean72 = calendar69.isWeekDateSupported();
        calendar69.roll(2, false);
        calendar69.setTimeInMillis(0L);
        java.util.TimeZone timeZone78 = calendar69.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        long long81 = dateTimeZone66.getMillisKeepLocal(dateTimeZone79, (long) 2);
        boolean boolean82 = dateTimeZone79.isFixed();
        long long85 = dateTimeZone79.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime86 = org.joda.time.LocalTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime.Property property88 = dateTime87.weekyear();
        boolean boolean89 = dateTime54.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime.Property property90 = dateTime87.dayOfMonth();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "00:00:00.100" + "'", str35, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 2L + "'", long81 == 2L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 139680L + "'", long85 == 139680L);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test16794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16794");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime7.dayOfYear();
        org.joda.time.DateTime.Property property13 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str9, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test16795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16795");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("79200020");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16796");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 10, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime34 = localTime31.toDateTimeToday(dateTimeZone33);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology39);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfSecond();
        int int42 = localTime40.size();
        org.joda.time.LocalTime localTime44 = localTime40.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime46 = localTime40.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 100, chronology48);
        int int50 = localTime49.getMillisOfSecond();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 100, chronology52);
        boolean boolean54 = localTime49.isAfter((org.joda.time.ReadablePartial) localTime53);
        boolean boolean55 = localTime46.isEqual((org.joda.time.ReadablePartial) localTime53);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property60 = dateTime57.weekyear();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime64 = dateTime62.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime62.minus(readablePeriod65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.withZone(dateTimeZone67);
        boolean boolean69 = localTime46.equals((java.lang.Object) dateTimeZone67);
        org.joda.time.LocalTime localTime71 = localTime46.minusMinutes(0);
        boolean boolean72 = localTime31.isEqual((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 0);
        int int75 = dateTime74.getEra();
        org.joda.time.DateTime dateTime76 = dateTime74.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime78 = dateTime74.minusMinutes(1);
        org.joda.time.DateTime.Property property79 = dateTime78.millisOfDay();
        java.util.Locale locale80 = java.util.Locale.KOREA;
        java.lang.String str81 = locale80.getISO3Country();
        java.lang.String str82 = locale80.toLanguageTag();
        java.util.Locale locale83 = java.util.Locale.ITALY;
        java.lang.String str84 = locale80.getDisplayCountry(locale83);
        java.lang.String str85 = property79.getAsText(locale80);
        org.joda.time.DateTime dateTime86 = property79.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.DateTime dateTime88 = dateTime86.plus(readableDuration87);
        org.joda.time.DateTime dateTime90 = dateTime88.minusMillis(86);
        org.joda.time.DateTime dateTime91 = localTime31.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = dateTime91.withMonthOfYear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "KOR" + "'", str81, "KOR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ko-KR" + "'", str82, "ko-KR");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Corea del Sud" + "'", str84, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "86340000" + "'", str85, "86340000");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test16797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16797");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        int int19 = dateTime17.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test16798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16798");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("26 Apr 2433 00:00:00 GMT", (double) 35449623L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.5449623E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16799");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        int int26 = dateTimeField24.getLeapAmount((-120000L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test16800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField20 = chronology12.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test16801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16801");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale11.getDisplayVariant(locale12);
        java.lang.String str18 = locale10.getDisplayScript(locale12);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale12);
        java.lang.String str20 = dateTime4.toString("-1", locale12);
        org.joda.time.DateTime dateTime22 = dateTime4.plus((long) 139680);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        java.util.GregorianCalendar gregorianCalendar24 = dateTime22.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = gregorianCalendar24.isSet((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "KOR" + "'", str13, "KOR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Corea del Sud" + "'", str16, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644573086155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=155,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
    }

    @Test
    public void test16802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16802");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("java.util.GregorianCalendar[time=1644565765539,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=49,SECOND=25,MILLISECOND=539,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16803");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property6.addCopy(6);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        int int13 = property6.get();
        org.joda.time.LocalTime localTime14 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property6.withMaximumValue();
        org.joda.time.DurationField durationField16 = property6.getLeapDurationField();
        org.joda.time.LocalTime localTime17 = property6.roundHalfEvenCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 100, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromCalendarFields(calendar23);
        int int25 = localTime20.compareTo((org.joda.time.ReadablePartial) localTime24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        java.lang.String str27 = calendar26.getCalendarType();
        java.time.Instant instant28 = calendar26.toInstant();
        int int29 = calendar26.getWeekYear();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromCalendarFields(calendar26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localTime30.getFieldTypes();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localTime32.getFieldType(0);
        org.joda.time.LocalTime localTime36 = localTime30.withField(dateTimeFieldType34, (int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType34.getDurationType();
        org.joda.time.LocalTime localTime39 = localTime24.withFieldAdded(durationFieldType37, 58620000);
        boolean boolean40 = localTime17.isSupported(durationFieldType37);
        java.lang.String str41 = durationFieldType37.toString();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644573086182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573086182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
    }

    @Test
    public void test16804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16804");
        java.util.Locale locale2 = new java.util.Locale("centuryOfEra", "1970-01-01T00:00:00.000+00:00:00.009");
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        org.junit.Assert.assertEquals(locale2.toString(), "centuryofera_1970-01-01T00:00:00.000+00:00:00.009");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test16805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16805");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime1.plusHours(6);
        org.joda.time.DateTime dateTime17 = dateTime1.minus((-1L));
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.withLaterOffsetAtOverlap();
        boolean boolean21 = dateTime19.isBefore(1644572776274L);
        org.joda.time.Instant instant22 = dateTime19.toInstant();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test16806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16806");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        int int5 = dateTime4.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        java.lang.String str11 = localTime8.toString();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(121);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.Chronology chronology15 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTime dateTime17 = dateTime2.withChronology(chronology15);
        org.joda.time.DateTime dateTime19 = dateTime2.withYearOfEra(40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "00:00:00.100" + "'", str11, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test16807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16807");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property8 = localTime2.secondOfMinute();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalTime localTime11 = property8.addCopy(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalTime localTime20 = property18.getLocalTime();
        org.joda.time.LocalTime localTime22 = property18.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime24 = property18.addWrapFieldToCopy(8);
        org.joda.time.LocalTime localTime25 = property18.getLocalTime();
        org.joda.time.LocalTime localTime27 = localTime25.withSecondOfMinute(0);
        boolean boolean28 = localTime11.isAfter((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime.Property property29 = localTime11.hourOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property34 = dateTime31.weekyear();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.minus(readablePeriod39);
        int int41 = dateTime40.getMonthOfYear();
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds(5);
        boolean boolean45 = localTime11.equals((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime47 = dateTime42.plusSeconds(26356320);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573086309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test16808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16808");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime18.getYearOfCentury();
        org.joda.time.DateTime.Property property21 = dateTime18.hourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test16809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16809");
        java.util.Locale locale2 = new java.util.Locale("1320", "Chinesisch");
        java.lang.String str3 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "1320_CHINESISCH");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHINESISCH" + "'", str3, "CHINESISCH");
    }

    @Test
    public void test16810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16810");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.DurationField durationField14 = chronology12.weeks();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00:00:00.100" + "'", str8, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test16811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16811");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.halfdayOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573086382,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=382,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test16812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16812");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.setLanguage("weeks");
        java.util.Locale locale4 = builder1.build();
        boolean boolean5 = locale4.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "weeks");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test16813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16813");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.lang.String str45 = locale41.getDisplayLanguage(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.toLanguageTag();
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.lang.String str52 = locale48.getDisplayCountry(locale51);
        java.lang.String str53 = locale47.getDisplayVariant(locale48);
        java.lang.String str54 = locale46.getDisplayScript(locale48);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale48);
        java.lang.String str56 = locale44.getDisplayName(locale48);
        java.util.Calendar.Builder builder57 = builder7.setLocale(locale48);
        java.util.Date date61 = new java.util.Date((int) '4', 86399999, 4);
        java.util.Calendar.Builder builder62 = builder57.setInstant(date61);
        java.util.Calendar.Builder builder64 = builder62.setInstant((-251999990L));
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = locale66.toLanguageTag();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale66.getDisplayCountry(locale69);
        java.lang.String str71 = locale65.getDisplayVariant(locale66);
        java.lang.String str72 = locale65.getVariant();
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale65.getDisplayCountry(locale73);
        java.util.Calendar.Builder builder75 = builder62.setLocale(locale73);
        java.lang.String str76 = property6.getAsShortText(locale73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = property6.setCopy(14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "KOR" + "'", str49, "KOR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ko-KR" + "'", str50, "ko-KR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Corea del Sud" + "'", str52, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1644573086402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=402,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str56, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals(date61.toString(), "Tue Dec 04 00:00:00 UTC 7201951");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "KOR" + "'", str67, "KOR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ko-KR" + "'", str68, "ko-KR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Corea del Sud" + "'", str70, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str74, "\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u6728" + "'", str76, "\u6728");
    }

    @Test
    public void test16814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16814");
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setTimeInMillis(100L);
        boolean boolean10 = calendar7.isWeekDateSupported();
        calendar7.roll(2, false);
        calendar7.setTimeInMillis(0L);
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone31, (long) 2);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone18);
        int int36 = dateTimeZone18.getOffsetFromLocal((long) 14);
        java.lang.String str37 = dateTimeZone18.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
    }

    @Test
    public void test16815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16815");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        int int18 = dateTime14.getWeekyear();
        int int19 = dateTime14.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime14.getZone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test16816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16816");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        gregorianCalendar35.roll(12, false);
        boolean boolean39 = gregorianCalendar35.isWeekDateSupported();
        int int40 = gregorianCalendar35.getWeekYear();
        gregorianCalendar35.set((int) '4', (int) (byte) 0, 1439, 268, 363, 39);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean52 = localTime50.isSupported(dateTimeFieldType51);
        org.joda.time.LocalTime localTime54 = localTime50.plusMillis(52);
        org.joda.time.LocalTime localTime56 = localTime50.minusSeconds((int) (byte) 100);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance();
        java.lang.String str58 = calendar57.getCalendarType();
        java.time.Instant instant59 = calendar57.toInstant();
        int int60 = calendar57.getWeekYear();
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromCalendarFields(calendar57);
        boolean boolean62 = localTime56.isBefore((org.joda.time.ReadablePartial) localTime61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(16, 17);
        org.joda.time.DateTime dateTime66 = localTime61.toDateTimeToday(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone65);
        boolean boolean68 = gregorianCalendar35.before((java.lang.Object) dateTimeZone65);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644573086472,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=472,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "gregory" + "'", str58, "gregory");
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test16817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime2.withPeriodAdded(readablePeriod7, (int) (byte) -1);
        int int10 = localTime9.getSecondOfMinute();
        org.joda.time.Chronology chronology11 = localTime9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        long long16 = chronology11.add((long) 720, (-292275054L), 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 720L + "'", long16 == 720L);
    }

    @Test
    public void test16818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16818");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        org.joda.time.LocalTime localTime54 = property53.withMaximumValue();
        int int56 = localTime54.getValue(0);
        java.lang.String str57 = localTime54.toString();
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds(12);
        boolean boolean60 = localTime46.equals((java.lang.Object) localTime54);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalTime localTime62 = localTime46.plus(readablePeriod61);
        org.joda.time.LocalTime.Property property63 = localTime46.minuteOfHour();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime69 = dateTime65.withYear(1);
        org.joda.time.DateTime dateTime70 = localTime46.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalTime.Property property71 = localTime46.millisOfSecond();
        org.joda.time.LocalTime localTime73 = property71.addNoWrapToCopy(13);
        int int74 = property71.getMaximumValue();
        org.joda.time.LocalTime localTime75 = property71.getLocalTime();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10:00:00.999" + "'", str57, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 999 + "'", int74 == 999);
        org.junit.Assert.assertNotNull(localTime75);
    }

    @Test
    public void test16819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16819");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.dayOfWeek();
        boolean boolean14 = dateTimeField12.isLeap((long) 259200015);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test16820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16820");
        java.util.Locale locale3 = new java.util.Locale("weekOfWeekyear", "-58", "09:51:13.518");
        org.junit.Assert.assertEquals(locale3.toString(), "weekofweekyear_-58_09:51:13.518");
    }

    @Test
    public void test16821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16821");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalTime localTime21 = property19.getLocalTime();
        org.joda.time.LocalTime localTime22 = property19.roundCeilingCopy();
        boolean boolean23 = localTime2.equals((java.lang.Object) property19);
        org.joda.time.LocalTime localTime25 = localTime2.plusMinutes((int) (byte) 10);
        org.joda.time.LocalTime localTime27 = localTime2.plusHours(86);
        int int28 = localTime27.size();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.LocalTime localTime36 = property35.withMaximumValue();
        org.joda.time.LocalTime localTime37 = property35.getLocalTime();
        org.joda.time.LocalTime.Property property38 = localTime37.millisOfDay();
        org.joda.time.LocalTime localTime40 = property38.addCopy(2);
        org.joda.time.LocalTime localTime41 = property38.withMaximumValue();
        org.joda.time.LocalTime localTime43 = localTime41.plusMillis(59);
        org.joda.time.LocalTime localTime45 = localTime43.minusMillis(139680);
        org.joda.time.LocalTime localTime47 = localTime43.minusSeconds((int) (byte) 1);
        boolean boolean48 = localTime27.isEqual((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.LocalTime.Property property49 = localTime27.secondOfMinute();
        int int50 = localTime27.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
    }

    @Test
    public void test16822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16822");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        java.util.Date date13 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date13);
        boolean boolean15 = date5.before(date13);
        date5.setMinutes(1967);
        date5.setTime((long) 56);
        date5.setMinutes(86220268);
        date5.setMonth(960);
        date5.setDate(58620000);
        date5.setYear(800);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 15 04:28:00 UTC 163360");
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16823");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        java.lang.String str9 = dateTimeField8.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573086632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=632,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str9, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test16824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16824");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        int int3 = property2.getMaximumValue();
        org.joda.time.DateTime dateTime4 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(1980);
        org.joda.time.LocalDate localDate7 = dateTime6.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localDate7.getField(36002566);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 36002566");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 86399999 + "'", int3 == 86399999);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test16825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16825");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfHour();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone40, (long) 2);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone27.getName(8416800097L, locale44);
        long long49 = dateTimeZone27.convertLocalToUTC((-50399903L), true, (long) 71819990);
        java.util.TimeZone timeZone50 = dateTimeZone27.toTimeZone();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone27);
        java.util.TimeZone timeZone52 = dateTimeZone27.toTimeZone();
        boolean boolean53 = dateTime15.equals((java.lang.Object) timeZone52);
        int int54 = dateTime15.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-50399903L) + "'", long49 == (-50399903L));
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 19 + "'", int54 == 19);
    }

    @Test
    public void test16826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16826");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.minusDays((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology13.getZone();
        org.joda.time.DurationField durationField16 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(1979, (int) 'u', (int) (byte) 100, 973587, (-63119927), 36000097, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 973587 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test16827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16827");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-3564727L));
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test16828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16828");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(6);
        java.util.Date date16 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromDateFields(date16);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        int int24 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime23);
        boolean boolean25 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalTime localTime34 = property32.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalTime localTime36 = localTime34.plus(readablePeriod35);
        int int37 = localTime34.size();
        boolean boolean38 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.LocalTime localTime40 = localTime34.plusMillis(58620000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType42 = localTime34.getFieldType(86399993);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 86399993");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test16829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16829");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 10, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime31.plus(readablePeriod32);
        org.joda.time.LocalTime localTime35 = localTime33.minusSeconds(10);
        int[] intArray36 = localTime33.getValues();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes(1);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfYear();
        org.joda.time.DateTime dateTime49 = property48.roundHalfCeilingCopy();
        boolean boolean50 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime49.getEra();
        org.joda.time.DateTime dateTime52 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime54 = dateTime49.minus((long) 79200000);
        org.joda.time.Chronology chronology55 = dateTime49.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime49.withWeekOfWeekyear((-2328));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2328 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test16830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16830");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property6 = dateTime5.monthOfYear();
        boolean boolean7 = localTime0.equals((java.lang.Object) dateTime5);
        org.joda.time.LocalTime localTime9 = localTime0.minusSeconds((-9));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 100, chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromCalendarFields(calendar15);
        int int17 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime16);
        int int18 = localTime12.getMinuteOfHour();
        org.joda.time.Chronology chronology19 = localTime12.getChronology();
        boolean boolean20 = localTime9.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str22 = dateTimeFieldType21.getName();
        boolean boolean23 = localTime12.isSupported(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644573086752,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=26,MILLISECOND=752,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "dayOfMonth" + "'", str22, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test16831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16831");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property23.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = property23.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.String str35 = localTime28.toString();
        boolean boolean36 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes(1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        int[] intArray48 = localTime28.getValues();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "00:00:00.100" + "'", str35, "00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 100]");
    }

    @Test
    public void test16832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16832");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.DurationField durationField14 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(268);
        org.joda.time.Chronology chronology18 = chronology10.withZone(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test16833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16833");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime20 = dateTime18.withMonthOfYear(10);
        int int21 = dateTime18.getMonthOfYear();
        org.joda.time.DateTime.Property property22 = dateTime18.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime18.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test16834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16834");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        org.joda.time.LocalTime localTime48 = property6.withMaximumValue();
        org.joda.time.DurationField durationField49 = property6.getRangeDurationField();
        org.joda.time.LocalTime localTime51 = property6.addNoWrapToCopy((int) (byte) 1);
        org.joda.time.LocalTime localTime52 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test16835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16835");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = dateTimeField26.getAsText(32770, locale28);
        int int33 = dateTimeField26.getMaximumValue((long) 0);
        int int34 = dateTime17.get(dateTimeField26);
        int int35 = dateTime3.get(dateTimeField26);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(0);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMinutes(1);
        org.joda.time.DateTime dateTime46 = dateTime44.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, 36000097);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime3.withChronology(chronology50);
        java.util.Date date52 = dateTime3.toDate();
        date52.setHours(32769);
        int int55 = date52.getMonth();
        int int56 = date52.getMinutes();
        int int57 = date52.getTimezoneOffset();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str30, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32770" + "'", str31, "32770");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999 + "'", int33 == 999);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Mon Jan 25 09:00:00 UTC 1971");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test16836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16836");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(4502724, 62220, 738196);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4502724 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16837");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 271);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        calendar4.setTimeInMillis(100L);
        boolean boolean7 = calendar4.isWeekDateSupported();
        calendar4.roll(2, false);
        calendar4.setTimeInMillis(0L);
        java.util.TimeZone timeZone13 = calendar4.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int17 = dateTimeZone15.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone15.getMillisKeepLocal(dateTimeZone28, (long) 2);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 8, dateTimeZone15);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(dateTimeZone15);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 10, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime35 = localTime33.plus(readablePeriod34);
        org.joda.time.LocalTime localTime37 = localTime35.minusSeconds(10);
        org.joda.time.DateTime dateTime38 = localTime35.toDateTimeToday();
        java.lang.String str40 = localTime35.toString("70");
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localTime41.getFieldType(0);
        int int44 = localTime35.indexOf(dateTimeFieldType43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int46 = localTime35.get(dateTimeFieldType45);
        boolean boolean47 = localTime1.isSupported(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2L + "'", long30 == 2L);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "70" + "'", str40, "70");
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test16838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16838");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.plus(readablePeriod26);
        int int28 = dateTime7.getDayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime7.minus(32770L);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime30.withMillisOfSecond(86340000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86340000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test16839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16839");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        java.util.Date date11 = new java.util.Date(79200000, 491, 0, (int) '#', 80, 139680);
        calendar0.setTime(date11);
        int int13 = calendar0.getMinimalDaysInFirstWeek();
        boolean boolean14 = calendar0.isWeekDateSupported();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=2499309680756880000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=79201940,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=338,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=8,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertEquals(date11.toString(), "Tue Dec 03 03:08:00 UTC 79201940");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test16840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16840");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(10800010, (int) (short) 1, 22, 1200, 86399948, 2008, 1438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16841");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(36000106, 7194237);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 7194237");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16842");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar.Builder builder52 = builder50.setLenient(true);
        java.util.Calendar.Builder builder56 = builder50.setDate(5, (int) '#', 57600000);
        java.util.Calendar.Builder builder60 = builder56.setTimeOfDay(277, 973587, (-587852));
        java.util.Calendar.Builder builder62 = builder56.setLenient(false);
        java.util.Date date68 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date68.setMonth((int) ' ');
        date68.setSeconds(0);
        java.lang.String str73 = date68.toGMTString();
        int int74 = date68.getDay();
        date68.setMonth(8);
        date68.setTime((long) 139680);
        int int79 = date68.getMinutes();
        int int80 = date68.getMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder81 = builder56.setInstant(date68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573087000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:02:19 UTC 1970");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "3 Sep 1902 23:17:00 GMT" + "'", str73, "3 Sep 1902 23:17:00 GMT");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test16843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16843");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 491);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology25);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = dateTimeField28.getAsText(32770, locale30);
        java.lang.String str35 = dateTimeField28.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        int int39 = localTime38.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        boolean boolean43 = localTime38.isAfter((org.joda.time.ReadablePartial) localTime42);
        int int44 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime38);
        java.lang.String str45 = dateTimeField28.getName();
        java.util.Date date51 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromDateFields(date51);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.getISO3Country();
        java.lang.String str56 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localTime52, (int) 'a', locale54);
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.lang.String str58 = locale54.getDisplayLanguage(locale57);
        java.util.Set<java.lang.Character> charSet59 = locale54.getExtensionKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter18.withLocale(locale54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = dateTimeFormatter18.parseDateTime("63");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str32, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "32770" + "'", str33, "32770");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "millisOfSecond" + "'", str45, "millisOfSecond");
        org.junit.Assert.assertEquals(date51.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "KOR" + "'", str55, "KOR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "97" + "'", str56, "97");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test16844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16844");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 100);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1970, dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.toString();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(dateTimeZone1);
        long long9 = dateTimeZone1.nextTransition(662695991999999999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 662695991999999999L + "'", long9 == 662695991999999999L);
    }

    @Test
    public void test16845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16845");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        java.lang.String str9 = property6.getAsString();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromCalendarFields(calendar10);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields(calendar10);
        int int13 = calendar10.getWeeksInWeekYear();
        calendar10.setMinimalDaysInFirstWeek(2);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) calendar10);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = dateTimeField33.getAsText(32770, locale35);
        java.lang.String str40 = dateTimeField33.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 100, chronology42);
        int int44 = localTime43.getMillisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        boolean boolean48 = localTime43.isAfter((org.joda.time.ReadablePartial) localTime47);
        int int49 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localTime43);
        java.lang.String str50 = dateTimeField33.getName();
        java.util.Date date56 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromDateFields(date56);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.lang.String str60 = locale59.getISO3Country();
        java.lang.String str61 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localTime57, (int) 'a', locale59);
        java.lang.String str62 = property24.getAsText(locale59);
        org.joda.time.LocalTime localTime64 = property24.addCopy(0L);
        org.joda.time.LocalTime localTime65 = property24.roundCeilingCopy();
        org.joda.time.LocalTime localTime66 = property24.withMaximumValue();
        org.joda.time.LocalTime.Property property67 = localTime66.millisOfDay();
        org.joda.time.LocalTime localTime68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime69 = dateTime16.withFields((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology74);
        org.joda.time.LocalTime.Property property76 = localTime75.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = property76.getField();
        org.joda.time.LocalTime localTime78 = property76.getLocalTime();
        org.joda.time.LocalTime localTime79 = property76.roundCeilingCopy();
        boolean boolean80 = property76.isLeap();
        org.joda.time.LocalTime localTime81 = property76.withMinimumValue();
        org.joda.time.LocalTime localTime82 = property76.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean84 = localTime82.isSupported(dateTimeFieldType83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = localTime82.getFieldType(0);
        java.lang.String str87 = dateTimeFieldType86.toString();
        int int88 = localTime68.get(dateTimeFieldType86);
        int int89 = property6.compareTo((org.joda.time.ReadablePartial) localTime68);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "97" + "'", str9, "97");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644573087067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=2,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=27,MILLISECOND=67,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 09:51:27 UTC 2022");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str37, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32770" + "'", str38, "32770");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 999 + "'", int49 == 999);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "millisOfSecond" + "'", str50, "millisOfSecond");
        org.junit.Assert.assertEquals(date56.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "KOR" + "'", str60, "KOR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "97" + "'", str61, "97");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "97" + "'", str62, "97");
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hourOfDay" + "'", str87, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test16846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16846");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        boolean boolean66 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter68.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 121L + "'", long64 == 121L);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
    }

    @Test
    public void test16847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16847");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale1.getDisplayVariant(locale2);
        java.lang.String str8 = locale0.getDisplayScript(locale2);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale2);
        boolean boolean10 = calendar9.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KOR" + "'", str3, "KOR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko-KR" + "'", str4, "ko-KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Corea del Sud" + "'", str6, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573087149,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=27,MILLISECOND=149,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test16848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16848");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime14 = property13.roundHalfCeilingCopy();
        java.lang.String str15 = property13.getAsString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.LocalTime localTime23 = dateTime17.toLocalTime();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setTimeInMillis(100L);
        boolean boolean27 = calendar24.isWeekDateSupported();
        calendar24.roll(2, false);
        calendar24.setTimeInMillis(0L);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int37 = dateTimeZone35.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.setTimeInMillis(100L);
        boolean boolean41 = calendar38.isWeekDateSupported();
        calendar38.roll(2, false);
        calendar38.setTimeInMillis(0L);
        java.util.TimeZone timeZone47 = calendar38.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        long long50 = dateTimeZone35.getMillisKeepLocal(dateTimeZone48, (long) 2);
        boolean boolean51 = dateTimeZone48.isFixed();
        long long54 = dateTimeZone48.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(dateTimeZone48);
        org.joda.time.LocalTime localTime56 = localTime23.withFields((org.joda.time.ReadablePartial) localTime55);
        int int57 = property13.compareTo((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.DateTime dateTime58 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime60 = dateTime58.minusYears(3);
        boolean boolean62 = dateTime60.isAfter(25200052L);
        org.joda.time.DateTime dateTime64 = dateTime60.plus(840000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 139680L + "'", long54 == 139680L);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test16849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16849");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusHours((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime3.withMillisOfDay(1);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(0);
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 2);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DateTime dateTime30 = dateTime14.toDateTime(chronology27);
        org.joda.time.DurationField durationField31 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfDay();
        org.joda.time.DurationField durationField33 = chronology27.seconds();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test16850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16850");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str21 = locale7.getDisplayLanguage(locale17);
        int int22 = property4.getMaximumShortTextLength(locale17);
        long long23 = property4.remainder();
        org.joda.time.DateTime dateTime24 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str21, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 259200000L + "'", long23 == 259200000L);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test16851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16851");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 121);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter10.withZone(dateTimeZone22);
        int int26 = dateTimeFormatter10.getDefaultYear();
        int int27 = dateTimeFormatter10.getDefaultYear();
        boolean boolean28 = dateTimeFormatter10.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 11);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.Chronology chronology52 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField53 = chronology52.seconds();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.halfdayOfDay();
        org.joda.time.Chronology chronology57 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter30.withChronology(chronology52);
        org.joda.time.format.DateTimeParser dateTimeParser60 = dateTimeFormatter30.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = dateTimeFormatter30.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(dateTimeParser60);
        org.junit.Assert.assertNull(dateTimePrinter61);
    }

    @Test
    public void test16852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16852");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        boolean boolean66 = dateTimeFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime68 = dateTimeFormatter2.parseLocalTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(calendar47);
        org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 121L + "'", long64 == 121L);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test16853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16853");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.withMinimumValue();
        org.joda.time.LocalTime localTime62 = localTime60.minusMillis(10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573087294,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=27,MILLISECOND=294,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
    }

    @Test
    public void test16854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16854");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        int int10 = property8.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
    }

    @Test
    public void test16855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16855");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.withDurationAdded(139680L, (-1));
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds(15);
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears(269);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZone(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime29 = dateTime26.withField(dateTimeFieldType27, 1);
        org.joda.time.DateTime dateTime31 = dateTime29.withYear(15);
        org.joda.time.LocalTime localTime32 = dateTime29.toLocalTime();
        boolean boolean33 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime35 = dateTime10.plusDays(86399991);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test16856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16856");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        java.lang.String str12 = property6.getAsText(locale7);
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField14 = property6.getRangeDurationField();
        org.joda.time.DateTime dateTime16 = property6.addWrapFieldToCopy(2000);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withYearOfCentury((-1368));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1368 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "KOR" + "'", str8, "KOR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Corea del Sud" + "'", str11, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "86340000" + "'", str12, "86340000");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test16857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16857");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        java.util.Date date11 = new java.util.Date((int) (short) 100, (int) (byte) 100, 2, 70, 1970, 1969);
        calendar0.setTime(date11);
        int int13 = calendar0.getFirstDayOfWeek();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        long long26 = dateTimeField24.roundFloor((long) (short) 100);
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category27, locale28);
        int int30 = dateTimeField24.getMaximumTextLength(locale28);
        boolean boolean31 = locale28.hasExtensions();
        java.util.Locale.setDefault(category14, locale28);
        boolean boolean33 = calendar0.after((java.lang.Object) locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = locale28.getUnicodeLocaleType("26 Apr 2433 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 26 Apr 2433 00:00:00 GMT");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1210058569000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2008,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=127,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=49,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertEquals(date11.toString(), "Tue May 06 07:22:49 UTC 2008");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16858");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime8.plus(readablePeriod9);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int25 = dateTimeZone23.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.setTimeInMillis(100L);
        boolean boolean29 = calendar26.isWeekDateSupported();
        calendar26.roll(2, false);
        calendar26.setTimeInMillis(0L);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone36, (long) 2);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 8, dateTimeZone23);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        int int42 = dateTime41.getEra();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime45 = dateTime41.minusMinutes(1);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfYear();
        org.joda.time.DateTime dateTime47 = property46.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology52);
        org.joda.time.LocalTime.Property property54 = localTime53.millisOfSecond();
        int int55 = localTime53.size();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 100, chronology57);
        int int59 = localTime58.getMillisOfSecond();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 100, chronology61);
        boolean boolean63 = localTime58.isAfter((org.joda.time.ReadablePartial) localTime62);
        int int64 = localTime53.compareTo((org.joda.time.ReadablePartial) localTime62);
        org.joda.time.DateTime dateTime65 = dateTime47.withFields((org.joda.time.ReadablePartial) localTime53);
        boolean boolean66 = dateTime39.equals((java.lang.Object) localTime53);
        org.joda.time.LocalTime localTime68 = localTime53.plusMillis(10);
        java.util.Date date74 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.fromDateFields(date74);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology80);
        int int82 = localTime75.compareTo((org.joda.time.ReadablePartial) localTime81);
        boolean boolean83 = localTime68.isBefore((org.joda.time.ReadablePartial) localTime81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int85 = localTime68.indexOf(dateTimeFieldType84);
        org.joda.time.LocalTime.Property property86 = localTime8.property(dateTimeFieldType84);
        java.lang.String str87 = dateTimeFieldType84.getName();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2L + "'", long38 == 2L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertEquals(date74.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "secondOfMinute" + "'", str87, "secondOfMinute");
    }

    @Test
    public void test16859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16859");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.DateTime dateTime12 = localTime11.toDateTimeToday();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(86);
        int int15 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime12.plusMillis(431);
        boolean boolean19 = dateTime12.isBefore((long) 36000091);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test16860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16860");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        java.lang.String str11 = property8.getAsString();
        int int12 = property8.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "69" + "'", str9, "69");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "69" + "'", str11, "69");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 99 + "'", int12 == 99);
    }

    @Test
    public void test16861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16861");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        int int19 = dateTime12.getEra();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology29.getZone();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Chronology chronology43 = chronology29.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfWeek();
        boolean boolean45 = durationFieldType20.isSupported(chronology43);
        org.joda.time.DateTime dateTime47 = dateTime12.withFieldAdded(durationFieldType20, 985);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        org.joda.time.DateTime dateTime50 = dateTime47.plusMinutes(365);
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime47.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hours" + "'", str21, "hours");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
    }

    @Test
    public void test16862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16862");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(95L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds(25200000);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test16863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16863");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.setTimeInMillis(100L);
        boolean boolean20 = calendar17.isWeekDateSupported();
        calendar17.roll(2, false);
        calendar17.setTimeInMillis(0L);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.Chronology chronology28 = chronology14.withZone(dateTimeZone27);
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.getDefault(category30);
        java.util.Locale locale32 = java.util.Locale.getDefault(category30);
        java.lang.String str33 = dateTimeZone27.getName(10L, locale32);
        java.util.Locale.Builder builder34 = builder5.setLocale(locale32);
        java.util.Locale.Builder builder37 = builder34.setExtension('u', "35206");
        java.util.Locale.Builder builder38 = builder37.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder38.setVariant("millisOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: millisOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test16864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16864");
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DurationField durationField15 = durationFieldType6.getField(chronology14);
        org.joda.time.Chronology chronology16 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology14.months();
        org.joda.time.DurationField durationField19 = chronology14.months();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology14.add(readablePeriod20, (long) 57600000, 7201951);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(249, 48, 27408960, 171, 23, 28265071, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 171 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 57600000L + "'", long23 == 57600000L);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test16865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16865");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime4 = dateTime1.plusMinutes((int) ' ');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime6.minusDays((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.Chronology chronology12 = yearMonthDay11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.Chronology chronology26 = chronology12.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        int int28 = dateTime4.get(dateTimeField27);
        int int29 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime33 = dateTime31.minus(10L);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        int int36 = dateTime35.getEra();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes(1);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfYear();
        org.joda.time.DateTime dateTime41 = property40.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = dateTime41.toString(dateTimeFormatter42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean45 = dateTime41.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getDurationType();
        int int47 = dateTime33.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime49 = dateTime33.withMillisOfDay(1967);
        int int50 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime33.toYearMonthDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 70 + "'", int29 == 70);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str43, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay51);
    }

    @Test
    public void test16866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16866");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.minusDays((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime16 = dateTime11.plusSeconds(15);
        boolean boolean17 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = dateTime1.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test16867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16867");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(23);
        org.joda.time.DateTime dateTime8 = dateTime4.minus(1652313697000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test16868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16868");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withDefaultYear(720);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter4.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter4.withPivotYear(32769);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long39 = dateTimeZone24.getMillisKeepLocal(dateTimeZone37, (long) 2);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 8, dateTimeZone24);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 10, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalTime localTime44 = localTime42.plus(readablePeriod43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = dateTimeFormatter10.print((org.joda.time.ReadablePartial) localTime42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2L + "'", long39 == 2L);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test16869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16869");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 100);
        int int14 = dateTimeZone10.getOffset((long) 97);
        boolean boolean16 = dateTimeZone10.isStandardOffset(2022L);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('u', "deu");
        java.util.Locale.Builder builder23 = builder21.setRegion("");
        java.util.Locale.Builder builder25 = builder23.setVariant("86340000");
        java.util.Locale.Builder builder26 = builder23.clear();
        java.util.Locale locale27 = builder23.build();
        java.lang.String str28 = dateTimeZone10.getName(111660000L, locale27);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test16870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16870");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology78);
        org.joda.time.LocalTime.Property property80 = localTime79.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField81 = property80.getField();
        java.util.Locale locale83 = java.util.Locale.KOREA;
        java.util.Locale locale84 = java.util.Locale.FRENCH;
        java.lang.String str85 = locale83.getDisplayName(locale84);
        java.lang.String str86 = dateTimeField81.getAsText(32770, locale83);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone71, locale83);
        java.util.Calendar.Builder builder88 = builder0.setTimeZone(timeZone71);
        java.util.Calendar.Builder builder92 = builder0.setTimeOfDay(7, (int) 'u', (-1));
        java.util.Calendar calendar93 = builder0.build();
        java.util.Locale locale98 = new java.util.Locale("976", "Apr 26, 2433 12:00:00 AM");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = calendar93.getDisplayName(594, 35468032, locale98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573087808,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=27,MILLISECOND=808,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str85, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "32770" + "'", str86, "32770");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1644573087808,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=27,MILLISECOND=808,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(calendar93);
        org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=32219000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=56,SECOND=59,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale98.toString(), "976_APR 26, 2433 12:00:00 AM");
    }

    @Test
    public void test16871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16871");
        java.util.Date date1 = new java.util.Date((long) 41);
        date1.setMonth(28800009);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Oct 01 00:00:00 UTC 2401970");
    }

    @Test
    public void test16872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16872");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.halfdayOfDay();
        boolean boolean27 = dateTimeField25.isLeap((long) 57600000);
        java.lang.String str29 = dateTimeField25.getAsShortText(999L);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        int int32 = dateTime31.getEra();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes(1);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths(0);
        org.joda.time.DateTime dateTime39 = dateTime37.minus((long) 2);
        org.joda.time.DateTime.Property property40 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime41 = property40.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight42 = dateTime41.toDateMidnight();
        org.joda.time.TimeOfDay timeOfDay43 = dateTime41.toTimeOfDay();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long57 = dateTimeZone55.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property62 = dateTime59.weekyear();
        org.joda.time.DateTime dateTime64 = property62.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime66 = dateTime64.withHourOfDay(6);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTimeISO();
        int int68 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property69 = dateTime67.hourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = property69.getField();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology75);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        java.util.Locale locale78 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        java.lang.String str80 = locale78.getCountry();
        java.lang.String str81 = dateTimeField70.getAsShortText((org.joda.time.ReadablePartial) localTime76, locale78);
        java.util.Locale locale83 = java.util.Locale.ITALY;
        java.util.Locale locale84 = java.util.Locale.KOREA;
        java.lang.String str85 = locale84.getISO3Country();
        java.lang.String str86 = locale84.toLanguageTag();
        java.util.Locale locale87 = java.util.Locale.ITALY;
        java.lang.String str88 = locale84.getDisplayCountry(locale87);
        java.lang.String str89 = locale83.getDisplayVariant(locale84);
        java.lang.String str90 = localTime76.toString("zh", locale84);
        int[] intArray91 = localTime76.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField25.add((org.joda.time.ReadablePartial) timeOfDay43, 453, intArray91, 1440);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 453");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc624\uc804" + "'", str29, "\uc624\uc804");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "US" + "'", str80, "US");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "10" + "'", str81, "10");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "KOR" + "'", str85, "KOR");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ko-KR" + "'", str86, "ko-KR");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Corea del Sud" + "'", str88, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10" + "'", str90, "10");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 0, 0, 97]");
    }

    @Test
    public void test16873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16873");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter7.withChronology(chronology15);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int32 = dateTimeZone30.getStandardOffset((-1L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter18.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeParser dateTimeParser34 = dateTimeFormatter18.getParser();
        org.joda.time.Chronology chronology35 = dateTimeFormatter18.getChronolgy();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-140280L), chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(dateTimeParser34);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test16874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16874");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime.Property property7 = dateTime1.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = dateTimeField24.getAsText(32770, locale26);
        java.lang.String str30 = locale16.getDisplayLanguage(locale26);
        int int31 = property13.getMaximumShortTextLength(locale26);
        java.lang.String str32 = property7.getAsText(locale26);
        org.joda.time.DateTime dateTime33 = property7.roundCeilingCopy();
        int int34 = dateTime33.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str28, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32770" + "'", str29, "32770");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str30, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test16875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16875");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(17);
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime23 = dateTime18.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        int int25 = dateTime23.getMinuteOfDay();
        int int26 = property16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime28.minusDays((int) 'a');
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.Chronology chronology34 = yearMonthDay33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology34.getZone();
        org.joda.time.DurationField durationField38 = chronology34.centuries();
        long long42 = chronology34.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime43 = dateTime23.withChronology(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer8, (org.joda.time.ReadableInstant) dateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-49881509L) + "'", long42 == (-49881509L));
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test16876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16876");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime5.plusYears(11);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime5.toGregorianCalendar();
        java.util.Date date15 = new java.util.Date(252000000, 999, 252000000);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar11.setTime(date15);
        java.util.Date date21 = new java.util.Date((int) '4', 9, 15);
        date21.setMonth(28800009);
        int int24 = date15.compareTo(date21);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Oct 24 00:00:00 UTC 252691935");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Oct 15 00:00:00 UTC 2401952");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test16877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16877");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        boolean boolean10 = dateTimeFormatter8.isOffsetParsed();
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withLocale(locale11);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test16878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16878");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = dateTimeField7.getAsText(32770, locale9);
        java.lang.String str14 = dateTimeField7.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 100, chronology16);
        int int18 = localTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        boolean boolean22 = localTime17.isAfter((org.joda.time.ReadablePartial) localTime21);
        int int23 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime17);
        java.lang.String str24 = dateTimeField7.getName();
        java.util.Date date30 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromDateFields(date30);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime31, (int) 'a', locale33);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale33.getDisplayLanguage(locale36);
        java.util.Set<java.lang.Character> charSet38 = locale33.getExtensionKeys();
        java.util.Locale locale40 = new java.util.Locale("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        java.lang.String str43 = locale33.getDisplayScript(locale40);
        java.util.Set<java.lang.String> strSet44 = locale33.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str11, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "32770" + "'", str12, "32770");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "millisOfSecond" + "'", str24, "millisOfSecond");
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "KOR" + "'", str34, "KOR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "97" + "'", str35, "97");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals(locale40.toString(), "java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=?,year=-1,month=3,week_of_year=?,week_of_month=?,day_of_month=12,day_of_year=?,day_of_week=?,day_of_week_in_month=?,am_pm=?,hour=?,hour_of_day=?,minute=?,second=?,millisecond=?,zone_offset=?,dst_offset=?]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test16879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16879");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(50, 79200100, 36002097, 512);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16880");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime48.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) ' ');
        boolean boolean58 = dateTime51.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime51.dayOfMonth();
        boolean boolean61 = dateTime51.isBefore((long) 100);
        long long62 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime68 = dateTime64.withYear(1);
        long long69 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime64);
        java.lang.String str70 = property6.getAsShortText();
        int int71 = property6.getMaximumValueOverall();
        int int72 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 8416800097L + "'", long62 == 8416800097L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 36000097L + "'", long69 == 36000097L);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "97" + "'", str70, "97");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 999 + "'", int71 == 999);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test16881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16881");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        calendar26.setTimeInMillis((long) 16);
        int int29 = calendar26.getMinimalDaysInFirstWeek();
        java.lang.Object obj30 = null;
        boolean boolean31 = calendar26.before(obj30);
        int int32 = calendar26.getWeekYear();
        java.util.Locale locale36 = new java.util.Locale("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = calendar26.getDisplayName(2865, 27, locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "KOR" + "'", str19, "KOR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko-KR" + "'", str20, "ko-KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Corea del Sud" + "'", str22, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=16,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=16,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertEquals(locale36.toString(), "java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=?,year=-1,month=3,week_of_year=?,week_of_month=?,day_of_month=12,day_of_year=?,day_of_week=?,day_of_week_in_month=?,am_pm=?,hour=?,hour_of_day=?,minute=?,second=?,millisecond=?,zone_offset=?,dst_offset=?]");
    }

    @Test
    public void test16882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16882");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.lang.String str19 = dateTimeZone17.getNameKey((long) (byte) 10);
        long long21 = dateTimeZone17.nextTransition((long) 1439);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property23 = dateTime15.yearOfCentury();
        org.joda.time.DateTime.Property property24 = dateTime15.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1439L + "'", long21 == 1439L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test16883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16883");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMinutes(2);
        int int9 = dateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
    }

    @Test
    public void test16884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16884");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        boolean boolean17 = dateTimeFormatter10.isPrinter();
        org.joda.time.Chronology chronology18 = dateTimeFormatter10.getChronology();
        boolean boolean19 = dateTimeFormatter10.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter10.getParser();
        java.lang.Appendable appendable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable22, (long) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeParser21);
    }

    @Test
    public void test16885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16885");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("35409439");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test16886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16886");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.DurationField durationField11 = chronology7.hours();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test16887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16887");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str9 = dateTimeField7.getAsShortText((long) 121);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = dateTimeField7.getAsShortText((-1), locale11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.getISO3Country();
        java.lang.String str22 = locale20.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.lang.String str24 = locale20.getDisplayCountry(locale23);
        java.lang.String str25 = locale19.getDisplayVariant(locale20);
        java.lang.String str26 = locale18.getDisplayScript(locale20);
        java.lang.String str27 = dateTimeField16.getAsShortText((long) 0, locale20);
        int int28 = dateTimeField7.getMaximumTextLength(locale20);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        int int36 = localTime34.size();
        org.joda.time.LocalTime localTime38 = localTime34.minusMinutes((int) ' ');
        int int39 = localTime34.getMillisOfDay();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime(chronology43);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        int int47 = dateTime46.getEra();
        org.joda.time.DateTime dateTime48 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime50 = dateTime46.minusMinutes(1);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.DateTime dateTime52 = property51.roundHalfCeilingCopy();
        boolean boolean53 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks(1981);
        org.joda.time.DateTime dateTime57 = dateTime52.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime58 = localTime34.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder60.setExtension('u', "deu");
        java.util.Locale.Builder builder65 = builder63.setRegion("");
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.lang.String str68 = locale67.getDisplayLanguage();
        java.util.Locale.Builder builder69 = builder65.setLocale(locale67);
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology75);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField78 = property77.getField();
        java.util.Locale locale80 = java.util.Locale.KOREA;
        java.util.Locale locale81 = java.util.Locale.FRENCH;
        java.lang.String str82 = locale80.getDisplayName(locale81);
        java.lang.String str83 = dateTimeField78.getAsText(32770, locale80);
        java.lang.String str84 = locale70.getDisplayLanguage(locale80);
        java.util.Set<java.lang.Character> charSet85 = locale70.getExtensionKeys();
        java.util.Locale.setDefault(locale70);
        java.lang.String str87 = locale67.getDisplayLanguage(locale70);
        boolean boolean88 = locale70.hasExtensions();
        java.lang.String str89 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime34, 26, locale70);
        java.lang.String str90 = locale70.toLanguageTag();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "121" + "'", str9, "121");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "KOR" + "'", str21, "KOR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ko-KR" + "'", str22, "ko-KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Corea del Sud" + "'", str24, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000097 + "'", int39 == 36000097);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\uc601\uc5b4" + "'", str68, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str82, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "32770" + "'", str83, "32770");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str84, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(charSet85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "anglais" + "'", str87, "anglais");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "26" + "'", str89, "26");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "fr" + "'", str90, "fr");
    }

    @Test
    public void test16888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16888");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology6);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = dateTimeField9.getAsText(32770, locale11);
        java.lang.String str16 = dateTimeField9.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        boolean boolean24 = localTime19.isAfter((org.joda.time.ReadablePartial) localTime23);
        int int25 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime19);
        java.lang.String str26 = dateTimeField9.getName();
        java.util.Date date32 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromDateFields(date32);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime33, (int) 'a', locale35);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale35.getDisplayLanguage(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = locale42.toLanguageTag();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale42.getDisplayCountry(locale45);
        java.lang.String str47 = locale41.getDisplayVariant(locale42);
        java.lang.String str48 = locale40.getDisplayScript(locale42);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale42);
        java.lang.String str50 = locale38.getDisplayName(locale42);
        java.util.Calendar.Builder builder51 = builder1.setLocale(locale42);
        java.lang.String str52 = locale42.getDisplayName();
        java.util.Locale.setDefault(category0, locale42);
        java.util.Locale locale54 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str13, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32770" + "'", str14, "32770");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 999 + "'", int25 == 999);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millisOfSecond" + "'", str26, "millisOfSecond");
        org.junit.Assert.assertEquals(date32.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "KOR" + "'", str36, "KOR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "97" + "'", str37, "97");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "KOR" + "'", str43, "KOR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko-KR" + "'", str44, "ko-KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Corea del Sud" + "'", str46, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644573088202,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=28,MILLISECOND=202,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str50, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str52, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet55);
    }

    @Test
    public void test16889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16889");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str9 = dateTimeField7.getAsShortText((long) 121);
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        java.lang.String str11 = dateTimeField7.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.LocalTime localTime20 = property18.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime21 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalTime.Property property23 = localTime21.property(dateTimeFieldType22);
        int int24 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DurationField durationField25 = dateTimeField7.getRangeDurationField();
        java.lang.String str27 = dateTimeField7.getAsText((long) 66);
        long long30 = dateTimeField7.set((long) 79019, "969");
        long long32 = dateTimeField7.roundHalfEven((long) 35303);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "121" + "'", str9, "121");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str11, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "66" + "'", str27, "66");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 79969L + "'", long30 == 79969L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 35303L + "'", long32 == 35303L);
    }

    @Test
    public void test16890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16890");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        int int8 = localTime6.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int10 = localTime6.get(dateTimeFieldType9);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology15);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        int int18 = localTime16.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int20 = localTime16.get(dateTimeFieldType19);
        int int21 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.Chronology chronology22 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(chronology22);
        org.joda.time.DurationField durationField25 = chronology22.centuries();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology22);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay(1907711999752278L, chronology22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test16891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16891");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTime();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset((long) 70);
        java.lang.String str27 = dateTimeZone23.getShortName(1L);
        long long31 = dateTimeZone23.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime32 = dateTime11.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMillis(11);
        boolean boolean35 = dateTime32.isEqualNow();
        org.joda.time.DateTime.Property property36 = dateTime32.era();
        org.joda.time.DateTime dateTime38 = property36.addWrapFieldToCopy(21);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds(16);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime45 = dateTime42.minusDays((int) 'a');
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime46.toYearMonthDay();
        org.joda.time.Chronology chronology48 = yearMonthDay47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.secondOfDay();
        java.lang.String str50 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.year();
        org.joda.time.DurationField durationField53 = chronology48.years();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.weekyear();
        org.joda.time.DurationField durationField55 = chronology48.centuries();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.yearOfEra();
        org.joda.time.DateTime dateTime57 = dateTime38.withChronology(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(7201951, 70, 67, (-456825), 49, 200, 86340052, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -456825 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test16892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16892");
        java.util.Date date6 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        int int7 = date6.getDay();
        date6.setTime((-292275054L));
        java.lang.String str10 = date6.toGMTString();
        int int11 = date6.getDay();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 28 14:48:44 UTC 1969");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "28 Dec 1969 14:48:44 GMT" + "'", str10, "28 Dec 1969 14:48:44 GMT");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test16893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16893");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        java.util.Date date7 = dateTime5.toDate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:00 UTC 1969");
    }

    @Test
    public void test16894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16894");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = dateTimeField19.getAsText(32770, locale21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone9, locale21);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9);
        java.util.Date date27 = calendar26.getTime();
        int int28 = calendar26.getFirstDayOfWeek();
        boolean boolean30 = calendar26.isSet(5);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str23, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "32770" + "'", str24, "32770");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644573088282,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=28,MILLISECOND=282,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644573088282,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=28,MILLISECOND=282,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 09:51:28 UTC 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test16895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16895");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay(17);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology39);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = dateTimeField42.getAsText(32770, locale44);
        java.lang.String str49 = dateTimeField42.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 100, chronology51);
        int int53 = localTime52.getMillisOfSecond();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) 100, chronology55);
        boolean boolean57 = localTime52.isAfter((org.joda.time.ReadablePartial) localTime56);
        int int58 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localTime52);
        java.lang.String str59 = dateTimeField42.getName();
        java.util.Date date65 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromDateFields(date65);
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale68.getISO3Country();
        java.lang.String str70 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localTime66, (int) 'a', locale68);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale68.getDisplayLanguage(locale71);
        java.lang.String str73 = localTime31.toString("de", locale68);
        java.util.Set<java.lang.Character> charSet74 = locale68.getExtensionKeys();
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        boolean boolean78 = locale75.hasExtensions();
        java.lang.String str79 = locale68.getDisplayScript(locale75);
        java.lang.String str80 = locale75.getDisplayName();
        java.lang.String str81 = locale75.getScript();
        java.lang.String str82 = locale75.toLanguageTag();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str46, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "32770" + "'", str47, "32770");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 999 + "'", int58 == 999);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "millisOfSecond" + "'", str59, "millisOfSecond");
        org.junit.Assert.assertEquals(date65.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "KOR" + "'", str69, "KOR");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "97" + "'", str70, "97");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str72, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\ufffd\ufffd" + "'", str73, "\ufffd\ufffd");
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str77, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str80, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ko-KR" + "'", str82, "ko-KR");
    }

    @Test
    public void test16896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16896");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime.Property property16 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays(990);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test16897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16897");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusMillis((int) ' ');
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(35449571);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test16898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16898");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = calendar0.getWeekYear();
        calendar0.setTimeInMillis((long) (-2328));
        // The following exception was thrown during execution in test generation
        try {
            int int7 = calendar0.getGreatestMinimum(58620000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58620000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-2328,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=57,MILLISECOND=672,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
    }

    @Test
    public void test16899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16899");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        int int16 = localTime14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 100, chronology18);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        boolean boolean24 = localTime19.isAfter((org.joda.time.ReadablePartial) localTime23);
        int int25 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.DateTime dateTime26 = dateTime8.withFields((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.Chronology chronology27 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) 36000097L, chronology27);
        boolean boolean30 = dateTime29.isAfterNow();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime33 = property31.setCopy(1970);
        org.joda.time.DateTime dateTime34 = property31.getDateTime();
        java.util.Locale locale35 = java.util.Locale.US;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = property31.getAsText(locale36);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970" + "'", str38, "1970");
    }

    @Test
    public void test16900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16900");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology8.eras();
        boolean boolean13 = durationFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField15 = chronology8.eras();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test16901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16901");
        java.util.Date date3 = new java.util.Date(1969, (int) (byte) 100, (int) '#');
        int int4 = date3.getDate();
        date3.setYear(17);
        date3.setMinutes(600);
        date3.setMonth(79200000);
        int int11 = date3.getMonth();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 04 10:00:00 UTC 6601917");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test16902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16902");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        java.util.Date date14 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date14.setMonth((int) ' ');
        date14.setSeconds(0);
        java.lang.String str19 = date14.toGMTString();
        int int20 = date14.getDay();
        date14.setMonth(8);
        int int23 = date14.getHours();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date14);
        long long25 = date14.getTime();
        boolean boolean26 = date8.before(date14);
        java.util.Date date32 = new java.util.Date((-57575313), 4809, 28026832, 720, 98);
        boolean boolean33 = date8.before(date32);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573088393,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=28,MILLISECOND=393,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:51:28 UTC 2022");
        org.junit.Assert.assertEquals(date14.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3 Sep 1902 23:17:00 GMT" + "'", str19, "3 Sep 1902 23:17:00 GMT");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-2124664980000L) + "'", long25 == (-2124664980000L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(date32.toString(), "Fri Feb 10 01:38:00 UTC 57496280");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test16903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16903");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        int int14 = dateTimeField12.getMaximumValue(139680L);
        org.joda.time.DurationField durationField15 = dateTimeField12.getDurationField();
        long long17 = dateTimeField12.roundCeiling((-103453833599732L));
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-103453833599732L) + "'", long17 == (-103453833599732L));
    }

    @Test
    public void test16904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16904");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology7);
        org.joda.time.Chronology chronology17 = chronology7.withUTC();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-49881509L) + "'", long15 == (-49881509L));
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test16905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16905");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        int int9 = localTime8.size();
        org.joda.time.LocalTime localTime11 = localTime8.withMillisOfSecond(53);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean16 = localTime14.isSupported(dateTimeFieldType15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar17);
        int int19 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.LocalTime.Property property20 = localTime14.secondOfMinute();
        int int21 = property20.getMaximumValueOverall();
        org.joda.time.LocalTime localTime23 = property20.addCopy(0);
        org.joda.time.LocalTime localTime25 = localTime23.plusHours(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str27 = dateTimeFieldType26.toString();
        org.joda.time.LocalTime localTime29 = localTime25.withField(dateTimeFieldType26, 41);
        boolean boolean30 = localTime11.isSupported(dateTimeFieldType26);
        java.lang.String str31 = dateTimeFieldType26.toString();
        java.lang.String str32 = dateTimeFieldType26.toString();
        java.lang.String str33 = dateTimeFieldType26.toString();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644573088429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=28,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "millisOfSecond" + "'", str27, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfSecond" + "'", str33, "millisOfSecond");
    }

    @Test
    public void test16906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16906");
        java.util.Locale locale2 = new java.util.Locale("\uc911\uad6d", "\uc624\ud6c4 11:17:00");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc624\ud6c4 11:17:00");
    }

    @Test
    public void test16907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16907");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localTime6.getFields();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime10 = localTime6.withPeriodAdded(readablePeriod8, 36000204);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test16908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16908");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 86340009);
        org.joda.time.LocalTime localTime3 = localTime1.withMillisOfSecond(268);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test16909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16909");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset((long) 70);
        java.lang.String str15 = dateTimeZone11.getShortName(1L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        int int21 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime20);
        long long23 = dateTimeZone11.previousTransition((-62198582364994L));
        int int25 = dateTimeZone11.getStandardOffset((long) (short) 1);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 96, dateTimeZone11);
        java.util.TimeZone timeZone27 = dateTimeZone11.toTimeZone();
        long long29 = dateTimeZone11.convertUTCToLocal((long) (-979));
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-62198582364994L) + "'", long23 == (-62198582364994L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-979L) + "'", long29 == (-979L));
    }

    @Test
    public void test16910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16910");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        boolean boolean10 = property6.isLeap();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        int int12 = localTime11.getMinuteOfHour();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusMinutes(1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.DateTime dateTime25 = property24.roundHalfCeilingCopy();
        boolean boolean26 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property27 = dateTime25.millisOfDay();
        int int28 = dateTime25.getEra();
        org.joda.time.DateTime.Property property29 = dateTime25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime32 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalTime localTime34 = localTime11.minusMillis(510);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test16911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16911");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        boolean boolean6 = dateTime4.isEqualNow();
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.LocalTime localTime16 = property14.getLocalTime();
        org.joda.time.LocalTime localTime17 = property14.roundCeilingCopy();
        boolean boolean18 = property14.isLeap();
        org.joda.time.LocalTime localTime19 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime21 = property14.addWrapFieldToCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property14.getFieldType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        org.joda.time.DateTime.Property property24 = dateTime4.property(dateTimeFieldType22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.halfdayOfDay();
        org.joda.time.DateTime dateTime31 = dateTime4.withChronology(chronology27);
        int int32 = dateTime31.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
    }

    @Test
    public void test16912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16912");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 36000097);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        boolean boolean16 = dateTime13.isEqual((-43199903L));
        org.joda.time.DateTime dateTime18 = dateTime13.plusYears(732);
        org.joda.time.DateTime.Property property19 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test16913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16913");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 2);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology12);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalTime localTime17 = localTime15.minus(readablePeriod16);
        org.joda.time.LocalTime.Property property18 = localTime15.minuteOfHour();
        org.joda.time.Interval interval19 = property18.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = property18.setCopy(985);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 985 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test16914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16914");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalTime localTime21 = property19.getLocalTime();
        org.joda.time.LocalTime localTime22 = property19.roundCeilingCopy();
        boolean boolean23 = localTime2.equals((java.lang.Object) property19);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.lang.String str26 = property19.getAsShortText(locale25);
        org.joda.time.LocalTime localTime27 = property19.roundFloorCopy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        org.joda.time.LocalTime localTime36 = property34.getLocalTime();
        org.joda.time.LocalTime localTime37 = property34.roundCeilingCopy();
        boolean boolean38 = property34.isLeap();
        org.joda.time.LocalTime localTime39 = property34.withMinimumValue();
        org.joda.time.LocalTime localTime41 = property34.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime43.era();
        org.joda.time.DateTime.Property property49 = dateTime43.weekOfWeekyear();
        org.joda.time.DateTime dateTime50 = property49.roundHalfFloorCopy();
        int int51 = property34.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime54 = dateTime50.withFieldAdded(durationFieldType52, (int) (byte) 10);
        org.joda.time.LocalTime localTime56 = localTime27.withFieldAdded(durationFieldType52, 999);
        org.joda.time.LocalTime localTime58 = localTime56.withMillisOfSecond(8);
        org.joda.time.LocalTime localTime60 = localTime58.minusSeconds(13);
        org.joda.time.LocalTime.Property property61 = localTime58.millisOfSecond();
        org.joda.time.LocalTime localTime63 = localTime58.minusHours((-1560));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "97" + "'", str26, "97");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime63);
    }

    @Test
    public void test16915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16915");
        java.util.Date date3 = new java.util.Date((int) '4', 9, 15);
        int int4 = date3.getHours();
        date3.setYear(109);
        int int7 = date3.getDate();
        java.util.Date date13 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date13.setHours(292269054);
        int int16 = date13.getMinutes();
        java.util.Date date22 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date22.setMonth((int) ' ');
        java.util.Date date30 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromDateFields(date30);
        boolean boolean32 = date22.before(date30);
        int int33 = date30.getTimezoneOffset();
        java.util.Date date40 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean41 = date30.after(date40);
        int int42 = date30.getMonth();
        java.lang.String str43 = date30.toLocaleString();
        boolean boolean44 = date13.after(date30);
        int int45 = date13.getYear();
        boolean boolean46 = date3.after(date13);
        date3.setSeconds(86340000);
        int int49 = date3.getMinutes();
        date3.setDate(2048);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 07 07:20:00 UTC 2018");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 23 06:17:00 UTC 35242");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 17 + "'", int16 == 17);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date30.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals(date40.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "3 mars 1900 23:17:00" + "'", str43, "3 mars 1900 23:17:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 33342 + "'", int45 == 33342);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
    }

    @Test
    public void test16916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16916");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime3 = localTime1.plusMinutes(0);
        org.joda.time.LocalTime localTime5 = localTime3.plusMinutes(292269054);
        org.joda.time.LocalTime localTime7 = localTime3.plusMinutes(268);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(59);
        int int10 = localTime9.size();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573088666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=28,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test16917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16917");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) 70);
        java.lang.String str19 = dateTimeZone15.getShortName(1L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        int int25 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter4.withZone(dateTimeZone15);
        int int28 = dateTimeZone15.getStandardOffset((-8380789938L));
        java.util.TimeZone timeZone29 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test16918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16918");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(6);
        java.util.Date date16 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromDateFields(date16);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        int int24 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime23);
        boolean boolean25 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime.Property property26 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime28 = localTime8.minusMillis(79215);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test16919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16919");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMinutes(1);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths(0);
        int int25 = dateTime22.getYearOfEra();
        boolean boolean26 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime22);
        int int27 = dateTime22.getEra();
        org.joda.time.DateTime dateTime29 = dateTime22.minus((long) 9);
        int int30 = dateTime29.getDayOfWeek();
        boolean boolean31 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = dateTime3.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.centuries();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology32.eras();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test16920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16920");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.setTimeInMillis(100L);
        boolean boolean47 = calendar44.isWeekDateSupported();
        calendar44.roll(2, false);
        calendar44.setTimeInMillis(0L);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology60);
        org.joda.time.LocalTime.Property property62 = localTime61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = dateTimeField63.getAsText(32770, locale65);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone53, locale65);
        java.lang.String str70 = dateTimeZone25.getShortName((long) 8, locale65);
        java.lang.String str72 = dateTimeZone25.getName(18L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2L + "'", long40 == 2L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str67, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "32770" + "'", str68, "32770");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1644573088755,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=28,MILLISECOND=755,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
    }

    @Test
    public void test16921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16921");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'x', 14);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(62220);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        org.joda.time.DateTime dateTime16 = dateTime14.minus((long) 2);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfHour();
        org.joda.time.Chronology chronology18 = dateTime14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.centuries();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTime dateTime22 = dateTime4.withChronology(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test16922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16922");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays(0);
        boolean boolean12 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        boolean boolean15 = dateTime11.isEqual(292278L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test16923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16923");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(3);
        long long17 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        long long45 = dateTimeZone30.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 8, dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTimeISO();
        boolean boolean48 = dateTime46.isAfterNow();
        org.joda.time.DateTime dateTime50 = dateTime46.withMillis(100L);
        int int51 = property6.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property56 = dateTime53.weekyear();
        org.joda.time.DateTime dateTime58 = property56.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime58.minus(readablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZone(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime67 = dateTime64.withField(dateTimeFieldType65, 1);
        org.joda.time.DateTime dateTime69 = dateTime67.withWeekyear((int) 'a');
        org.joda.time.DateTime dateTime70 = dateTime69.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime72 = dateTime70.plusYears(11);
        long long73 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 36000097L + "'", long17 == 36000097L);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000089 + "'", int51 == 36000089);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 59106103200097L + "'", long73 == 59106103200097L);
    }

    @Test
    public void test16924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16924");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        int int4 = calendar0.getActualMinimum((int) (short) 10);
        calendar0.setLenient(false);
        calendar0.set(73, (-65951), 1971, 35409439, 86399, 916);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=73,MONTH=-65951,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1971,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=35409439,MINUTE=86399,SECOND=916,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test16925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16925");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-2203675200000L));
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(1967);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localTime3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localTime3.getFieldType(0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
    }

    @Test
    public void test16926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16926");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(20);
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test16927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16927");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTime.Property property18 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        int int21 = dateTime20.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean26 = localTime24.isSupported(dateTimeFieldType25);
        java.lang.String str27 = localTime24.toString();
        org.joda.time.LocalTime localTime29 = localTime24.plusSeconds(121);
        org.joda.time.DateTime dateTime30 = dateTime20.withFields((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.Chronology chronology31 = localTime24.getChronology();
        org.joda.time.LocalTime localTime33 = localTime24.minusSeconds(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str35 = dateTimeFieldType34.toString();
        int int36 = localTime24.get(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime6.withField(dateTimeFieldType34, 86354009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86354009 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "00:00:00.100" + "'", str27, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfSecond" + "'", str35, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test16928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16928");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 71, chronology8);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test16929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16929");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(17L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime7 = dateTime4.minusDays((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.DurationField durationField21 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType9.getField(chronology18);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1, chronology18);
        org.joda.time.DateTime dateTime24 = dateTime1.toDateTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear((-1459));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1459 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test16930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16930");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        int int19 = localTime10.indexOf(dateTimeFieldType16);
        int int20 = localTime7.indexOf(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property21 = localTime7.millisOfSecond();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(6);
        org.joda.time.DateTime dateTime31 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology36);
        org.joda.time.LocalTime.Property property38 = localTime37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.LocalTime localTime40 = property38.getLocalTime();
        org.joda.time.LocalTime localTime41 = property38.roundCeilingCopy();
        org.joda.time.LocalTime localTime43 = property38.addCopy(6);
        org.joda.time.DurationField durationField44 = property38.getDurationField();
        int int45 = property38.get();
        org.joda.time.LocalTime localTime46 = property38.withMinimumValue();
        org.joda.time.LocalTime localTime47 = property38.withMaximumValue();
        org.joda.time.LocalTime localTime48 = property38.roundCeilingCopy();
        org.joda.time.LocalTime localTime49 = localTime7.withFields((org.joda.time.ReadablePartial) localTime48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalTime localTime52 = localTime49.withPeriodAdded(readablePeriod50, (int) (byte) 100);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        int int58 = dateTime56.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.plus(readableDuration59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean62 = dateTime60.isSupported(dateTimeFieldType61);
        java.lang.String str63 = dateTimeFieldType61.toString();
        boolean boolean64 = localTime52.isSupported(dateTimeFieldType61);
        org.joda.time.LocalTime.Property property65 = localTime52.minuteOfHour();
        org.joda.time.LocalTime localTime66 = property65.withMaximumValue();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test16931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16931");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DurationField durationField12 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField14.set((long) 31, "1970-01-03T22:00:00.010+70:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-03T22:00:00.010+70:00\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test16932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16932");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) 70);
        java.lang.String str14 = dateTimeZone10.getShortName(1L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime19);
        long long22 = dateTimeZone10.previousTransition((-62198582364994L));
        int int24 = dateTimeZone10.getStandardOffset((long) (short) 1);
        int int26 = dateTimeZone10.getOffsetFromLocal((long) 587852);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(dateTimeZone10);
        long long30 = dateTimeZone10.adjustOffset(208123143258850000L, true);
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.util.Locale locale34 = java.util.Locale.getDefault(category32);
        java.util.Locale locale35 = java.util.Locale.US;
        java.util.Locale.setDefault(category32, locale35);
        java.util.Locale locale37 = java.util.Locale.getDefault(category32);
        java.util.Locale locale38 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category32, locale38);
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = locale38.getLanguage();
        java.lang.String str43 = dateTimeZone10.getShortName((long) 12, locale38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) str43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-62198582364994L) + "'", long22 == (-62198582364994L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 208123143258850000L + "'", long30 == 208123143258850000L);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en-US" + "'", str41, "en-US");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en" + "'", str42, "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
    }

    @Test
    public void test16933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16933");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalTime localTime21 = property19.getLocalTime();
        org.joda.time.LocalTime localTime22 = property19.roundCeilingCopy();
        boolean boolean23 = localTime2.equals((java.lang.Object) property19);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.lang.String str26 = property19.getAsShortText(locale25);
        org.joda.time.LocalTime localTime27 = property19.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField28 = property19.getField();
        long long31 = dateTimeField28.add((long) 1977, 19);
        boolean boolean32 = dateTimeField28.isLenient();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale35.getDisplayVariant(locale36);
        java.lang.String str42 = locale34.getDisplayScript(locale36);
        java.lang.String str43 = locale34.getISO3Language();
        java.util.Locale locale44 = locale34.stripExtensions();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        java.lang.String str46 = dateTimeField28.getAsText((long) 292269054, locale44);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "97" + "'", str26, "97");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1996L + "'", long31 == 1996L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "KOR" + "'", str37, "KOR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ko-KR" + "'", str38, "ko-KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Corea del Sud" + "'", str40, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "deu" + "'", str43, "deu");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644573089012,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=12,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "54" + "'", str46, "54");
    }

    @Test
    public void test16934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16934");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test16935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16935");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime1.withDurationAdded(readableDuration6, 0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.toMutableDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime9.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
    }

    @Test
    public void test16936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16936");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        java.lang.String str10 = calendar9.getCalendarType();
        java.time.Instant instant11 = calendar9.toInstant();
        int int12 = calendar9.getWeekYear();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar9);
        boolean boolean14 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(16, 17);
        org.joda.time.DateTime dateTime18 = localTime13.toDateTimeToday(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone17);
        long long21 = dateTimeZone17.convertUTCToLocal(1644572995007L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573089053,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=53,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644631615007L + "'", long21 == 1644631615007L);
    }

    @Test
    public void test16937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16937");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = chronology4.halfdays();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology4.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test16938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16938");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        int int48 = property6.getMaximumValueOverall();
        long long49 = property6.remainder();
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = locale50.toLanguageTag();
        java.lang.String str53 = locale50.getISO3Country();
        int int54 = property6.getMaximumShortTextLength(locale50);
        org.joda.time.LocalTime localTime55 = property6.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime57 = localTime55.withMillisOfSecond(79019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79019 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 999 + "'", int48 == 999);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "KOR" + "'", str51, "KOR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ko-KR" + "'", str52, "ko-KR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "KOR" + "'", str53, "KOR");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(localTime55);
    }

    @Test
    public void test16939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16939");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        java.util.Date date13 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date13);
        boolean boolean15 = date5.before(date13);
        int int16 = date13.getTimezoneOffset();
        java.util.Date date23 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean24 = date13.after(date23);
        int int25 = date13.getMonth();
        java.lang.String str26 = date13.toLocaleString();
        date13.setMinutes((int) (short) 1);
        int int29 = date13.getHours();
        int int30 = date13.getHours();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals(date13.toString(), "Sat Mar 03 23:01:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(date23.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3 mars 1900 23:17:00" + "'", str26, "3 mars 1900 23:17:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
    }

    @Test
    public void test16940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16940");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getNameKey((-71045541158399080L));
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test16941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16941");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.set(19, (int) (byte) -1, (int) (short) 10, 14, 15);
        java.lang.Object obj9 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=19,MONTH=-1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=14,MINUTE=15,SECOND=29,MILLISECOND=127,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=19,MONTH=-1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=14,MINUTE=15,SECOND=29,MILLISECOND=127,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=19,MONTH=-1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=14,MINUTE=15,SECOND=29,MILLISECOND=127,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=19,MONTH=-1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=14,MINUTE=15,SECOND=29,MILLISECOND=127,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test16942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16942");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.LocalTime localTime12 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime14 = localTime12.plusMillis(59);
        org.joda.time.LocalTime localTime16 = localTime14.minusMillis(139680);
        org.joda.time.LocalTime localTime18 = localTime14.minusSeconds((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str20 = durationFieldType19.getName();
        boolean boolean21 = localTime14.isSupported(durationFieldType19);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "seconds" + "'", str20, "seconds");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test16943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16943");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes(1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology41);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        int int44 = localTime42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 100, chronology46);
        int int48 = localTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        boolean boolean52 = localTime47.isAfter((org.joda.time.ReadablePartial) localTime51);
        int int53 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTime dateTime54 = dateTime36.withFields((org.joda.time.ReadablePartial) localTime42);
        boolean boolean55 = dateTime28.equals((java.lang.Object) localTime42);
        int int56 = dateTime28.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime28.plus(readableDuration57);
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        java.lang.String str60 = property59.getAsShortText();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
    }

    @Test
    public void test16944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16944");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.LocalTime localTime5 = localTime2.plusMillis((int) (short) -1);
        org.joda.time.Chronology chronology6 = localTime2.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test16945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16945");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        java.util.Date date14 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date14.setMonth((int) ' ');
        date14.setSeconds(0);
        java.lang.String str19 = date14.toGMTString();
        int int20 = date14.getDay();
        date14.setMonth(8);
        int int23 = date14.getHours();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date14);
        long long25 = date14.getTime();
        boolean boolean26 = date8.before(date14);
        date8.setDate(28800097);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573089230,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=230,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 26 09:51:29 UTC 80874");
        org.junit.Assert.assertEquals(date14.toString(), "Wed Sep 03 23:17:00 UTC 1902");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3 Sep 1902 23:17:00 GMT" + "'", str19, "3 Sep 1902 23:17:00 GMT");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-2124664980000L) + "'", long25 == (-2124664980000L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test16946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16946");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeFormatter17.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withPivotYear(976);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test16947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16947");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime61 = property58.roundHalfCeilingCopy();
        int int62 = property58.get();
        org.joda.time.LocalTime localTime63 = property58.withMaximumValue();
        java.lang.String str64 = property58.getAsText();
        org.joda.time.LocalTime localTime66 = property58.addCopy((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property58.getFieldType();
        org.joda.time.LocalTime localTime68 = property58.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology73);
        org.joda.time.LocalTime.Property property75 = localTime74.millisOfSecond();
        org.joda.time.LocalTime localTime76 = property75.withMaximumValue();
        org.joda.time.LocalTime localTime77 = property75.getLocalTime();
        org.joda.time.LocalTime.Property property78 = localTime77.millisOfDay();
        org.joda.time.LocalTime localTime80 = localTime77.minusMinutes(32769);
        boolean boolean81 = localTime68.isEqual((org.joda.time.ReadablePartial) localTime77);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str19, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "32770" + "'", str20, "32770");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals(date38.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573089275,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=275,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(localTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9" + "'", str64, "9");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test16948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16948");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setDate(0, 0, (int) 'x');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = dateTimeField14.getAsText(32770, locale16);
        java.lang.String str20 = locale6.getDisplayLanguage(locale16);
        java.util.Calendar.Builder builder21 = builder5.setLocale(locale6);
        java.util.Calendar.Builder builder25 = builder5.setWeekDate((int) (byte) 1, (int) (byte) 100, 67);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.setTimeInMillis(100L);
        boolean boolean29 = calendar26.isWeekDateSupported();
        calendar26.roll(2, false);
        calendar26.setTimeInMillis(0L);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.lang.String str45 = locale44.getISO3Country();
        java.lang.String str46 = locale44.toLanguageTag();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale44.getDisplayCountry(locale47);
        java.lang.String str49 = locale43.getDisplayVariant(locale44);
        java.lang.String str50 = locale42.getDisplayScript(locale44);
        java.lang.String str51 = dateTimeField40.getAsShortText((long) 0, locale44);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone35, locale44);
        int int53 = calendar52.getFirstDayOfWeek();
        java.time.Instant instant54 = calendar52.toInstant();
        java.lang.String str55 = calendar52.getCalendarType();
        calendar52.set((int) (byte) 1, 27408600, 6, (-52), 1981);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.fromCalendarFields(calendar52);
        java.util.TimeZone timeZone63 = calendar52.getTimeZone();
        java.util.Calendar.Builder builder64 = builder5.setTimeZone(timeZone63);
        java.util.Calendar.Builder builder66 = builder64.setLenient(false);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str18, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32770" + "'", str19, "32770");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str20, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "KOR" + "'", str45, "KOR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ko-KR" + "'", str46, "ko-KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Corea del Sud" + "'", str48, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=72017000830889323,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2284097,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=331,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=1,SECOND=29,MILLISECOND=323,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "gregory" + "'", str55, "gregory");
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test16949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16949");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test16950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16950");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 62220);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str5 = dateTimeZone3.getName((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        int int8 = dateTimeZone3.getStandardOffset((long) (short) 100);
        long long12 = dateTimeZone3.convertLocalToUTC((-719065L), false, 50675L);
        org.joda.time.DateTime dateTime13 = localTime1.toDateTimeToday(dateTimeZone3);
        java.lang.String str14 = dateTimeZone3.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.009" + "'", str5, "+00:00:00.009");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-719074L) + "'", long12 == (-719074L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.009" + "'", str14, "+00:00:00.009");
    }

    @Test
    public void test16951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16951");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((long) 'u');
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(57600000);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.withZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.plusYears(990);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test16952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16952");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.setLanguage("weeks");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale.Builder builder6 = builder1.addUnicodeLocaleAttribute("79200020");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "weeks");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test16953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16953");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        int int8 = dateTime7.getMinuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMillis(2048);
        int int11 = dateTime7.getEra();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property16 = dateTime13.weekyear();
        org.joda.time.DateTime dateTime18 = property16.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str21 = dateTimeFieldType20.getName();
        java.lang.String str22 = dateTimeFieldType20.toString();
        org.joda.time.DateTime.Property property23 = dateTime18.property(dateTimeFieldType20);
        boolean boolean24 = dateTime7.equals((java.lang.Object) dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hourOfHalfday" + "'", str21, "hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hourOfHalfday" + "'", str22, "hourOfHalfday");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test16954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16954");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTime.Property property18 = dateTime16.era();
        org.joda.time.DateTime.Property property19 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) dateTime20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.minus(readableDuration22);
        int int24 = dateTime23.getDayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-49881509L) + "'", long15 == (-49881509L));
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
    }

    @Test
    public void test16955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16955");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        long long26 = dateTimeField24.roundCeiling(511200000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 950400000L + "'", long26 == 950400000L);
    }

    @Test
    public void test16956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16956");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        long long19 = dateTimeZone15.convertLocalToUTC(3578400099L, true);
        java.lang.String str21 = dateTimeZone15.getShortName((-49881509L));
        java.lang.String str22 = dateTimeZone15.toString();
        java.lang.String str23 = dateTimeZone15.toString();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("it");
        java.lang.String str27 = dateTimeZone15.getShortName(433L, locale26);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3578400099L + "'", long19 == 3578400099L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Etc/UTC" + "'", str22, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
    }

    @Test
    public void test16957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16957");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int25 = dateTimeZone23.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withPivotYear((java.lang.Integer) 39);
        int int32 = dateTimeFormatter29.getDefaultYear();
        org.joda.time.Chronology chronology33 = dateTimeFormatter29.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2000 + "'", int32 == 2000);
        org.junit.Assert.assertNull(chronology33);
    }

    @Test
    public void test16958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16958");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime12.withDurationAdded((long) 1969, 9);
        int int16 = dateTime12.getMonthOfYear();
        org.joda.time.DateTime dateTime18 = dateTime12.minusMinutes(447);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra(985);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear(28263916);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test16959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16959");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter32.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withPivotYear((int) (byte) 0);
        boolean boolean37 = dateTimeZone12.equals((java.lang.Object) (byte) 0);
        int int39 = dateTimeZone12.getOffsetFromLocal(292269063L);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone12);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test16960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16960");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.minusMinutes(32769);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = dateTimeField27.getAsText(32770, locale29);
        java.lang.String str34 = dateTimeField27.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        int int38 = localTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        boolean boolean42 = localTime37.isAfter((org.joda.time.ReadablePartial) localTime41);
        int int43 = dateTimeField27.getMaximumValue((org.joda.time.ReadablePartial) localTime37);
        java.lang.String str44 = dateTimeField27.getName();
        java.util.Date date50 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.fromDateFields(date50);
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localTime51, (int) 'a', locale53);
        java.lang.String str56 = property18.getAsText(locale53);
        org.joda.time.LocalTime localTime58 = property18.addCopy(0L);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime60.minusDays((int) 'a');
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMonths((int) ' ');
        boolean boolean70 = dateTime63.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property71 = dateTime63.dayOfMonth();
        boolean boolean73 = dateTime63.isBefore((long) 100);
        long long74 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str75 = property18.getAsShortText();
        org.joda.time.DateTimeField dateTimeField76 = property18.getField();
        boolean boolean77 = localTime11.equals((java.lang.Object) dateTimeField76);
        int int78 = dateTimeField76.getMaximumValue();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str31, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "32770" + "'", str32, "32770");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 109 + "'", int38 == 109);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999 + "'", int43 == 999);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "millisOfSecond" + "'", str44, "millisOfSecond");
        org.junit.Assert.assertEquals(date50.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "KOR" + "'", str54, "KOR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "97" + "'", str55, "97");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "97" + "'", str56, "97");
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 8416800097L + "'", long74 == 8416800097L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "97" + "'", str75, "97");
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 999 + "'", int78 == 999);
    }

    @Test
    public void test16961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16961");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar.Builder builder78 = builder74.setDate(24, 3, 7201951);
        java.util.Calendar.Builder builder83 = builder78.setTimeOfDay(86399999, 36000156, 107, 0);
        java.util.Calendar.Builder builder87 = builder83.setWeekDate(35041737, 1320, (-19034));
        java.util.Calendar.Builder builder89 = builder83.setLenient(true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str12, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32770" + "'", str13, "32770");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 109 + "'", int19 == 109);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "KOR" + "'", str35, "KOR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "97" + "'", str36, "97");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "KOR" + "'", str42, "KOR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ko-KR" + "'", str43, "ko-KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Corea del Sud" + "'", str45, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644573089581,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=581,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str49, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test16962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16962");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "deu");
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder5.setVariant("86340000");
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.Builder builder11 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder11.setVariant("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = dateTimeField21.getAsText(32770, locale23);
        java.lang.String str28 = dateTimeField21.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        boolean boolean36 = localTime31.isAfter((org.joda.time.ReadablePartial) localTime35);
        int int37 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localTime31);
        java.lang.String str38 = dateTimeField21.getName();
        java.util.Date date44 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date44);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime45, (int) 'a', locale47);
        int int50 = localTime45.size();
        org.joda.time.LocalTime localTime52 = localTime45.minusSeconds(1969);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        int int56 = localTime55.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 100, chronology58);
        boolean boolean60 = localTime55.isAfter((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.Chronology chronology61 = localTime59.getChronology();
        org.joda.time.LocalTime localTime62 = localTime45.withFields((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology68);
        org.joda.time.LocalTime.Property property70 = localTime69.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        java.lang.String str73 = dateTimeField71.getAsShortText((long) 121);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str79 = locale77.toLanguageTag();
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale77.getDisplayCountry(locale80);
        java.lang.String str82 = locale76.getDisplayVariant(locale77);
        java.lang.String str83 = locale75.getDisplayScript(locale77);
        java.lang.String str84 = locale75.getISO3Language();
        java.util.Locale locale85 = locale75.stripExtensions();
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale85);
        java.lang.String str87 = locale85.getISO3Language();
        java.lang.String str88 = dateTimeField71.getAsShortText(109, locale85);
        java.lang.String str89 = localTime45.toString("22:00:00.100", locale85);
        java.util.Locale.Builder builder90 = builder11.setLocale(locale85);
        java.util.Locale.Builder builder92 = builder11.setLanguageTag("en");
        java.util.Locale.Builder builder93 = builder11.clearExtensions();
        java.util.Locale.Builder builder94 = builder93.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder97 = builder93.setExtension('a', "16.06.51252 12:00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 16.06.51252 12:00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str25, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32770" + "'", str26, "32770");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 109 + "'", int32 == 109);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertEquals(date44.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "KOR" + "'", str48, "KOR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "97" + "'", str49, "97");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 109 + "'", int56 == 109);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "121" + "'", str73, "121");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "KOR" + "'", str78, "KOR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ko-KR" + "'", str79, "ko-KR");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Corea del Sud" + "'", str81, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "deu" + "'", str84, "deu");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=1644573089613,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=613,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "deu" + "'", str87, "deu");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "109" + "'", str88, "109");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "22:00:00.100" + "'", str89, "22:00:00.100");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test16963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16963");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusSeconds(15);
        boolean boolean7 = dateTime6.isAfterNow();
        org.joda.time.DateTime.Property property8 = dateTime6.minuteOfDay();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale10.getScript();
        java.lang.String str12 = locale10.getVariant();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear(5);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        long long45 = dateTimeZone30.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 8, dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter15.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withPivotYear((java.lang.Integer) 10);
        java.util.Locale locale52 = new java.util.Locale("1970");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter50.withLocale(locale52);
        java.lang.String str54 = locale52.toLanguageTag();
        java.lang.String str55 = locale10.getDisplayName(locale52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = property8.setCopy("+70:11:30.035", locale52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+70:11:30.035\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals(locale52.toString(), "1970");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "und" + "'", str54, "und");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Italian (Italy)" + "'", str55, "Italian (Italy)");
    }

    @Test
    public void test16964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16964");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        java.lang.String str10 = calendar9.getCalendarType();
        java.time.Instant instant11 = calendar9.toInstant();
        int int12 = calendar9.getWeekYear();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar9);
        boolean boolean14 = localTime8.isBefore((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int16 = localTime8.get(dateTimeFieldType15);
        int int17 = localTime8.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573089672,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=672,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1438 + "'", int16 == 1438);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test16965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16965");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.centuries();
        org.joda.time.DurationField durationField13 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        long long17 = dateTimeField14.addWrapField(1644572766873L, 12);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property24.withMaximumValue();
        org.joda.time.LocalTime localTime26 = property24.getLocalTime();
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfDay();
        org.joda.time.LocalTime localTime29 = property27.addCopy(2);
        org.joda.time.LocalTime localTime30 = property27.withMaximumValue();
        org.joda.time.LocalTime localTime31 = property27.withMinimumValue();
        org.joda.time.LocalTime localTime32 = property27.roundHalfCeilingCopy();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder33.clear();
        java.util.Locale locale35 = builder34.build();
        java.util.Locale locale36 = builder34.build();
        java.util.Locale.Builder builder37 = builder34.clearExtensions();
        java.util.Locale locale38 = builder34.build();
        java.lang.String str39 = locale38.getDisplayVariant();
        java.lang.String str40 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localTime32, locale38);
        java.lang.String str41 = locale38.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572766885L + "'", long17 == 1644572766885L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "97" + "'", str40, "97");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test16966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16966");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime20 = dateTime18.withMonthOfYear(10);
        int int21 = dateTime18.getHourOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear(5);
        boolean boolean27 = dateTimeFormatter24.isPrinter();
        org.joda.time.Chronology chronology28 = dateTimeFormatter24.getChronology();
        boolean boolean29 = dateTimeFormatter24.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter24.withOffsetParsed();
        boolean boolean31 = dateTimeFormatter30.isPrinter();
        boolean boolean32 = dateTime18.equals((java.lang.Object) boolean31);
        org.joda.time.DateTime.Property property33 = dateTime18.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test16967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16967");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str29 = dateTimeZone24.toString();
        java.lang.String str31 = dateTimeZone24.getName(4004L);
        long long34 = dateTimeZone24.convertLocalToUTC((-543196800000L), true);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Etc/UTC" + "'", str29, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-543196800000L) + "'", long34 == (-543196800000L));
    }

    @Test
    public void test16968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16968");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) 70);
        java.lang.String str49 = dateTimeZone45.getShortName(1L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) 'a');
        int int55 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime54);
        java.util.GregorianCalendar gregorianCalendar57 = dateTime54.toGregorianCalendar();
        gregorianCalendar57.setFirstDayOfWeek(720);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder60.setExtension('u', "deu");
        java.util.Locale.Builder builder65 = builder63.setRegion("");
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology71);
        org.joda.time.LocalTime.Property property73 = localTime72.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = property73.getField();
        java.util.Locale locale75 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleAttributes();
        int int77 = dateTimeField74.getMaximumShortTextLength(locale75);
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder79 = builder66.setLocale(locale75);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder80.setExtension('u', "deu");
        java.util.Locale.Builder builder85 = builder83.setRegion("");
        java.util.Locale.Builder builder87 = builder85.setVariant("86340000");
        java.util.Locale.Category category88 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale89 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category88, locale89);
        java.util.Locale.Builder builder91 = builder87.setLocale(locale89);
        java.util.Locale.Builder builder92 = builder79.setLocale(locale89);
        java.util.Locale.Builder builder95 = builder92.setUnicodeLocaleKeyword("26", "86399999");
        java.util.Locale locale96 = builder95.build();
        java.util.Locale.Builder builder97 = builder95.clear();
        boolean boolean98 = gregorianCalendar57.after((java.lang.Object) builder97);
        java.util.Locale.Builder builder99 = builder97.clearExtensions();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + category88 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category88.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "de__#u-26-86399999");
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test16969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16969");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll((int) (short) 10, (int) (byte) 10);
        calendar0.setLenient(true);
        java.time.Instant instant6 = calendar0.toInstant();
        int int7 = calendar0.getFirstDayOfWeek();
        calendar0.clear();
        int int9 = calendar0.getWeekYear();
        boolean boolean10 = calendar0.isWeekDateSupported();
        boolean boolean11 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test16970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16970");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(35273, 54, 0, 769, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 769 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16971");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localTime4.getFieldTypes();
        org.joda.time.DateTime dateTime6 = localTime4.toDateTimeToday();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(16);
        org.joda.time.DateTime.Property property10 = dateTime6.dayOfYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property15 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime17 = property15.addToCopy((long) (short) 0);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = dateTimeField26.getAsText(32770, locale28);
        java.lang.String str32 = locale18.getDisplayLanguage(locale28);
        int int33 = property15.getMaximumShortTextLength(locale28);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder34.setExtension('u', "deu");
        java.util.Locale.Builder builder39 = builder37.setRegion("");
        java.util.Locale locale40 = builder39.build();
        java.lang.String str41 = locale40.toLanguageTag();
        java.lang.String str42 = locale28.getDisplayName(locale40);
        java.lang.String str43 = locale40.getDisplayName();
        int int44 = property10.getMaximumShortTextLength(locale40);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573089838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str30, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32770" + "'", str31, "32770");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str32, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und-u-deu" + "'", str41, "und-u-deu");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Korean (South Korea)" + "'", str42, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test16972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16972");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        int int7 = calendar0.getWeeksInWeekYear();
        java.util.Date date8 = calendar0.getTime();
        java.lang.String str9 = date8.toGMTString();
        java.util.Date date15 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        int int16 = date15.getSeconds();
        int int17 = date15.getDay();
        int int18 = date15.getMonth();
        int int19 = date15.getYear();
        int int20 = date15.getMonth();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromDateFields(date15);
        boolean boolean22 = date8.after(date15);
        int int23 = date8.getHours();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573089859,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=859,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:51:29 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11 Feb 2022 09:51:29 GMT" + "'", str9, "11 Feb 2022 09:51:29 GMT");
        org.junit.Assert.assertEquals(date15.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
    }

    @Test
    public void test16973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16973");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localTime4.getFieldTypes();
        org.joda.time.DateTime dateTime6 = localTime4.toDateTimeToday();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(16);
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644573089873,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=873,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gregory" + "'", str1, "gregory");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test16974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16974");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now();
        int int27 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((java.lang.Object) localTime26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime28.minus(readablePeriod29);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test16975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16975");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(59);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test16976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16976");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getShortName((-1680047639000L));
        long long7 = dateTimeZone1.nextTransition((long) 139680);
        long long9 = dateTimeZone1.previousTransition((long) 25);
        java.lang.String str11 = dateTimeZone1.getName(227209483962000000L);
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset((long) 70);
        java.lang.String str27 = dateTimeZone23.getShortName(1L);
        long long29 = dateTimeZone23.convertUTCToLocal((long) 1970);
        long long32 = dateTimeZone23.adjustOffset((long) 86, false);
        boolean boolean33 = dateTimeZone23.isFixed();
        long long35 = dateTimeZone1.getMillisKeepLocal(dateTimeZone23, (long) 35449571);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1200, dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.009" + "'", str5, "+00:00:00.009");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 139680L + "'", long7 == 139680L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25L + "'", long9 == 25L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.009" + "'", str11, "+00:00:00.009");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1970L + "'", long29 == 1970L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86L + "'", long32 == 86L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35449580L + "'", long35 == 35449580L);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test16977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16977");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.LocalTime localTime11 = property6.setCopy(15);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds(6);
        int int18 = dateTime17.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfDay();
        long long22 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime23 = property6.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime25 = localTime23.withMillisOfDay(168);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "97" + "'", str9, "97");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35994097L + "'", long22 == 35994097L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test16978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16978");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        java.lang.String str4 = calendar0.getCalendarType();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        java.time.Instant instant6 = calendar0.toInstant();
        calendar0.set(13, (int) '4', 53);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = dateTimeField20.getAsText(32770, locale22);
        int int27 = dateTimeField20.getMaximumValue((long) 0);
        java.lang.String str29 = dateTimeField20.getAsShortText((long) (byte) -1);
        org.joda.time.DurationField durationField30 = dateTimeField20.getDurationField();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean35 = localTime33.isSupported(dateTimeFieldType34);
        java.lang.String str36 = localTime33.toString();
        org.joda.time.LocalTime localTime38 = localTime33.plusMinutes(102);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("anglais");
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localTime33, locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap43 = calendar0.getDisplayNames(292275055, 0, locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=13,MONTH=52,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=53,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str24, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "32770" + "'", str25, "32770");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "999" + "'", str29, "999");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "00:00:00.109" + "'", str36, "00:00:00.109");
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "109" + "'", str42, "109");
    }

    @Test
    public void test16979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16979");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 11);
        org.joda.time.DateTime dateTime10 = dateTime4.withHourOfDay(3);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, 30);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(0);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        java.lang.String str19 = calendar18.getCalendarType();
        java.time.Instant instant20 = calendar18.toInstant();
        int int21 = calendar18.getWeekYear();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields(calendar18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localTime22.getFieldTypes();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localTime24.getFieldType(0);
        org.joda.time.LocalTime localTime28 = localTime22.withField(dateTimeFieldType26, (int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getDurationType();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        int int33 = localTime32.getMillisOfSecond();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 100, chronology35);
        boolean boolean37 = localTime32.isAfter((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        boolean boolean40 = dateTimeFieldType38.isSupported(chronology39);
        int int41 = localTime32.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology42 = localTime32.getChronology();
        long long46 = chronology42.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField47 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType26.getField(chronology42);
        int int49 = dateTime15.get(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644573089953,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=29,MILLISECOND=953,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 109 + "'", int33 == 109);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 310L + "'", long46 == 310L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test16980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16980");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.DurationField durationField4 = dateTimeField3.getDurationField();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property11.withMaximumValue();
        int int14 = localTime12.getValue(0);
        java.lang.String str15 = localTime12.toString();
        org.joda.time.LocalTime localTime17 = localTime12.minusSeconds(12);
        int int18 = dateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime localTime20 = localTime17.plusMinutes(50400009);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime17.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10:00:00.999" + "'", str15, "10:00:00.999");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test16981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16981");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime4.minusDays(999);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        int int36 = dateTime34.getYearOfCentury();
        int int37 = dateTime34.getSecondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime34.withCenturyOfEra(99);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology44);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        org.joda.time.LocalTime localTime48 = property46.addNoWrapToCopy(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property46.getFieldType();
        boolean boolean50 = dateTime39.isSupported(dateTimeFieldType49);
        int int51 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(0L, dateTimeZone30);
        org.joda.time.DateTime dateTime53 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusYears(33427219);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 70 + "'", int36 == 70);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test16982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16982");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField13 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test16983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16983");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = dateTime6.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test16984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16984");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.setTimeInMillis(100L);
        boolean boolean23 = calendar20.isWeekDateSupported();
        calendar20.roll(2, false);
        calendar20.setTimeInMillis(0L);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        long long32 = dateTimeZone17.getMillisKeepLocal(dateTimeZone30, (long) 2);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 8, dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter2.withZone(dateTimeZone17);
        boolean boolean35 = dateTimeFormatter34.isOffsetParsed();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        int int39 = localTime38.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        boolean boolean43 = localTime38.isAfter((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        boolean boolean46 = dateTimeFieldType44.isSupported(chronology45);
        int int47 = localTime38.indexOf(dateTimeFieldType44);
        org.joda.time.Chronology chronology48 = localTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.era();
        org.joda.time.DurationField durationField50 = chronology48.years();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology48.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter34.withZone(dateTimeZone51);
        boolean boolean53 = dateTimeFormatter34.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 109 + "'", int39 == 109);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test16985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16985");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime4.minusDays(999);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMinutes(86);
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.minus(readableDuration20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test16986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16986");
        java.util.Date date6 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        long long7 = date6.getTime();
        java.lang.Object obj8 = date6.clone();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-2116270194000L) + "'", long7 == (-2116270194000L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "Wed Dec 10 03:10:06 UTC 1902");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "Wed Dec 10 03:10:06 UTC 1902");
    }

    @Test
    public void test16987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16987");
        java.util.Date date6 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        date6.setYear(0);
        int int9 = date6.getSeconds();
        date6.setYear(20);
        java.lang.Object obj12 = date6.clone();
        org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 10 03:10:06 UTC 1920");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Fri Dec 10 03:10:06 UTC 1920");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Fri Dec 10 03:10:06 UTC 1920");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Fri Dec 10 03:10:06 UTC 1920");
    }

    @Test
    public void test16988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16988");
        java.util.Date date3 = new java.util.Date(1970, 32772, 36000089);
        date3.setHours(86100009);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 19 09:00:00 UTC 114988");
    }

    @Test
    public void test16989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16989");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        boolean boolean12 = dateTimeField11.isSupported();
        int int14 = dateTimeField11.get(10L);
        long long16 = dateTimeField11.remainder((long) 52);
        long long19 = dateTimeField11.add((long) 269, (long) 2022);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DurationField durationField30 = durationFieldType21.getField(chronology29);
        org.joda.time.Chronology chronology31 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.minuteOfHour();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale35.getISO3Country();
        java.util.Locale.setDefault(locale35);
        java.lang.String str39 = dateTimeField32.getAsText((long) 39, locale35);
        java.lang.String str40 = dateTimeField11.getAsShortText(86399999, locale35);
        java.lang.String str41 = locale35.getLanguage();
        java.lang.String str42 = locale35.getCountry();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 63808128000269L + "'", long19 == 63808128000269L);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str36, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "86399999" + "'", str40, "86399999");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test16990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16990");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 6);
        boolean boolean28 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime27);
        long long29 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime31.year();
        java.lang.String str37 = property36.getName();
        java.lang.String str38 = property36.getAsString();
        org.joda.time.DateTimeField dateTimeField39 = property36.getField();
        int int40 = dateTimeField39.getMaximumValue();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime43 = localTime41.minusMinutes(4);
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder48 = builder44.setTimeOfDay(8, 0, 4);
        java.util.Calendar.Builder builder52 = builder44.setWeekDate(1, 86399999, 0);
        java.util.Calendar.Builder builder56 = builder44.setDate(0, (int) (byte) 10, 36000107);
        java.util.Calendar.Builder builder60 = builder56.setDate((int) (short) 1, 58620000, 20);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.MIDNIGHT;
        int[] intArray62 = localTime61.getValues();
        java.util.Calendar.Builder builder63 = builder60.setFields(intArray62);
        int int64 = dateTimeField39.getMinimumValue((org.joda.time.ReadablePartial) localTime43, intArray62);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = property17.compareTo((org.joda.time.ReadablePartial) localTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-2L) + "'", long29 == (-2L));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "year" + "'", str37, "year");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970" + "'", str38, "1970");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-292275054) + "'", int64 == (-292275054));
    }

    @Test
    public void test16991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16991");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) 1970);
        long long8 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 52, dateTimeZone2);
        long long12 = dateTimeZone2.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        int int17 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withDayOfYear(69);
        boolean boolean21 = dateTime14.isBefore(35303L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-251999990L) + "'", long8 == (-251999990L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86399L + "'", long12 == 86399L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 252000000 + "'", int17 == 252000000);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test16992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16992");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField12 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.hourOfHalfday();
        int int14 = dateTimeField13.getMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test16993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16993");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.lang.String str35 = dateTimeZone24.toString();
        java.lang.String str36 = dateTimeZone24.getID();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Etc/UTC" + "'", str36, "Etc/UTC");
    }

    @Test
    public void test16994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16994");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(15);
        boolean boolean4 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis((long) 31);
        int int7 = calendar0.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=31,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=15,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=53,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=31,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test16995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16995");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = dateTimeField16.getAsText(32770, locale18);
        java.lang.String str23 = dateTimeField16.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 100, chronology25);
        int int27 = localTime26.getMillisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        boolean boolean31 = localTime26.isAfter((org.joda.time.ReadablePartial) localTime30);
        int int32 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localTime26);
        java.lang.String str33 = dateTimeField16.getName();
        java.util.Date date39 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromDateFields(date39);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = locale42.getISO3Country();
        java.lang.String str44 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localTime40, (int) 'a', locale42);
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale42.getDisplayLanguage(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = locale49.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale49.getDisplayCountry(locale52);
        java.lang.String str54 = locale48.getDisplayVariant(locale49);
        java.lang.String str55 = locale47.getDisplayScript(locale49);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale49);
        java.lang.String str57 = locale45.getDisplayName(locale49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter2.withLocale(locale45);
        java.io.Writer writer59 = null;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance();
        calendar61.setTimeInMillis(100L);
        boolean boolean64 = calendar61.isWeekDateSupported();
        calendar61.roll(2, false);
        calendar61.setTimeInMillis(0L);
        java.util.TimeZone timeZone70 = calendar61.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        int int74 = dateTimeZone72.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance();
        calendar75.setTimeInMillis(100L);
        boolean boolean78 = calendar75.isWeekDateSupported();
        calendar75.roll(2, false);
        calendar75.setTimeInMillis(0L);
        java.util.TimeZone timeZone84 = calendar75.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        long long87 = dateTimeZone72.getMillisKeepLocal(dateTimeZone85, (long) 2);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) 8, dateTimeZone72);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.DateTime dateTime90 = dateTime88.minus(readablePeriod89);
        org.joda.time.DateTime dateTime92 = dateTime90.minusSeconds(11);
        long long93 = dateTime92.getMillis();
        org.joda.time.DateTime dateTime95 = dateTime92.withWeekyear(999);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer59, (org.joda.time.ReadableInstant) dateTime95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str20, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "32770" + "'", str21, "32770");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 109 + "'", int27 == 109);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfSecond" + "'", str33, "millisOfSecond");
        org.junit.Assert.assertEquals(date39.toString(), "Sat Mar 03 23:17:00 UTC 1900");
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "KOR" + "'", str43, "KOR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "97" + "'", str44, "97");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str46, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "KOR" + "'", str50, "KOR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko-KR" + "'", str51, "ko-KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Corea del Sud" + "'", str53, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644573090243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=30,MILLISECOND=243,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str57, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 2L + "'", long87 == 2L);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-10992L) + "'", long93 == (-10992L));
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test16996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16996");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property34 = dateTime31.weekyear();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.minus(readablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withZone(dateTimeZone41);
        org.joda.time.DateTime.Property property43 = dateTime40.weekOfWeekyear();
        org.joda.time.DateTime dateTime44 = localTime29.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property45 = dateTime44.secondOfMinute();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfHour();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime(chronology49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        int int53 = dateTime52.getEra();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime56 = dateTime52.minusMinutes(1);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfYear();
        org.joda.time.DateTime dateTime58 = property57.roundHalfCeilingCopy();
        boolean boolean59 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime47.plusHours(6);
        org.joda.time.DateTime dateTime63 = dateTime47.minus((-1L));
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime dateTime65 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime67 = dateTime63.plusHours(0);
        int int68 = dateTime67.getEra();
        int int69 = property45.getDifference((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime71 = property45.addWrapFieldToCopy(50);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35490 + "'", int69 == 35490);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test16997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16997");
        java.util.Date date6 = new java.util.Date(79200000, 491, 0, (int) '#', 80, 139680);
        date6.setMonth(25);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        java.lang.String str10 = calendar9.getCalendarType();
        calendar9.roll((int) (short) 0, 4);
        calendar9.setFirstDayOfWeek((-1));
        int int16 = calendar9.getWeeksInWeekYear();
        java.util.Date date17 = calendar9.getTime();
        java.lang.String str18 = date17.toGMTString();
        boolean boolean19 = date6.before(date17);
        date6.setTime(2339000L);
        java.util.Date date27 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        int int28 = date27.getSeconds();
        int int29 = date27.getSeconds();
        date27.setSeconds(14);
        int int32 = date27.getDay();
        java.util.Date date39 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        int int40 = date39.getHours();
        long long41 = date39.getTime();
        int int42 = date39.getDay();
        date39.setMonth(269);
        date39.setMinutes(1971);
        boolean boolean47 = date27.before(date39);
        int int48 = date39.getHours();
        int int49 = date6.compareTo(date39);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:38:59 UTC 1970");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573090303,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=30,MILLISECOND=303,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 09:51:30 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "11 Feb 2022 09:51:30 GMT" + "'", str18, "11 Feb 2022 09:51:30 GMT");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Mar 03 23:17:14 UTC 1900");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertEquals(date39.toString(), "Wed Jun 11 11:51:06 UTC 1924");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-2116270194000L) + "'", long41 == (-2116270194000L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test16998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16998");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(54, 42);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test16999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16999");
        java.util.Date date1 = new java.util.Date((-62198582364983L));
        int int2 = date1.getDay();
        date1.setYear(13776);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Jan 05 00:00:35 UTC 15676");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test17000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test17000");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 49352);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(2048);
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0501");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean9 = dateTime5.isSupported(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime5.dayOfMonth();
        int int11 = dateTime5.getYearOfCentury();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset((long) 70);
        java.lang.String str26 = dateTimeZone22.getShortName(1L);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime28.minusDays((int) 'a');
        int int32 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime31);
        long long34 = dateTimeZone22.previousTransition((-62198582364994L));
        int int36 = dateTimeZone22.getStandardOffset((long) (short) 1);
        int int38 = dateTimeZone22.getOffsetFromLocal((long) 587852);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime5.toMutableDateTime(dateTimeZone22);
        java.lang.String str42 = dateTimeZone22.getName((long) (-599));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime40", (dateTime5.compareTo(mutableDateTime40) == 0) == dateTime5.equals(mutableDateTime40));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0502");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        long long34 = dateTimeZone16.getMillisKeepLocal(dateTimeZone30, (long) (short) 10);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime40 = dateTime38.toLocalDateTime();
        boolean boolean41 = dateTimeZone30.isLocalDateTimeGap(localDateTime40);
        org.joda.time.DateTime dateTime42 = dateTime2.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(3578400099L, dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime42", (dateTime2.compareTo(dateTime42) == 0) == dateTime2.equals(dateTime42));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0503");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime3.withChronology(chronology15);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime31.property(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime36.minusDays((int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology42.getZone();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.Chronology chronology56 = chronology42.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfWeek();
        org.joda.time.DurationField durationField58 = chronology56.weekyears();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology56.getZone();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.weekyearOfCentury();
        org.joda.time.DurationField durationField62 = chronology56.weeks();
        boolean boolean63 = dateTimeFieldType33.isSupported(chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0504");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = dateTime1.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = dateTime12.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.plus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime12.minusMillis(15);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime12.plusHours((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime12.withMillisOfDay(1);
        int int24 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime28 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.minusMinutes(1);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths(0);
        org.joda.time.DateTime dateTime34 = dateTime32.minus((long) 2);
        org.joda.time.DateTime.Property property35 = dateTime32.minuteOfHour();
        org.joda.time.Chronology chronology36 = dateTime32.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.centuries();
        org.joda.time.DurationField durationField38 = chronology36.halfdays();
        org.joda.time.DateTime dateTime39 = dateTime23.toDateTime(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.minuteOfDay();
        org.joda.time.Chronology chronology41 = chronology36.withUTC();
        org.joda.time.DateTime dateTime42 = dateTime8.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime42", (dateTime8.compareTo(dateTime42) == 0) == dateTime8.equals(dateTime42));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0505");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 100, chronology2);
        int int4 = localTime3.getMillisOfSecond();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 100, chronology6);
        boolean boolean8 = localTime3.isAfter((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = dateTimeFieldType9.isSupported(chronology10);
        int int12 = localTime3.indexOf(dateTimeFieldType9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology25);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        int int28 = localTime26.size();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        boolean boolean36 = localTime31.isAfter((org.joda.time.ReadablePartial) localTime35);
        int int37 = localTime26.compareTo((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.DateTime dateTime38 = dateTime20.withFields((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.Chronology chronology39 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.minuteOfDay();
        org.joda.time.DurationField durationField41 = chronology39.months();
        boolean boolean42 = dateTimeFieldType9.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.millisOfDay();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(7200000L, chronology39);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        java.lang.String str47 = calendar46.getCalendarType();
        java.time.Instant instant48 = calendar46.toInstant();
        int int49 = calendar46.getWeekYear();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromCalendarFields(calendar46);
        org.joda.time.Chronology chronology51 = localTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.weeks();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.Chronology chronology54 = chronology51.withUTC();
        org.joda.time.DateTime dateTime55 = dateTime45.toDateTime(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime45 and dateTime55", (dateTime45.compareTo(dateTime55) == 0) == dateTime45.equals(dateTime55));
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0506");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((java.lang.Object) dateTime39);
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime39.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0507");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        int int6 = dateTime4.getDayOfWeek();
        boolean boolean8 = dateTime4.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear(5);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long41 = dateTimeZone26.getMillisKeepLocal(dateTimeZone39, (long) 2);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 8, dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter11.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime44 = dateTime4.withZone(dateTimeZone26);
        java.lang.String str45 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 13, dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime44", (dateTime4.compareTo(dateTime44) == 0) == dateTime4.equals(dateTime44));
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0508");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        boolean boolean23 = dateTimeFieldType12.isSupported(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime7.toDateTime(chronology20);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(9);
        int int27 = dateTime24.getMinuteOfHour();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str29 = durationFieldType28.getName();
        java.lang.String str30 = durationFieldType28.getName();
        org.joda.time.DateTime dateTime32 = dateTime24.withFieldAdded(durationFieldType28, 50400009);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean40 = localTime38.isSupported(dateTimeFieldType39);
        java.lang.String str41 = localTime38.toString();
        org.joda.time.LocalTime localTime43 = localTime38.plusSeconds(121);
        org.joda.time.DateTime dateTime44 = dateTime34.withFields((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.Chronology chronology45 = localTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.era();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DurationField durationField48 = chronology45.weekyears();
        org.joda.time.DurationField durationField49 = durationFieldType28.getField(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime24", (dateTime3.compareTo(dateTime24) == 0) == dateTime3.equals(dateTime24));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0509");
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setTimeInMillis(100L);
        boolean boolean10 = calendar7.isWeekDateSupported();
        calendar7.roll(2, false);
        calendar7.setTimeInMillis(0L);
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone31, (long) 2);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone18);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime43 = dateTime37.withZone(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime45 = dateTime34.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime51 = dateTime47.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime47.plus(readableDuration52);
        org.joda.time.DateTime dateTime55 = dateTime47.minus(17L);
        int int56 = dateTime47.getYearOfCentury();
        boolean boolean57 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime59 = dateTime47.minus((-53940000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime45", (dateTime34.compareTo(dateTime45) == 0) == dateTime34.equals(dateTime45));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0510");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        calendar26.setTimeInMillis((long) 16);
        int int29 = calendar26.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime31.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime39.minusDays((int) 'a');
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.Chronology chronology45 = yearMonthDay44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime36.withChronology(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime36.getZone();
        boolean boolean49 = calendar26.before((java.lang.Object) dateTime36);
        java.util.Date date56 = new java.util.Date(59, 97, 4, (int) (byte) 0, 17, (int) (short) 1);
        boolean boolean57 = calendar26.after((java.lang.Object) 17);
        int int58 = calendar26.getWeeksInWeekYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant37", (dateTime36.compareTo(instant37) == 0) == dateTime36.equals(instant37));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0511");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType13.getField(chronology21);
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.months();
        org.joda.time.DurationField durationField26 = chronology21.months();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime11.toMutableDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and mutableDateTime27", (dateTime11.compareTo(mutableDateTime27) == 0) == dateTime11.equals(mutableDateTime27));
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0512");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology44);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        org.joda.time.LocalTime localTime48 = property46.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime49 = property46.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime50 = dateTime6.withFields((org.joda.time.ReadablePartial) localTime49);
        int int51 = dateTime6.getDayOfMonth();
        org.joda.time.DateTime dateTime53 = dateTime6.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property56 = dateTime55.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime55.minusDays((int) 'a');
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(0);
        org.joda.time.DateTime dateTime62 = dateTime58.plus((long) 11);
        boolean boolean63 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime39", (dateTime53.compareTo(dateTime39) == 0) == dateTime53.equals(dateTime39));
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0513");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded((long) 121, 365);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTime dateTime38 = dateTime12.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime38", (dateTime12.compareTo(dateTime38) == 0) == dateTime12.equals(dateTime38));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0514");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear((int) 'x');
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("1967-05-01T00:00:00.009");
        java.util.Calendar calendar47 = dateTime42.toCalendar(locale46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.Chronology chronology53 = localTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weeks();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekyearOfCentury();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance();
        calendar56.setTimeInMillis(100L);
        boolean boolean59 = calendar56.isWeekDateSupported();
        calendar56.roll(2, false);
        calendar56.setTimeInMillis(0L);
        java.util.TimeZone timeZone65 = calendar56.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.lang.String str71 = locale70.getISO3Country();
        java.lang.String str72 = locale70.toLanguageTag();
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.lang.String str74 = locale70.getDisplayCountry(locale73);
        java.lang.String str75 = locale69.getDisplayVariant(locale70);
        java.lang.String str76 = locale68.getDisplayScript(locale70);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone65, locale68);
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.getDefault(category78);
        java.lang.String str80 = locale68.getDisplayName(locale79);
        java.util.Locale locale84 = new java.util.Locale("fr", "Fri Feb 11 09:43:26 UTC 2022", "java.util.GregorianCalendar[time=1644572587079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=7,MILLISECOND=79,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str85 = locale68.getDisplayLanguage(locale84);
        int int86 = dateTimeField55.getMaximumShortTextLength(locale68);
        java.lang.String str87 = locale46.getDisplayCountry(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0515");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        long long41 = dateTimeZone20.convertUTCToLocal((-205356654106L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0516");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        boolean boolean66 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 13);
        org.joda.time.format.DateTimeParser dateTimeParser69 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser70 = dateTimeFormatter2.getParser();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime62", (dateTime21.compareTo(dateTime62) == 0) == dateTime21.equals(dateTime62));
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0517");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime3.withChronology(chronology15);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime34 = dateTime31.withDayOfMonth(2);
        int int35 = dateTime34.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0518");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime4 = dateTime1.plusMinutes((int) ' ');
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str18 = dateTimeFieldType17.getName();
        java.lang.String str19 = dateTimeFieldType17.toString();
        int int20 = dateTime1.get(dateTimeFieldType17);
        org.joda.time.DateTime.Property property21 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology29.getZone();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Chronology chronology43 = chronology29.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField45 = chronology29.minutes();
        org.joda.time.DateTimeField dateTimeField46 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology29.clockhourOfDay();
        int int48 = dateTime1.get(dateTimeField47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime23", (dateTime16.compareTo(dateTime23) == 0) == dateTime16.equals(dateTime23));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0519");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property18 = dateTime14.yearOfCentury();
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0520");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime3.withChronology(chronology15);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime31.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0521");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = dateTimeField24.getAsText(32770, locale26);
        java.lang.String str31 = dateTimeField24.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        int int35 = localTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        boolean boolean39 = localTime34.isAfter((org.joda.time.ReadablePartial) localTime38);
        int int40 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime34);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromCalendarFields(calendar41);
        int int43 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean48 = localTime46.isSupported(dateTimeFieldType47);
        org.joda.time.LocalTime localTime50 = localTime46.plusMillis(52);
        java.lang.Object obj51 = new java.lang.Object();
        boolean boolean52 = localTime50.equals(obj51);
        int int53 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology58);
        org.joda.time.LocalTime.Property property60 = localTime59.millisOfSecond();
        org.joda.time.LocalTime localTime61 = property60.withMaximumValue();
        org.joda.time.LocalTime localTime62 = property60.getLocalTime();
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.lang.String str65 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localTime62, (int) ' ', locale64);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology70);
        org.joda.time.LocalTime.Property property72 = localTime71.millisOfSecond();
        org.joda.time.LocalTime localTime73 = property72.withMaximumValue();
        int int75 = localTime73.getValue(0);
        java.lang.String str76 = localTime73.toString();
        org.joda.time.LocalTime localTime78 = localTime73.minusSeconds(12);
        org.joda.time.LocalTime localTime80 = localTime73.plusHours((int) 'u');
        int[] intArray81 = localTime73.getValues();
        chronology12.validate((org.joda.time.ReadablePartial) localTime62, intArray81);
        org.joda.time.DateTimeField dateTimeField83 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField84 = chronology12.eras();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        long long88 = chronology12.add(readablePeriod85, 946L, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField84", Math.signum(durationField14.compareTo(durationField84)) == -Math.signum(durationField84.compareTo(durationField14)));
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0522");
        java.lang.Object obj0 = null;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.lang.String str2 = calendar1.getCalendarType();
        java.time.Instant instant3 = calendar1.toInstant();
        int int4 = calendar1.getWeekYear();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj0, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.hourOfHalfday();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale29.getISO3Country();
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale29.getDisplayCountry(locale32);
        java.lang.String str34 = locale28.getDisplayVariant(locale29);
        java.lang.String str35 = locale27.getDisplayScript(locale29);
        java.lang.String str36 = dateTimeField25.getAsShortText((long) 0, locale29);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone20, locale29);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromCalendarFields(calendar37);
        int int39 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar37", (calendar1.compareTo(calendar37) == 0) == calendar1.equals(calendar37));
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0523");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int19 = dateTimeZone17.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime14.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes(1);
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfDay();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = locale28.toLanguageTag();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale28.getDisplayCountry(locale31);
        java.lang.String str33 = property27.getAsText(locale28);
        org.joda.time.DateTime dateTime34 = property27.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.plus(readableDuration35);
        org.joda.time.DateTime.Property property37 = dateTime34.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = property37.addToCopy((-49881509L));
        org.joda.time.DateTime.Property property40 = dateTime39.weekyear();
        int int41 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime20", (dateTime14.compareTo(dateTime20) == 0) == dateTime14.equals(dateTime20));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0524");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) 70);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (short) 0);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone26, (long) (short) 10);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime36 = dateTime34.toLocalDateTime();
        boolean boolean37 = dateTimeZone26.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone26.getStandardOffset(0L);
        org.joda.time.DateTime dateTime40 = dateTime1.withZone(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        int int43 = dateTime42.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0525");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 491);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology24.halfdays();
        org.joda.time.DurationField durationField27 = durationFieldType21.getField(chronology24);
        java.lang.String str28 = durationFieldType21.toString();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime30.minusDays((int) 'a');
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int36 = dateTime34.get(dateTimeFieldType35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.Chronology chronology44 = yearMonthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        org.joda.time.DurationField durationField47 = chronology44.months();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType35.getField(chronology44);
        org.joda.time.DurationField durationField49 = chronology44.centuries();
        long long54 = chronology44.getDateTimeMillis(292278993, (int) (short) 1, 8, 36000089);
        org.joda.time.DurationField durationField55 = durationFieldType21.getField(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter20.withChronology(chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField27 and durationField55", (durationField27.compareTo(durationField55) == 0) == durationField27.equals(durationField55));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0526");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfYear();
        org.joda.time.Chronology chronology29 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField31 = dateTimeField30.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField31, and durationField25", !(durationField25.compareTo(durationField31) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField31.compareTo(durationField25))));
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0527");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = dateTimeField19.getAsText(32770, locale21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone9, locale21);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9);
        java.util.Date date27 = calendar26.getTime();
        date27.setSeconds(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar26", (calendar25.compareTo(calendar26) == 0) == calendar25.equals(calendar26));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0528");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = chronology23.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField29, and durationField25", !(durationField25.compareTo(durationField29) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField29.compareTo(durationField25))));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0529");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField14 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.millisOfDay();
        org.joda.time.DurationField durationField16 = chronology7.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField16, and durationField14", !(durationField14.compareTo(durationField16) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField16.compareTo(durationField14))));
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0530");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar.Builder builder63 = builder61.setInstant(1980L);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        calendar64.setTimeInMillis(100L);
        boolean boolean67 = calendar64.isWeekDateSupported();
        calendar64.roll(2, false);
        calendar64.setTimeInMillis(0L);
        java.util.TimeZone timeZone73 = calendar64.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        java.util.TimeZone timeZone75 = dateTimeZone74.toTimeZone();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone75);
        java.util.Calendar.Builder builder77 = builder63.setTimeZone(timeZone75);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str82 = dateTimeZone80.getNameKey((long) 1970);
        long long86 = dateTimeZone80.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) 52, dateTimeZone80);
        java.util.TimeZone timeZone88 = dateTimeZone80.toTimeZone();
        java.util.Calendar.Builder builder89 = builder63.setTimeZone(timeZone88);
        java.util.Calendar.Builder builder93 = builder89.setWeekDate((int) (short) 100, 36002172, 79200152);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar76", (calendar48.compareTo(calendar76) == 0) == calendar48.equals(calendar76));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0531");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusDays(5);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.plus(readableDuration9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        long long22 = dateTimeZone20.convertUTCToLocal((long) 'x');
        int int24 = dateTimeZone20.getStandardOffset((long) 97);
        org.joda.time.DateTime dateTime25 = dateTime4.withZone(dateTimeZone20);
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getScript();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology33);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = dateTimeField36.getAsText(32770, locale38);
        java.lang.String str43 = dateTimeField36.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        int int47 = localTime46.getMillisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        boolean boolean51 = localTime46.isAfter((org.joda.time.ReadablePartial) localTime50);
        int int52 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localTime46);
        java.lang.String str53 = dateTimeField36.getName();
        java.util.Date date59 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.fromDateFields(date59);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localTime60, (int) 'a', locale62);
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale62.getDisplayLanguage(locale65);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.lang.String str70 = locale69.getISO3Country();
        java.lang.String str71 = locale69.toLanguageTag();
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.lang.String str73 = locale69.getDisplayCountry(locale72);
        java.lang.String str74 = locale68.getDisplayVariant(locale69);
        java.lang.String str75 = locale67.getDisplayScript(locale69);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(locale69);
        java.lang.String str77 = locale65.getDisplayName(locale69);
        java.lang.String str78 = locale27.getDisplayCountry(locale69);
        java.lang.String str79 = dateTimeZone20.getShortName(1123200032L, locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0532");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        boolean boolean30 = dateTime28.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillis(100L);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        boolean boolean43 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime28.withZoneRetainFields(dateTimeZone44);
        boolean boolean47 = dateTime45.isAfter(32L);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property52 = dateTime49.weekyear();
        org.joda.time.DateTime dateTime54 = property52.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.minus(readablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withZone(dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime63 = dateTime60.withField(dateTimeFieldType61, 1);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfHour();
        org.joda.time.DateTime dateTime68 = dateTime65.minusDays((int) 'a');
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay70 = dateTime69.toYearMonthDay();
        org.joda.time.Chronology chronology71 = yearMonthDay70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.secondOfDay();
        org.joda.time.DurationField durationField73 = chronology71.eras();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType61.getField(chronology71);
        org.joda.time.DateTimeField dateTimeField76 = chronology71.dayOfYear();
        org.joda.time.DateTime dateTime77 = dateTime45.withChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField78 = chronology71.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime45 and dateTime77", (dateTime45.compareTo(dateTime77) == 0) == dateTime45.equals(dateTime77));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0533");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime7 = dateTime4.minusDays((int) 'a');
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, 53);
        int int14 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str18 = dateTimeZone16.getName((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.lang.String str21 = dateTimeZone16.getNameKey((-58318531199879L));
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks(0);
        org.joda.time.DateTime dateTime30 = dateTime26.plusMinutes(1);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.toLanguageTag();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.lang.String str38 = locale34.getDisplayCountry(locale37);
        java.lang.String str39 = locale33.getDisplayVariant(locale34);
        java.lang.String str40 = locale32.getDisplayScript(locale34);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale34);
        java.lang.String str42 = dateTime26.toString("-1", locale34);
        org.joda.time.DateTime dateTime44 = dateTime26.plus((long) 139680);
        int int45 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes(1);
        org.joda.time.DateTime dateTime53 = dateTime51.minusMonths(0);
        org.joda.time.DateTime dateTime55 = dateTime53.minus((long) 2);
        org.joda.time.DateTime.Property property56 = dateTime53.minuteOfHour();
        org.joda.time.DateTime dateTime57 = property56.roundFloorCopy();
        int int58 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime57);
        java.lang.String str59 = dateTimeZone16.getID();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((java.lang.Object) dateTime10, dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime23", (dateTime4.compareTo(dateTime23) == 0) == dateTime4.equals(dateTime23));
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0534");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime3 = dateTime1.minus(10L);
        org.joda.time.DateTime.Property property4 = dateTime1.millisOfDay();
        org.joda.time.DateTime.Property property5 = dateTime1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTime(dateTimeZone7);
        long long11 = dateTimeZone7.convertLocalToUTC((-3360127159509L), true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime8", (dateTime1.compareTo(dateTime8) == 0) == dateTime1.equals(dateTime8));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0535");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        int int3 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        int int9 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(5);
        boolean boolean17 = dateTimeFormatter14.isPrinter();
        boolean boolean18 = dateTime11.equals((java.lang.Object) dateTimeFormatter14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 491);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.Chronology chronology32 = yearMonthDay31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology32.getZone();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.Chronology chronology46 = chronology32.withZone(dateTimeZone45);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 32770, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter24.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime52.minusDays((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        org.joda.time.Chronology chronology58 = yearMonthDay57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology58.getZone();
        org.joda.time.DurationField durationField62 = chronology58.centuries();
        long long66 = chronology58.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter50.withChronology(chronology58);
        org.joda.time.DateTime dateTime69 = dateTime1.toDateTime(chronology58);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property72 = dateTime71.minuteOfHour();
        org.joda.time.DateTime dateTime74 = dateTime71.minusDays((int) 'a');
        org.joda.time.DateTime dateTime75 = dateTime71.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay76 = dateTime75.toYearMonthDay();
        org.joda.time.Chronology chronology77 = yearMonthDay76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = chronology77.getZone();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance();
        calendar80.setTimeInMillis(100L);
        boolean boolean83 = calendar80.isWeekDateSupported();
        calendar80.roll(2, false);
        calendar80.setTimeInMillis(0L);
        java.util.TimeZone timeZone89 = calendar80.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forTimeZone(timeZone89);
        org.joda.time.Chronology chronology91 = chronology77.withZone(dateTimeZone90);
        org.joda.time.DateTimeField dateTimeField92 = chronology91.era();
        org.joda.time.DateTime dateTime93 = dateTime69.toDateTime(chronology91);
        org.joda.time.Instant instant94 = dateTime93.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime69", (dateTime1.compareTo(dateTime69) == 0) == dateTime1.equals(dateTime69));
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0536");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(14);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localTime11.getFieldTypes();
        org.joda.time.Chronology chronology13 = localTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime5.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(53);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime14", (dateTime5.compareTo(dateTime14) == 0) == dateTime5.equals(dateTime14));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0537");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone57);
        long long60 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime62 = dateTime59.minusMinutes(65432779);
        org.joda.time.DateTime dateTime64 = dateTime59.plusSeconds(277);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and dateTime58", (dateTime54.compareTo(dateTime58) == 0) == dateTime54.equals(dateTime58));
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0538");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTime.Property property18 = dateTime6.yearOfEra();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0539");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int19 = dateTimeZone17.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime14.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = dateTime14.withSecondOfMinute(28);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(8155156);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime20", (dateTime14.compareTo(dateTime20) == 0) == dateTime14.equals(dateTime20));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0540");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        int int5 = dateTime4.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        java.lang.String str11 = localTime8.toString();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(121);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.Chronology chronology15 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTime dateTime17 = dateTime2.withChronology(chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(1969);
        org.joda.time.DateTime dateTime20 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime dateTime30 = dateTime27.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property31 = dateTime30.monthOfYear();
        boolean boolean32 = localTime25.equals((java.lang.Object) dateTime30);
        org.joda.time.LocalTime localTime34 = localTime25.withMillisOfDay(4);
        int[] intArray36 = chronology23.get((org.joda.time.ReadablePartial) localTime25, 9223371986234400089L);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField42 = chronology40.halfdays();
        org.joda.time.DurationField durationField43 = durationFieldType37.getField(chronology40);
        java.lang.String str44 = durationFieldType37.toString();
        java.lang.String str45 = durationFieldType37.toString();
        org.joda.time.LocalTime localTime47 = localTime25.withFieldAdded(durationFieldType37, 36000099);
        org.joda.time.DateTime dateTime49 = dateTime20.withFieldAdded(durationFieldType37, 4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime20", (dateTime2.compareTo(dateTime20) == 0) == dateTime2.equals(dateTime20));
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0541");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMinutes(1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        boolean boolean14 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks(0);
        org.joda.time.DateTime dateTime25 = dateTime21.plusMinutes(1);
        org.joda.time.DateTime dateTime27 = dateTime25.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.withPeriodAdded(readablePeriod28, 36000097);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        org.joda.time.DateTime dateTime42 = dateTime27.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime13.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(2592000072L, dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime43", (dateTime2.compareTo(dateTime43) == 0) == dateTime2.equals(dateTime43));
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0542");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalTime localTime18 = dateTime14.toLocalTime();
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0543");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime8.withPeriodAdded(readablePeriod9, 292278993);
        org.joda.time.DateTime dateTime12 = localTime8.toDateTimeToday();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        int int17 = localTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 100, chronology19);
        boolean boolean21 = localTime16.isAfter((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        int int25 = localTime16.indexOf(dateTimeFieldType22);
        org.joda.time.Chronology chronology26 = localTime16.getChronology();
        long long30 = chronology26.add((long) 19, (long) 97, 3);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0, chronology26);
        boolean boolean32 = localTime8.equals((java.lang.Object) chronology26);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology45);
        org.joda.time.LocalTime.Property property47 = localTime46.millisOfSecond();
        int int48 = localTime46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        int int52 = localTime51.getMillisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        boolean boolean56 = localTime51.isAfter((org.joda.time.ReadablePartial) localTime55);
        int int57 = localTime46.compareTo((org.joda.time.ReadablePartial) localTime55);
        org.joda.time.DateTime dateTime58 = dateTime40.withFields((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime40.plus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str62 = dateTimeFieldType61.getName();
        boolean boolean63 = dateTime40.isSupported(dateTimeFieldType61);
        boolean boolean64 = localTime8.isSupported(dateTimeFieldType61);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology69);
        org.joda.time.LocalTime.Property property71 = localTime70.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField72 = property71.getField();
        org.joda.time.LocalTime localTime73 = property71.getLocalTime();
        org.joda.time.LocalTime localTime74 = property71.roundCeilingCopy();
        boolean boolean75 = property71.isLeap();
        org.joda.time.LocalTime localTime76 = property71.withMinimumValue();
        org.joda.time.LocalTime localTime77 = property71.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean79 = localTime77.isSupported(dateTimeFieldType78);
        java.lang.String str80 = dateTimeFieldType78.getName();
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType78.getRangeDurationType();
        org.joda.time.LocalTime localTime83 = localTime8.withFieldAdded(durationFieldType81, (-36002075));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime34", (dateTime31.compareTo(dateTime34) == 0) == dateTime31.equals(dateTime34));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0544");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withDurationAdded(readableDuration6, 32770);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 100, chronology10);
        int int12 = localTime11.getMillisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 100, chronology14);
        boolean boolean16 = localTime11.isAfter((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = dateTimeFieldType17.isSupported(chronology18);
        int int20 = localTime11.indexOf(dateTimeFieldType17);
        org.joda.time.Chronology chronology21 = localTime11.getChronology();
        long long25 = chronology21.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime3.toMutableDateTime(chronology21);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 8, dateTimeZone40);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(dateTimeZone40);
        org.joda.time.LocalTime localTime59 = localTime57.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime61 = localTime59.withHourOfDay(17);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology66);
        org.joda.time.LocalTime.Property property68 = localTime67.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField69 = property68.getField();
        org.joda.time.LocalTime localTime70 = property68.getLocalTime();
        org.joda.time.LocalTime localTime71 = property68.roundCeilingCopy();
        boolean boolean72 = property68.isLeap();
        org.joda.time.LocalTime localTime73 = property68.withMinimumValue();
        org.joda.time.LocalTime localTime74 = property68.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime75 = property68.roundCeilingCopy();
        int int76 = localTime61.compareTo((org.joda.time.ReadablePartial) localTime75);
        int[] intArray78 = chronology21.get((org.joda.time.ReadablePartial) localTime61, (-1644536626474L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime27", (dateTime3.compareTo(mutableDateTime27) == 0) == dateTime3.equals(mutableDateTime27));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0545");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DurationField durationField12 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        org.joda.time.DurationField durationField14 = chronology7.eras();
        org.joda.time.DurationField durationField15 = chronology7.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField14", Math.signum(durationField12.compareTo(durationField14)) == -Math.signum(durationField14.compareTo(durationField12)));
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0546");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        int int5 = dateTime4.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        java.lang.String str11 = localTime8.toString();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(121);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.Chronology chronology15 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTime dateTime17 = dateTime2.withChronology(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTimeISO();
        java.util.Date date20 = dateTime19.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime17", (dateTime2.compareTo(dateTime17) == 0) == dateTime2.equals(dateTime17));
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0547");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(6);
        org.joda.time.DateTime dateTime7 = dateTime1.plusMillis(24);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime9.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.plus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime9.minus(17L);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property19 = dateTime9.property(dateTimeFieldType18);
        boolean boolean20 = dateTime1.isSupported(dateTimeFieldType18);
        org.joda.time.DateTime dateTime22 = dateTime1.withMillisOfDay(36000107);
        org.joda.time.DateTime dateTime24 = dateTime22.plusWeeks(1439);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long57 = dateTimeZone42.getMillisKeepLocal(dateTimeZone55, (long) 2);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 8, dateTimeZone42);
        org.joda.time.Chronology chronology59 = chronology27.withZone(dateTimeZone42);
        org.joda.time.DurationField durationField60 = chronology59.centuries();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(56, 59);
        org.joda.time.Chronology chronology64 = chronology59.withZone(dateTimeZone63);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale68.getISO3Country();
        java.lang.String str70 = locale68.toLanguageTag();
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.lang.String str72 = locale68.getDisplayCountry(locale71);
        java.lang.String str73 = locale67.getDisplayVariant(locale68);
        java.lang.String str74 = locale66.getDisplayScript(locale68);
        java.lang.String str75 = locale68.getScript();
        java.util.Set<java.lang.String> strSet76 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str77 = dateTimeZone63.getShortName((long) (byte) 1, locale68);
        org.joda.time.DateTime dateTime78 = dateTime22.toDateTime(dateTimeZone63);
        int int80 = dateTimeZone63.getOffset((-1581379253000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime78", (dateTime22.compareTo(dateTime78) == 0) == dateTime22.equals(dateTime78));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0548");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        boolean boolean7 = calendar0.isWeekDateSupported();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = calendar0.getDisplayNames((int) (short) 1, 0, locale11);
        java.util.TimeZone timeZone13 = calendar0.getTimeZone();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes(1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology27);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = dateTimeField30.getAsText(32770, locale32);
        int int37 = dateTimeField30.getMaximumValue((long) 0);
        int int38 = dateTime21.get(dateTimeField30);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = dateTimeField30.getAsText(1967, locale40);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology46);
        org.joda.time.LocalTime.Property property48 = localTime47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        long long51 = dateTimeField49.roundFloor((long) (short) 100);
        java.util.Locale.Category category52 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category52, locale53);
        int int55 = dateTimeField49.getMaximumTextLength(locale53);
        java.util.Locale locale56 = locale53.stripExtensions();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale40.getDisplayLanguage(locale56);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone13, locale40);
        java.util.Date date61 = calendar60.getTime();
        java.util.Date date62 = calendar60.getTime();
        date62.setYear(123);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar60", (calendar0.compareTo(calendar60) == 0) == calendar0.equals(calendar60));
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0549");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime7.minus((-251999990L));
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.Chronology chronology32 = chronology18.withZone(dateTimeZone31);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 32770, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime10.toMutableDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 0);
        int int40 = dateTime39.getEra();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime43 = dateTime39.minusMinutes(1);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfYear();
        org.joda.time.DateTime dateTime45 = property44.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology50);
        org.joda.time.LocalTime.Property property52 = localTime51.millisOfSecond();
        int int53 = localTime51.size();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) 100, chronology55);
        int int57 = localTime56.getMillisOfSecond();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 100, chronology59);
        boolean boolean61 = localTime56.isAfter((org.joda.time.ReadablePartial) localTime60);
        int int62 = localTime51.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.DateTime dateTime63 = dateTime45.withFields((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.Chronology chronology64 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.millisOfDay();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((java.lang.Object) 36000097L, chronology64);
        boolean boolean67 = dateTime66.isAfterNow();
        org.joda.time.DateTime.Property property68 = dateTime66.yearOfEra();
        int int69 = property68.getMinimumValue();
        boolean boolean70 = dateTimeZone31.equals((java.lang.Object) property68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime36", (dateTime10.compareTo(mutableDateTime36) == 0) == dateTime10.equals(mutableDateTime36));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0550");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DurationField durationField13 = chronology10.weekyears();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology10.add(readablePeriod14, (long) 32, 102);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField13", (durationField9.compareTo(durationField13) == 0) == durationField9.equals(durationField13));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0551");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DurationField durationField12 = chronology8.centuries();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology8);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        long long41 = dateTimeZone26.getMillisKeepLocal(dateTimeZone39, (long) 2);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 8, dateTimeZone26);
        org.joda.time.Chronology chronology43 = chronology8.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekyearOfCentury();
        org.joda.time.DurationField durationField45 = chronology43.months();
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField46, durationField9, and durationField11", !(durationField46.compareTo(durationField9) == 0) || (Math.signum(durationField46.compareTo(durationField11)) == Math.signum(durationField9.compareTo(durationField11))));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0552");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear(6);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter16.withChronology(chronology26);
        org.joda.time.DurationField durationField31 = chronology26.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField28, durationField31, and durationField28", !(durationField28.compareTo(durationField31) == 0) || (Math.signum(durationField28.compareTo(durationField28)) == Math.signum(durationField31.compareTo(durationField28))));
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0553");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) 70);
        java.lang.String str14 = dateTimeZone10.getShortName(1L);
        long long16 = dateTimeZone10.convertUTCToLocal((long) 1970);
        java.lang.String str17 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        int int21 = dateTime20.getEra();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes(1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology31);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        int int34 = localTime32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        int int38 = localTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        boolean boolean42 = localTime37.isAfter((org.joda.time.ReadablePartial) localTime41);
        int int43 = localTime32.compareTo((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.DateTime dateTime44 = dateTime26.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime26.plus(readablePeriod45);
        org.joda.time.DateTime dateTime48 = dateTime26.plusYears(2);
        org.joda.time.DateTime dateTime50 = dateTime26.plusSeconds(4);
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale51.getDisplayName();
        java.util.Calendar calendar53 = dateTime26.toCalendar(locale51);
        java.lang.String str54 = locale51.getDisplayName();
        java.lang.String str55 = dateTimeZone10.getName((-1581436852883L), locale51);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar53", (calendar0.compareTo(calendar53) == 0) == calendar0.equals(calendar53));
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0554");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(readableDuration8, 53);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology15);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.withMaximumValue();
        org.joda.time.LocalTime localTime19 = property17.getLocalTime();
        int int20 = localTime19.size();
        org.joda.time.Chronology chronology21 = localTime19.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime7.toMutableDateTime(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime22", (dateTime7.compareTo(mutableDateTime22) == 0) == dateTime7.equals(mutableDateTime22));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0555");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.lang.String str7 = property6.getName();
        java.lang.String str8 = property6.getAsString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays(0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        int int16 = dateTime15.getMillisOfSecond();
        int int17 = property6.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTime21.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.withDurationAdded(readableDuration24, 32770);
        int int27 = property6.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays((int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime33.toYearMonthDay();
        org.joda.time.Chronology chronology35 = yearMonthDay34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology35.getZone();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime26.toMutableDateTime(dateTimeZone37);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and mutableDateTime38", (dateTime21.compareTo(mutableDateTime38) == 0) == dateTime21.equals(mutableDateTime38));
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0556");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime1.plusHours(6);
        org.joda.time.DateTime dateTime17 = dateTime1.minus((-1L));
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.DateTime dateTime20 = property18.roundCeilingCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.withMillis((long) 11);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        boolean boolean33 = dateTimeFieldType31.isSupported(chronology32);
        int int34 = localTime25.indexOf(dateTimeFieldType31);
        org.joda.time.Chronology chronology35 = localTime25.getChronology();
        long long39 = chronology35.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime20.toMutableDateTime(chronology35);
        org.joda.time.DurationField durationField43 = chronology35.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime42", (dateTime20.compareTo(mutableDateTime42) == 0) == dateTime20.equals(mutableDateTime42));
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime2.withMillisOfDay(9);
        org.joda.time.LocalTime.Property property11 = localTime2.secondOfMinute();
        org.joda.time.LocalTime.Property property12 = localTime2.hourOfDay();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        java.lang.String str14 = calendar13.getCalendarType();
        java.time.Instant instant15 = calendar13.toInstant();
        int int16 = calendar13.getWeekYear();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar13);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime dateTime20 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalTime localTime22 = localTime2.minusHours(36002172);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime20", (dateTime8.compareTo(dateTime20) == 0) == dateTime8.equals(dateTime20));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0558");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime1.minusHours(32770);
        boolean boolean8 = dateTime7.isEqualNow();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes(1);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(0);
        org.joda.time.DateTime dateTime20 = dateTime18.minus((long) 2);
        int int21 = dateTime18.getHourOfDay();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfYear();
        long long36 = chronology29.add(100L, (long) 53, 0);
        org.joda.time.DateTime dateTime37 = dateTime18.toDateTime(chronology29);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) dateTime10, chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime37", (dateTime16.compareTo(dateTime37) == 0) == dateTime16.equals(dateTime37));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0559");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField13 = chronology7.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField13, and durationField9", !(durationField9.compareTo(durationField13) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField13.compareTo(durationField9))));
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0560");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 8, dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = dateTime3.withZone(dateTimeZone25);
        org.joda.time.LocalDate localDate44 = dateTime3.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime43", (dateTime3.compareTo(dateTime43) == 0) == dateTime3.equals(dateTime43));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0561");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) 'a');
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.setTimeInMillis(100L);
        boolean boolean41 = calendar38.isWeekDateSupported();
        calendar38.roll(2, false);
        calendar38.setTimeInMillis(0L);
        java.util.TimeZone timeZone47 = calendar38.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset((long) 70);
        java.lang.String str52 = dateTimeZone48.getShortName(1L);
        long long56 = dateTimeZone48.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime57 = dateTime36.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMillis(11);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths(0);
        org.joda.time.DateTime dateTime62 = localTime31.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        java.util.GregorianCalendar gregorianCalendar63 = dateTime62.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime57", (dateTime36.compareTo(dateTime57) == 0) == dateTime36.equals(dateTime57));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0562");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime5.plusYears(11);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime5.toGregorianCalendar();
        org.joda.time.DateTime.Property property12 = dateTime5.yearOfEra();
        long long13 = property12.remainder();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTime dateTime16 = property12.addToCopy(56);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long31 = dateTimeZone29.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property36 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime38 = property36.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(6);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        int int42 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime45 = dateTime18.withMillis((long) 99);
        org.joda.time.DateTime dateTime47 = dateTime18.plusWeeks(3);
        org.joda.time.DateTime dateTime49 = dateTime47.minusSeconds(999);
        int int50 = dateTime47.getWeekyear();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime52.minusDays((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int58 = dateTime56.get(dateTimeFieldType57);
        org.joda.time.YearMonthDay yearMonthDay59 = dateTime56.toYearMonthDay();
        boolean boolean61 = dateTime56.isBefore((long) (-1));
        int int62 = dateTime56.getEra();
        boolean boolean63 = dateTime47.equals((java.lang.Object) dateTime56);
        boolean boolean64 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar11 and calendar19", (gregorianCalendar11.compareTo(calendar19) == 0) == gregorianCalendar11.equals(calendar19));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0563");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) calendar0);
        int int5 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localTime1 and localTime4", (localTime1.compareTo(localTime4) == 0) == localTime1.equals(localTime4));
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0564");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = chronology3.halfdays();
        org.joda.time.DurationField durationField6 = durationFieldType0.getField(chronology3);
        java.lang.String str7 = durationFieldType0.toString();
        java.lang.String str8 = durationFieldType0.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.Chronology chronology16 = yearMonthDay15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.Chronology chronology30 = chronology16.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfWeek();
        org.joda.time.DurationField durationField32 = chronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology30.getZone();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = chronology30.add(readablePeriod35, 62135596800226L, 0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology30);
        java.lang.String str40 = chronology30.toString();
        boolean boolean41 = durationFieldType0.isSupported(chronology30);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime44.minusDays((int) 'a');
        org.joda.time.DateTime dateTime48 = dateTime44.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.Chronology chronology50 = yearMonthDay49.getChronology();
        org.joda.time.DurationField durationField51 = durationFieldType42.getField(chronology50);
        org.joda.time.Chronology chronology52 = chronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.clockhourOfDay();
        org.joda.time.DurationField durationField55 = durationFieldType0.getField(chronology52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField32 and durationField51", (durationField32.compareTo(durationField51) == 0) == durationField32.equals(durationField51));
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0565");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.Chronology chronology16 = chronology7.withUTC();
        org.joda.time.DurationField durationField17 = chronology16.minutes();
        long long21 = chronology16.add((long) 73, 86000L, 0);
        org.joda.time.DurationField durationField22 = chronology16.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField11, and durationField17", !(durationField22.compareTo(durationField11) == 0) || (Math.signum(durationField22.compareTo(durationField17)) == Math.signum(durationField11.compareTo(durationField17))));
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0566");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) 70);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getOffsetFromLocal((long) (short) 0);
        long long33 = dateTimeZone15.getMillisKeepLocal(dateTimeZone29, (long) (short) 10);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime39 = dateTime37.toLocalDateTime();
        boolean boolean40 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = dateTime1.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology46);
        org.joda.time.LocalTime.Property property48 = localTime47.millisOfSecond();
        int int49 = localTime47.size();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 100, chronology51);
        int int53 = localTime52.getMillisOfSecond();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) 100, chronology55);
        boolean boolean57 = localTime52.isAfter((org.joda.time.ReadablePartial) localTime56);
        int int58 = localTime47.compareTo((org.joda.time.ReadablePartial) localTime56);
        org.joda.time.LocalTime localTime60 = localTime47.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean62 = localTime47.isSupported(dateTimeFieldType61);
        org.joda.time.LocalTime.Property property63 = localTime47.millisOfDay();
        boolean boolean64 = property63.isLeap();
        org.joda.time.LocalTime localTime66 = property63.addCopy((-63035999903L));
        org.joda.time.LocalTime localTime68 = property63.setCopy(97);
        org.joda.time.DateTime dateTime69 = localTime68.toDateTimeToday();
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localTime70.getFieldType(0);
        java.lang.String str73 = dateTimeFieldType72.toString();
        int int74 = localTime68.get(dateTimeFieldType72);
        int int75 = dateTime1.get(dateTimeFieldType72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime41", (dateTime35.compareTo(dateTime41) == 0) == dateTime35.equals(dateTime41));
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0567");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime4.minusSeconds(17);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int17 = dateTimeZone15.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime13.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTimeISO();
        int int20 = dateTime13.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime13", (dateTime18.compareTo(dateTime13) == 0) == dateTime18.equals(dateTime13));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0568");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(11);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths(0);
        int int30 = dateTime29.getSecondOfMinute();
        org.joda.time.DateTime.Property property31 = dateTime29.millisOfSecond();
        java.lang.String str32 = property31.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime25", (dateTime4.compareTo(dateTime25) == 0) == dateTime4.equals(dateTime25));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0569");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 4);
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology10);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = dateTimeField13.getAsText(32770, locale15);
        java.lang.String str20 = dateTimeField13.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        int int24 = localTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        boolean boolean28 = localTime23.isAfter((org.joda.time.ReadablePartial) localTime27);
        int int29 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        java.lang.String str30 = dateTimeField13.getName();
        java.util.Date date36 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromDateFields(date36);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localTime37, (int) 'a', locale39);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = locale39.getDisplayLanguage(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.lang.String str47 = locale46.getISO3Country();
        java.lang.String str48 = locale46.toLanguageTag();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale46.getDisplayCountry(locale49);
        java.lang.String str51 = locale45.getDisplayVariant(locale46);
        java.lang.String str52 = locale44.getDisplayScript(locale46);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale46);
        java.lang.String str54 = locale42.getDisplayName(locale46);
        java.util.Calendar.Builder builder55 = builder5.setLocale(locale46);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance();
        calendar56.setTimeInMillis(100L);
        boolean boolean59 = calendar56.isWeekDateSupported();
        calendar56.roll(2, false);
        calendar56.setTimeInMillis(0L);
        java.util.TimeZone timeZone65 = calendar56.getTimeZone();
        java.util.Calendar.Builder builder66 = builder5.setTimeZone(timeZone65);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance();
        calendar67.setTimeInMillis(100L);
        boolean boolean70 = calendar67.isWeekDateSupported();
        calendar67.roll(2, false);
        calendar67.setTimeInMillis(0L);
        java.util.TimeZone timeZone76 = calendar67.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        java.util.TimeZone timeZone78 = dateTimeZone77.toTimeZone();
        java.util.Calendar.Builder builder79 = builder66.setTimeZone(timeZone78);
        java.util.Calendar calendar80 = builder79.build();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance();
        calendar81.setTimeInMillis(100L);
        java.util.TimeZone timeZone84 = calendar81.getTimeZone();
        calendar80.setTimeZone(timeZone84);
        java.util.Calendar.Builder builder86 = builder0.setTimeZone(timeZone84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar80", (calendar56.compareTo(calendar80) == 0) == calendar56.equals(calendar80));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0570");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField12, and durationField9", !(durationField9.compareTo(durationField12) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField12.compareTo(durationField9))));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0571");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(20);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean18 = localTime16.isSupported(dateTimeFieldType17);
        java.lang.String str19 = localTime16.toString();
        org.joda.time.LocalTime localTime21 = localTime16.plusSeconds(121);
        org.joda.time.DateTime dateTime22 = dateTime12.withFields((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.Chronology chronology23 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.era();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.DateTime dateTime26 = dateTime8.toDateTime(chronology23);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology23.add(readablePeriod27, 61200089L, 1319);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime26", (dateTime8.compareTo(dateTime26) == 0) == dateTime8.equals(dateTime26));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0572");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.hourOfDay();
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.yearOfCentury();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int23 = dateTimeZone21.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setTimeInMillis(100L);
        boolean boolean27 = calendar24.isWeekDateSupported();
        calendar24.roll(2, false);
        calendar24.setTimeInMillis(0L);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long36 = dateTimeZone21.getMillisKeepLocal(dateTimeZone34, (long) 2);
        org.joda.time.Chronology chronology37 = chronology5.withZone(dateTimeZone34);
        org.joda.time.DurationField durationField38 = chronology5.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField38, and durationField8", !(durationField8.compareTo(durationField38) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField38.compareTo(durationField8))));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0573");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime28.withYearOfEra(14);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int39 = dateTime37.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime41.minusDays((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        org.joda.time.DurationField durationField50 = chronology47.months();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType38.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.year();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.millisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime31.withChronology(chronology47);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime55", (dateTime31.compareTo(dateTime55) == 0) == dateTime31.equals(dateTime55));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0574");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        int int3 = dateTime1.getYearOfCentury();
        int int4 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withCenturyOfEra(99);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        org.joda.time.DurationField durationField18 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField22 = chronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology15.getZone();
        org.joda.time.DateTime dateTime24 = dateTime6.withChronology(chronology15);
        org.joda.time.DurationField durationField25 = chronology15.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime24", (dateTime6.compareTo(dateTime24) == 0) == dateTime6.equals(dateTime24));
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0575");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        int int19 = localTime10.indexOf(dateTimeFieldType16);
        int int20 = localTime7.indexOf(dateTimeFieldType16);
        org.joda.time.LocalTime.Property property21 = localTime7.millisOfSecond();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.withHourOfDay(6);
        org.joda.time.DateTime dateTime31 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology36);
        org.joda.time.LocalTime.Property property38 = localTime37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.LocalTime localTime40 = property38.getLocalTime();
        org.joda.time.LocalTime localTime41 = property38.roundCeilingCopy();
        org.joda.time.LocalTime localTime43 = property38.addCopy(6);
        org.joda.time.DurationField durationField44 = property38.getDurationField();
        int int45 = property38.get();
        org.joda.time.LocalTime localTime46 = property38.withMinimumValue();
        org.joda.time.LocalTime localTime47 = property38.withMaximumValue();
        org.joda.time.LocalTime localTime48 = property38.roundCeilingCopy();
        org.joda.time.LocalTime localTime49 = localTime7.withFields((org.joda.time.ReadablePartial) localTime48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        int int52 = dateTime51.getEra();
        org.joda.time.DateTime dateTime53 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime55 = dateTime51.minusMinutes(1);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths(0);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime55.minus(readableDuration58);
        boolean boolean60 = localTime7.equals((java.lang.Object) dateTime59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        int int63 = dateTime62.getEra();
        org.joda.time.DateTime dateTime64 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime66 = dateTime62.minusMinutes(1);
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfYear();
        org.joda.time.DateTime dateTime68 = property67.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = dateTime68.toString(dateTimeFormatter69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean72 = dateTime68.isSupported(dateTimeFieldType71);
        org.joda.time.Chronology chronology73 = null;
        boolean boolean74 = dateTimeFieldType71.isSupported(chronology73);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance();
        java.lang.String str76 = calendar75.getCalendarType();
        java.time.Instant instant77 = calendar75.toInstant();
        int int78 = calendar75.getWeekYear();
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromCalendarFields(calendar75);
        org.joda.time.Chronology chronology80 = localTime79.getChronology();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.hourOfDay();
        org.joda.time.DurationField durationField83 = chronology80.eras();
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType71.getField(chronology80);
        int int85 = dateTime59.get(dateTimeFieldType71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField44 and durationField83", Math.signum(durationField44.compareTo(durationField83)) == -Math.signum(durationField83.compareTo(durationField44)));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0576");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(6);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes(1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean38 = dateTime34.isSupported(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime41.minusDays((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        org.joda.time.DurationField durationField50 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.dayOfYear();
        boolean boolean53 = durationFieldType39.isSupported(chronology47);
        long long57 = chronology47.add((-1581379253000L), (long) 'u', (int) (short) 1);
        org.joda.time.DateTime dateTime58 = dateTime24.toDateTime(chronology47);
        org.joda.time.DateTime dateTime60 = dateTime58.minusYears(20);
        int int61 = dateTime60.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime58", (dateTime23.compareTo(dateTime58) == 0) == dateTime23.equals(dateTime58));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0577");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        int int15 = dateTime12.getEra();
        int int16 = dateTime12.getMinuteOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology24.getZone();
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime12.withChronology(chronology24);
        org.joda.time.DateTime dateTime32 = dateTime30.plusDays(73);
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime30", (dateTime12.compareTo(dateTime30) == 0) == dateTime12.equals(dateTime30));
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0578");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar calendar75 = builder61.build();
        java.util.Calendar.Builder builder80 = builder61.setTimeOfDay(28026832, 8, 1320, 67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar75", (calendar51.compareTo(calendar75) == 0) == calendar51.equals(calendar75));
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0579");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.withDurationAdded(139680L, (-1));
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(56);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime20.toYearMonthDay();
        org.joda.time.Chronology chronology22 = yearMonthDay21.getChronology();
        org.joda.time.DurationField durationField23 = durationFieldType14.getField(chronology22);
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTime dateTime25 = dateTime10.toDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime27.minusDays((int) 'a');
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        org.joda.time.Chronology chronology33 = yearMonthDay32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.millisOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime25, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime25", (dateTime10.compareTo(dateTime25) == 0) == dateTime10.equals(dateTime25));
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0580");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property40 = dateTime6.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime39", (dateTime6.compareTo(dateTime39) == 0) == dateTime6.equals(dateTime39));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0581");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime8.plus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours(268);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 1438, dateTimeZone13);
        long long17 = dateTimeZone13.convertLocalToUTC(3420277L, true);
        org.joda.time.DateTime dateTime18 = localTime8.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime20.year();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone44);
        org.joda.time.DateTime dateTime61 = dateTime20.toDateTime(dateTimeZone44);
        long long63 = dateTimeZone44.previousTransition((-1L));
        java.util.TimeZone timeZone64 = dateTimeZone44.toTimeZone();
        long long66 = dateTimeZone13.getMillisKeepLocal(dateTimeZone44, 2435645135219L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime61", (dateTime20.compareTo(dateTime61) == 0) == dateTime20.equals(dateTime61));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0582");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        int int21 = dateTime20.getEra();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes(1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra(11);
        int int31 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.setTimeInMillis(100L);
        boolean boolean45 = calendar42.isWeekDateSupported();
        calendar42.roll(2, false);
        calendar42.setTimeInMillis(0L);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.Chronology chronology53 = chronology39.withZone(dateTimeZone52);
        org.joda.time.DurationField durationField54 = chronology53.seconds();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfDay();
        org.joda.time.DateTime dateTime57 = dateTime12.toDateTime(chronology53);
        org.joda.time.DurationField durationField58 = chronology53.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime57", (dateTime1.compareTo(dateTime57) == 0) == dateTime1.equals(dateTime57));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0583");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.DateTime.Property property15 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(0);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMinutes(1);
        org.joda.time.DateTime dateTime26 = dateTime24.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withPeriodAdded(readablePeriod27, 36000097);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime26.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime12.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 0);
        int int45 = dateTime44.getEra();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime48 = dateTime44.minusMinutes(1);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfDay((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int53 = dateTime48.get(dateTimeFieldType52);
        org.joda.time.DateTime.Property property54 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime56 = dateTime48.withMillisOfDay(7);
        org.joda.time.DateTime dateTime58 = dateTime56.minusHours(32399999);
        int int59 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0584");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        java.lang.String str12 = property6.getAsText(locale7);
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        boolean boolean17 = dateTime15.isEqual((long) 121);
        boolean boolean18 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology26.getZone();
        org.joda.time.DurationField durationField30 = chronology26.centuries();
        long long34 = chronology26.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime35 = dateTime15.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField36 = chronology26.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime35", (dateTime5.compareTo(dateTime35) == 0) == dateTime5.equals(dateTime35));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0585");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(1);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean24 = dateTime20.isSupported(dateTimeFieldType23);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime20.toGregorianCalendar();
        int int26 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = property14.roundCeilingCopy();
        org.joda.time.DateTime dateTime28 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property33 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((long) (short) 0);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.setTimeInMillis(100L);
        boolean boolean41 = calendar38.isWeekDateSupported();
        calendar38.roll(2, false);
        calendar38.setTimeInMillis(0L);
        java.util.TimeZone timeZone47 = calendar38.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int51 = dateTimeZone49.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance();
        calendar52.setTimeInMillis(100L);
        boolean boolean55 = calendar52.isWeekDateSupported();
        calendar52.roll(2, false);
        calendar52.setTimeInMillis(0L);
        java.util.TimeZone timeZone61 = calendar52.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        long long64 = dateTimeZone49.getMillisKeepLocal(dateTimeZone62, (long) 2);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 8, dateTimeZone49);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.now(dateTimeZone49);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) 10, dateTimeZone49);
        org.joda.time.DateTime dateTime68 = dateTime35.withZone(dateTimeZone49);
        int int69 = property14.getDifference((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeField dateTimeField70 = property14.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime68", (dateTime1.compareTo(dateTime68) == 0) == dateTime1.equals(dateTime68));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0586");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        boolean boolean23 = dateTimeFieldType12.isSupported(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime7.toDateTime(chronology20);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime25", (dateTime3.compareTo(dateTime25) == 0) == dateTime3.equals(dateTime25));
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0587");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        int int5 = dateTime4.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        java.lang.String str11 = localTime8.toString();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(121);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.Chronology chronology15 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTime dateTime17 = dateTime2.withChronology(chronology15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property22 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZone(dateTimeZone29);
        int int31 = dateTime30.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (byte) 100);
        java.lang.String str35 = dateTimeZone32.getID();
        java.lang.String str37 = dateTimeZone32.getName((long) 0);
        org.joda.time.DateTime dateTime38 = dateTime30.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        boolean boolean40 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 28);
        org.joda.time.DateTime dateTime45 = dateTime41.withZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = dateTime17.withZone(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime41", (dateTime2.compareTo(dateTime41) == 0) == dateTime2.equals(dateTime41));
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0588");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 8, dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = dateTime3.withZone(dateTimeZone25);
        int int44 = dateTime43.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.withDurationAdded(readableDuration45, 0);
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears(79199985);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime47", (dateTime3.compareTo(dateTime47) == 0) == dateTime3.equals(dateTime47));
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0589");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        calendar26.setTimeInMillis((long) 16);
        int int29 = calendar26.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime31.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime39.minusDays((int) 'a');
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.Chronology chronology45 = yearMonthDay44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime36.withChronology(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime36.getZone();
        boolean boolean49 = calendar26.before((java.lang.Object) dateTime36);
        java.util.Date date56 = new java.util.Date(59, 97, 4, (int) (byte) 0, 17, (int) (short) 1);
        boolean boolean57 = calendar26.after((java.lang.Object) 17);
        calendar26.setMinimalDaysInFirstWeek(59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant37", (dateTime36.compareTo(instant37) == 0) == dateTime36.equals(instant37));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0590");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMinutes(2);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        int int11 = dateTime10.getEra();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes(1);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        int int24 = localTime22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        int int28 = localTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        boolean boolean32 = localTime27.isAfter((org.joda.time.ReadablePartial) localTime31);
        int int33 = localTime22.compareTo((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.DateTime dateTime34 = dateTime16.withFields((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime16.plus(readablePeriod35);
        int int37 = dateTime16.getDayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime16.minus(32770L);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readablePeriod40);
        boolean boolean42 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int58 = dateTimeZone56.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance();
        calendar59.setTimeInMillis(100L);
        boolean boolean62 = calendar59.isWeekDateSupported();
        calendar59.roll(2, false);
        calendar59.setTimeInMillis(0L);
        java.util.TimeZone timeZone68 = calendar59.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        long long71 = dateTimeZone56.getMillisKeepLocal(dateTimeZone69, (long) 2);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 8, dateTimeZone56);
        org.joda.time.LocalTime localTime73 = org.joda.time.LocalTime.now(dateTimeZone56);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((long) 10, dateTimeZone56);
        java.lang.String str75 = dateTimeZone56.getID();
        long long77 = dateTimeZone56.nextTransition(10L);
        int int79 = dateTimeZone56.getStandardOffset(259200000L);
        org.joda.time.DateTime dateTime80 = dateTime41.withZone(dateTimeZone56);
        long long84 = dateTimeZone56.convertLocalToUTC((long) 79200152, false, (-2177452800000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and dateTime80", (dateTime39.compareTo(dateTime80) == 0) == dateTime39.equals(dateTime80));
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0591");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(14);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTimeISO();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance();
        calendar8.setTimeInMillis(100L);
        boolean boolean11 = calendar8.isWeekDateSupported();
        calendar8.roll(2, false);
        calendar8.setTimeInMillis(0L);
        java.util.TimeZone timeZone17 = calendar8.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int21 = dateTimeZone19.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        java.lang.String str23 = dateTimeZone19.getID();
        java.util.TimeZone timeZone24 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone19);
        boolean boolean26 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant7", (dateTime1.compareTo(instant7) == 0) == dateTime1.equals(instant7));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0592");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfWeek(2);
        org.joda.time.LocalDate localDate11 = dateTime10.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean14 = localDate11.equals((java.lang.Object) dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime(dateTimeZone13);
        boolean boolean17 = dateTime3.isBefore(1052258312449000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0593");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 0);
        int int4 = dateTime3.getEra();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime3.minusMinutes(1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 100, chronology19);
        int int21 = localTime20.getMillisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        boolean boolean25 = localTime20.isAfter((org.joda.time.ReadablePartial) localTime24);
        int int26 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.DateTime dateTime27 = dateTime9.withFields((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime9.plus(readablePeriod28);
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.getDefault(category30);
        boolean boolean32 = dateTime9.equals((java.lang.Object) locale31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology37);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfSecond();
        int int40 = localTime38.size();
        int[] intArray41 = localTime38.getValues();
        org.joda.time.LocalTime localTime43 = localTime38.plusSeconds((int) (short) 100);
        org.joda.time.LocalTime.Property property44 = localTime38.secondOfMinute();
        org.joda.time.LocalTime localTime45 = property44.withMaximumValue();
        org.joda.time.LocalTime localTime46 = property44.roundHalfEvenCopy();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset((long) 70);
        java.lang.String str61 = dateTimeZone57.getShortName(1L);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property64 = dateTime63.minuteOfHour();
        org.joda.time.DateTime dateTime66 = dateTime63.minusDays((int) 'a');
        int int67 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime66);
        long long69 = dateTimeZone57.previousTransition((-62198582364994L));
        int int71 = dateTimeZone57.getStandardOffset((long) (short) 1);
        int int73 = dateTimeZone57.getOffsetFromLocal((long) 587852);
        org.joda.time.DateTime dateTime74 = localTime46.toDateTimeToday(dateTimeZone57);
        java.lang.String str75 = dateTimeZone57.toString();
        org.joda.time.DateTime dateTime76 = dateTime9.withZoneRetainFields(dateTimeZone57);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 36101018, dateTimeZone57);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(0L, dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime76", (dateTime3.compareTo(dateTime76) == 0) == dateTime3.equals(dateTime76));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0594");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = dateTime5.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology22.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField25, and durationField23", !(durationField23.compareTo(durationField25) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField25.compareTo(durationField23))));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0595");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0596");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        int int15 = dateTime12.getEra();
        int int16 = dateTime12.getMinuteOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology24.getZone();
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.centuryOfEra();
        org.joda.time.DateTime dateTime30 = dateTime12.withChronology(chronology24);
        org.joda.time.DurationField durationField31 = chronology24.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime30", (dateTime8.compareTo(dateTime30) == 0) == dateTime8.equals(dateTime30));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0597");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology25.getZone();
        org.joda.time.DurationField durationField29 = chronology25.centuries();
        long long33 = chronology25.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime34 = dateTime14.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField35 = chronology25.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0598");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        boolean boolean7 = calendar0.isWeekDateSupported();
        int int9 = calendar0.getGreatestMinimum(6);
        calendar0.setMinimalDaysInFirstWeek(30);
        java.util.Date date12 = calendar0.getTime();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = dateTimeField21.getAsText(32770, locale23);
        java.lang.String str28 = dateTimeField21.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        boolean boolean36 = localTime31.isAfter((org.joda.time.ReadablePartial) localTime35);
        int int37 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localTime31);
        java.lang.String str38 = dateTimeField21.getName();
        java.util.Date date44 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date44);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime45, (int) 'a', locale47);
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = locale47.getDisplayLanguage(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.getISO3Country();
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale54.getDisplayCountry(locale57);
        java.lang.String str59 = locale53.getDisplayVariant(locale54);
        java.lang.String str60 = locale52.getDisplayScript(locale54);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale54);
        java.lang.String str62 = locale50.getDisplayName(locale54);
        java.util.Calendar.Builder builder63 = builder13.setLocale(locale54);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        calendar64.setTimeInMillis(100L);
        boolean boolean67 = calendar64.isWeekDateSupported();
        calendar64.roll(2, false);
        calendar64.setTimeInMillis(0L);
        java.util.TimeZone timeZone73 = calendar64.getTimeZone();
        java.util.Calendar.Builder builder74 = builder13.setTimeZone(timeZone73);
        calendar0.setTimeZone(timeZone73);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar61", (calendar0.compareTo(calendar61) == 0) == calendar0.equals(calendar61));
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0599");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime2.withMillisOfDay(9);
        org.joda.time.LocalTime localTime12 = localTime10.plusMinutes(86340000);
        org.joda.time.LocalTime.Property property13 = localTime12.minuteOfHour();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.LocalTime localTime21 = property20.withMaximumValue();
        int int23 = localTime21.getValue(0);
        java.lang.String str24 = localTime21.toString();
        org.joda.time.LocalTime localTime26 = localTime21.minusSeconds(12);
        org.joda.time.LocalTime localTime28 = localTime21.plusHours((int) 'u');
        int[] intArray29 = localTime21.getValues();
        int int30 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime21);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone45 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone45);
        boolean boolean48 = localTime12.equals((java.lang.Object) timeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar47", (calendar5.compareTo(calendar47) == 0) == calendar5.equals(calendar47));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0600");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        long long16 = chronology12.add((long) 19, (long) 97, 3);
        org.joda.time.DurationField durationField17 = chronology12.years();
        org.joda.time.DurationField durationField18 = chronology12.days();
        org.joda.time.DurationField durationField19 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField19", (durationField17.compareTo(durationField19) == 0) == durationField17.equals(durationField19));
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0601");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) 1970);
        long long8 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 52, dateTimeZone2);
        long long12 = dateTimeZone2.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        int int17 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.lang.String str22 = dateTimeZone2.getShortName(0L, locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) 'a');
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfDay();
        java.lang.String str33 = chronology31.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.monthOfYear();
        boolean boolean35 = dateTimeFieldType23.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology31.getZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property43 = dateTime40.weekyear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.minus(readablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withZone(dateTimeZone50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime51.withField(dateTimeFieldType52, 1);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime56.minusDays((int) 'a');
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime60.toYearMonthDay();
        org.joda.time.Chronology chronology62 = yearMonthDay61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfDay();
        org.joda.time.DurationField durationField64 = chronology62.eras();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType52.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.dayOfYear();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfHour();
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = locale71.toLanguageTag();
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale71.getDisplayCountry(locale74);
        java.lang.String str76 = locale74.getISO3Language();
        int int77 = property70.getMaximumShortTextLength(locale74);
        int int78 = dateTimeField67.getMaximumShortTextLength(locale74);
        java.lang.String str79 = dateTimeZone37.getShortName((long) 2, locale74);
        long long81 = dateTimeZone2.getMillisKeepLocal(dateTimeZone37, (long) 292269054);
        long long85 = dateTimeZone37.convertLocalToUTC(252000086L, true, (long) (-19035));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime25", (dateTime14.compareTo(dateTime25) == 0) == dateTime14.equals(dateTime25));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0602");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        org.joda.time.DurationField durationField11 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyearOfCentury();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1, chronology8);
        org.joda.time.DurationField durationField14 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfSecond();
        java.lang.String str16 = chronology8.toString();
        org.joda.time.DurationField durationField17 = chronology8.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField11, and durationField14", !(durationField17.compareTo(durationField11) == 0) || (Math.signum(durationField17.compareTo(durationField14)) == Math.signum(durationField11.compareTo(durationField14))));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0603");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        int int19 = dateTime12.getEra();
        org.joda.time.DateTime dateTime21 = dateTime12.withMillisOfSecond(69);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime12.plus(readablePeriod22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        int int26 = dateTime25.getEra();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        int int33 = dateTime32.getEra();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes(1);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMonths(0);
        int int39 = dateTime36.getYearOfEra();
        boolean boolean40 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 0);
        int int43 = dateTime42.getEra();
        org.joda.time.DateTime dateTime45 = dateTime42.plusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean47 = dateTime42.isSupported(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getDurationType();
        int int49 = dateTime29.get(dateTimeFieldType46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 100, chronology51);
        int int53 = localTime52.getMillisOfSecond();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) 100, chronology55);
        boolean boolean57 = localTime52.isAfter((org.joda.time.ReadablePartial) localTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        boolean boolean60 = dateTimeFieldType58.isSupported(chronology59);
        int int61 = localTime52.indexOf(dateTimeFieldType58);
        org.joda.time.Chronology chronology62 = localTime52.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime29.toDateTime(chronology62);
        org.joda.time.DateTime dateTime64 = dateTime12.withChronology(chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime63", (dateTime29.compareTo(dateTime63) == 0) == dateTime29.equals(dateTime63));
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0604");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        boolean boolean15 = dateTimeZone11.isStandardOffset((long) 1969);
        boolean boolean16 = dateTimeZone11.isFixed();
        java.lang.String str17 = dateTimeZone11.getID();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMinutes(1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.DateTime dateTime30 = property29.roundHalfCeilingCopy();
        boolean boolean31 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean42 = dateTime38.isSupported(dateTimeFieldType41);
        java.util.GregorianCalendar gregorianCalendar43 = dateTime38.toGregorianCalendar();
        int int44 = property32.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime.Property property45 = dateTime38.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime38.getZone();
        boolean boolean47 = dateTimeZone11.equals((java.lang.Object) dateTime38);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset((long) 70);
        java.lang.String str62 = dateTimeZone58.getShortName(1L);
        org.joda.time.DateTime dateTime63 = dateTime38.toDateTime(dateTimeZone58);
        int int64 = dateTime38.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime63", (dateTime28.compareTo(dateTime63) == 0) == dateTime28.equals(dateTime63));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0605");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 2);
        int int11 = dateTime8.getHourOfDay();
        org.joda.time.DateTime.Property property12 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime15 = dateTime8.plusHours(25200999);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime8.withDurationAdded(readableDuration16, 96);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology21.halfdays();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        calendar25.setTimeInMillis(100L);
        boolean boolean28 = calendar25.isWeekDateSupported();
        calendar25.roll(2, false);
        calendar25.setTimeInMillis(0L);
        java.util.TimeZone timeZone34 = calendar25.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int38 = dateTimeZone36.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance();
        calendar39.setTimeInMillis(100L);
        boolean boolean42 = calendar39.isWeekDateSupported();
        calendar39.roll(2, false);
        calendar39.setTimeInMillis(0L);
        java.util.TimeZone timeZone48 = calendar39.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        long long51 = dateTimeZone36.getMillisKeepLocal(dateTimeZone49, (long) 2);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 8, dateTimeZone36);
        org.joda.time.Chronology chronology53 = chronology21.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfHalfday();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology59);
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfSecond();
        int int62 = localTime60.size();
        org.joda.time.LocalTime localTime64 = localTime60.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime66 = localTime60.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 100, chronology68);
        int int70 = localTime69.getMillisOfSecond();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 100, chronology72);
        boolean boolean74 = localTime69.isAfter((org.joda.time.ReadablePartial) localTime73);
        boolean boolean75 = localTime66.isEqual((org.joda.time.ReadablePartial) localTime73);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property78 = dateTime77.minuteOfHour();
        org.joda.time.DateTime dateTime80 = property78.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((long) 100, chronology82);
        int int84 = localTime83.getMillisOfSecond();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime((long) 100, chronology86);
        boolean boolean88 = localTime83.isAfter((org.joda.time.ReadablePartial) localTime87);
        int int89 = property78.compareTo((org.joda.time.ReadablePartial) localTime83);
        java.lang.String str90 = localTime83.toString();
        boolean boolean91 = localTime73.isAfter((org.joda.time.ReadablePartial) localTime83);
        int[] intArray93 = chronology53.get((org.joda.time.ReadablePartial) localTime73, 209L);
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime18.toMutableDateTime(chronology53);
        org.joda.time.DateTime dateTime95 = new org.joda.time.DateTime((long) (-58), chronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime94", (dateTime6.compareTo(mutableDateTime94) == 0) == dateTime6.equals(mutableDateTime94));
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0606");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        int int7 = dateTime6.getSecondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.plusMonths(86399);
        org.joda.time.DateTime.Property property10 = dateTime6.era();
        org.joda.time.DateTime dateTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMinutes(1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime24 = property23.roundHalfCeilingCopy();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime13.plusHours(6);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 8, dateTimeZone40);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(dateTimeZone40);
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = null;
        org.joda.time.format.DateTimeParser dateTimeParser59 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter58, dateTimeParser59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter60.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter62.withPivotYear((int) (byte) 0);
        boolean boolean65 = dateTimeZone40.equals((java.lang.Object) (byte) 0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property70 = dateTime67.weekyear();
        org.joda.time.DateTime dateTime72 = property70.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property75 = dateTime74.minuteOfHour();
        org.joda.time.DateTime dateTime77 = dateTime74.minusDays((int) 'a');
        org.joda.time.DateTime dateTime78 = dateTime74.toDateTime();
        int int79 = property70.getDifference((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DurationField durationField80 = property70.getDurationField();
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime84 = dateTime82.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property85 = dateTime82.weekyear();
        org.joda.time.DateTime dateTime87 = property85.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime89 = dateTime87.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.DateTime dateTime91 = dateTime87.minus(readablePeriod90);
        int int92 = dateTime91.getMonthOfYear();
        org.joda.time.DateTime dateTime93 = dateTime91.toDateTimeISO();
        int int94 = property70.getDifference((org.joda.time.ReadableInstant) dateTime93);
        int int95 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime96 = dateTime27.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime97 = dateTime11.withZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime96", (dateTime27.compareTo(dateTime96) == 0) == dateTime27.equals(dateTime96));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0607");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear((int) 'x');
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("1967-05-01T00:00:00.009");
        java.util.Calendar calendar47 = dateTime42.toCalendar(locale46);
        boolean boolean48 = calendar47.isWeekDateSupported();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0608");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) 'a');
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay(17);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset((long) 70);
        java.lang.String str62 = dateTimeZone58.getShortName(1L);
        long long66 = dateTimeZone58.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime67 = dateTime46.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime68 = dateTime41.withZoneRetainFields(dateTimeZone58);
        java.util.GregorianCalendar gregorianCalendar69 = dateTime68.toGregorianCalendar();
        org.joda.time.DateTime dateTime70 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.LocalTime localTime72 = localTime33.plusHours(431);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology77);
        org.joda.time.LocalTime.Property property79 = localTime78.millisOfSecond();
        org.joda.time.LocalTime localTime80 = property79.withMaximumValue();
        int int82 = localTime80.getValue(0);
        java.lang.String str83 = localTime80.toString();
        org.joda.time.LocalTime.Property property84 = localTime80.hourOfDay();
        int int85 = localTime80.getMinuteOfHour();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property88 = dateTime87.minuteOfHour();
        org.joda.time.DateTime dateTime90 = dateTime87.minusDays((int) 'a');
        org.joda.time.DateTime dateTime91 = dateTime87.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int93 = dateTime91.get(dateTimeFieldType92);
        boolean boolean94 = localTime80.isSupported(dateTimeFieldType92);
        boolean boolean95 = localTime72.isSupported(dateTimeFieldType92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime67", (dateTime38.compareTo(dateTime67) == 0) == dateTime38.equals(dateTime67));
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0609");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property14 = dateTime11.weekyear();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((long) (short) 0);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = dateTimeField25.getAsText(32770, locale27);
        java.lang.String str31 = locale17.getDisplayLanguage(locale27);
        int int32 = property14.getMaximumShortTextLength(locale27);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTime();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance();
        calendar39.setTimeInMillis(100L);
        boolean boolean42 = calendar39.isWeekDateSupported();
        calendar39.roll(2, false);
        calendar39.setTimeInMillis(0L);
        java.util.TimeZone timeZone48 = calendar39.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset((long) 70);
        java.lang.String str53 = dateTimeZone49.getShortName(1L);
        long long57 = dateTimeZone49.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime58 = dateTime37.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMillis(11);
        long long61 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = property14.getDateTime();
        org.joda.time.DateTime dateTime64 = property14.setCopy(0);
        int int65 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime64);
        long long69 = dateTimeZone9.convertLocalToUTC(1644572834337L, true, (-2328L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime58", (dateTime37.compareTo(dateTime58) == 0) == dateTime37.equals(dateTime58));
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0610");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 8, dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = dateTime3.withZone(dateTimeZone25);
        int int44 = dateTime3.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime43", (dateTime3.compareTo(dateTime43) == 0) == dateTime3.equals(dateTime43));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0611");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) 70);
        java.lang.String str49 = dateTimeZone45.getShortName(1L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) 'a');
        int int55 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        int int62 = dateTime60.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime60.plus(readableDuration63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime60.plus(readablePeriod65);
        int int67 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime70 = dateTime60.withDurationAdded(121L, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.plus(readablePeriod71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusMinutes(33342);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime33", (dateTime4.compareTo(dateTime33) == 0) == dateTime4.equals(dateTime33));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0612");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        org.joda.time.DateTime.Property property43 = dateTime42.secondOfDay();
        org.joda.time.DateTime dateTime44 = property43.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime44", (dateTime1.compareTo(dateTime44) == 0) == dateTime1.equals(dateTime44));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0613");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(11);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths(0);
        int int30 = dateTime29.getSecondOfMinute();
        org.joda.time.DateTime.Property property31 = dateTime29.millisOfSecond();
        org.joda.time.DateTime dateTime33 = dateTime29.plusMillis((-2328));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime25", (dateTime4.compareTo(dateTime25) == 0) == dateTime4.equals(dateTime25));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0614");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(11);
        boolean boolean28 = dateTime25.isEqualNow();
        org.joda.time.DateTime.Property property29 = dateTime25.era();
        org.joda.time.DateTime dateTime30 = property29.withMinimumValue();
        org.joda.time.DateTime dateTime32 = property29.addWrapFieldToCopy(1967);
        org.joda.time.DateTime dateTime33 = property29.roundCeilingCopy();
        int int34 = dateTime33.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime25", (dateTime4.compareTo(dateTime25) == 0) == dateTime4.equals(dateTime25));
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0615");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        gregorianCalendar35.roll(12, false);
        java.util.TimeZone timeZone39 = gregorianCalendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str42 = dateTimeZone41.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime33", (dateTime4.compareTo(dateTime33) == 0) == dateTime4.equals(dateTime33));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0616");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        int int15 = dateTime13.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.plus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime13.minusMillis(15);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) 121);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMonths((-1));
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((-292275054));
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        long long28 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis(0L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.Chronology chronology52 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfWeek();
        org.joda.time.DurationField durationField54 = chronology52.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.monthOfYear();
        org.joda.time.DurationField durationField56 = chronology52.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime30.toMutableDateTime(chronology52);
        int int59 = dateTime30.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime58", (dateTime1.compareTo(mutableDateTime58) == 0) == dateTime1.equals(mutableDateTime58));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0617");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfMonth();
        boolean boolean14 = dateTime4.isBefore((long) 100);
        org.joda.time.DateTime dateTime15 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = dateTime23.toString(dateTimeFormatter24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean27 = dateTime23.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime30.minusDays((int) 'a');
        org.joda.time.DateTime dateTime34 = dateTime30.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        org.joda.time.Chronology chronology36 = yearMonthDay35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology36.getZone();
        boolean boolean39 = dateTimeFieldType28.isSupported(chronology36);
        org.joda.time.DateTime dateTime40 = dateTime23.toDateTime(chronology36);
        boolean boolean41 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime15.plusMonths(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime40", (dateTime19.compareTo(dateTime40) == 0) == dateTime19.equals(dateTime40));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0618");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) 70);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (short) 0);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone26, (long) (short) 10);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime36 = dateTime34.toLocalDateTime();
        boolean boolean37 = dateTimeZone26.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone26.getStandardOffset(0L);
        org.joda.time.DateTime dateTime40 = dateTime1.withZone(dateTimeZone26);
        org.joda.time.DateTime.Property property41 = dateTime40.hourOfDay();
        org.joda.time.DateTime dateTime43 = dateTime40.plusMinutes((-119400));
        org.joda.time.DateTime dateTime45 = dateTime43.minusYears(9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime40", (dateTime1.compareTo(dateTime40) == 0) == dateTime1.equals(dateTime40));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0619");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        int int15 = dateTime12.getYearOfEra();
        boolean boolean16 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean23 = dateTime18.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        int int25 = dateTime5.get(dateTimeFieldType22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        boolean boolean36 = dateTimeFieldType34.isSupported(chronology35);
        int int37 = localTime28.indexOf(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = localTime28.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime5.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime39", (dateTime5.compareTo(dateTime39) == 0) == dateTime5.equals(dateTime39));
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0620");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.Chronology chronology16 = chronology7.withUTC();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField17", Math.signum(durationField11.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField11)));
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0621");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime6.getZone();
        org.joda.time.DateTime.Property property19 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime21 = property19.addToCopy(35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0622");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int3 = calendar0.getWeeksInWeekYear();
        calendar0.setMinimalDaysInFirstWeek(2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) calendar0);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property12 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.minus(readablePeriod17);
        int int19 = dateTime18.getMonthOfYear();
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        boolean boolean23 = localTime7.equals((java.lang.Object) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime26.era();
        org.joda.time.DateTime dateTime33 = dateTime26.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        int int39 = dateTime37.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.plus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime37.minusMillis(15);
        org.joda.time.DateTime.Property property44 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime37.plusHours((int) 'a');
        org.joda.time.DateTime dateTime48 = dateTime37.withMillisOfDay(1);
        int int49 = dateTime48.getSecondOfDay();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        int int52 = dateTime51.getEra();
        org.joda.time.DateTime dateTime53 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime55 = dateTime51.minusMinutes(1);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths(0);
        org.joda.time.DateTime dateTime59 = dateTime57.minus((long) 2);
        org.joda.time.DateTime.Property property60 = dateTime57.minuteOfHour();
        org.joda.time.Chronology chronology61 = dateTime57.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.centuries();
        org.joda.time.DurationField durationField63 = chronology61.halfdays();
        org.joda.time.DateTime dateTime64 = dateTime48.toDateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.minuteOfDay();
        org.joda.time.Chronology chronology66 = chronology61.withUTC();
        org.joda.time.DateTime dateTime67 = dateTime33.withChronology(chronology66);
        boolean boolean68 = dateTime22.equals((java.lang.Object) chronology66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime67", (dateTime33.compareTo(dateTime67) == 0) == dateTime33.equals(dateTime67));
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0623");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("millis");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = dateTimeField14.getAsText(32770, locale16);
        java.lang.String str21 = dateTimeField14.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        int int25 = localTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        boolean boolean29 = localTime24.isAfter((org.joda.time.ReadablePartial) localTime28);
        int int30 = dateTimeField14.getMaximumValue((org.joda.time.ReadablePartial) localTime24);
        java.lang.String str31 = dateTimeField14.getName();
        java.util.Date date37 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromDateFields(date37);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localTime38, (int) 'a', locale40);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale40.getDisplayLanguage(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.toLanguageTag();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale47.getDisplayCountry(locale50);
        java.lang.String str52 = locale46.getDisplayVariant(locale47);
        java.lang.String str53 = locale45.getDisplayScript(locale47);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale47);
        java.lang.String str55 = locale43.getDisplayName(locale47);
        java.util.Calendar.Builder builder56 = builder6.setLocale(locale47);
        java.util.Date date60 = new java.util.Date((int) '4', 86399999, 4);
        java.util.Calendar.Builder builder61 = builder56.setInstant(date60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        int int66 = calendar62.getActualMinimum((int) (short) 10);
        int int67 = calendar62.getWeeksInWeekYear();
        java.util.TimeZone timeZone68 = calendar62.getTimeZone();
        java.util.Calendar.Builder builder69 = builder56.setTimeZone(timeZone68);
        java.util.Locale.Category category70 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category70, locale71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone68, locale71);
        boolean boolean74 = languageRange1.equals((java.lang.Object) locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar54 and calendar73", (calendar54.compareTo(calendar73) == 0) == calendar54.equals(calendar73));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0624");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.DurationField durationField25 = chronology22.hours();
        java.lang.String str26 = chronology22.toString();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(432529113615000L, chronology22);
        boolean boolean29 = dateTime27.isBefore((long) 34080097);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology37.getZone();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology37.getZone();
        org.joda.time.DateTime dateTime42 = dateTime27.withZone(dateTimeZone41);
        java.lang.String str43 = dateTimeZone41.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime42", (dateTime27.compareTo(dateTime42) == 0) == dateTime27.equals(dateTime42));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0625");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        long long11 = dateTimeZone9.convertUTCToLocal((long) 'x');
        int int13 = dateTimeZone9.getStandardOffset((long) 97);
        java.util.TimeZone timeZone14 = dateTimeZone9.toTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getScript();
        java.lang.String str21 = locale17.getDisplayLanguage(locale19);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale19);
        java.lang.String str24 = locale19.getExtension('u');
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone14, locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar22", (calendar15.compareTo(calendar22) == 0) == calendar15.equals(calendar22));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0626");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        org.joda.time.DateTime.Property property42 = dateTime39.yearOfEra();
        long long43 = dateTime39.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0627");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.plus(readablePeriod26);
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        boolean boolean30 = dateTime7.equals((java.lang.Object) locale29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        int int38 = localTime36.size();
        int[] intArray39 = localTime36.getValues();
        org.joda.time.LocalTime localTime41 = localTime36.plusSeconds((int) (short) 100);
        org.joda.time.LocalTime.Property property42 = localTime36.secondOfMinute();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        org.joda.time.LocalTime localTime44 = property42.roundHalfEvenCopy();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset((long) 70);
        java.lang.String str59 = dateTimeZone55.getShortName(1L);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime64 = dateTime61.minusDays((int) 'a');
        int int65 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime64);
        long long67 = dateTimeZone55.previousTransition((-62198582364994L));
        int int69 = dateTimeZone55.getStandardOffset((long) (short) 1);
        int int71 = dateTimeZone55.getOffsetFromLocal((long) 587852);
        org.joda.time.DateTime dateTime72 = localTime44.toDateTimeToday(dateTimeZone55);
        java.lang.String str73 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime74 = dateTime7.withZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime.Property property75 = dateTime7.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime74", (dateTime1.compareTo(dateTime74) == 0) == dateTime1.equals(dateTime74));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0628");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        boolean boolean23 = dateTimeFieldType12.isSupported(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime7.toDateTime(chronology20);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(9);
        int int27 = dateTime24.getMinuteOfHour();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str29 = durationFieldType28.getName();
        java.lang.String str30 = durationFieldType28.getName();
        org.joda.time.DateTime dateTime32 = dateTime24.withFieldAdded(durationFieldType28, 50400009);
        org.joda.time.DateTime dateTime34 = dateTime32.plusDays(36000089);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime24", (dateTime3.compareTo(dateTime24) == 0) == dateTime3.equals(dateTime24));
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0629");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(14);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTimeISO();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        int int8 = mutableDateTime6.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant7", (dateTime1.compareTo(instant7) == 0) == dateTime1.equals(instant7));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0630");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType10.isSupported(chronology12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        java.lang.String str15 = calendar14.getCalendarType();
        java.time.Instant instant16 = calendar14.toInstant();
        int int17 = calendar14.getWeekYear();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType10.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.monthOfYear();
        org.joda.time.DurationField durationField26 = chronology19.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField26, and durationField22", !(durationField22.compareTo(durationField26) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField26.compareTo(durationField22))));
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0631");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(23);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localTime18.getFieldTypes();
        org.joda.time.Chronology chronology20 = localTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime12.withChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology29);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = dateTimeField32.getAsText(32770, locale34);
        java.lang.String str38 = dateTimeZone23.getShortName((long) 2, locale34);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime12.toMutableDateTime(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime4.toMutableDateTime(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime21", (dateTime12.compareTo(dateTime21) == 0) == dateTime12.equals(dateTime21));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0632");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        boolean boolean27 = dateTimeZone24.isFixed();
        long long30 = dateTimeZone24.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone24);
        int int34 = dateTimeZone24.getStandardOffset(0L);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        int int41 = dateTime39.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.plus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime39.minusMillis(15);
        org.joda.time.DateTime.Property property46 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime39.plusHours((int) 'a');
        org.joda.time.DateTime dateTime50 = dateTime39.withMillisOfDay(1);
        int int51 = dateTime50.getSecondOfDay();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 0);
        int int54 = dateTime53.getEra();
        org.joda.time.DateTime dateTime55 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime57 = dateTime53.minusMinutes(1);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMonths(0);
        org.joda.time.DateTime dateTime61 = dateTime59.minus((long) 2);
        org.joda.time.DateTime.Property property62 = dateTime59.minuteOfHour();
        org.joda.time.Chronology chronology63 = dateTime59.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.centuries();
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.joda.time.DateTime dateTime66 = dateTime50.toDateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.minuteOfDay();
        org.joda.time.DateTime dateTime68 = dateTime35.withChronology(chronology63);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (byte) 0);
        int int71 = dateTime70.getEra();
        org.joda.time.DateTime dateTime72 = dateTime70.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime74 = dateTime70.minusMinutes(1);
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfYear();
        org.joda.time.DateTime dateTime76 = property75.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.minus(readablePeriod77);
        int int79 = dateTime76.getDayOfMonth();
        org.joda.time.DateTime dateTime81 = dateTime76.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime83 = dateTime81.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.DateTime dateTime86 = dateTime83.withPeriodAdded(readablePeriod84, 17);
        org.joda.time.DateTime dateTime88 = dateTime83.minusWeeks(20);
        org.joda.time.DateTime.Property property89 = dateTime83.secondOfMinute();
        org.joda.time.DateTime dateTime90 = property89.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime93 = dateTime90.withDurationAdded((-5L), 12);
        boolean boolean94 = dateTime93.isEqualNow();
        boolean boolean95 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime68", (dateTime32.compareTo(dateTime68) == 0) == dateTime32.equals(dateTime68));
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0633");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded((long) 121, 365);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTime dateTime38 = dateTime12.withChronology(chronology34);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime38", (dateTime12.compareTo(dateTime38) == 0) == dateTime12.equals(dateTime38));
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0634");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(6);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes(1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean38 = dateTime34.isSupported(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime41.minusDays((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        org.joda.time.DurationField durationField50 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.dayOfYear();
        boolean boolean53 = durationFieldType39.isSupported(chronology47);
        long long57 = chronology47.add((-1581379253000L), (long) 'u', (int) (short) 1);
        org.joda.time.DateTime dateTime58 = dateTime24.toDateTime(chronology47);
        org.joda.time.DateTime dateTime60 = dateTime24.withMillisOfSecond(26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime58", (dateTime24.compareTo(dateTime58) == 0) == dateTime24.equals(dateTime58));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0635");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.lang.String str78 = locale75.getISO3Language();
        java.util.Calendar.Builder builder79 = builder74.setLocale(locale75);
        java.util.Calendar.Builder builder84 = builder74.setTimeOfDay(35152294, 152, 268, 720);
        java.util.Calendar.Builder builder88 = builder84.setDate(9, 21, 25);
        java.util.Calendar.Builder builder92 = builder88.setDate(58620000, 97, 97);
        java.util.Locale locale94 = java.util.Locale.forLanguageTag("it");
        java.lang.String str95 = locale94.getDisplayLanguage();
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(locale94);
        java.util.Calendar.Builder builder97 = builder92.setLocale(locale94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar96", (calendar48.compareTo(calendar96) == 0) == calendar48.equals(calendar96));
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0636");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfYear();
        boolean boolean26 = durationFieldType12.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.secondOfMinute();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime30 = dateTime28.withYear(158);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime30, chronology33);
        org.joda.time.DurationField durationField37 = chronology33.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime36", (dateTime30.compareTo(dateTime36) == 0) == dateTime30.equals(dateTime36));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0637");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.minusMinutes(1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        int int27 = localTime25.size();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        int int31 = localTime30.getMillisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        boolean boolean35 = localTime30.isAfter((org.joda.time.ReadablePartial) localTime34);
        int int36 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTime dateTime37 = dateTime19.withFields((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.Chronology chronology38 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfDay();
        org.joda.time.DurationField durationField40 = chronology38.months();
        boolean boolean41 = dateTimeFieldType8.isSupported(chronology38);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology46);
        org.joda.time.LocalTime.Property property48 = localTime47.millisOfSecond();
        org.joda.time.LocalTime localTime50 = property48.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime51 = property48.getLocalTime();
        long long53 = chronology38.set((org.joda.time.ReadablePartial) localTime51, (long) 991);
        java.lang.String str54 = localTime51.toString();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromMillisOfDay((-2203675200000L));
        org.joda.time.LocalTime localTime58 = localTime56.plusHours(1967);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime();
        org.joda.time.DateTime dateTime64 = dateTime62.plusDays(14);
        org.joda.time.DateTime dateTime65 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime67 = dateTime62.withYearOfCentury(14);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) 100, chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean72 = localTime70.isSupported(dateTimeFieldType71);
        boolean boolean73 = dateTime67.isSupported(dateTimeFieldType71);
        int int74 = localTime56.get(dateTimeFieldType71);
        org.joda.time.LocalTime.Property property75 = localTime51.property(dateTimeFieldType71);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance();
        java.lang.String str77 = calendar76.getCalendarType();
        java.time.Instant instant78 = calendar76.toInstant();
        int int79 = calendar76.getWeekYear();
        org.joda.time.LocalTime localTime80 = org.joda.time.LocalTime.fromCalendarFields(calendar76);
        org.joda.time.Chronology chronology81 = localTime80.getChronology();
        org.joda.time.DurationField durationField82 = chronology81.months();
        org.joda.time.DurationField durationField83 = chronology81.millis();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        long long87 = chronology81.add(readablePeriod84, (long) 36000, 19);
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType71.getField(chronology81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField40 and durationField82", (durationField40.compareTo(durationField82) == 0) == durationField40.equals(durationField82));
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0638");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology25.getZone();
        org.joda.time.DurationField durationField29 = chronology25.centuries();
        long long33 = chronology25.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime34 = dateTime14.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField35 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology25.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0639");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property14 = dateTime11.weekyear();
        int int15 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime11.plusWeeks(121);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property19 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays(0);
        org.joda.time.DateTime.Property property25 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.plus((-49881509L));
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        int int31 = localTime30.getMillisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        boolean boolean35 = localTime30.isAfter((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        boolean boolean38 = dateTimeFieldType36.isSupported(chronology37);
        int int39 = localTime30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology40 = localTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.yearOfCentury();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DateTime dateTime45 = dateTime27.toDateTime(chronology40);
        int int46 = dateTime27.getWeekOfWeekyear();
        boolean boolean47 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime27);
        int int48 = dateTime9.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime45", (dateTime27.compareTo(dateTime45) == 0) == dateTime27.equals(dateTime45));
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0640");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((-2203656180000L));
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.year();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str15 = durationFieldType14.toString();
        java.lang.String str16 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology24.getZone();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.Chronology chronology38 = chronology24.withZone(dateTimeZone37);
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DurationField durationField40 = durationFieldType14.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime11.toMutableDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and mutableDateTime43", (dateTime11.compareTo(mutableDateTime43) == 0) == dateTime11.equals(mutableDateTime43));
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0641");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        int int8 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.minus(readablePeriod18);
        int int20 = dateTime19.getMonthOfYear();
        int int21 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(1);
        int int28 = dateTime27.getMonthOfYear();
        org.joda.time.DateTime.Property property29 = dateTime27.secondOfDay();
        org.joda.time.DateTime dateTime30 = property29.roundCeilingCopy();
        int int31 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0642");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withZone(dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime62", (dateTime21.compareTo(dateTime62) == 0) == dateTime21.equals(dateTime62));
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0643");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int19 = dateTimeZone17.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime14.withZone(dateTimeZone17);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfHour();
        java.lang.String str22 = property21.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime20", (dateTime14.compareTo(dateTime20) == 0) == dateTime14.equals(dateTime20));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0644");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis(2022);
        org.joda.time.DateTime dateTime17 = dateTime13.plusDays(36002172);
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime13", (dateTime3.compareTo(dateTime13) == 0) == dateTime3.equals(dateTime13));
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0645");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        boolean boolean30 = dateTime28.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillis(100L);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        boolean boolean43 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime40);
        int int44 = dateTime40.getDayOfYear();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        int int47 = dateTime46.getEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean52 = localTime50.isSupported(dateTimeFieldType51);
        java.lang.String str53 = localTime50.toString();
        org.joda.time.LocalTime localTime55 = localTime50.plusSeconds(121);
        org.joda.time.DateTime dateTime56 = dateTime46.withFields((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.Chronology chronology57 = localTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.hourOfDay();
        int int61 = dateTime40.get(dateTimeField60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime56", (dateTime32.compareTo(dateTime56) == 0) == dateTime32.equals(dateTime56));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0646");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime1.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        int int28 = dateTime15.get(dateTimeField27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology37.getZone();
        org.joda.time.DurationField durationField40 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1, chronology37);
        long long47 = chronology37.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.DurationField durationField48 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology37.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime15.toMutableDateTime(chronology37);
        java.util.GregorianCalendar gregorianCalendar52 = dateTime15.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime51", (dateTime15.compareTo(mutableDateTime51) == 0) == dateTime15.equals(mutableDateTime51));
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0647");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        calendar26.setTimeInMillis((long) 16);
        int int29 = calendar26.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime31.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime39.minusDays((int) 'a');
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.Chronology chronology45 = yearMonthDay44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime36.withChronology(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime36.getZone();
        boolean boolean49 = calendar26.before((java.lang.Object) dateTime36);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.setTimeInMillis(100L);
        boolean boolean53 = calendar50.isWeekDateSupported();
        java.lang.String str54 = calendar50.getCalendarType();
        calendar50.set(86399999, 2022, 139680, 59, 20);
        java.lang.String str61 = calendar50.getCalendarType();
        calendar50.setTimeInMillis(69L);
        int int64 = calendar26.compareTo(calendar50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant37", (dateTime36.compareTo(instant37) == 0) == dateTime36.equals(instant37));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0648");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = dateTimeField19.getAsText(32770, locale21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone9, locale21);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar26", (calendar25.compareTo(calendar26) == 0) == calendar25.equals(calendar26));
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0649");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes(1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        int int18 = dateTime15.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime15.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime21 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime21.getYearOfEra();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) 'a');
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        org.joda.time.Chronology chronology30 = yearMonthDay29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        java.lang.String str32 = chronology30.toString();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.secondOfDay();
        long long37 = chronology30.add((long) 13, (long) (short) -1, 36000107);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime21.toMutableDateTime(chronology30);
        org.joda.time.DateTime dateTime40 = dateTime21.minusYears(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and mutableDateTime38", (dateTime11.compareTo(mutableDateTime38) == 0) == dateTime11.equals(mutableDateTime38));
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0650");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) 70);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getOffsetFromLocal((long) (short) 0);
        long long33 = dateTimeZone15.getMillisKeepLocal(dateTimeZone29, (long) (short) 10);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime39 = dateTime37.toLocalDateTime();
        boolean boolean40 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = dateTime1.withZone(dateTimeZone29);
        int int43 = dateTimeZone29.getOffsetFromLocal(209L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0651");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        org.joda.time.DateTime dateTime31 = dateTime5.plus((-2177452800009L));
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0652");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.YearMonthDay yearMonthDay3 = dateTime1.toYearMonthDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime1.withChronology(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime15", (dateTime1.compareTo(dateTime15) == 0) == dateTime1.equals(dateTime15));
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0653");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(6);
        int int6 = dateTime1.getWeekyear();
        java.util.Date date7 = dateTime1.toDate();
        org.joda.time.DateTime dateTime9 = dateTime1.minusHours(96);
        java.lang.String str11 = dateTime1.toString("10.06.1902 03:10:06");
        int int12 = dateTime1.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str17 = dateTimeZone15.getNameKey((long) 1970);
        long long21 = dateTimeZone15.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 52, dateTimeZone15);
        long long25 = dateTimeZone15.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        int int30 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = dateTimeZone15.getShortName(0L, locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.Chronology chronology44 = yearMonthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfDay();
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.monthOfYear();
        boolean boolean48 = dateTimeFieldType36.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology44.getZone();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property56 = dateTime53.weekyear();
        org.joda.time.DateTime dateTime58 = property56.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime58.minus(readablePeriod61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZone(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime67 = dateTime64.withField(dateTimeFieldType65, 1);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfHour();
        org.joda.time.DateTime dateTime72 = dateTime69.minusDays((int) 'a');
        org.joda.time.DateTime dateTime73 = dateTime69.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay74 = dateTime73.toYearMonthDay();
        org.joda.time.Chronology chronology75 = yearMonthDay74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.secondOfDay();
        org.joda.time.DurationField durationField77 = chronology75.eras();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType65.getField(chronology75);
        org.joda.time.DateTimeField dateTimeField80 = chronology75.dayOfYear();
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property83 = dateTime82.minuteOfHour();
        java.util.Locale locale84 = java.util.Locale.KOREA;
        java.lang.String str85 = locale84.getISO3Country();
        java.lang.String str86 = locale84.toLanguageTag();
        java.util.Locale locale87 = java.util.Locale.ITALY;
        java.lang.String str88 = locale84.getDisplayCountry(locale87);
        java.lang.String str89 = locale87.getISO3Language();
        int int90 = property83.getMaximumShortTextLength(locale87);
        int int91 = dateTimeField80.getMaximumShortTextLength(locale87);
        java.lang.String str92 = dateTimeZone50.getShortName((long) 2, locale87);
        long long94 = dateTimeZone15.getMillisKeepLocal(dateTimeZone50, (long) 292269054);
        org.joda.time.MutableDateTime mutableDateTime95 = dateTime1.toMutableDateTime(dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime38", (dateTime27.compareTo(dateTime38) == 0) == dateTime27.equals(dateTime38));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0654");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = chronology3.halfdays();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setTimeInMillis(100L);
        boolean boolean10 = calendar7.isWeekDateSupported();
        calendar7.roll(2, false);
        calendar7.setTimeInMillis(0L);
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone31, (long) 2);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 8, dateTimeZone18);
        org.joda.time.Chronology chronology35 = chronology3.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology36 = chronology3.withUTC();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 10, chronology3);
        org.joda.time.DurationField durationField38 = chronology3.minutes();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime43 = dateTime40.minusDays((int) 'a');
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime44.toYearMonthDay();
        org.joda.time.Chronology chronology46 = yearMonthDay45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology46.getZone();
        java.lang.String str51 = dateTimeZone49.getName((long) 100);
        java.lang.String str53 = dateTimeZone49.getNameKey(292269063L);
        int int55 = dateTimeZone49.getOffset(1644572712440L);
        org.joda.time.Chronology chronology56 = chronology3.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property61 = dateTime58.weekyear();
        int int62 = dateTime58.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property63 = dateTime58.weekyear();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfHour();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = dateTime65.toDateTime(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime72 = dateTime70.plusHours((int) (byte) 10);
        int int73 = property63.getDifference((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property77 = dateTime76.minuteOfHour();
        org.joda.time.DateTime dateTime79 = dateTime76.minusDays((int) 'a');
        org.joda.time.DateTime dateTime80 = dateTime76.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay81 = dateTime80.toYearMonthDay();
        org.joda.time.Chronology chronology82 = yearMonthDay81.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone84 = chronology82.getZone();
        boolean boolean85 = dateTimeFieldType74.isSupported(chronology82);
        org.joda.time.DateTimeField dateTimeField86 = chronology82.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField87 = chronology82.halfdayOfDay();
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(chronology82);
        int int89 = property63.getDifference((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology92 = dateTime91.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField94 = chronology92.yearOfCentury();
        org.joda.time.DateTime dateTime95 = dateTime88.withChronology(chronology92);
        int int96 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime95);
        boolean boolean97 = dateTimeZone49.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime88 and dateTime95", (dateTime88.compareTo(dateTime95) == 0) == dateTime88.equals(dateTime95));
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0655");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = builder61.build();
        java.time.Instant instant63 = calendar62.toInstant();
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = null;
        org.joda.time.format.DateTimeParser dateTimeParser65 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter64, dateTimeParser65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter66.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withPivotYear((int) (byte) 0);
        boolean boolean71 = calendar62.after((java.lang.Object) dateTimeFormatter70);
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.fromCalendarFields(calendar62);
        long long73 = calendar62.getTimeInMillis();
        java.util.TimeZone timeZone74 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar62", (calendar51.compareTo(calendar62) == 0) == calendar51.equals(calendar62));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0656");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(25198739224743421L);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean8 = localTime6.isSupported(dateTimeFieldType7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar9);
        int int11 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.LocalTime.Property property12 = localTime6.secondOfMinute();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.setTimeInMillis(100L);
        boolean boolean25 = calendar22.isWeekDateSupported();
        calendar22.roll(2, false);
        calendar22.setTimeInMillis(0L);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int35 = dateTimeZone33.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        long long48 = dateTimeZone33.getMillisKeepLocal(dateTimeZone46, (long) 2);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 8, dateTimeZone33);
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(dateTimeZone33);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 10, dateTimeZone33);
        org.joda.time.DateTime dateTime52 = dateTime19.withZone(dateTimeZone33);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology57);
        org.joda.time.LocalTime.Property property59 = localTime58.millisOfSecond();
        org.joda.time.LocalTime localTime61 = property59.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime62 = property59.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime63 = dateTime19.withFields((org.joda.time.ReadablePartial) localTime62);
        int int64 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime62);
        org.joda.time.LocalTime localTime66 = localTime6.plusHours(292278993);
        org.joda.time.LocalTime localTime68 = localTime66.plusMinutes(292269054);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("08:20:00.100");
        java.lang.String str71 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localTime66, locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime52", (dateTime14.compareTo(dateTime52) == 0) == dateTime14.equals(dateTime52));
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0657");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        long long4 = property2.remainder();
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        java.util.Locale locale10 = new java.util.Locale("36000097", "millisOfSecond", "US");
        int int11 = property2.getMaximumShortTextLength(locale10);
        org.joda.time.DateTime dateTime12 = property2.roundHalfCeilingCopy();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology29.getZone();
        org.joda.time.DurationField durationField32 = chronology29.months();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType20.getField(chronology29);
        org.joda.time.DurationField durationField34 = chronology29.centuries();
        long long39 = chronology29.getDateTimeMillis(292278993, (int) (short) 1, 8, 36000089);
        org.joda.time.DateTimeField dateTimeField40 = chronology29.dayOfWeek();
        org.joda.time.DurationField durationField41 = chronology29.months();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime12.toMutableDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField43 = chronology29.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime42", (dateTime1.compareTo(mutableDateTime42) == 0) == dateTime1.equals(mutableDateTime42));
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0658");
        java.util.Date date5 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date5.setMonth((int) ' ');
        java.util.Date date13 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date13);
        boolean boolean15 = date5.before(date13);
        int int16 = date13.getTimezoneOffset();
        int int17 = date13.getHours();
        int int18 = date13.getDate();
        java.lang.String str19 = date13.toGMTString();
        date13.setYear(7201951);
        long long22 = date13.getTime();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology39);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = dateTimeField42.getAsText(32770, locale44);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone32, locale44);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone32);
        java.util.Date date50 = calendar49.getTime();
        boolean boolean51 = date13.before(date50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar49", (calendar48.compareTo(calendar49) == 0) == calendar48.equals(calendar49));
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0659");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMinutes(1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        boolean boolean14 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime2.plusHours(6);
        org.joda.time.DateTime dateTime18 = dateTime2.withMillisOfSecond((int) (short) 10);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = dateTimeField27.getAsText(32770, locale29);
        java.lang.String str34 = dateTimeField27.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        int int38 = localTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        boolean boolean42 = localTime37.isAfter((org.joda.time.ReadablePartial) localTime41);
        int int43 = dateTimeField27.getMaximumValue((org.joda.time.ReadablePartial) localTime37);
        int int45 = localTime37.getValue(1);
        org.joda.time.Chronology chronology46 = localTime37.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.DateTime dateTime48 = dateTime18.toDateTime(chronology46);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromMillisOfDay((long) 220, chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime48", (dateTime18.compareTo(dateTime48) == 0) == dateTime18.equals(dateTime48));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0660");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime.Property property16 = dateTime12.secondOfMinute();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.DateTime dateTime18 = property16.withMinimumValue();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears(158);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.Chronology chronology42 = chronology28.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfDay();
        org.joda.time.DurationField durationField44 = chronology42.millis();
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property50 = dateTime47.weekyear();
        org.joda.time.DateTime dateTime52 = property50.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime54 = dateTime52.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime52.minus(readablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.withZone(dateTimeZone57);
        org.joda.time.DateTime.Property property59 = dateTime56.weekOfWeekyear();
        org.joda.time.DateTime.Property property60 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime62.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime66 = dateTime64.plusDays(1977);
        org.joda.time.DateTime dateTime68 = dateTime64.plusDays(57600000);
        int int69 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime45", (dateTime18.compareTo(dateTime45) == 0) == dateTime18.equals(dateTime45));
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0661");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTime4.toString("+00:00", locale6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) ' ');
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone19);
        boolean boolean23 = dateTimeZone19.isStandardOffset(284468400069L);
        long long25 = dateTimeZone19.nextTransition((long) 1438);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime4.toMutableDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property27 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime28 = property27.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and mutableDateTime26", (dateTime28.compareTo(mutableDateTime26) == 0) == dateTime28.equals(mutableDateTime26));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0662");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        int int3 = dateTime1.getYearOfCentury();
        int int4 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withCenturyOfEra(99);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        org.joda.time.DurationField durationField18 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField22 = chronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology15.getZone();
        org.joda.time.DateTime dateTime24 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField25 = chronology15.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime24", (dateTime6.compareTo(dateTime24) == 0) == dateTime6.equals(dateTime24));
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0663");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        java.util.TimeZone timeZone3 = calendar2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        java.lang.String str21 = dateTimeZone17.getID();
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone22);
        calendar5.setTimeZone(timeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar4", (calendar2.compareTo(calendar4) == 0) == calendar2.equals(calendar4));
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0664");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        int int40 = dateTime6.getMinuteOfDay();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int54 = dateTimeZone52.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        calendar55.setTimeInMillis(100L);
        boolean boolean58 = calendar55.isWeekDateSupported();
        calendar55.roll(2, false);
        calendar55.setTimeInMillis(0L);
        java.util.TimeZone timeZone64 = calendar55.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        long long67 = dateTimeZone52.getMillisKeepLocal(dateTimeZone65, (long) 2);
        org.joda.time.DateTime dateTime68 = dateTime6.toDateTime(dateTimeZone65);
        java.lang.String str69 = dateTime6.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime39", (dateTime6.compareTo(dateTime39) == 0) == dateTime6.equals(dateTime39));
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0665");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime41 = dateTime6.minusDays(13776);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime39", (dateTime6.compareTo(dateTime39) == 0) == dateTime6.equals(dateTime39));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0666");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) ' ');
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime7.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime7.plus((long) 365);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 100, chronology16);
        int int18 = localTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        boolean boolean22 = localTime17.isAfter((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        int int26 = localTime17.indexOf(dateTimeFieldType23);
        org.joda.time.Chronology chronology27 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.era();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int43 = dateTimeZone41.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.setTimeInMillis(100L);
        boolean boolean47 = calendar44.isWeekDateSupported();
        calendar44.roll(2, false);
        calendar44.setTimeInMillis(0L);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long56 = dateTimeZone41.getMillisKeepLocal(dateTimeZone54, (long) 2);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 8, dateTimeZone41);
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property63 = dateTime60.weekyear();
        org.joda.time.DateTime dateTime65 = property63.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime67 = dateTime65.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.minus(readablePeriod68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.withZone(dateTimeZone70);
        org.joda.time.DateTime.Property property72 = dateTime69.weekOfWeekyear();
        org.joda.time.DateTime dateTime73 = localTime58.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalTime localTime75 = localTime58.withMillisOfDay(36000089);
        int[] intArray77 = chronology27.get((org.joda.time.ReadablePartial) localTime58, (long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone78 = chronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone79 = chronology27.getZone();
        long long82 = dateTimeZone79.adjustOffset((long) 600, false);
        org.joda.time.DateTime dateTime83 = dateTime7.withZoneRetainFields(dateTimeZone79);
        org.joda.time.DateTime.Property property84 = dateTime7.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime83", (dateTime1.compareTo(dateTime83) == 0) == dateTime1.equals(dateTime83));
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0667");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.setTimeInMillis(100L);
        boolean boolean47 = calendar44.isWeekDateSupported();
        calendar44.roll(2, false);
        calendar44.setTimeInMillis(0L);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology60);
        org.joda.time.LocalTime.Property property62 = localTime61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = dateTimeField63.getAsText(32770, locale65);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone53, locale65);
        java.lang.String str70 = dateTimeZone25.getShortName((long) 8, locale65);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology75);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField78 = property77.getField();
        java.util.Locale locale79 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        int int81 = dateTimeField78.getMaximumShortTextLength(locale79);
        java.util.Set<java.lang.String> strSet82 = locale79.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale79.toLanguageTag();
        java.lang.String str84 = locale79.getCountry();
        java.lang.String str85 = locale65.getDisplayName(locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0668");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = dateTime1.plusSeconds(32772);
        int int9 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property10 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        int int16 = dateTime14.getDayOfWeek();
        boolean boolean18 = dateTime14.isBefore((long) 15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology26.getZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.Chronology chronology40 = chronology26.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology26.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime14.withChronology(chronology26);
        long long43 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime49.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay54 = dateTime53.toYearMonthDay();
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.DurationField durationField56 = durationFieldType47.getField(chronology55);
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology55);
        int int58 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime46);
        int int59 = dateTime42.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime57", (dateTime46.compareTo(dateTime57) == 0) == dateTime46.equals(dateTime57));
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0669");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        java.lang.String str5 = property4.getAsText();
        java.lang.String str6 = property4.getAsText();
        org.joda.time.DateTime dateTime7 = property4.getDateTime();
        org.joda.time.DateTime dateTime8 = property4.withMinimumValue();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded(readableDuration14, 139680);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property21 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime23 = property21.addToCopy((long) (short) 0);
        int int24 = property21.get();
        org.joda.time.DateTime dateTime25 = property21.roundCeilingCopy();
        int int26 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        java.util.Date date27 = dateTime25.toDate();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        int int29 = property4.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime28.withZoneRetainFields(dateTimeZone40);
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = null;
        org.joda.time.format.DateTimeParser dateTimeParser44 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter43, dateTimeParser44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter47.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) 'a');
        org.joda.time.DateTime dateTime55 = dateTime51.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        org.joda.time.Chronology chronology57 = yearMonthDay56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.secondOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter49.withChronology(chronology57);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance();
        calendar61.setTimeInMillis(100L);
        boolean boolean64 = calendar61.isWeekDateSupported();
        calendar61.roll(2, false);
        calendar61.setTimeInMillis(0L);
        java.util.TimeZone timeZone70 = calendar61.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        int int74 = dateTimeZone72.getStandardOffset((-1L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter60.withZone(dateTimeZone72);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime42.toMutableDateTime(dateTimeZone72);
        java.lang.String str77 = dateTimeZone72.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and mutableDateTime76", (dateTime42.compareTo(mutableDateTime76) == 0) == dateTime42.equals(mutableDateTime76));
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0670");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.lang.String str7 = property6.getName();
        java.lang.String str8 = property6.getAsString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays(0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        int int16 = dateTime15.getMillisOfSecond();
        int int17 = property6.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTime21.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.withDurationAdded(readableDuration24, 32770);
        int int27 = property6.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        int int33 = localTime32.getMillisOfSecond();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 100, chronology35);
        boolean boolean37 = localTime32.isAfter((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        boolean boolean40 = dateTimeFieldType38.isSupported(chronology39);
        int int41 = localTime32.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology42 = localTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekOfWeekyear();
        boolean boolean46 = property29.equals((java.lang.Object) dateTimeField45);
        org.joda.time.DateTime dateTime48 = property29.addWrapFieldToCopy(1980);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime50.minusDays(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        int int56 = dateTime55.getEra();
        org.joda.time.DateTime dateTime57 = dateTime55.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime59 = dateTime55.minusMinutes(1);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfYear();
        org.joda.time.DateTime dateTime61 = property60.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = dateTime61.toString(dateTimeFormatter62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean65 = dateTime61.isSupported(dateTimeFieldType64);
        int int66 = dateTime50.get(dateTimeFieldType64);
        boolean boolean67 = dateTime48.isSupported(dateTimeFieldType64);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) 100, chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean72 = localTime70.isSupported(dateTimeFieldType71);
        org.joda.time.LocalTime localTime74 = localTime70.plusMillis(52);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalTime localTime77 = localTime70.withPeriodAdded(readablePeriod75, (int) (byte) -1);
        int int78 = localTime77.getSecondOfMinute();
        org.joda.time.Chronology chronology79 = localTime77.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfHalfday();
        org.joda.time.DurationField durationField81 = chronology79.years();
        org.joda.time.DurationField durationField82 = chronology79.eras();
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime48.toMutableDateTime(chronology79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField81 and durationField82", Math.signum(durationField81.compareTo(durationField82)) == -Math.signum(durationField82.compareTo(durationField81)));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0671");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = property2.getDateTime();
        org.joda.time.DateTime dateTime5 = property2.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.getLocalTime();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        java.lang.String str18 = property17.getName();
        java.util.Locale locale19 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getCountry();
        java.lang.String str22 = property17.getAsShortText(locale19);
        java.lang.String str23 = dateTimeZone6.getShortName((long) 1, locale19);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime5.toMutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime5.withZoneRetainFields(dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and mutableDateTime24", (dateTime26.compareTo(mutableDateTime24) == 0) == dateTime26.equals(mutableDateTime24));
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0672");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear((int) 'x');
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("1967-05-01T00:00:00.009");
        java.util.Calendar calendar47 = dateTime42.toCalendar(locale46);
        boolean boolean48 = calendar47.isLenient();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0673");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        int int10 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, 17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 100, chronology19);
        int int21 = localTime20.getMillisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        boolean boolean25 = localTime20.isAfter((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = dateTimeFieldType26.isSupported(chronology27);
        int int29 = localTime20.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology30 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime(chronology30);
        long long36 = chronology30.add(52L, 209401029539000L, 333);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime32", (dateTime12.compareTo(dateTime32) == 0) == dateTime12.equals(dateTime32));
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0674");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter33.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfWeek();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 100, chronology41);
        org.joda.time.DateTime dateTime47 = dateTime46.withTimeAtStartOfDay();
        int int48 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime25.withWeekOfWeekyear(24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime47", (dateTime1.compareTo(dateTime47) == 0) == dateTime1.equals(dateTime47));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0675");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime1.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        int int28 = dateTime15.get(dateTimeField27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology37.getZone();
        org.joda.time.DurationField durationField40 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1, chronology37);
        long long47 = chronology37.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.DurationField durationField48 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology37.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime15.toMutableDateTime(chronology37);
        long long55 = chronology37.add((long) 363, (-60000L), (-119400));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime51", (dateTime1.compareTo(mutableDateTime51) == 0) == dateTime1.equals(mutableDateTime51));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0676");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.DateTime dateTime7 = dateTime1.withZone(dateTimeZone5);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        org.joda.time.DurationField durationField21 = dateTimeField15.getLeapDurationField();
        int int22 = dateTime1.get(dateTimeField15);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(5);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 8, dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter25.withZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime1.toMutableDateTime(dateTimeZone40);
        java.lang.String str60 = dateTimeZone40.getName(50400600L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime58", (dateTime1.compareTo(mutableDateTime58) == 0) == dateTime1.equals(mutableDateTime58));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0677");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property5 = dateTime2.weekyear();
        org.joda.time.DateTime dateTime7 = property5.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = property5.roundCeilingCopy();
        long long9 = property5.remainder();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale14);
        org.joda.time.DateTime dateTime17 = property5.setCopy("2239", locale14);
        java.lang.String str18 = property5.getAsShortText();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getDisplayName();
        int int21 = property5.getMaximumShortTextLength(locale19);
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.lang.String str25 = locale24.getISO3Country();
        java.lang.String str26 = locale24.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale24.getDisplayCountry(locale27);
        java.lang.String str29 = locale23.getDisplayVariant(locale24);
        java.lang.String str30 = locale23.getVariant();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology36);
        org.joda.time.LocalTime.Property property38 = localTime37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = dateTimeField39.getAsText(32770, locale41);
        java.lang.String str45 = dateTimeField39.getName();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale53.toLanguageTag();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale53.getDisplayCountry(locale56);
        java.lang.String str58 = locale52.getDisplayVariant(locale53);
        java.lang.String str59 = locale51.getDisplayScript(locale53);
        java.lang.String str60 = dateTimeField49.getAsShortText((long) 0, locale53);
        int int61 = dateTimeField39.getMaximumTextLength(locale53);
        java.lang.String str62 = locale31.getDisplayCountry(locale53);
        java.lang.String str63 = locale23.getDisplayLanguage(locale31);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        calendar64.setTimeInMillis(100L);
        boolean boolean67 = calendar64.isWeekDateSupported();
        calendar64.roll(2, false);
        calendar64.setTimeInMillis(0L);
        java.util.TimeZone timeZone73 = calendar64.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = java.util.Locale.ITALY;
        java.util.Locale locale78 = java.util.Locale.KOREA;
        java.lang.String str79 = locale78.getISO3Country();
        java.lang.String str80 = locale78.toLanguageTag();
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.lang.String str82 = locale78.getDisplayCountry(locale81);
        java.lang.String str83 = locale77.getDisplayVariant(locale78);
        java.lang.String str84 = locale76.getDisplayScript(locale78);
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone73, locale76);
        java.util.Locale.Category category86 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale87 = java.util.Locale.getDefault(category86);
        java.lang.String str88 = locale76.getDisplayName(locale87);
        java.lang.String str89 = locale23.getDisplayCountry(locale76);
        java.lang.String str90 = locale19.getDisplayVariant(locale23);
        java.lang.String str91 = locale23.getLanguage();
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(locale23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar85", (calendar15.compareTo(calendar85) == 0) == calendar15.equals(calendar85));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0678");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(6);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes(1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean38 = dateTime34.isSupported(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime41.minusDays((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        org.joda.time.DurationField durationField50 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.dayOfYear();
        boolean boolean53 = durationFieldType39.isSupported(chronology47);
        long long57 = chronology47.add((-1581379253000L), (long) 'u', (int) (short) 1);
        org.joda.time.DateTime dateTime58 = dateTime24.toDateTime(chronology47);
        int int59 = dateTime58.getWeekyear();
        int int60 = dateTime58.getHourOfDay();
        org.joda.time.DateTime.Property property61 = dateTime58.weekyear();
        java.lang.String str62 = dateTime58.toString();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime64.minusDays((int) 'a');
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay69 = dateTime68.toYearMonthDay();
        org.joda.time.Chronology chronology70 = yearMonthDay69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfDay();
        java.lang.String str72 = chronology70.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.monthOfYear();
        org.joda.time.DurationField durationField74 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.minuteOfHour();
        org.joda.time.DateTime dateTime76 = dateTime58.withChronology(chronology70);
        org.joda.time.DateTime dateTime78 = dateTime76.plusMonths(63120000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime76", (dateTime23.compareTo(dateTime76) == 0) == dateTime23.equals(dateTime76));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0679");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.plus(readableDuration3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        int int9 = localTime8.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 100, chronology11);
        boolean boolean13 = localTime8.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        int int17 = localTime8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DurationField durationField20 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfCentury();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime4.toDateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0680");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 999, dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getID();
        org.joda.time.DateTime dateTime22 = dateTime4.withZone(dateTimeZone17);
        int int23 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime.Property property24 = dateTime4.monthOfYear();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime27.minusDays((int) 'a');
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology41.getZone();
        org.joda.time.DurationField durationField44 = chronology41.months();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType32.getField(chronology41);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) -1, chronology41);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, 126);
        int int50 = property24.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime22", (dateTime4.compareTo(dateTime22) == 0) == dateTime4.equals(dateTime22));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0681");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property15.getLocalTime();
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        org.joda.time.LocalTime localTime20 = property18.addCopy(2);
        org.joda.time.LocalTime localTime21 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime23 = localTime21.plusMillis(59);
        org.joda.time.LocalTime localTime25 = localTime23.minusMillis(139680);
        org.joda.time.LocalTime localTime27 = localTime23.minusSeconds((int) (byte) 1);
        int int28 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.Chronology chronology29 = localTime2.getChronology();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(14);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localTime41.getFieldTypes();
        org.joda.time.Chronology chronology43 = localTime41.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime35.withChronology(chronology43);
        int int45 = dateTime44.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean47 = dateTime44.isSupported(dateTimeFieldType46);
        boolean boolean48 = localTime2.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime44", (dateTime35.compareTo(dateTime44) == 0) == dateTime35.equals(dateTime44));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0682");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DateTime dateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        int int36 = dateTime35.getMonthOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMonths((int) 'x');
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        int int42 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 36000249, dateTimeZone29);
        org.joda.time.DateTime dateTime44 = dateTime26.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime44", (dateTime21.compareTo(dateTime44) == 0) == dateTime21.equals(dateTime44));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0683");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int25 = dateTimeZone23.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZone(dateTimeZone27);
        boolean boolean30 = dateTimeFormatter29.isOffsetParsed();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        int int34 = localTime33.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        boolean boolean38 = localTime33.isAfter((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType39.isSupported(chronology40);
        int int42 = localTime33.indexOf(dateTimeFieldType39);
        org.joda.time.Chronology chronology43 = localTime33.getChronology();
        long long47 = chronology43.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter29.withChronology(chronology43);
        org.joda.time.DurationField durationField52 = chronology43.weeks();
        org.joda.time.DateTimeField dateTimeField53 = chronology43.yearOfCentury();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DurationField durationField55 = chronology43.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime54", (dateTime28.compareTo(dateTime54) == 0) == dateTime28.equals(dateTime54));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0684");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withDurationAdded(readableDuration6, 32770);
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfSecond();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(35135652);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.Chronology chronology34 = chronology20.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = chronology34.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.Chronology chronology39 = chronology34.withUTC();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        calendar40.setTimeInMillis(100L);
        boolean boolean43 = calendar40.isWeekDateSupported();
        calendar40.roll(2, false);
        calendar40.setTimeInMillis(0L);
        java.util.TimeZone timeZone49 = calendar40.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        long long52 = dateTimeZone50.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property57 = dateTime54.weekyear();
        org.joda.time.DateTime dateTime59 = property57.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime61 = dateTime59.withHourOfDay(6);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        int int63 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime62);
        long long66 = dateTimeZone50.adjustOffset(121L, true);
        org.joda.time.Chronology chronology67 = chronology39.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime68 = dateTime10.toDateTime(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime70 = dateTime10.plus(readablePeriod69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime70 and dateTime68", (dateTime70.compareTo(dateTime68) == 0) == dateTime70.equals(dateTime68));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0685");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int28 = dateTimeZone26.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset((long) 70);
        java.lang.String str43 = dateTimeZone39.getShortName(1L);
        long long47 = dateTimeZone39.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime49.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes(3);
        org.joda.time.DateTime dateTime58 = dateTime55.withDurationAdded((long) 19, 10);
        org.joda.time.LocalDateTime localDateTime59 = dateTime55.toLocalDateTime();
        boolean boolean60 = dateTimeZone39.isLocalDateTimeGap(localDateTime59);
        boolean boolean61 = dateTimeZone26.isLocalDateTimeGap(localDateTime59);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime7.toMutableDateTime(dateTimeZone26);
        boolean boolean64 = dateTimeZone26.isStandardOffset(1979L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime62", (dateTime7.compareTo(mutableDateTime62) == 0) == dateTime7.equals(mutableDateTime62));
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0686");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        org.joda.time.DurationField durationField30 = chronology24.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0687");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 28, dateTimeZone8);
        boolean boolean13 = dateTimeZone8.isStandardOffset(8464619591L);
        boolean boolean14 = dateTimeZone8.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime10", (dateTime2.compareTo(dateTime10) == 0) == dateTime2.equals(dateTime10));
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0688");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) 1970);
        long long8 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 52, dateTimeZone2);
        long long12 = dateTimeZone2.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        int int17 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.lang.String str22 = dateTimeZone2.getShortName(0L, locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) 'a');
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.secondOfDay();
        java.lang.String str33 = chronology31.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.monthOfYear();
        boolean boolean35 = dateTimeFieldType23.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology31.getZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property43 = dateTime40.weekyear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime47 = dateTime45.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.minus(readablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withZone(dateTimeZone50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = dateTime51.withField(dateTimeFieldType52, 1);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime56.minusDays((int) 'a');
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime60.toYearMonthDay();
        org.joda.time.Chronology chronology62 = yearMonthDay61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.secondOfDay();
        org.joda.time.DurationField durationField64 = chronology62.eras();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType52.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField67 = chronology62.dayOfYear();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfHour();
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = locale71.toLanguageTag();
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale71.getDisplayCountry(locale74);
        java.lang.String str76 = locale74.getISO3Language();
        int int77 = property70.getMaximumShortTextLength(locale74);
        int int78 = dateTimeField67.getMaximumShortTextLength(locale74);
        java.lang.String str79 = dateTimeZone37.getShortName((long) 2, locale74);
        long long81 = dateTimeZone2.getMillisKeepLocal(dateTimeZone37, (long) 292269054);
        int int83 = dateTimeZone37.getOffsetFromLocal((long) 35135652);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime25", (dateTime14.compareTo(dateTime25) == 0) == dateTime14.equals(dateTime25));
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0689");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        int int2 = calendar1.getFirstDayOfWeek();
        calendar1.setFirstDayOfWeek(1980);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        java.lang.String str20 = dateTimeZone16.getID();
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale22);
        calendar1.setTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar5", (calendar1.compareTo(calendar5) == 0) == calendar1.equals(calendar5));
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0690");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 28, dateTimeZone8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) 'a');
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime13.era();
        org.joda.time.DateTime.Property property19 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded((long) 26356320, 58620000);
        org.joda.time.DateTime.Property property24 = dateTime20.secondOfDay();
        boolean boolean25 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate localDate26 = dateTime11.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime10", (dateTime2.compareTo(dateTime10) == 0) == dateTime2.equals(dateTime10));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0691");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        int int7 = dateTime1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str10 = dateTimeZone9.getID();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime1.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        int int17 = dateTime15.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.plus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime15.minusMillis(15);
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        boolean boolean23 = dateTime15.isAfterNow();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder24.setExtension('u', "deu");
        java.util.Locale.Builder builder29 = builder27.setRegion("");
        java.util.Locale.Builder builder31 = builder29.setVariant("86340000");
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale.Builder builder35 = builder31.setLocale(locale33);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getScript();
        java.lang.String str41 = locale37.getDisplayLanguage(locale39);
        java.util.Locale.Builder builder42 = builder35.setLocale(locale39);
        java.util.Calendar calendar43 = dateTime15.toCalendar(locale39);
        boolean boolean44 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime11", (dateTime1.compareTo(mutableDateTime11) == 0) == dateTime1.equals(mutableDateTime11));
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0692");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        java.util.TimeZone timeZone3 = calendar2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime9 = property7.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 100, chronology11);
        int int13 = localTime12.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        boolean boolean17 = localTime12.isAfter((org.joda.time.ReadablePartial) localTime16);
        int int18 = property7.compareTo((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale31 = new java.util.Locale("it_IT", "S\374dkorea", "Etc/UTC");
        java.lang.String str32 = dateTimeField26.getAsShortText(53, locale31);
        java.lang.String str33 = property7.getAsShortText(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone3, locale31);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfHour();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.DateTime dateTime39 = property37.getDateTime();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        int int43 = localTime42.getMillisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        boolean boolean47 = localTime42.isAfter((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = dateTimeFieldType48.isSupported(chronology49);
        int int51 = localTime42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology52 = localTime42.getChronology();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology57);
        org.joda.time.LocalTime.Property property59 = localTime58.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        org.joda.time.LocalTime localTime61 = property59.getLocalTime();
        org.joda.time.LocalTime localTime62 = property59.roundCeilingCopy();
        boolean boolean63 = localTime42.equals((java.lang.Object) property59);
        java.util.Locale.Category category64 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale65 = java.util.Locale.getDefault(category64);
        java.lang.String str66 = property59.getAsShortText(locale65);
        java.lang.String str67 = locale65.getDisplayVariant();
        java.lang.String str68 = property37.getAsText(locale65);
        java.util.Set<java.lang.String> strSet69 = locale65.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getScript();
        boolean boolean71 = locale65.hasExtensions();
        java.util.Set<java.lang.Character> charSet72 = locale65.getExtensionKeys();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone3, locale65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar34", (calendar2.compareTo(calendar34) == 0) == calendar2.equals(calendar34));
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0693");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 8, dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = dateTime3.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis((int) 'u');
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes(1);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.DateTime dateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean57 = dateTime53.isSupported(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getDurationType();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime60.minusDays((int) 'a');
        org.joda.time.DateTime dateTime64 = dateTime60.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay65 = dateTime64.toYearMonthDay();
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology66.getZone();
        org.joda.time.DurationField durationField69 = chronology66.days();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.dayOfYear();
        boolean boolean72 = durationFieldType58.isSupported(chronology66);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTime dateTime74 = dateTime43.withChronology(chronology66);
        org.joda.time.DateTimeField dateTimeField75 = chronology66.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime43", (dateTime3.compareTo(dateTime43) == 0) == dateTime3.equals(dateTime43));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0694");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withDurationAdded((long) (short) 1, 999);
        org.joda.time.DateTime.Property property27 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property32 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime36 = dateTime34.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.minus(readablePeriod37);
        int int39 = dateTime38.getMonthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar41 = dateTime40.toGregorianCalendar();
        org.joda.time.DateTime dateTime43 = dateTime40.minusMillis(161);
        org.joda.time.DateTime dateTime45 = dateTime40.minusMinutes((int) 'x');
        boolean boolean46 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and gregorianCalendar41", (calendar0.compareTo(gregorianCalendar41) == 0) == calendar0.equals(gregorianCalendar41));
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0695");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(0);
        int int28 = dateTime25.getYearOfCentury();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime25.toTimeOfDay();
        java.lang.Object obj30 = null;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        java.lang.String str32 = calendar31.getCalendarType();
        java.time.Instant instant33 = calendar31.toInstant();
        int int34 = calendar31.getWeekYear();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromCalendarFields(calendar31);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj30, chronology36);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime25.toMutableDateTime(chronology36);
        org.joda.time.DateTime dateTime41 = dateTime25.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.plus(readablePeriod42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and mutableDateTime40", (dateTime43.compareTo(mutableDateTime40) == 0) == dateTime43.equals(mutableDateTime40));
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0696");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) (byte) 100);
        java.lang.String str10 = dateTimeZone7.getID();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime20 = property18.getLocalTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(3);
        long long29 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long57 = dateTimeZone42.getMillisKeepLocal(dateTimeZone55, (long) 2);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 8, dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime58.toMutableDateTimeISO();
        boolean boolean60 = dateTime58.isAfterNow();
        org.joda.time.DateTime dateTime62 = dateTime58.withMillis(100L);
        int int63 = property18.getDifference((org.joda.time.ReadableInstant) dateTime58);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = locale66.toLanguageTag();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale66.getDisplayCountry(locale69);
        java.lang.String str71 = locale65.getDisplayVariant(locale66);
        java.lang.String str72 = locale64.getDisplayScript(locale66);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale66);
        int int74 = property18.getMaximumTextLength(locale66);
        java.lang.String str75 = locale66.getVariant();
        java.util.Calendar calendar76 = dateTime1.toCalendar(locale66);
        org.joda.time.TimeOfDay timeOfDay77 = dateTime1.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar76", (calendar31.compareTo(calendar76) == 0) == calendar31.equals(calendar76));
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0697");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property11 = dateTime8.weekyear();
        int int12 = dateTime8.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime8.withDurationAdded(139680L, (-1));
        org.joda.time.DateTime dateTime17 = dateTime15.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime17.minusMinutes(56);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DurationField durationField30 = durationFieldType21.getField(chronology29);
        org.joda.time.Chronology chronology31 = chronology29.withUTC();
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withChronology(chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime32", (dateTime17.compareTo(dateTime32) == 0) == dateTime17.equals(dateTime32));
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0698");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime4.minusSeconds(17);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int17 = dateTimeZone15.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime13.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(991);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readableDuration21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime18", (dateTime13.compareTo(dateTime18) == 0) == dateTime13.equals(dateTime18));
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0699");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        int int3 = property2.getMaximumValue();
        org.joda.time.DateTime dateTime5 = property2.setCopy(1969);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(3);
        int int8 = dateTime7.getDayOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property14 = dateTime11.weekyear();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((long) (short) 0);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        long long45 = dateTimeZone30.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 8, dateTimeZone30);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(dateTimeZone30);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 10, dateTimeZone30);
        org.joda.time.DateTime dateTime49 = dateTime16.withZone(dateTimeZone30);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology54);
        org.joda.time.LocalTime.Property property56 = localTime55.millisOfSecond();
        org.joda.time.LocalTime localTime58 = property56.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime59 = property56.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime60 = dateTime16.withFields((org.joda.time.ReadablePartial) localTime59);
        int int61 = dateTime16.getDayOfMonth();
        org.joda.time.DateTime dateTime63 = dateTime16.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime64 = dateTime63.toDateTimeISO();
        int int65 = property9.getDifference((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime64 and dateTime49", (dateTime64.compareTo(dateTime49) == 0) == dateTime64.equals(dateTime49));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0700");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = chronology3.halfdays();
        org.joda.time.DurationField durationField6 = durationFieldType0.getField(chronology3);
        java.lang.String str7 = durationFieldType0.toString();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear(5);
        boolean boolean14 = dateTimeFormatter11.isPrinter();
        org.joda.time.Chronology chronology15 = dateTimeFormatter11.getChronology();
        boolean boolean16 = dateTimeFormatter11.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.Chronology chronology19 = dateTimeFormatter11.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter11.getParser();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int34 = dateTimeZone32.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone35 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter11.withZone(dateTimeZone36);
        boolean boolean39 = dateTimeFormatter38.isOffsetParsed();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        int int43 = localTime42.getMillisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        boolean boolean47 = localTime42.isAfter((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = dateTimeFieldType48.isSupported(chronology49);
        int int51 = localTime42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology52 = localTime42.getChronology();
        long long56 = chronology52.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.weekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter38.withChronology(chronology52);
        org.joda.time.DurationField durationField61 = chronology52.weeks();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(209401030559000L, chronology52);
        org.joda.time.DurationField durationField63 = durationFieldType0.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField64 = chronology52.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField63", (durationField6.compareTo(durationField63) == 0) == durationField6.equals(durationField63));
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0701");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) 70);
        java.lang.String str49 = dateTimeZone45.getShortName(1L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) 'a');
        int int55 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.plusYears(100);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime60.minusDays((int) 'a');
        org.joda.time.DateTime dateTime64 = dateTime60.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay65 = dateTime64.toYearMonthDay();
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfDay();
        java.lang.String str68 = chronology66.toString();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.monthOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.year();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology66.getZone();
        boolean boolean72 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime73 = dateTime58.withZone(dateTimeZone71);
        org.joda.time.DateTime.Property property74 = dateTime73.secondOfMinute();
        org.joda.time.DateTime dateTime75 = property74.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime58 and dateTime75", (dateTime58.compareTo(dateTime75) == 0) == dateTime58.equals(dateTime75));
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0702");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        int int14 = dateTime9.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime13", (dateTime9.compareTo(dateTime13) == 0) == dateTime9.equals(dateTime13));
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0703");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 2);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology12);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField13 and durationField18", Math.signum(durationField13.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField13)));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0704");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.weekyear();
        org.joda.time.DurationField durationField31 = chronology23.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField31, and durationField25", !(durationField25.compareTo(durationField31) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField31.compareTo(durationField25))));
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0705");
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setTimeInMillis(100L);
        boolean boolean10 = calendar7.isWeekDateSupported();
        calendar7.roll(2, false);
        calendar7.setTimeInMillis(0L);
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone31, (long) 2);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.withDurationAdded(readableDuration35, 0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 0);
        int int40 = dateTime39.getEra();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime39.toYearMonthDay();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime47.toYearMonthDay();
        org.joda.time.Chronology chronology49 = yearMonthDay48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.dayOfYear();
        org.joda.time.DateTime dateTime53 = dateTime39.withChronology(chronology49);
        org.joda.time.DateTime dateTime54 = dateTime34.withChronology(chronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and dateTime53", (dateTime39.compareTo(dateTime53) == 0) == dateTime39.equals(dateTime53));
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0706");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(6);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes(1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = dateTime34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean38 = dateTime34.isSupported(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getDurationType();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime41.minusDays((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        org.joda.time.DurationField durationField50 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.dayOfYear();
        boolean boolean53 = durationFieldType39.isSupported(chronology47);
        long long57 = chronology47.add((-1581379253000L), (long) 'u', (int) (short) 1);
        org.joda.time.DateTime dateTime58 = dateTime24.toDateTime(chronology47);
        int int59 = dateTime58.getWeekyear();
        int int60 = dateTime58.getHourOfDay();
        org.joda.time.DateTime.Property property61 = dateTime58.weekyear();
        java.lang.String str62 = dateTime58.toString();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime64.minusDays((int) 'a');
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay69 = dateTime68.toYearMonthDay();
        org.joda.time.Chronology chronology70 = yearMonthDay69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfDay();
        java.lang.String str72 = chronology70.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.monthOfYear();
        org.joda.time.DurationField durationField74 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.minuteOfHour();
        org.joda.time.DateTime dateTime76 = dateTime58.withChronology(chronology70);
        org.joda.time.DateTime dateTime78 = dateTime58.minusHours(11826);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime58", (dateTime23.compareTo(dateTime58) == 0) == dateTime23.equals(dateTime58));
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0707");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        int int5 = dateTime4.getEra();
        org.joda.time.DateTime dateTime6 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime4.minusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) 2);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfHour();
        org.joda.time.Chronology chronology14 = dateTime10.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology20);
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = dateTimeField23.getAsText(32770, locale25);
        java.lang.String str30 = dateTimeField23.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        int int34 = localTime33.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        boolean boolean38 = localTime33.isAfter((org.joda.time.ReadablePartial) localTime37);
        int int39 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime33);
        java.lang.String str40 = dateTimeField23.getName();
        java.util.Date date46 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromDateFields(date46);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localTime47, (int) 'a', locale49);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeField23.getAsText(0L, locale53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        java.lang.String str56 = calendar55.getCalendarType();
        java.time.Instant instant57 = calendar55.toInstant();
        int int58 = calendar55.getWeekYear();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromCalendarFields(calendar55);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalTime localTime62 = localTime59.withPeriodAdded(readablePeriod60, (-979));
        int int63 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime59);
        int[] intArray65 = chronology14.get((org.joda.time.ReadablePartial) localTime59, (long) 'x');
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(chronology14);
        boolean boolean67 = durationFieldType0.isSupported(chronology14);
        org.joda.time.DurationField durationField68 = chronology14.eras();
        org.joda.time.DurationField durationField69 = chronology14.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField68, durationField69, and durationField68", !(durationField68.compareTo(durationField69) == 0) || (Math.signum(durationField68.compareTo(durationField68)) == Math.signum(durationField69.compareTo(durationField68))));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0708");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTime7.equals((java.lang.Object) dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 491);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        int int24 = dateTime23.getEra();
        int int25 = dateTime23.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, 0);
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter21.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime29", (dateTime1.compareTo(dateTime29) == 0) == dateTime1.equals(dateTime29));
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0709");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.era();
        org.joda.time.DurationField durationField27 = chronology22.years();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((-1L), chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField27", (durationField24.compareTo(durationField27) == 0) == durationField24.equals(durationField27));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0710");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property23.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = property23.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.String str35 = localTime28.toString();
        boolean boolean36 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes(1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(985);
        org.joda.time.DateTime dateTime51 = dateTime47.plus((long) 18);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property54 = dateTime53.minuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime53.minusDays((int) 'a');
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTime();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        calendar58.setTimeInMillis(100L);
        boolean boolean61 = calendar58.isWeekDateSupported();
        calendar58.roll(2, false);
        calendar58.setTimeInMillis(0L);
        java.util.TimeZone timeZone67 = calendar58.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset((long) 70);
        java.lang.String str72 = dateTimeZone68.getShortName(1L);
        long long76 = dateTimeZone68.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime77 = dateTime56.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime78 = dateTime47.toDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime80 = dateTime78.withCenturyOfEra(24);
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime80.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and dateTime78", (dateTime47.compareTo(dateTime78) == 0) == dateTime47.equals(dateTime78));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0711");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone12);
        java.lang.String str31 = dateTimeZone12.getName((long) 2022);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfSecond(600);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.minus(readablePeriod35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.DateTime dateTime41 = dateTime32.withZone(dateTimeZone40);
        int int42 = dateTime32.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime41", (dateTime32.compareTo(dateTime41) == 0) == dateTime32.equals(dateTime41));
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0712");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        calendar5.setTimeInMillis(100L);
        boolean boolean8 = calendar5.isWeekDateSupported();
        calendar5.roll(2, false);
        calendar5.setTimeInMillis(0L);
        java.util.TimeZone timeZone14 = calendar5.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) 70);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getOffsetFromLocal((long) (short) 0);
        long long33 = dateTimeZone15.getMillisKeepLocal(dateTimeZone29, (long) (short) 10);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime39 = dateTime37.toLocalDateTime();
        boolean boolean40 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime41 = dateTime1.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime43 = dateTime1.plusWeeks((-456825));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and dateTime41", (dateTime35.compareTo(dateTime41) == 0) == dateTime35.equals(dateTime41));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0713");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(39);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis((int) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean18 = localTime16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime localTime20 = localTime16.plusMillis(52);
        org.joda.time.LocalTime localTime22 = localTime16.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime25 = localTime22.withPeriodAdded(readablePeriod23, 292278993);
        org.joda.time.DateTime dateTime26 = localTime22.toDateTimeToday();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        int int31 = localTime30.getMillisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        boolean boolean35 = localTime30.isAfter((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        boolean boolean38 = dateTimeFieldType36.isSupported(chronology37);
        int int39 = localTime30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology40 = localTime30.getChronology();
        long long44 = chronology40.add((long) 19, (long) 97, 3);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (byte) 0, chronology40);
        boolean boolean46 = localTime22.equals((java.lang.Object) chronology40);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        int int49 = dateTime48.getEra();
        org.joda.time.DateTime dateTime50 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime52 = dateTime48.minusMinutes(1);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology59);
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfSecond();
        int int62 = localTime60.size();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) 100, chronology64);
        int int66 = localTime65.getMillisOfSecond();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 100, chronology68);
        boolean boolean70 = localTime65.isAfter((org.joda.time.ReadablePartial) localTime69);
        int int71 = localTime60.compareTo((org.joda.time.ReadablePartial) localTime69);
        org.joda.time.DateTime dateTime72 = dateTime54.withFields((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.DateTime dateTime74 = dateTime54.plus(readablePeriod73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str76 = dateTimeFieldType75.getName();
        boolean boolean77 = dateTime54.isSupported(dateTimeFieldType75);
        boolean boolean78 = localTime22.isSupported(dateTimeFieldType75);
        boolean boolean79 = dateTime13.isSupported(dateTimeFieldType75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime45", (dateTime1.compareTo(dateTime45) == 0) == dateTime1.equals(dateTime45));
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0714");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.withDurationAdded(139680L, (-1));
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(56);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime20.toYearMonthDay();
        org.joda.time.Chronology chronology22 = yearMonthDay21.getChronology();
        org.joda.time.DurationField durationField23 = durationFieldType14.getField(chronology22);
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTime dateTime25 = dateTime10.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime dateTime32 = dateTime29.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property33 = dateTime32.monthOfYear();
        boolean boolean34 = localTime27.equals((java.lang.Object) dateTime32);
        int int35 = localTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology40);
        org.joda.time.LocalTime.Property property42 = localTime41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology48);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = property50.getField();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.lang.String str56 = dateTimeField51.getAsText(32770, locale53);
        java.lang.String str58 = dateTimeField51.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) 100, chronology60);
        int int62 = localTime61.getMillisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) 100, chronology64);
        boolean boolean66 = localTime61.isAfter((org.joda.time.ReadablePartial) localTime65);
        int int67 = dateTimeField51.getMaximumValue((org.joda.time.ReadablePartial) localTime61);
        java.lang.String str68 = dateTimeField51.getName();
        java.util.Date date74 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.fromDateFields(date74);
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str79 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localTime75, (int) 'a', locale77);
        java.lang.String str80 = property42.getAsText(locale77);
        org.joda.time.LocalTime localTime82 = property42.addCopy(0L);
        org.joda.time.LocalTime localTime83 = property42.roundCeilingCopy();
        java.lang.String str84 = property42.toString();
        org.joda.time.DateTimeField dateTimeField85 = property42.getField();
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime(1970L);
        int int88 = property42.compareTo((org.joda.time.ReadablePartial) localTime87);
        int[] intArray89 = localTime87.getValues();
        int int90 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localTime27, intArray89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime25", (dateTime10.compareTo(dateTime25) == 0) == dateTime10.equals(dateTime25));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0715");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.withDurationAdded(139680L, (-1));
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds(15);
        org.joda.time.DateTime dateTime12 = dateTime8.minusHours(12);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readablePeriod13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str16 = durationFieldType15.getName();
        java.lang.String str17 = durationFieldType15.getName();
        org.joda.time.DateTime dateTime19 = dateTime14.withFieldAdded(durationFieldType15, 16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        int int22 = dateTime21.getEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean27 = localTime25.isSupported(dateTimeFieldType26);
        java.lang.String str28 = localTime25.toString();
        org.joda.time.LocalTime localTime30 = localTime25.plusSeconds(121);
        org.joda.time.DateTime dateTime31 = dateTime21.withFields((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.Chronology chronology32 = localTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.era();
        org.joda.time.DurationField durationField34 = chronology32.centuries();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.secondOfMinute();
        org.joda.time.DurationField durationField36 = chronology32.eras();
        boolean boolean37 = durationFieldType15.isSupported(chronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField34 and durationField36", Math.signum(durationField34.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField34)));
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0716");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property7 = dateTime4.weekyear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, 139680);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property15 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime17 = property15.addToCopy((long) (short) 0);
        int int18 = property15.get();
        org.joda.time.DateTime dateTime19 = property15.roundCeilingCopy();
        int int20 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) 'a');
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        org.joda.time.Chronology chronology31 = yearMonthDay30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        boolean boolean34 = dateTimeFieldType23.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology31.add(readablePeriod36, 39L, 9);
        org.joda.time.DurationField durationField40 = chronology31.halfdays();
        boolean boolean41 = dateTimeZone22.equals((java.lang.Object) chronology31);
        org.joda.time.DurationField durationField42 = chronology31.minutes();
        org.joda.time.DateTime dateTime43 = dateTime4.toDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime1.toMutableDateTime(chronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime43", (dateTime4.compareTo(dateTime43) == 0) == dateTime4.equals(dateTime43));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0717");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTime dateTime14 = dateTime8.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology19);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = dateTimeField22.getAsText(32770, locale24);
        org.joda.time.DurationField durationField28 = dateTimeField22.getLeapDurationField();
        int int29 = dateTime8.get(dateTimeField22);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter32.withPivotYear(5);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.setTimeInMillis(100L);
        boolean boolean53 = calendar50.isWeekDateSupported();
        calendar50.roll(2, false);
        calendar50.setTimeInMillis(0L);
        java.util.TimeZone timeZone59 = calendar50.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        long long62 = dateTimeZone47.getMillisKeepLocal(dateTimeZone60, (long) 2);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 8, dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter32.withZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime8.toMutableDateTime(dateTimeZone47);
        int int66 = property6.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime65", (dateTime1.compareTo(mutableDateTime65) == 0) == dateTime1.equals(mutableDateTime65));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0718");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property5 = dateTime2.weekyear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.withDurationAdded(readableDuration6, 139680);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        int int16 = property13.get();
        org.joda.time.DateTime dateTime17 = property13.roundCeilingCopy();
        int int18 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime23.minusDays((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology29.getZone();
        boolean boolean32 = dateTimeFieldType21.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology29.add(readablePeriod34, 39L, 9);
        org.joda.time.DurationField durationField38 = chronology29.halfdays();
        boolean boolean39 = dateTimeZone20.equals((java.lang.Object) chronology29);
        org.joda.time.DurationField durationField40 = chronology29.minutes();
        org.joda.time.DateTime dateTime41 = dateTime2.toDateTime(chronology29);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) (-432840000L), chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime41", (dateTime2.compareTo(dateTime41) == 0) == dateTime2.equals(dateTime41));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0719");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType10.isSupported(chronology12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        java.lang.String str15 = calendar14.getCalendarType();
        java.time.Instant instant16 = calendar14.toInstant();
        int int17 = calendar14.getWeekYear();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType10.getField(chronology19);
        org.joda.time.DurationField durationField24 = chronology19.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField24, and durationField22", !(durationField22.compareTo(durationField24) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField24.compareTo(durationField22))));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0720");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        boolean boolean7 = calendar0.isWeekDateSupported();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = calendar0.getDisplayNames((int) (short) 1, 0, locale11);
        java.lang.String str13 = locale11.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = dateTimeField24.getAsText(32770, locale26);
        java.lang.String str30 = dateTimeZone15.getShortName((long) 2, locale26);
        boolean boolean31 = locale26.hasExtensions();
        java.lang.String str32 = locale11.getDisplayName(locale26);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology37);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = dateTimeField40.getAsText(32770, locale42);
        java.lang.String str47 = dateTimeField40.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        int int51 = localTime50.getMillisOfSecond();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) 100, chronology53);
        boolean boolean55 = localTime50.isAfter((org.joda.time.ReadablePartial) localTime54);
        int int56 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localTime50);
        java.lang.String str57 = dateTimeField40.getName();
        java.util.Date date63 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromDateFields(date63);
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localTime64, (int) 'a', locale66);
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.lang.String str70 = locale66.getDisplayLanguage(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.util.Locale locale73 = java.util.Locale.KOREA;
        java.lang.String str74 = locale73.getISO3Country();
        java.lang.String str75 = locale73.toLanguageTag();
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.lang.String str77 = locale73.getDisplayCountry(locale76);
        java.lang.String str78 = locale72.getDisplayVariant(locale73);
        java.lang.String str79 = locale71.getDisplayScript(locale73);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale73);
        java.lang.String str81 = locale69.getDisplayName(locale73);
        java.lang.String str82 = locale11.getDisplayName(locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar80", (calendar0.compareTo(calendar80) == 0) == calendar0.equals(calendar80));
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0721");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime4.plusMinutes(1);
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(20);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean18 = localTime16.isSupported(dateTimeFieldType17);
        java.lang.String str19 = localTime16.toString();
        org.joda.time.LocalTime localTime21 = localTime16.plusSeconds(121);
        org.joda.time.DateTime dateTime22 = dateTime12.withFields((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.Chronology chronology23 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.era();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.DateTime dateTime26 = dateTime8.toDateTime(chronology23);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology31);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        int int34 = localTime32.size();
        org.joda.time.LocalTime localTime36 = localTime32.minusMinutes((int) ' ');
        long long38 = chronology23.set((org.joda.time.ReadablePartial) localTime36, (-568079999993L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime26", (dateTime8.compareTo(dateTime26) == 0) == dateTime8.equals(dateTime26));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0722");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        int int14 = dateTimeField12.getMaximumValue(139680L);
        long long16 = dateTimeField12.roundHalfEven((long) (-292275054));
        long long18 = dateTimeField12.roundHalfEven(10059L);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        java.lang.String str20 = calendar19.getCalendarType();
        java.time.Instant instant21 = calendar19.toInstant();
        int int22 = calendar19.getWeekYear();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromCalendarFields(calendar19);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone36, locale39);
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        java.lang.String str51 = locale39.getDisplayName(locale50);
        java.util.Locale locale55 = new java.util.Locale("fr", "Fri Feb 11 09:43:26 UTC 2022", "java.util.GregorianCalendar[time=1644572587079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=7,MILLISECOND=79,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str56 = locale39.getDisplayLanguage(locale55);
        int int57 = dateTimeField26.getMaximumShortTextLength(locale39);
        java.util.Set<java.lang.Character> charSet58 = locale39.getExtensionKeys();
        int int59 = dateTimeField12.getMaximumTextLength(locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar48", (calendar19.compareTo(calendar48) == 0) == calendar19.equals(calendar48));
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0723");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = dateTime5.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime24", (dateTime18.compareTo(dateTime24) == 0) == dateTime18.equals(dateTime24));
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0724");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        int int7 = property4.get();
        org.joda.time.DateTime dateTime8 = property4.roundCeilingCopy();
        org.joda.time.DurationField durationField9 = property4.getLeapDurationField();
        org.joda.time.DateTime dateTime11 = property4.addToCopy(36000097);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone21);
        boolean boolean23 = dateTime11.equals((java.lang.Object) timeZone21);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setTimeInMillis(100L);
        int int28 = calendar24.getActualMinimum((int) (short) 10);
        int int29 = calendar24.getWeeksInWeekYear();
        calendar24.add(1, 10);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        long long61 = dateTimeZone44.convertUTCToLocal(62135596800117L);
        boolean boolean62 = calendar24.after((java.lang.Object) dateTimeZone44);
        boolean boolean64 = dateTimeZone44.isStandardOffset((long) 24);
        org.joda.time.DateTime dateTime65 = dateTime11.toDateTime(dateTimeZone44);
        java.lang.String str66 = dateTimeZone44.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime65", (dateTime11.compareTo(dateTime65) == 0) == dateTime11.equals(dateTime65));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0725");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.DateTime.Property property15 = dateTime12.hourOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(0);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMinutes(1);
        org.joda.time.DateTime dateTime26 = dateTime24.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withPeriodAdded(readablePeriod27, 36000097);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology37.getZone();
        org.joda.time.DateTime dateTime41 = dateTime26.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime12.withZoneRetainFields(dateTimeZone40);
        int int43 = dateTime12.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0726");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) ' ');
        boolean boolean11 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime8);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        calendar13.setTimeInMillis(100L);
        boolean boolean16 = calendar13.isWeekDateSupported();
        calendar13.roll(2, false);
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone22 = calendar13.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = dateTimeZone24.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long39 = dateTimeZone24.getMillisKeepLocal(dateTimeZone37, (long) 2);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 8, dateTimeZone24);
        java.lang.String str41 = dateTimeZone24.getID();
        org.joda.time.DateTime dateTime42 = dateTime8.toDateTime(dateTimeZone24);
        long long44 = dateTimeZone24.nextTransition(260L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0727");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar.Builder builder10 = builder5.setDate(0, 0, (int) 'x');
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = dateTimeField19.getAsText(32770, locale21);
        java.lang.String str25 = locale11.getDisplayLanguage(locale21);
        java.util.Calendar.Builder builder26 = builder10.setLocale(locale11);
        boolean boolean27 = locale11.hasExtensions();
        java.lang.String str28 = locale11.toLanguageTag();
        java.lang.String str29 = dateTimeField3.getAsText(305988999L, locale11);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean34 = localTime32.isSupported(dateTimeFieldType33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromCalendarFields(calendar35);
        int int37 = localTime32.compareTo((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime.Property property38 = localTime32.secondOfMinute();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property43 = dateTime40.weekyear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((long) (short) 0);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int61 = dateTimeZone59.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        long long74 = dateTimeZone59.getMillisKeepLocal(dateTimeZone72, (long) 2);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 8, dateTimeZone59);
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.now(dateTimeZone59);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) 10, dateTimeZone59);
        org.joda.time.DateTime dateTime78 = dateTime45.withZone(dateTimeZone59);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology83);
        org.joda.time.LocalTime.Property property85 = localTime84.millisOfSecond();
        org.joda.time.LocalTime localTime87 = property85.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime88 = property85.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime89 = dateTime45.withFields((org.joda.time.ReadablePartial) localTime88);
        int int90 = localTime32.compareTo((org.joda.time.ReadablePartial) localTime88);
        int int91 = dateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) localTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime78", (dateTime1.compareTo(dateTime78) == 0) == dateTime1.equals(dateTime78));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0728");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        int int8 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.minus(readablePeriod18);
        int int20 = dateTime19.getMonthOfYear();
        int int21 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime6.withPeriodAdded(readablePeriod22, 4);
        org.joda.time.DateTime.Property property25 = dateTime6.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime6", (instant7.compareTo(dateTime6) == 0) == instant7.equals(dateTime6));
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0729");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) (byte) 100);
        java.lang.String str10 = dateTimeZone7.getID();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime20 = property18.getLocalTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(3);
        long long29 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long57 = dateTimeZone42.getMillisKeepLocal(dateTimeZone55, (long) 2);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 8, dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime58.toMutableDateTimeISO();
        boolean boolean60 = dateTime58.isAfterNow();
        org.joda.time.DateTime dateTime62 = dateTime58.withMillis(100L);
        int int63 = property18.getDifference((org.joda.time.ReadableInstant) dateTime58);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = locale66.toLanguageTag();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale66.getDisplayCountry(locale69);
        java.lang.String str71 = locale65.getDisplayVariant(locale66);
        java.lang.String str72 = locale64.getDisplayScript(locale66);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale66);
        int int74 = property18.getMaximumTextLength(locale66);
        java.lang.String str75 = locale66.getVariant();
        java.util.Calendar calendar76 = dateTime1.toCalendar(locale66);
        org.joda.time.DateTime.Property property77 = dateTime1.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar76", (calendar31.compareTo(calendar76) == 0) == calendar31.equals(calendar76));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0730");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property8 = localTime2.secondOfMinute();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int31 = dateTimeZone29.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        long long44 = dateTimeZone29.getMillisKeepLocal(dateTimeZone42, (long) 2);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 8, dateTimeZone29);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(dateTimeZone29);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 10, dateTimeZone29);
        org.joda.time.DateTime dateTime48 = dateTime15.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology53);
        org.joda.time.LocalTime.Property property55 = localTime54.millisOfSecond();
        org.joda.time.LocalTime localTime57 = property55.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime58 = property55.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime59 = dateTime15.withFields((org.joda.time.ReadablePartial) localTime58);
        int int60 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime58);
        org.joda.time.LocalTime localTime62 = localTime2.plusHours(292278993);
        org.joda.time.LocalTime localTime64 = localTime62.plusMinutes(292269054);
        org.joda.time.LocalTime localTime66 = localTime64.minusMinutes(1980);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime48", (dateTime10.compareTo(dateTime48) == 0) == dateTime10.equals(dateTime48));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0731");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime41 = dateTime6.minusWeeks(74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime39", (dateTime6.compareTo(dateTime39) == 0) == dateTime6.equals(dateTime39));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0732");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime7.minus((-251999990L));
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.Chronology chronology32 = chronology18.withZone(dateTimeZone31);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 32770, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime10.toMutableDateTime(dateTimeZone31);
        long long40 = dateTimeZone31.convertLocalToUTC((long) 587852, true, 18320399991L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime36", (dateTime10.compareTo(mutableDateTime36) == 0) == dateTime10.equals(mutableDateTime36));
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0733");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.plus(readableDuration3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        int int9 = localTime8.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 100, chronology11);
        boolean boolean13 = localTime8.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        int int17 = localTime8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DurationField durationField20 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfCentury();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime4.toDateTime(chronology18);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime24.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0734");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        org.joda.time.DurationField durationField30 = chronology24.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0735");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        calendar26.setTimeInMillis((long) 16);
        int int29 = calendar26.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime31.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime39.minusDays((int) 'a');
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.Chronology chronology45 = yearMonthDay44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime36.withChronology(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime36.getZone();
        boolean boolean49 = calendar26.before((java.lang.Object) dateTime36);
        java.util.Date date56 = new java.util.Date(59, 97, 4, (int) (byte) 0, 17, (int) (short) 1);
        boolean boolean57 = calendar26.after((java.lang.Object) 17);
        java.lang.String str58 = calendar26.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant37", (dateTime36.compareTo(instant37) == 0) == dateTime36.equals(instant37));
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0736");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = dateTimeField14.getAsShortText((long) 0, locale18);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone9, locale18);
        calendar26.setTimeInMillis((long) 16);
        int int29 = calendar26.getMinimalDaysInFirstWeek();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime31.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime39.minusDays((int) 'a');
        org.joda.time.DateTime dateTime43 = dateTime39.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.Chronology chronology45 = yearMonthDay44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.secondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime36.withChronology(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime36.getZone();
        boolean boolean49 = calendar26.before((java.lang.Object) dateTime36);
        java.util.Date date56 = new java.util.Date(59, 97, 4, (int) (byte) 0, 17, (int) (short) 1);
        boolean boolean57 = calendar26.after((java.lang.Object) 17);
        calendar26.set(220, 72000000, 1977, 269, (int) (byte) -1, (-35999977));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant37", (dateTime36.compareTo(instant37) == 0) == dateTime36.equals(instant37));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0737");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(1);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean24 = dateTime20.isSupported(dateTimeFieldType23);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime20.toGregorianCalendar();
        int int26 = property14.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = property14.roundCeilingCopy();
        org.joda.time.DateTime dateTime28 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property33 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((long) (short) 0);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.setTimeInMillis(100L);
        boolean boolean41 = calendar38.isWeekDateSupported();
        calendar38.roll(2, false);
        calendar38.setTimeInMillis(0L);
        java.util.TimeZone timeZone47 = calendar38.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int51 = dateTimeZone49.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance();
        calendar52.setTimeInMillis(100L);
        boolean boolean55 = calendar52.isWeekDateSupported();
        calendar52.roll(2, false);
        calendar52.setTimeInMillis(0L);
        java.util.TimeZone timeZone61 = calendar52.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        long long64 = dateTimeZone49.getMillisKeepLocal(dateTimeZone62, (long) 2);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 8, dateTimeZone49);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.now(dateTimeZone49);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) 10, dateTimeZone49);
        org.joda.time.DateTime dateTime68 = dateTime35.withZone(dateTimeZone49);
        int int69 = property14.getDifference((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime68", (dateTime1.compareTo(dateTime68) == 0) == dateTime1.equals(dateTime68));
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0738");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        org.joda.time.DateTime.Property property42 = dateTime41.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0739");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) 100, chronology8);
        int int10 = localTime9.getMillisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 100, chronology12);
        boolean boolean14 = localTime9.isAfter((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        boolean boolean17 = dateTimeFieldType15.isSupported(chronology16);
        int int18 = localTime9.indexOf(dateTimeFieldType15);
        org.joda.time.Chronology chronology19 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.era();
        org.joda.time.DurationField durationField21 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime5.toDateTime(chronology19);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((-1035133L), chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0740");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 100);
        boolean boolean13 = dateTimeZone10.isFixed();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone10);
        int int16 = dateTimeZone10.getOffset(36000090L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str21 = dateTimeZone19.getNameKey((long) 1970);
        long long25 = dateTimeZone19.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 52, dateTimeZone19);
        long long29 = dateTimeZone19.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        int int32 = dateTime31.getEra();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        int int34 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime31);
        long long38 = dateTimeZone19.convertLocalToUTC((long) 79200, false, (long) 2022);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone19);
        int int41 = dateTimeZone19.getOffset((long) (-1560));
        long long43 = dateTimeZone10.getMillisKeepLocal(dateTimeZone19, (long) 79200152);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime39", (dateTime14.compareTo(dateTime39) == 0) == dateTime14.equals(dateTime39));
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0741");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology7.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(2);
        org.joda.time.LocalDateTime localDateTime27 = dateTime22.toLocalDateTime();
        boolean boolean28 = dateTimeZone12.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0742");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfYear();
        org.joda.time.Chronology chronology29 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyearOfCentury();
        org.joda.time.DurationField durationField33 = chronology29.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField33, and durationField25", !(durationField25.compareTo(durationField33) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField33.compareTo(durationField25))));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0743");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.LocalTime localTime12 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset((long) 70);
        java.lang.String str33 = dateTimeZone29.getShortName(1L);
        long long37 = dateTimeZone29.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime38 = dateTime17.withZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime40 = dateTime38.withCenturyOfEra(0);
        org.joda.time.DateMidnight dateMidnight41 = dateTime38.toDateMidnight();
        long long42 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateMidnight41", (dateTime17.compareTo(dateMidnight41) == 0) == dateTime17.equals(dateMidnight41));
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0744");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours((int) (byte) 10);
        org.joda.time.DateTime.Property property21 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime23 = dateTime18.minusYears(71);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str30 = dateTimeZone28.getNameKey((long) 1970);
        long long34 = dateTimeZone28.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 52, dateTimeZone28);
        java.util.Date date39 = new java.util.Date((int) '4', 86399999, 4);
        int int40 = date39.getSeconds();
        date39.setMinutes(13);
        boolean boolean43 = dateTimeZone28.equals((java.lang.Object) date39);
        int int45 = dateTimeZone28.getStandardOffset(20L);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 71819990, dateTimeZone28);
        org.joda.time.DateTime dateTime47 = dateTime23.withZone(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime47", (dateTime23.compareTo(dateTime47) == 0) == dateTime23.equals(dateTime47));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0745");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 52);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis((-52));
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.minusDays((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology13.getZone();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = chronology13.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfWeek();
        org.joda.time.DurationField durationField29 = chronology27.weekyears();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology27.getZone();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = dateTimeZone30.getName((long) 4, locale32);
        int int37 = dateTimeZone30.getOffsetFromLocal((-1680047639000L));
        boolean boolean38 = dateTimeZone30.isFixed();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 161, dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime1.toMutableDateTime(dateTimeZone30);
        int int41 = dateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime40", (mutableDateTime4.compareTo(mutableDateTime40) == 0) == mutableDateTime4.equals(mutableDateTime40));
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0746");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = builder61.build();
        java.util.Calendar.Builder builder66 = builder61.setDate(27408600, (int) 'a', 1970);
        java.util.Calendar.Builder builder70 = builder66.setDate(38, 2000, 86399999);
        java.util.Calendar.Builder builder74 = builder70.setDate(86340000, 85320100, (-68));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar62", (calendar51.compareTo(calendar62) == 0) == calendar51.equals(calendar62));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0747");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.monthOfYear();
        org.joda.time.DurationField durationField26 = chronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.era();
        java.lang.String str28 = chronology22.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.year();
        org.joda.time.DurationField durationField30 = chronology22.eras();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) 1319, chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField24 and durationField30", Math.signum(durationField24.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField24)));
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0748");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology44);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        org.joda.time.LocalTime localTime48 = property46.addNoWrapToCopy(1970);
        org.joda.time.LocalTime localTime49 = property46.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime50 = dateTime6.withFields((org.joda.time.ReadablePartial) localTime49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0749");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = builder61.build();
        java.util.Calendar.Builder builder66 = builder61.setDate(27408600, (int) 'a', 1970);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology71);
        org.joda.time.LocalTime.Property property73 = localTime72.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = property73.getField();
        java.util.Locale locale75 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleAttributes();
        int int77 = dateTimeField74.getMaximumShortTextLength(locale75);
        java.util.Locale.setDefault(locale75);
        java.util.Calendar.Builder builder79 = builder66.setLocale(locale75);
        java.util.Calendar calendar80 = builder66.build();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar62", (calendar51.compareTo(calendar62) == 0) == calendar51.equals(calendar62));
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0750");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) 70);
        java.lang.String str49 = dateTimeZone45.getShortName(1L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) 'a');
        int int55 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        int int62 = dateTime60.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime60.plus(readableDuration63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime60.plus(readablePeriod65);
        int int67 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime69 = dateTime60.withMillisOfDay(1320);
        java.lang.String str70 = dateTime60.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime33", (dateTime4.compareTo(dateTime33) == 0) == dateTime4.equals(dateTime33));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0751");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Date date54 = new java.util.Date((int) '4', 86399999, 4);
        java.util.Calendar.Builder builder55 = builder50.setInstant(date54);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale57);
        java.util.TimeZone timeZone59 = calendar58.getTimeZone();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone59);
        java.util.Calendar.Builder builder61 = builder50.setTimeZone(timeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar58", (calendar48.compareTo(calendar58) == 0) == calendar48.equals(calendar58));
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0752");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime.Property property16 = dateTime12.secondOfMinute();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.DateTime dateTime18 = property16.withMinimumValue();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears(158);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.Chronology chronology42 = chronology28.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfDay();
        org.joda.time.DurationField durationField44 = chronology42.millis();
        org.joda.time.DateTime dateTime45 = dateTime18.withChronology(chronology42);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime18.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime45", (dateTime1.compareTo(dateTime45) == 0) == dateTime1.equals(dateTime45));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0753");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime28.withYearOfEra(14);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int39 = dateTime37.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime41.minusDays((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        org.joda.time.DurationField durationField50 = chronology47.months();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType38.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology47.year();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.millisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime31.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField56 = chronology47.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime55", (dateTime31.compareTo(dateTime55) == 0) == dateTime31.equals(dateTime55));
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0754");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        java.lang.String str28 = dateTimeFieldType13.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getRangeDurationType();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology33.halfdays();
        org.joda.time.DurationField durationField36 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.secondOfMinute();
        org.joda.time.DurationField durationField38 = chronology33.centuries();
        boolean boolean39 = durationFieldType30.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType13.getField(chronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField25 and durationField35", Math.signum(durationField25.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField25)));
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0755");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) 70);
        java.lang.String str49 = dateTimeZone45.getShortName(1L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) 'a');
        int int55 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        int int62 = dateTime60.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime60.plus(readableDuration63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime60.plus(readablePeriod65);
        int int67 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime.Property property68 = dateTime34.monthOfYear();
        org.joda.time.DateTime dateTime69 = property68.roundFloorCopy();
        int int70 = dateTime69.getEra();
        org.joda.time.DateTime.Property property71 = dateTime69.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime33", (dateTime4.compareTo(dateTime33) == 0) == dateTime4.equals(dateTime33));
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0756");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar.Builder builder52 = builder50.setLenient(true);
        java.util.Calendar.Builder builder54 = builder50.setLenient(true);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        calendar55.setTimeInMillis(100L);
        boolean boolean58 = calendar55.isWeekDateSupported();
        calendar55.roll(2, false);
        calendar55.setTimeInMillis(0L);
        java.util.TimeZone timeZone64 = calendar55.getTimeZone();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone64);
        java.util.Calendar.Builder builder66 = builder54.setTimeZone(timeZone64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar65", (calendar48.compareTo(calendar65) == 0) == calendar48.equals(calendar65));
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0757");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        org.joda.time.DateTime.Property property42 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime44 = property42.setCopy(32769);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime39", (dateTime1.compareTo(dateTime39) == 0) == dateTime1.equals(dateTime39));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0758");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        int int5 = dateTime4.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        java.lang.String str11 = localTime8.toString();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(121);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.Chronology chronology15 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTime dateTime17 = dateTime2.withChronology(chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(1969);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime17", (dateTime2.compareTo(dateTime17) == 0) == dateTime2.equals(dateTime17));
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0759");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int7 = dateTime5.get(dateTimeFieldType6);
        int int8 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillis(32770L);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset((long) 70);
        java.lang.String str25 = dateTimeZone21.getShortName(1L);
        long long27 = dateTimeZone21.convertUTCToLocal((long) 1970);
        long long30 = dateTimeZone21.adjustOffset((long) 86, false);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime5.toMutableDateTime(dateTimeZone21);
        java.lang.String str32 = dateTimeZone21.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime31", (dateTime1.compareTo(mutableDateTime31) == 0) == dateTime1.equals(mutableDateTime31));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0760");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.lang.String str7 = property6.getName();
        java.lang.String str8 = property6.getAsString();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        java.lang.String str10 = property6.getAsString();
        org.joda.time.DateTime dateTime12 = property6.addToCopy((-1L));
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime15 = dateTime12.withCenturyOfEra(100);
        org.joda.time.DateTime dateTime17 = dateTime12.minusHours(25200999);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMinutes(1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.DateTime dateTime30 = property29.roundHalfCeilingCopy();
        boolean boolean31 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.withPeriodAdded(readablePeriod32, 2022);
        org.joda.time.Instant instant35 = dateTime19.toInstant();
        boolean boolean36 = dateTime17.equals((java.lang.Object) instant35);
        int int37 = dateTime17.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant35", (dateTime1.compareTo(instant35) == 0) == dateTime1.equals(instant35));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0761");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        int int11 = localTime2.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology12 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField16 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfWeek();
        org.joda.time.DurationField durationField18 = chronology12.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField18, and durationField16", !(durationField16.compareTo(durationField18) == 0) || (Math.signum(durationField16.compareTo(durationField16)) == Math.signum(durationField18.compareTo(durationField16))));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0762");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        int int21 = dateTime20.getEra();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes(1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra(11);
        int int31 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.setTimeInMillis(100L);
        boolean boolean45 = calendar42.isWeekDateSupported();
        calendar42.roll(2, false);
        calendar42.setTimeInMillis(0L);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.Chronology chronology53 = chronology39.withZone(dateTimeZone52);
        org.joda.time.DurationField durationField54 = chronology53.seconds();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfDay();
        org.joda.time.DateTime dateTime57 = dateTime12.toDateTime(chronology53);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfWeek();
        java.lang.String str59 = property58.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime57", (dateTime1.compareTo(dateTime57) == 0) == dateTime1.equals(dateTime57));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0763");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.minusDays((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        org.joda.time.DurationField durationField14 = durationFieldType5.getField(chronology13);
        org.joda.time.DateTime dateTime15 = dateTime4.toDateTime(chronology13);
        org.joda.time.DateTime.Property property16 = dateTime4.yearOfEra();
        boolean boolean17 = languageRange1.equals((java.lang.Object) property16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime15", (dateTime4.compareTo(dateTime15) == 0) == dateTime4.equals(dateTime15));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0764");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(readableDuration8, 53);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology15);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.withMaximumValue();
        org.joda.time.LocalTime localTime19 = property17.getLocalTime();
        int int20 = localTime19.size();
        org.joda.time.Chronology chronology21 = localTime19.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime7.toMutableDateTime(chronology21);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology27);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology35);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = dateTimeField38.getAsText(32770, locale40);
        java.lang.String str45 = dateTimeField38.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 100, chronology47);
        int int49 = localTime48.getMillisOfSecond();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 100, chronology51);
        boolean boolean53 = localTime48.isAfter((org.joda.time.ReadablePartial) localTime52);
        int int54 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localTime48);
        java.lang.String str55 = dateTimeField38.getName();
        java.util.Date date61 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.fromDateFields(date61);
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localTime62, (int) 'a', locale64);
        java.lang.String str67 = property29.getAsText(locale64);
        org.joda.time.LocalTime localTime69 = property29.addCopy(0L);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology74);
        org.joda.time.LocalTime.Property property76 = localTime75.millisOfSecond();
        org.joda.time.LocalTime localTime77 = property76.withMaximumValue();
        int int79 = localTime77.getValue(0);
        java.lang.String str80 = localTime77.toString();
        org.joda.time.LocalTime localTime82 = localTime77.minusSeconds(12);
        boolean boolean83 = localTime69.equals((java.lang.Object) localTime77);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalTime localTime85 = localTime69.plus(readablePeriod84);
        org.joda.time.LocalTime localTime87 = localTime69.plusMillis(2);
        java.lang.String str88 = localTime69.toString();
        long long90 = chronology21.set((org.joda.time.ReadablePartial) localTime69, (long) 2922789);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime22", (dateTime7.compareTo(mutableDateTime22) == 0) == dateTime7.equals(mutableDateTime22));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0765");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        boolean boolean25 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime22);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int40 = dateTimeZone38.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long53 = dateTimeZone38.getMillisKeepLocal(dateTimeZone51, (long) 2);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 8, dateTimeZone38);
        java.lang.String str55 = dateTimeZone38.getID();
        org.joda.time.DateTime dateTime56 = dateTime22.toDateTime(dateTimeZone38);
        long long58 = dateTimeZone11.getMillisKeepLocal(dateTimeZone38, (long) 121);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalTime localTime62 = localTime59.withPeriodAdded(readablePeriod60, 1320);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime56", (dateTime15.compareTo(dateTime56) == 0) == dateTime15.equals(dateTime56));
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0766");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTime.Property property18 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(1);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        calendar26.setTimeInMillis(100L);
        boolean boolean29 = calendar26.isWeekDateSupported();
        calendar26.roll(2, false);
        calendar26.setTimeInMillis(0L);
        java.util.TimeZone timeZone35 = calendar26.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int39 = dateTimeZone37.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        calendar40.setTimeInMillis(100L);
        boolean boolean43 = calendar40.isWeekDateSupported();
        calendar40.roll(2, false);
        calendar40.setTimeInMillis(0L);
        java.util.TimeZone timeZone49 = calendar40.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        long long52 = dateTimeZone37.getMillisKeepLocal(dateTimeZone50, (long) 2);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 8, dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime53.toMutableDateTimeISO();
        boolean boolean55 = dateTime53.isAfterNow();
        org.joda.time.DateTime dateTime57 = dateTime53.withMillis(100L);
        java.util.Date date58 = dateTime57.toDate();
        boolean boolean59 = dateTime24.equals((java.lang.Object) dateTime57);
        org.joda.time.DateTime dateTime61 = dateTime57.withYearOfEra(99);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.plus(readablePeriod62);
        int int64 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime57", (instant7.compareTo(dateTime57) == 0) == instant7.equals(dateTime57));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0767");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(29, (int) (short) 100, 79201970);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = dateTimeField25.getAsText(32770, locale27);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone15, locale27);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone15);
        java.util.Calendar.Builder builder33 = builder0.setTimeZone(timeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar32", (calendar31.compareTo(calendar32) == 0) == calendar31.equals(calendar32));
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0768");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        org.joda.time.DateTime.Property property43 = dateTime42.secondOfDay();
        org.joda.time.DateTime dateTime45 = property43.setCopy(86399);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0769");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = chronology4.halfdays();
        org.joda.time.DurationField durationField7 = durationFieldType1.getField(chronology4);
        java.lang.String str8 = durationFieldType1.toString();
        java.lang.String str9 = durationFieldType1.getName();
        java.lang.String str10 = durationFieldType1.getName();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) 'a');
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        org.joda.time.Chronology chronology19 = yearMonthDay18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology19.getZone();
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekyearOfCentury();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1, chronology19);
        long long29 = chronology19.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.DurationField durationField30 = chronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology19.yearOfCentury();
        boolean boolean33 = durationFieldType1.isSupported(chronology19);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((-84326400000L), chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField30", (durationField6.compareTo(durationField30) == 0) == durationField6.equals(durationField30));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0770");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfYear();
        boolean boolean26 = durationFieldType12.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.secondOfMinute();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime30 = dateTime28.withYear(158);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime30, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime36", (dateTime30.compareTo(dateTime36) == 0) == dateTime30.equals(dateTime36));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0771");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        int int10 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime7.withMillisOfDay(39);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime17.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime17.minusMillis(15);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime17.plusHours((int) 'a');
        org.joda.time.DateTime dateTime28 = dateTime17.withMillisOfDay(1);
        int int29 = dateTime28.getSecondOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        int int32 = dateTime31.getEra();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes(1);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths(0);
        org.joda.time.DateTime dateTime39 = dateTime37.minus((long) 2);
        org.joda.time.DateTime.Property property40 = dateTime37.minuteOfHour();
        org.joda.time.Chronology chronology41 = dateTime37.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.centuries();
        org.joda.time.DurationField durationField43 = chronology41.halfdays();
        org.joda.time.DateTime dateTime44 = dateTime28.toDateTime(chronology41);
        int int45 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        java.lang.String str48 = durationFieldType47.getName();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime50.minusDays((int) 'a');
        org.joda.time.DateTime dateTime54 = dateTime50.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay55 = dateTime54.toYearMonthDay();
        org.joda.time.Chronology chronology56 = yearMonthDay55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology56.getZone();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance();
        calendar59.setTimeInMillis(100L);
        boolean boolean62 = calendar59.isWeekDateSupported();
        calendar59.roll(2, false);
        calendar59.setTimeInMillis(0L);
        java.util.TimeZone timeZone68 = calendar59.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.Chronology chronology70 = chronology56.withZone(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = chronology70.dayOfWeek();
        boolean boolean72 = durationFieldType47.isSupported(chronology70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str77 = dateTimeZone75.getNameKey((long) 1970);
        long long81 = dateTimeZone75.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 52, dateTimeZone75);
        long long85 = dateTimeZone75.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (byte) 0);
        int int88 = dateTime87.getEra();
        org.joda.time.DateTime dateTime89 = dateTime87.withTimeAtStartOfDay();
        int int90 = dateTimeZone75.getOffset((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.Chronology chronology92 = chronology70.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime93 = dateTime46.toDateTime(chronology92);
        org.joda.time.DateTime dateTime94 = dateTime46.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime93", (dateTime3.compareTo(dateTime93) == 0) == dateTime3.equals(dateTime93));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0772");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone13);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 10, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime31.plus(readablePeriod32);
        org.joda.time.LocalTime localTime35 = localTime33.minusSeconds(10);
        int[] intArray36 = localTime33.getValues();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes(1);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfYear();
        org.joda.time.DateTime dateTime49 = property48.roundHalfCeilingCopy();
        boolean boolean50 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime49.getEra();
        org.joda.time.DateTime dateTime52 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime54 = dateTime49.minusSeconds(35126);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime54.toMutableDateTime(dateTimeZone56);
        long long59 = dateTimeZone56.nextTransition(1136053396224000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and mutableDateTime57", (dateTime54.compareTo(mutableDateTime57) == 0) == dateTime54.equals(mutableDateTime57));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0773");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        int int15 = localTime13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DateTime dateTime25 = dateTime7.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime7.plus(readablePeriod26);
        int int28 = dateTime7.getDayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime7.minus(32770L);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readablePeriod31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        int int41 = dateTime39.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.plus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime39.minusMillis(15);
        org.joda.time.DateTime dateTime47 = dateTime45.plus((long) 121);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths((-979));
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology54);
        org.joda.time.LocalTime.Property property56 = localTime55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = dateTimeField57.getAsText(32770, locale59);
        java.lang.String str64 = dateTimeField57.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) 100, chronology66);
        int int68 = localTime67.getMillisOfSecond();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) 100, chronology70);
        boolean boolean72 = localTime67.isAfter((org.joda.time.ReadablePartial) localTime71);
        int int73 = dateTimeField57.getMaximumValue((org.joda.time.ReadablePartial) localTime67);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.fromCalendarFields(calendar74);
        int int76 = dateTimeField57.getMaximumValue((org.joda.time.ReadablePartial) localTime75);
        org.joda.time.DateTime dateTime77 = localTime75.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime80 = dateTime77.withPeriodAdded(readablePeriod78, 36000097);
        org.joda.time.DateTime dateTime82 = dateTime80.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str86 = dateTimeZone84.getName((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone84);
        int int89 = dateTimeZone84.getStandardOffset((long) (short) 100);
        org.joda.time.DateTime dateTime90 = dateTime82.withZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((java.lang.Object) dateTime49, dateTimeZone84);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((java.lang.Object) dateTime34, dateTimeZone84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime49 and dateTime91", (dateTime49.compareTo(dateTime91) == 0) == dateTime49.equals(dateTime91));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0774");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        gregorianCalendar35.roll(12, false);
        boolean boolean39 = gregorianCalendar35.isWeekDateSupported();
        int int40 = gregorianCalendar35.getWeekYear();
        gregorianCalendar35.set((int) '4', (int) (byte) 0, 1439, 268, 363, 39);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfHalfday();
        org.joda.time.DurationField durationField52 = chronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfMonth();
        boolean boolean55 = gregorianCalendar35.before((java.lang.Object) chronology50);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property58 = dateTime57.minuteOfHour();
        org.joda.time.DateTime dateTime60 = dateTime57.minusDays((int) 'a');
        org.joda.time.DateTime dateTime62 = dateTime60.minusWeeks(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMonths((int) ' ');
        boolean boolean67 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime69 = dateTime60.minusSeconds(17);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int73 = dateTimeZone71.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime74 = dateTime69.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = dateTime74.withMillisOfDay(991);
        java.util.Date date77 = dateTime74.toDate();
        gregorianCalendar35.setTime(date77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime69 and dateTime74", (dateTime69.compareTo(dateTime74) == 0) == dateTime69.equals(dateTime74));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0775");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusMillis((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        int int20 = dateTime19.getMonthOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology28);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        int int31 = localTime29.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int33 = localTime29.get(dateTimeFieldType32);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology38);
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfSecond();
        int int41 = localTime39.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int43 = localTime39.get(dateTimeFieldType42);
        int int44 = localTime29.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.Chronology chronology45 = localTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime23.toMutableDateTime(chronology45);
        org.joda.time.DurationField durationField49 = chronology45.years();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime48", (dateTime23.compareTo(mutableDateTime48) == 0) == dateTime23.equals(mutableDateTime48));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0776");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        long long44 = dateTimeZone25.previousTransition((-1L));
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0777");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.secondOfMinute();
        long long30 = dateTimeField28.roundHalfCeiling(53L);
        org.joda.time.DurationField durationField31 = dateTimeField28.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField31, and durationField25", !(durationField25.compareTo(durationField31) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField31.compareTo(durationField25))));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0778");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(0);
        int int28 = dateTime25.getYearOfCentury();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime25.toTimeOfDay();
        java.lang.Object obj30 = null;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        java.lang.String str32 = calendar31.getCalendarType();
        java.time.Instant instant33 = calendar31.toInstant();
        int int34 = calendar31.getWeekYear();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromCalendarFields(calendar31);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj30, chronology36);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime25.toMutableDateTime(chronology36);
        org.joda.time.DateTime dateTime41 = dateTime25.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime25.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime40 and dateTime25", (mutableDateTime40.compareTo(dateTime25) == 0) == mutableDateTime40.equals(dateTime25));
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0779");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.getLocalTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean19 = dateTime15.isSupported(dateTimeFieldType18);
        org.joda.time.DateTime.Property property20 = dateTime15.dayOfMonth();
        int int21 = dateTime15.getYearOfCentury();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.setTimeInMillis(100L);
        boolean boolean25 = calendar22.isWeekDateSupported();
        calendar22.roll(2, false);
        calendar22.setTimeInMillis(0L);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset((long) 70);
        java.lang.String str36 = dateTimeZone32.getShortName(1L);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays((int) 'a');
        int int42 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime41);
        long long44 = dateTimeZone32.previousTransition((-62198582364994L));
        int int46 = dateTimeZone32.getStandardOffset((long) (short) 1);
        int int48 = dateTimeZone32.getOffsetFromLocal((long) 587852);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime15.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime51 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime50", (dateTime15.compareTo(mutableDateTime50) == 0) == dateTime15.equals(mutableDateTime50));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0780");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.clockhourOfDay();
        int int19 = dateTimeField18.getMinimumValue();
        int int21 = dateTimeField18.getMaximumValue((long) 8);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DurationField durationField26 = dateTimeField25.getDurationField();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology31);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        org.joda.time.LocalTime localTime34 = property33.withMaximumValue();
        int int36 = localTime34.getValue(0);
        java.lang.String str37 = localTime34.toString();
        org.joda.time.LocalTime localTime39 = localTime34.minusSeconds(12);
        int int40 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localTime39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long53 = dateTimeZone51.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property58 = dateTime55.weekyear();
        org.joda.time.DateTime dateTime60 = property58.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime62 = dateTime60.withHourOfDay(6);
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTimeISO();
        int int64 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime.Property property65 = dateTime63.hourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now();
        int int68 = dateTimeField66.getMaximumValue((org.joda.time.ReadablePartial) localTime67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField66.getType();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        org.joda.time.LocalTime localTime72 = localTime39.withFieldAdded(durationFieldType70, (int) (short) 1);
        int int73 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localTime39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField26", (durationField17.compareTo(durationField26) == 0) == durationField17.equals(durationField26));
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0781");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getNameKey((long) (byte) 100);
        boolean boolean4 = dateTimeZone0.isStandardOffset((long) (short) 10);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime10 = dateTime8.toLocalDateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes(1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusMinutes(1);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(0);
        int int26 = dateTime23.getYearOfEra();
        boolean boolean27 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime28 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        int int29 = dateTime16.getYearOfCentury();
        int int30 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant31 = dateTime16.toInstant();
        org.joda.time.DateTime.Property property32 = dateTime16.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant31", (dateTime23.compareTo(instant31) == 0) == dateTime23.equals(instant31));
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0782");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime3.withChronology(chronology15);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime31.property(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = property34.addToCopy(10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0783");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property5 = dateTime2.weekyear();
        org.joda.time.DateTime dateTime7 = property5.addToCopy((long) (short) 0);
        int int8 = property5.get();
        org.joda.time.DateTime dateTime9 = property5.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillis((-2203656180000L));
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        boolean boolean15 = dateTime12.isEqual((-3360145159509L));
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone30 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long34 = dateTimeZone32.nextTransition((-36000094L));
        java.util.TimeZone timeZone35 = dateTimeZone32.toTimeZone();
        java.lang.String str37 = dateTimeZone32.getShortName(2000L);
        org.joda.time.DateTime dateTime38 = dateTime12.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj0, dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime38", (dateTime12.compareTo(dateTime38) == 0) == dateTime12.equals(dateTime38));
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0784");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTime4.toString("+00:00", locale6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime23 = dateTime18.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        int int25 = dateTime23.getMinuteOfDay();
        int int26 = property16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime28 = dateTime23.minusMillis((-36002075));
        boolean boolean29 = gregorianCalendar8.equals((java.lang.Object) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant24", (dateTime23.compareTo(instant24) == 0) == dateTime23.equals(instant24));
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0785");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(59);
        java.lang.Integer int11 = dateTimeFormatter7.getPivotYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyearOfCentury();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1, chronology20);
        long long30 = chronology20.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter31.withZoneUTC();
        org.joda.time.Chronology chronology33 = dateTimeFormatter31.getChronology();
        org.joda.time.Chronology chronology34 = dateTimeFormatter31.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime36.minusDays((int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology42.getZone();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.Chronology chronology56 = chronology42.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfWeek();
        org.joda.time.DurationField durationField58 = chronology56.weekyears();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.monthOfYear();
        org.joda.time.DurationField durationField60 = chronology56.weekyears();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.era();
        java.lang.String str62 = chronology56.toString();
        org.joda.time.DateTimeField dateTimeField63 = chronology56.year();
        org.joda.time.DurationField durationField64 = chronology56.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter31.withChronology(chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField23 and durationField64", Math.signum(durationField23.compareTo(durationField64)) == -Math.signum(durationField64.compareTo(durationField23)));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0786");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(14);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime8.year();
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) ' ');
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime14.withZoneRetainFields(dateTimeZone17);
        boolean boolean21 = dateTimeZone17.isStandardOffset(1644572735347L);
        org.joda.time.DateTime dateTime22 = dateTime3.toDateTime(dateTimeZone17);
        boolean boolean23 = dateTimeZone17.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0787");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale14.getDisplayCountry(locale17);
        java.lang.String str19 = locale13.getDisplayVariant(locale14);
        java.lang.String str20 = locale12.getDisplayScript(locale14);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone9, locale12);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder22.setExtension('u', "deu");
        java.util.Locale.Builder builder27 = builder25.setRegion("");
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.Builder builder31 = builder27.setLocale(locale29);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology37);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = dateTimeField40.getAsText(32770, locale42);
        java.lang.String str46 = locale32.getDisplayLanguage(locale42);
        java.util.Set<java.lang.Character> charSet47 = locale32.getExtensionKeys();
        java.util.Locale.setDefault(locale32);
        java.lang.String str49 = locale29.getDisplayLanguage(locale32);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone9, locale32);
        java.util.TimeZone timeZone51 = calendar50.getTimeZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter56.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter58.withOffsetParsed();
        boolean boolean60 = dateTimeFormatter59.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter59.withPivotYear((java.lang.Integer) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter62.withPivotYear(43200000);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance();
        calendar65.setTimeInMillis(100L);
        boolean boolean68 = calendar65.isWeekDateSupported();
        calendar65.roll(2, false);
        calendar65.setTimeInMillis(0L);
        java.util.TimeZone timeZone74 = calendar65.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        int int77 = dateTimeZone75.getOffset((long) 70);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance();
        calendar78.setTimeInMillis(100L);
        boolean boolean81 = calendar78.isWeekDateSupported();
        calendar78.roll(2, false);
        calendar78.setTimeInMillis(0L);
        java.util.TimeZone timeZone87 = calendar78.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        int int91 = dateTimeZone89.getOffsetFromLocal((long) (short) 0);
        long long93 = dateTimeZone75.getMillisKeepLocal(dateTimeZone89, (long) (short) 10);
        java.util.Locale locale95 = java.util.Locale.GERMANY;
        java.lang.String str96 = dateTimeZone75.getShortName(86399L, locale95);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter64.withLocale(locale95);
        java.util.Calendar calendar98 = java.util.Calendar.getInstance(timeZone51, locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar65", (calendar0.compareTo(calendar65) == 0) == calendar0.equals(calendar65));
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0788");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.DurationField durationField12 = durationFieldType3.getField(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime2.toDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime13", (dateTime2.compareTo(dateTime13) == 0) == dateTime2.equals(dateTime13));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0789");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime10.plusSeconds(96);
        org.joda.time.DateTime dateTime17 = dateTime10.withHourOfDay((int) (byte) 10);
        boolean boolean19 = dateTime10.isBefore((long) 2);
        org.joda.time.DateTime dateTime22 = dateTime10.withDurationAdded((-2177452800009L), 17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int26 = dateTimeZone24.getOffset((long) (short) 100);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone24.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = dateTime10.toDateTime(dateTimeZone24);
        long long34 = dateTimeZone24.convertLocalToUTC(345599995L, false, (long) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime30", (dateTime1.compareTo(dateTime30) == 0) == dateTime1.equals(dateTime30));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0790");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfYear();
        org.joda.time.Chronology chronology29 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology29.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField31, and durationField25", !(durationField25.compareTo(durationField31) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField31.compareTo(durationField25))));
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0791");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTime4.toString("+00:00", locale6);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) ' ');
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime16.withZoneRetainFields(dateTimeZone19);
        boolean boolean23 = dateTimeZone19.isStandardOffset(284468400069L);
        long long25 = dateTimeZone19.nextTransition((long) 1438);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime4.toMutableDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property27 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime26", (dateTime4.compareTo(mutableDateTime26) == 0) == dateTime4.equals(mutableDateTime26));
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0792");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        int int10 = dateTimeField7.getMaximumShortTextLength(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale8.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale15.getDisplayCountry(locale18);
        java.lang.String str20 = locale14.getDisplayVariant(locale15);
        java.lang.String str21 = locale13.getDisplayScript(locale15);
        java.lang.String str22 = locale13.getISO3Language();
        java.lang.String str23 = locale13.getISO3Country();
        java.util.Set<java.lang.Character> charSet24 = locale13.getExtensionKeys();
        java.lang.String str25 = locale8.getDisplayCountry(locale13);
        java.util.Set<java.lang.String> strSet26 = locale8.getUnicodeLocaleKeys();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale8);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology32);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = dateTimeField35.getAsText(32770, locale37);
        java.lang.String str42 = dateTimeField35.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        int int46 = localTime45.getMillisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 100, chronology48);
        boolean boolean50 = localTime45.isAfter((org.joda.time.ReadablePartial) localTime49);
        int int51 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        java.lang.String str52 = dateTimeField35.getName();
        java.util.Date date58 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromDateFields(date58);
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale61.getISO3Country();
        java.lang.String str63 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localTime59, (int) 'a', locale61);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeField35.getAsText(0L, locale65);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance();
        java.lang.String str68 = calendar67.getCalendarType();
        java.time.Instant instant69 = calendar67.toInstant();
        int int70 = calendar67.getWeekYear();
        org.joda.time.LocalTime localTime71 = org.joda.time.LocalTime.fromCalendarFields(calendar67);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalTime localTime74 = localTime71.withPeriodAdded(readablePeriod72, (-979));
        int int75 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localTime71);
        org.joda.time.Chronology chronology76 = localTime71.getChronology();
        boolean boolean77 = calendar27.before((java.lang.Object) chronology76);
        org.joda.time.DurationField durationField78 = chronology76.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar67", (calendar27.compareTo(calendar67) == 0) == calendar27.equals(calendar67));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0793");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 100, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localTime5.isSupported(dateTimeFieldType6);
        java.lang.String str8 = localTime5.toString();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(121);
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology12.eras();
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField16", Math.signum(durationField14.compareTo(durationField16)) == -Math.signum(durationField16.compareTo(durationField14)));
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0794");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 28, dateTimeZone8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) 'a');
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime13.era();
        org.joda.time.DateTime.Property property19 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded((long) 26356320, 58620000);
        org.joda.time.DateTime.Property property24 = dateTime20.secondOfDay();
        boolean boolean25 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime20);
        int int26 = dateTime20.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime10", (dateTime2.compareTo(dateTime10) == 0) == dateTime2.equals(dateTime10));
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0795");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        boolean boolean11 = dateTimeFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.halfdayOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology8.days();
        org.joda.time.DurationField durationField18 = chronology8.eras();
        org.joda.time.DurationField durationField19 = chronology8.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField17 and durationField18", Math.signum(durationField17.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField17)));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0796");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DateTime dateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        int int36 = dateTime35.getMonthOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMonths((int) 'x');
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        int int42 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 36000249, dateTimeZone29);
        org.joda.time.DateTime dateTime44 = dateTime26.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime46 = dateTime44.plusDays(49);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime44", (dateTime21.compareTo(dateTime44) == 0) == dateTime21.equals(dateTime44));
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0797");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = chronology3.halfdays();
        org.joda.time.DurationField durationField6 = durationFieldType0.getField(chronology3);
        java.lang.String str7 = durationFieldType0.toString();
        java.lang.String str8 = durationFieldType0.getName();
        java.lang.String str9 = durationFieldType0.getName();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.DurationField durationField21 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyearOfCentury();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1, chronology18);
        long long28 = chronology18.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.DurationField durationField29 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology18.yearOfCentury();
        boolean boolean32 = durationFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField33 = chronology18.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField29", (durationField5.compareTo(durationField29) == 0) == durationField5.equals(durationField29));
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0798");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology23.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField30, and durationField25", !(durationField25.compareTo(durationField30) == 0) || (Math.signum(durationField25.compareTo(durationField25)) == Math.signum(durationField30.compareTo(durationField25))));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0799");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime.Property property16 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.eras();
        org.joda.time.Chronology chronology28 = chronology25.withUTC();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime17.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime31 = dateTime17.withDayOfYear(44);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        java.lang.String str33 = calendar32.getCalendarType();
        java.time.Instant instant34 = calendar32.toInstant();
        int int35 = calendar32.getWeekYear();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromCalendarFields(calendar32);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfDay();
        org.joda.time.DurationField durationField40 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.yearOfCentury();
        int int42 = dateTime31.get(dateTimeField41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and mutableDateTime29", (dateTime17.compareTo(mutableDateTime29) == 0) == dateTime17.equals(mutableDateTime29));
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime.Property property6 = localTime2.property(dateTimeFieldType5);
        org.joda.time.LocalTime localTime7 = property6.roundFloorCopy();
        java.lang.String str8 = property6.getName();
        org.joda.time.LocalTime localTime9 = property6.roundHalfEvenCopy();
        int int10 = localTime9.getSecondOfMinute();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields(calendar11);
        calendar11.setMinimalDaysInFirstWeek((int) (short) -1);
        int int16 = calendar11.getActualMinimum((int) (short) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = dateTimeField24.getAsText(32770, locale26);
        java.lang.String str31 = dateTimeField24.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        int int35 = localTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        boolean boolean39 = localTime34.isAfter((org.joda.time.ReadablePartial) localTime38);
        int int40 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime34);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromCalendarFields(calendar41);
        int int43 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime42);
        java.lang.String str44 = localTime42.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 1970);
        long long53 = dateTimeZone47.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 52, dateTimeZone47);
        java.util.TimeZone timeZone55 = dateTimeZone47.toTimeZone();
        boolean boolean56 = localTime42.equals((java.lang.Object) timeZone55);
        calendar11.setTimeZone(timeZone55);
        boolean boolean58 = localTime9.equals((java.lang.Object) timeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar41", (calendar11.compareTo(calendar41) == 0) == calendar11.equals(calendar41));
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0801");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        org.joda.time.Chronology chronology11 = dateTime7.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.centuries();
        org.joda.time.DurationField durationField13 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale18);
        java.lang.String str24 = locale16.getDisplayScript(locale18);
        java.lang.String str25 = locale16.getISO3Language();
        java.lang.String str26 = locale16.getISO3Country();
        java.lang.String str27 = locale16.getScript();
        java.lang.String str28 = locale16.getDisplayName();
        java.lang.String str29 = dateTimeField14.getAsShortText(4, locale16);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfDay();
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.monthOfYear();
        boolean boolean43 = dateTimeFieldType31.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField44 = chronology39.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology39.getZone();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property51 = dateTime48.weekyear();
        org.joda.time.DateTime dateTime53 = property51.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime55 = dateTime53.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime53.minus(readablePeriod56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withZone(dateTimeZone58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime62 = dateTime59.withField(dateTimeFieldType60, 1);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime64.minusDays((int) 'a');
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay69 = dateTime68.toYearMonthDay();
        org.joda.time.Chronology chronology70 = yearMonthDay69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfDay();
        org.joda.time.DurationField durationField72 = chronology70.eras();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType60.getField(chronology70);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.dayOfYear();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property78 = dateTime77.minuteOfHour();
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.lang.String str80 = locale79.getISO3Country();
        java.lang.String str81 = locale79.toLanguageTag();
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.lang.String str83 = locale79.getDisplayCountry(locale82);
        java.lang.String str84 = locale82.getISO3Language();
        int int85 = property78.getMaximumShortTextLength(locale82);
        int int86 = dateTimeField75.getMaximumShortTextLength(locale82);
        java.lang.String str87 = dateTimeZone45.getShortName((long) 2, locale82);
        java.lang.String str88 = dateTimeField14.getAsText(132L, locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField72", Math.signum(durationField12.compareTo(durationField72)) == -Math.signum(durationField72.compareTo(durationField12)));
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0802");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        boolean boolean23 = dateTimeFieldType12.isSupported(chronology20);
        org.joda.time.DateTime dateTime24 = dateTime7.toDateTime(chronology20);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(9);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours(106);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime24", (dateTime3.compareTo(dateTime24) == 0) == dateTime3.equals(dateTime24));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0803");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTime.Property property18 = dateTime6.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str22 = dateTimeZone20.getName((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.lang.String str25 = dateTimeZone20.getNameKey((-58318531199879L));
        boolean boolean27 = dateTimeZone20.isStandardOffset(1959L);
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime(dateTimeZone20);
        int int29 = dateTime28.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and instant7", (dateTime28.compareTo(instant7) == 0) == dateTime28.equals(instant7));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0804");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTimeISO();
        boolean boolean30 = dateTime28.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime28.withMillis(100L);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        boolean boolean43 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime28.withZoneRetainFields(dateTimeZone44);
        boolean boolean47 = dateTime45.isAfter(32L);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property52 = dateTime49.weekyear();
        org.joda.time.DateTime dateTime54 = property52.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime56 = dateTime54.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.minus(readablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withZone(dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime63 = dateTime60.withField(dateTimeFieldType61, 1);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfHour();
        org.joda.time.DateTime dateTime68 = dateTime65.minusDays((int) 'a');
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay70 = dateTime69.toYearMonthDay();
        org.joda.time.Chronology chronology71 = yearMonthDay70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.secondOfDay();
        org.joda.time.DurationField durationField73 = chronology71.eras();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType61.getField(chronology71);
        org.joda.time.DateTimeField dateTimeField76 = chronology71.dayOfYear();
        org.joda.time.DateTime dateTime77 = dateTime45.withChronology(chronology71);
        org.joda.time.DateTime dateTime79 = dateTime77.minusWeeks((-979));
        java.util.GregorianCalendar gregorianCalendar80 = dateTime79.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime45 and dateTime77", (dateTime45.compareTo(dateTime77) == 0) == dateTime45.equals(dateTime77));
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0805");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfWeek(2);
        org.joda.time.LocalDate localDate11 = dateTime10.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean14 = localDate11.equals((java.lang.Object) dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale19.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        java.lang.String str24 = locale22.getISO3Language();
        int int25 = property18.getMaximumShortTextLength(locale22);
        org.joda.time.DateTime dateTime26 = property18.withMinimumValue();
        int int27 = property18.getMinimumValueOverall();
        java.lang.String str28 = property18.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property18.getFieldType();
        int int30 = dateTime3.get(dateTimeFieldType29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0806");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 999, dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getID();
        org.joda.time.DateTime dateTime22 = dateTime4.withZone(dateTimeZone17);
        java.lang.String str24 = dateTimeZone17.getName(1644572766885L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime22", (dateTime4.compareTo(dateTime22) == 0) == dateTime4.equals(dateTime22));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0807");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        java.lang.String str5 = property4.getAsText();
        java.lang.String str6 = property4.getAsText();
        org.joda.time.DurationField durationField7 = property4.getDurationField();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTimeISO();
        boolean boolean38 = dateTime36.isAfterNow();
        org.joda.time.DateTime dateTime40 = dateTime36.withMillis(100L);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 0);
        int int43 = dateTime42.getEra();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes(1);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfYear();
        org.joda.time.DateTime dateTime48 = property47.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        boolean boolean51 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime36.withZoneRetainFields(dateTimeZone52);
        boolean boolean55 = dateTime53.isAfter(32L);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property60 = dateTime57.weekyear();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime64 = dateTime62.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime62.minus(readablePeriod65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.withZone(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime71 = dateTime68.withField(dateTimeFieldType69, 1);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfHour();
        org.joda.time.DateTime dateTime76 = dateTime73.minusDays((int) 'a');
        org.joda.time.DateTime dateTime77 = dateTime73.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay78 = dateTime77.toYearMonthDay();
        org.joda.time.Chronology chronology79 = yearMonthDay78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.secondOfDay();
        org.joda.time.DurationField durationField81 = chronology79.eras();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType69.getField(chronology79);
        org.joda.time.DateTimeField dateTimeField84 = chronology79.dayOfYear();
        org.joda.time.DateTime dateTime85 = dateTime53.withChronology(chronology79);
        int int86 = property4.getDifference((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField81", Math.signum(durationField7.compareTo(durationField81)) == -Math.signum(durationField81.compareTo(durationField7)));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0808");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        int int3 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        int int9 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(5);
        boolean boolean17 = dateTimeFormatter14.isPrinter();
        boolean boolean18 = dateTime11.equals((java.lang.Object) dateTimeFormatter14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 491);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.Chronology chronology32 = yearMonthDay31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology32.getZone();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.Chronology chronology46 = chronology32.withZone(dateTimeZone45);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 32770, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter24.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime52.minusDays((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        org.joda.time.Chronology chronology58 = yearMonthDay57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology58.getZone();
        org.joda.time.DurationField durationField62 = chronology58.centuries();
        long long66 = chronology58.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter50.withChronology(chronology58);
        org.joda.time.DateTime dateTime69 = dateTime1.toDateTime(chronology58);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMonths(2);
        boolean boolean73 = dateTime71.isAfter((-1167609599931L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime69", (dateTime1.compareTo(dateTime69) == 0) == dateTime1.equals(dateTime69));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0809");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis(2022);
        org.joda.time.DateTime dateTime17 = dateTime13.plusDays(36002172);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime13", (dateTime3.compareTo(dateTime13) == 0) == dateTime3.equals(dateTime13));
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0810");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 999, dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getID();
        org.joda.time.DateTime dateTime22 = dateTime4.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime24 = dateTime4.withCenturyOfEra(0);
        org.joda.time.DateTime.Property property25 = dateTime4.dayOfYear();
        int int26 = property25.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime22", (dateTime4.compareTo(dateTime22) == 0) == dateTime4.equals(dateTime22));
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0811");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getCountry();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        int int5 = calendar4.getMinimalDaysInFirstWeek();
        calendar4.setFirstDayOfWeek(8);
        java.util.TimeZone timeZone8 = calendar4.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        java.time.Instant instant10 = calendar9.toInstant();
        java.util.Date date11 = java.util.Date.from(instant10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar9", (calendar4.compareTo(calendar9) == 0) == calendar4.equals(calendar9));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0812");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) 70);
        java.lang.String str14 = dateTimeZone10.getShortName(1L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology27);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = dateTimeField30.getAsText(32770, locale32);
        java.lang.String str37 = dateTimeField30.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        int int41 = localTime40.getMillisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 100, chronology43);
        boolean boolean45 = localTime40.isAfter((org.joda.time.ReadablePartial) localTime44);
        int int46 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime40);
        java.lang.String str47 = dateTimeField30.getName();
        java.util.Date date53 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.fromDateFields(date53);
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.lang.String str57 = locale56.getISO3Country();
        java.lang.String str58 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localTime54, (int) 'a', locale56);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.lang.String str60 = locale59.getISO3Country();
        java.lang.String str61 = locale59.toLanguageTag();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale59.getDisplayCountry(locale62);
        int int64 = dateTimeField30.getMaximumShortTextLength(locale59);
        java.lang.String str65 = locale59.getISO3Language();
        java.util.Set<java.lang.String> strSet66 = locale59.getUnicodeLocaleAttributes();
        int int67 = property21.getMaximumShortTextLength(locale59);
        java.util.Set<java.lang.String> strSet68 = locale59.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet69 = locale59.getUnicodeLocaleKeys();
        java.lang.String str70 = locale59.getDisplayLanguage();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property73 = dateTime72.minuteOfHour();
        org.joda.time.DateTime dateTime75 = dateTime72.minusDays((int) 'a');
        org.joda.time.DateTime dateTime76 = dateTime72.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay77 = dateTime76.toYearMonthDay();
        org.joda.time.Chronology chronology78 = yearMonthDay77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.secondOfDay();
        java.lang.String str80 = chronology78.toString();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.monthOfYear();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.year();
        org.joda.time.DateTimeField dateTimeField83 = chronology78.secondOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology78.minuteOfHour();
        org.joda.time.DurationField durationField85 = chronology78.eras();
        org.joda.time.DateTimeField dateTimeField86 = chronology78.millisOfDay();
        boolean boolean87 = locale59.equals((java.lang.Object) dateTimeField86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField85", Math.signum(durationField22.compareTo(durationField85)) == -Math.signum(durationField85.compareTo(durationField22)));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0813");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        java.lang.String str12 = property6.getAsText(locale7);
        org.joda.time.DateTime dateTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        boolean boolean17 = dateTime15.isEqual((long) 121);
        boolean boolean18 = dateTime15.isBeforeNow();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology26.getZone();
        org.joda.time.DurationField durationField30 = chronology26.centuries();
        long long34 = chronology26.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime35 = dateTime15.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField36 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField37 = chronology26.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime35", (dateTime5.compareTo(dateTime35) == 0) == dateTime5.equals(dateTime35));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0814");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths(35273);
        org.joda.time.DateTime.Property property30 = dateTime29.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0815");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = dateTimeField26.getAsText(32770, locale28);
        int int33 = dateTimeField26.getMaximumValue((long) 0);
        int int34 = dateTime17.get(dateTimeField26);
        int int35 = dateTime3.get(dateTimeField26);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(0);
        org.joda.time.DateTime dateTime44 = dateTime40.plusMinutes(1);
        org.joda.time.DateTime dateTime46 = dateTime44.withSecondOfMinute(20);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, 36000097);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime3.withChronology(chronology50);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance();
        calendar54.setTimeInMillis(100L);
        boolean boolean57 = calendar54.isWeekDateSupported();
        calendar54.roll(2, false);
        calendar54.setTimeInMillis(0L);
        java.util.TimeZone timeZone63 = calendar54.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        long long66 = dateTimeZone64.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property71 = dateTime68.weekyear();
        org.joda.time.DateTime dateTime73 = property71.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime75 = dateTime73.withHourOfDay(6);
        org.joda.time.DateTime dateTime76 = dateTime75.toDateTimeISO();
        int int77 = dateTimeZone64.getOffset((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime80 = dateTime53.withMillis((long) 99);
        boolean boolean81 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime53);
        java.util.Calendar calendar82 = java.util.Calendar.getInstance();
        calendar82.setTimeInMillis(100L);
        boolean boolean85 = calendar82.isWeekDateSupported();
        calendar82.roll(2, false);
        calendar82.setTimeInMillis(0L);
        java.util.TimeZone timeZone91 = calendar82.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forTimeZone(timeZone91);
        long long94 = dateTimeZone92.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime95 = dateTime53.toMutableDateTime(dateTimeZone92);
        java.lang.String str96 = dateTimeZone92.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and mutableDateTime95", (dateTime53.compareTo(mutableDateTime95) == 0) == dateTime53.equals(mutableDateTime95));
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0816");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property23.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = property23.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.String str35 = localTime28.toString();
        boolean boolean36 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes(1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(985);
        org.joda.time.DateTime dateTime51 = dateTime47.plus((long) 18);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property54 = dateTime53.minuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime53.minusDays((int) 'a');
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTime();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        calendar58.setTimeInMillis(100L);
        boolean boolean61 = calendar58.isWeekDateSupported();
        calendar58.roll(2, false);
        calendar58.setTimeInMillis(0L);
        java.util.TimeZone timeZone67 = calendar58.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset((long) 70);
        java.lang.String str72 = dateTimeZone68.getShortName(1L);
        long long76 = dateTimeZone68.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime77 = dateTime56.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime78 = dateTime47.toDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and dateTime78", (dateTime47.compareTo(dateTime78) == 0) == dateTime47.equals(dateTime78));
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0817");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getNameKey((long) (byte) 100);
        java.lang.String str10 = dateTimeZone7.getID();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime1.toMutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime20 = property18.getLocalTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime22.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(3);
        long long29 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        long long57 = dateTimeZone42.getMillisKeepLocal(dateTimeZone55, (long) 2);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 8, dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime58.toMutableDateTimeISO();
        boolean boolean60 = dateTime58.isAfterNow();
        org.joda.time.DateTime dateTime62 = dateTime58.withMillis(100L);
        int int63 = property18.getDifference((org.joda.time.ReadableInstant) dateTime58);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = locale66.toLanguageTag();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale66.getDisplayCountry(locale69);
        java.lang.String str71 = locale65.getDisplayVariant(locale66);
        java.lang.String str72 = locale64.getDisplayScript(locale66);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale66);
        int int74 = property18.getMaximumTextLength(locale66);
        java.lang.String str75 = locale66.getVariant();
        java.util.Calendar calendar76 = dateTime1.toCalendar(locale66);
        java.lang.String str77 = locale66.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar76", (calendar31.compareTo(calendar76) == 0) == calendar31.equals(calendar76));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0818");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime15.era();
        org.joda.time.DateTime.Property property21 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readablePeriod23);
        long long25 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = property13.getDateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.plusDays(14);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localTime38.getFieldTypes();
        org.joda.time.Chronology chronology40 = localTime38.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime32.withChronology(chronology40);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime26.toMutableDateTime(chronology40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime41", (dateTime32.compareTo(dateTime41) == 0) == dateTime32.equals(dateTime41));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0819");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime1.minus(readablePeriod14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.Chronology chronology23 = yearMonthDay22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        int int28 = dateTime15.get(dateTimeField27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology37.getZone();
        org.joda.time.DurationField durationField40 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekyearOfCentury();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1, chronology37);
        long long47 = chronology37.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.DurationField durationField48 = chronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology37.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime15.toMutableDateTime(chronology37);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        int int56 = localTime55.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 100, chronology58);
        boolean boolean60 = localTime55.isAfter((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology62 = null;
        boolean boolean63 = dateTimeFieldType61.isSupported(chronology62);
        int int64 = localTime55.indexOf(dateTimeFieldType61);
        org.joda.time.Chronology chronology65 = localTime55.getChronology();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology70);
        org.joda.time.LocalTime.Property property72 = localTime71.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField73 = property72.getField();
        org.joda.time.LocalTime localTime74 = property72.getLocalTime();
        org.joda.time.LocalTime localTime75 = property72.roundCeilingCopy();
        boolean boolean76 = localTime55.equals((java.lang.Object) property72);
        java.util.Locale.Category category77 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale78 = java.util.Locale.getDefault(category77);
        java.lang.String str79 = property72.getAsShortText(locale78);
        java.lang.String str80 = locale78.toLanguageTag();
        java.lang.String str81 = dateTime15.toString("\ufffd\ufffd", locale78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and mutableDateTime51", (dateTime15.compareTo(mutableDateTime51) == 0) == dateTime15.equals(mutableDateTime51));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0820");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime3.withChronology(chronology15);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime31.property(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime31.withYearOfEra(5);
        int int37 = dateTime36.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0821");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.lang.String str7 = property6.getName();
        java.lang.String str8 = property6.getAsString();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        java.lang.String str10 = property6.getAsString();
        org.joda.time.DateTime dateTime12 = property6.addToCopy((-1L));
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime15 = dateTime12.withCenturyOfEra(100);
        org.joda.time.DateTime dateTime17 = dateTime12.minusHours(25200999);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMinutes(1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.DateTime dateTime30 = property29.roundHalfCeilingCopy();
        boolean boolean31 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime19.withPeriodAdded(readablePeriod32, 2022);
        org.joda.time.Instant instant35 = dateTime19.toInstant();
        boolean boolean36 = dateTime17.equals((java.lang.Object) instant35);
        int int37 = dateTime17.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant35", (dateTime1.compareTo(instant35) == 0) == dateTime1.equals(instant35));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0822");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        boolean boolean66 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 13);
        org.joda.time.format.DateTimeParser dateTimeParser69 = dateTimeFormatter68.getParser();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime62", (dateTime21.compareTo(dateTime62) == 0) == dateTime21.equals(dateTime62));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0823");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 121);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter10.withZone(dateTimeZone22);
        int int26 = dateTimeFormatter10.getDefaultYear();
        java.lang.Integer int27 = dateTimeFormatter10.getPivotYear();
        int int28 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime30.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime36 = dateTime30.withZone(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter10.withZone(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(161);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.toDateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 6);
        boolean boolean49 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = dateTime48.isAfter(0L);
        org.joda.time.DateTime.Property property52 = dateTime48.dayOfMonth();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.MIDNIGHT;
        int int54 = localTime53.getMillisOfSecond();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology59);
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfSecond();
        int int62 = localTime60.size();
        org.joda.time.LocalTime localTime64 = localTime60.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime66 = localTime60.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 100, chronology68);
        int int70 = localTime69.getMillisOfSecond();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 100, chronology72);
        boolean boolean74 = localTime69.isAfter((org.joda.time.ReadablePartial) localTime73);
        boolean boolean75 = localTime66.isEqual((org.joda.time.ReadablePartial) localTime73);
        org.joda.time.LocalTime localTime76 = localTime53.withFields((org.joda.time.ReadablePartial) localTime73);
        int int78 = localTime73.getValue(1);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology83);
        org.joda.time.LocalTime localTime85 = localTime73.withFields((org.joda.time.ReadablePartial) localTime84);
        org.joda.time.Chronology chronology86 = localTime73.getChronology();
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime48.toMutableDateTime(chronology86);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter37.withChronology(chronology86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and mutableDateTime87", (dateTime48.compareTo(mutableDateTime87) == 0) == dateTime48.equals(mutableDateTime87));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0824");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyear();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime20.toYearMonthDay();
        org.joda.time.Chronology chronology22 = yearMonthDay21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology22.getZone();
        boolean boolean25 = dateTimeFieldType14.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology22.add(readablePeriod27, 39L, 9);
        org.joda.time.DurationField durationField31 = chronology22.halfdays();
        boolean boolean32 = dateTimeZone13.equals((java.lang.Object) chronology22);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = chronology40.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = chronology54.seconds();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology54.getZone();
        org.joda.time.Chronology chronology57 = chronology22.withZone(dateTimeZone56);
        org.joda.time.DurationField durationField58 = durationFieldType0.getField(chronology57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField58", (durationField11.compareTo(durationField58) == 0) == durationField11.equals(durationField58));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0825");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = chronology3.halfdays();
        org.joda.time.DurationField durationField6 = durationFieldType0.getField(chronology3);
        java.lang.String str7 = durationFieldType0.toString();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear(5);
        boolean boolean14 = dateTimeFormatter11.isPrinter();
        org.joda.time.Chronology chronology15 = dateTimeFormatter11.getChronology();
        boolean boolean16 = dateTimeFormatter11.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter11.withZoneUTC();
        org.joda.time.Chronology chronology19 = dateTimeFormatter11.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter11.getParser();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int34 = dateTimeZone32.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone35 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter11.withZone(dateTimeZone36);
        boolean boolean39 = dateTimeFormatter38.isOffsetParsed();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        int int43 = localTime42.getMillisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        boolean boolean47 = localTime42.isAfter((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = dateTimeFieldType48.isSupported(chronology49);
        int int51 = localTime42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology52 = localTime42.getChronology();
        long long56 = chronology52.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.weekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter38.withChronology(chronology52);
        org.joda.time.DurationField durationField61 = chronology52.weeks();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(209401030559000L, chronology52);
        org.joda.time.DurationField durationField63 = durationFieldType0.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField64 = chronology52.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField63", (durationField6.compareTo(durationField63) == 0) == durationField6.equals(durationField63));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0826");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        calendar0.roll((int) (short) 0, 4);
        calendar0.setFirstDayOfWeek((-1));
        boolean boolean7 = calendar0.isWeekDateSupported();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = calendar0.getDisplayNames((int) (short) 1, 0, locale11);
        int int13 = calendar0.getWeekYear();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.toLanguageTag();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale32.getDisplayCountry(locale35);
        java.lang.String str37 = locale31.getDisplayVariant(locale32);
        java.lang.String str38 = locale30.getDisplayScript(locale32);
        java.lang.String str39 = dateTimeField28.getAsShortText((long) 0, locale32);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone23, locale32);
        calendar40.setTimeInMillis((long) 16);
        java.util.Date date48 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date48.setMonth((int) ' ');
        java.util.Date date56 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromDateFields(date56);
        boolean boolean58 = date48.before(date56);
        int int59 = date56.getTimezoneOffset();
        java.util.Date date66 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean67 = date56.after(date66);
        date66.setMonth(5);
        date66.setDate(57600000);
        java.time.Instant instant72 = date66.toInstant();
        calendar40.setTime(date66);
        int int74 = date66.getMonth();
        calendar0.setTime(date66);
        int int76 = calendar0.getWeeksInWeekYear();
        java.util.Date date77 = calendar0.getTime();
        java.util.Date date81 = new java.util.Date(109, 1980, (int) (short) 1);
        int int82 = date81.getMonth();
        boolean boolean83 = date77.after(date81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar40", (calendar0.compareTo(calendar40) == 0) == calendar0.equals(calendar40));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0827");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfWeek(2);
        org.joda.time.LocalDate localDate7 = dateTime6.toLocalDate();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime20.toYearMonthDay();
        org.joda.time.Chronology chronology22 = yearMonthDay21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTime dateTime26 = dateTime6.toDateTime(chronology22);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        int int29 = dateTime28.getEra();
        org.joda.time.DateTime dateTime31 = dateTime28.plusMinutes((int) ' ');
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        calendar32.setTimeInMillis(100L);
        boolean boolean35 = calendar32.isWeekDateSupported();
        calendar32.roll(2, false);
        calendar32.setTimeInMillis(0L);
        java.util.TimeZone timeZone41 = calendar32.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTime dateTime43 = dateTime28.toDateTime(dateTimeZone42);
        java.util.Date date44 = dateTime28.toDate();
        boolean boolean45 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime43", (dateTime1.compareTo(dateTime43) == 0) == dateTime1.equals(dateTime43));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0828");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime6.getZone();
        org.joda.time.DateTime.Property property19 = dateTime6.minuteOfHour();
        java.lang.String str20 = property19.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0829");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        int int8 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.withMillis((long) 20);
        int int11 = dateTime6.getYear();
        org.joda.time.DateTime dateTime13 = dateTime6.plusMonths(27408600);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0830");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        int int15 = dateTime13.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.plus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime13.minusMillis(15);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) 121);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMonths((-1));
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((-292275054));
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        long long28 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis(0L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.Chronology chronology52 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfWeek();
        org.joda.time.DurationField durationField54 = chronology52.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.monthOfYear();
        org.joda.time.DurationField durationField56 = chronology52.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime30.toMutableDateTime(chronology52);
        boolean boolean60 = dateTime30.isBefore((long) 453);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime58", (dateTime1.compareTo(mutableDateTime58) == 0) == dateTime1.equals(mutableDateTime58));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0831");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withPeriodAdded(readablePeriod16, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        int int21 = dateTime20.getEra();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes(1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime26.withYearOfEra(11);
        int int31 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology39.getZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance();
        calendar42.setTimeInMillis(100L);
        boolean boolean45 = calendar42.isWeekDateSupported();
        calendar42.roll(2, false);
        calendar42.setTimeInMillis(0L);
        java.util.TimeZone timeZone51 = calendar42.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.Chronology chronology53 = chronology39.withZone(dateTimeZone52);
        org.joda.time.DurationField durationField54 = chronology53.seconds();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.secondOfDay();
        org.joda.time.DateTime dateTime57 = dateTime12.toDateTime(chronology53);
        int int58 = dateTime57.getMinuteOfDay();
        org.joda.time.DateTime dateTime60 = dateTime57.plusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime57.plus(readablePeriod61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime62", (dateTime1.compareTo(dateTime62) == 0) == dateTime1.equals(dateTime62));
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0832");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DurationField durationField19 = durationFieldType10.getField(chronology18);
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime3.toDateTime(chronology20);
        int int27 = dateTime3.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime26", (dateTime3.compareTo(dateTime26) == 0) == dateTime3.equals(dateTime26));
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0833");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 0);
        int int5 = dateTime4.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        java.lang.String str11 = localTime8.toString();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(121);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.Chronology chronology15 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTime dateTime17 = dateTime2.withChronology(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMonths(979);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime19", (dateTime2.compareTo(dateTime19) == 0) == dateTime2.equals(dateTime19));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0834");
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setTimeInMillis(100L);
        boolean boolean10 = calendar7.isWeekDateSupported();
        calendar7.roll(2, false);
        calendar7.setTimeInMillis(0L);
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone31, (long) 2);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone18);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime43 = dateTime37.withZone(dateTimeZone41);
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime45 = dateTime34.toDateTime(dateTimeZone41);
        int int47 = dateTimeZone41.getOffsetFromLocal((long) 26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime45", (dateTime34.compareTo(dateTime45) == 0) == dateTime34.equals(dateTime45));
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0835");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology25.getZone();
        org.joda.time.DurationField durationField29 = chronology25.centuries();
        long long33 = chronology25.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime34 = dateTime14.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField35 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology25.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0836");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime6.getZone();
        org.joda.time.DateTime.Property property19 = dateTime6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0837");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.plus(readableDuration3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        int int9 = localTime8.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 100, chronology11);
        boolean boolean13 = localTime8.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        int int17 = localTime8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DurationField durationField20 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfCentury();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime4.toDateTime(chronology18);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateTime24.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0838");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        calendar18.setTimeInMillis(100L);
        boolean boolean21 = calendar18.isWeekDateSupported();
        calendar18.roll(2, false);
        calendar18.setTimeInMillis(0L);
        java.util.TimeZone timeZone27 = calendar18.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.dayOfWeek();
        org.joda.time.DateTime dateTime31 = dateTime3.withChronology(chronology15);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime dateTime34 = dateTime31.withDayOfMonth(2);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears(49352);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0839");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.Instant instant9 = dateTime6.toInstant();
        boolean boolean10 = dateTime6.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant9", (dateTime6.compareTo(instant9) == 0) == dateTime6.equals(instant9));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0840");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DateTime dateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        int int36 = dateTime35.getMonthOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMonths((int) 'x');
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        int int42 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 36000249, dateTimeZone29);
        org.joda.time.DateTime dateTime44 = dateTime26.withZone(dateTimeZone29);
        org.joda.time.TimeOfDay timeOfDay45 = dateTime26.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime44", (dateTime26.compareTo(dateTime44) == 0) == dateTime26.equals(dateTime44));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0841");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        java.util.TimeZone timeZone3 = calendar2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime9 = property7.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 100, chronology11);
        int int13 = localTime12.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        boolean boolean17 = localTime12.isAfter((org.joda.time.ReadablePartial) localTime16);
        int int18 = property7.compareTo((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology23);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.util.Locale locale31 = new java.util.Locale("it_IT", "S\374dkorea", "Etc/UTC");
        java.lang.String str32 = dateTimeField26.getAsShortText(53, locale31);
        java.lang.String str33 = property7.getAsShortText(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone3, locale31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar4", (calendar2.compareTo(calendar4) == 0) == calendar2.equals(calendar4));
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0842");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.setTimeInMillis(100L);
        boolean boolean25 = calendar22.isWeekDateSupported();
        calendar22.roll(2, false);
        calendar22.setTimeInMillis(0L);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset((long) 70);
        java.lang.String str36 = dateTimeZone32.getShortName(1L);
        long long40 = dateTimeZone32.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime41 = dateTime20.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime42 = dateTime15.withZoneRetainFields(dateTimeZone32);
        java.util.GregorianCalendar gregorianCalendar43 = dateTime42.toGregorianCalendar();
        gregorianCalendar43.roll(12, false);
        java.util.TimeZone timeZone47 = gregorianCalendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getStandardOffset(10059L);
        org.joda.time.DateTime dateTime51 = dateTime7.withZone(dateTimeZone48);
        java.lang.String str53 = dateTimeZone48.getShortName((long) 11826);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime51", (dateTime1.compareTo(dateTime51) == 0) == dateTime1.equals(dateTime51));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0843");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        boolean boolean19 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime18);
        boolean boolean20 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property23.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        int int34 = property23.compareTo((org.joda.time.ReadablePartial) localTime28);
        java.lang.String str35 = localTime28.toString();
        boolean boolean36 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        int int39 = dateTime38.getEra();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes(1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(985);
        org.joda.time.DateTime dateTime51 = dateTime47.plus((long) 18);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property54 = dateTime53.minuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime53.minusDays((int) 'a');
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTime();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        calendar58.setTimeInMillis(100L);
        boolean boolean61 = calendar58.isWeekDateSupported();
        calendar58.roll(2, false);
        calendar58.setTimeInMillis(0L);
        java.util.TimeZone timeZone67 = calendar58.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset((long) 70);
        java.lang.String str72 = dateTimeZone68.getShortName(1L);
        long long76 = dateTimeZone68.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime77 = dateTime56.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime78 = dateTime47.toDateTime(dateTimeZone68);
        java.lang.String str79 = dateTimeZone68.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and dateTime78", (dateTime47.compareTo(dateTime78) == 0) == dateTime47.equals(dateTime78));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0844");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter7.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(59);
        java.lang.Integer int11 = dateTimeFormatter7.getPivotYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.weekyearOfCentury();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1, chronology20);
        long long30 = chronology20.getDateTimeMillis(121, 12, 8, 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter31.withZoneUTC();
        org.joda.time.Chronology chronology33 = dateTimeFormatter31.getChronology();
        org.joda.time.Chronology chronology34 = dateTimeFormatter31.getChronology();
        org.joda.time.Chronology chronology35 = dateTimeFormatter31.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.Interval interval40 = property39.toInterval();
        org.joda.time.DateTime dateTime41 = property39.getDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        int int47 = dateTime45.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.plus(readableDuration48);
        org.joda.time.DateTime dateTime51 = dateTime45.minusMillis(15);
        org.joda.time.DateTime.Property property52 = dateTime45.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime45.plusHours((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime45.withMillisOfDay(1);
        int int57 = dateTime56.getSecondOfDay();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (byte) 0);
        int int60 = dateTime59.getEra();
        org.joda.time.DateTime dateTime61 = dateTime59.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime63 = dateTime59.minusMinutes(1);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMonths(0);
        org.joda.time.DateTime dateTime67 = dateTime65.minus((long) 2);
        org.joda.time.DateTime.Property property68 = dateTime65.minuteOfHour();
        org.joda.time.Chronology chronology69 = dateTime65.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.centuries();
        org.joda.time.DurationField durationField71 = chronology69.halfdays();
        org.joda.time.DateTime dateTime72 = dateTime56.toDateTime(chronology69);
        org.joda.time.Chronology chronology73 = dateTime56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = chronology73.getZone();
        org.joda.time.DateTime dateTime75 = dateTime41.toDateTime(dateTimeZone74);
        org.joda.time.Chronology chronology76 = chronology35.withZone(dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.weekyearOfCentury();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (byte) 0);
        int int81 = dateTime80.getEra();
        org.joda.time.DateTime dateTime82 = dateTime80.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime84 = dateTime80.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str87 = dateTimeZone86.getID();
        org.joda.time.DateTime dateTime88 = dateTime80.toDateTime(dateTimeZone86);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 28, dateTimeZone86);
        org.joda.time.Chronology chronology90 = chronology76.withZone(dateTimeZone86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime88", (dateTime14.compareTo(dateTime88) == 0) == dateTime14.equals(dateTime88));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0845");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DurationField durationField19 = durationFieldType10.getField(chronology18);
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime3.toDateTime(chronology20);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology20.add(readablePeriod27, (-2203675200000L), 531);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime26", (dateTime3.compareTo(dateTime26) == 0) == dateTime3.equals(dateTime26));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0846");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(14);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localTime11.getFieldTypes();
        org.joda.time.Chronology chronology13 = localTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime5.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(53);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime14", (dateTime5.compareTo(dateTime14) == 0) == dateTime5.equals(dateTime14));
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0847");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        java.util.TimeZone timeZone3 = calendar2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int6 = calendar5.getWeekYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar4", (calendar2.compareTo(calendar4) == 0) == calendar2.equals(calendar4));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0848");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.withSecondOfMinute(22);
        org.joda.time.DateTime dateTime20 = dateTime18.withMonthOfYear(10);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        calendar22.setTimeInMillis(100L);
        boolean boolean25 = calendar22.isWeekDateSupported();
        calendar22.roll(2, false);
        calendar22.setTimeInMillis(0L);
        java.util.TimeZone timeZone31 = calendar22.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int35 = dateTimeZone33.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        long long48 = dateTimeZone33.getMillisKeepLocal(dateTimeZone46, (long) 2);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 8, dateTimeZone33);
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(dateTimeZone33);
        org.joda.time.LocalTime localTime52 = localTime50.minusMillis((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int54 = localTime52.indexOf(dateTimeFieldType53);
        java.lang.String str55 = dateTimeFieldType53.toString();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType53.getRangeDurationType();
        java.lang.String str57 = dateTimeFieldType53.toString();
        org.joda.time.DateTime dateTime59 = dateTime20.withField(dateTimeFieldType53, 96);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) 292269054, dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime20.toMutableDateTime(dateTimeZone62);
        java.lang.String str66 = dateTimeZone62.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime65", (dateTime20.compareTo(mutableDateTime65) == 0) == dateTime20.equals(mutableDateTime65));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0849");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime42 = dateTime1.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime44 = dateTime42.withYear((int) 'x');
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("1967-05-01T00:00:00.009");
        java.util.Calendar calendar47 = dateTime42.toCalendar(locale46);
        org.joda.time.DateTime.Property property48 = dateTime42.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar47", (calendar14.compareTo(calendar47) == 0) == calendar14.equals(calendar47));
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0850");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime11 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = dateTimeField25.getAsText(32770, locale27);
        java.lang.String str32 = dateTimeField25.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        int int36 = localTime35.getMillisOfSecond();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 100, chronology38);
        boolean boolean40 = localTime35.isAfter((org.joda.time.ReadablePartial) localTime39);
        int int41 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localTime35);
        java.lang.String str42 = dateTimeField25.getName();
        java.util.Date date48 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromDateFields(date48);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale51.getISO3Country();
        java.lang.String str53 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localTime49, (int) 'a', locale51);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale51.getDisplayLanguage(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale58.getDisplayCountry(locale61);
        java.lang.String str63 = locale57.getDisplayVariant(locale58);
        java.lang.String str64 = locale56.getDisplayScript(locale58);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale58);
        java.lang.String str66 = locale54.getDisplayName(locale58);
        java.util.Calendar.Builder builder67 = builder17.setLocale(locale58);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance();
        calendar68.setTimeInMillis(100L);
        boolean boolean71 = calendar68.isWeekDateSupported();
        calendar68.roll(2, false);
        calendar68.setTimeInMillis(0L);
        java.util.TimeZone timeZone77 = calendar68.getTimeZone();
        java.util.Calendar.Builder builder78 = builder17.setTimeZone(timeZone77);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance();
        calendar79.setTimeInMillis(100L);
        boolean boolean82 = calendar79.isWeekDateSupported();
        calendar79.roll(2, false);
        calendar79.setTimeInMillis(0L);
        java.util.TimeZone timeZone88 = calendar79.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forTimeZone(timeZone88);
        java.util.TimeZone timeZone90 = dateTimeZone89.toTimeZone();
        java.util.Calendar.Builder builder91 = builder78.setTimeZone(timeZone90);
        java.util.Calendar calendar92 = builder91.build();
        org.joda.time.LocalTime localTime93 = org.joda.time.LocalTime.fromCalendarFields(calendar92);
        int int94 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localTime93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar68 and calendar92", (calendar68.compareTo(calendar92) == 0) == calendar68.equals(calendar92));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0851");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfEra(11);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setTimeInMillis(100L);
        boolean boolean27 = calendar24.isWeekDateSupported();
        calendar24.roll(2, false);
        calendar24.setTimeInMillis(0L);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.Chronology chronology35 = chronology21.withZone(dateTimeZone34);
        org.joda.time.DurationField durationField36 = chronology35.seconds();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        java.lang.String str38 = chronology35.toString();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime11.toMutableDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.hourOfDay();
        java.lang.String str41 = dateTimeField40.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and mutableDateTime39", (dateTime11.compareTo(mutableDateTime39) == 0) == dateTime11.equals(mutableDateTime39));
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0852");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DurationField durationField12 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = locale16.getVariant();
        java.lang.String str20 = dateTimeField13.getAsShortText(97, locale16);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.getISO3Country();
        java.lang.String str27 = locale25.toLanguageTag();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale25.getDisplayCountry(locale28);
        java.lang.String str30 = locale24.getDisplayVariant(locale25);
        java.lang.String str31 = locale23.getDisplayScript(locale25);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getDisplayCountry();
        java.lang.String str36 = locale23.getDisplayLanguage(locale32);
        boolean boolean37 = locale32.hasExtensions();
        java.lang.String str38 = locale32.getDisplayName();
        java.lang.String str39 = locale32.getDisplayVariant();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale32.getDisplayCountry(locale40);
        java.lang.String str43 = locale22.getDisplayScript(locale32);
        java.lang.String str44 = dateTimeField13.getAsShortText(35319, locale22);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.005Z");
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property51 = dateTime48.weekyear();
        org.joda.time.DateTime dateTime53 = property51.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = property54.withMaximumValue();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property60 = dateTime57.weekyear();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime64.minusDays((int) 'a');
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime();
        int int69 = property60.getDifference((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DurationField durationField70 = property60.getDurationField();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property75 = dateTime72.weekyear();
        org.joda.time.DateTime dateTime77 = property75.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime79 = dateTime77.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.DateTime dateTime81 = dateTime77.minus(readablePeriod80);
        int int82 = dateTime81.getMonthOfYear();
        org.joda.time.DateTime dateTime83 = dateTime81.toDateTimeISO();
        int int84 = property60.getDifference((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean85 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime83);
        java.util.GregorianCalendar gregorianCalendar86 = dateTime83.toGregorianCalendar();
        org.joda.time.LocalTime localTime87 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar86);
        java.lang.String str88 = localTime87.toString();
        org.joda.time.DateTime dateTime89 = dateTime46.withFields((org.joda.time.ReadablePartial) localTime87);
        org.joda.time.Chronology chronology90 = localTime87.getChronology();
        int int91 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localTime87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime89", (dateTime1.compareTo(dateTime89) == 0) == dateTime1.equals(dateTime89));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0853");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.Chronology chronology8 = localTime6.getChronology();
        int int9 = localTime6.getMinuteOfHour();
        org.joda.time.Chronology chronology10 = localTime6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DurationField durationField12 = chronology10.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField12, and durationField11", !(durationField11.compareTo(durationField12) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField12.compareTo(durationField11))));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0854");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 8, dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = dateTime3.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis((int) 'u');
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes(1);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.DateTime dateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean57 = dateTime53.isSupported(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getDurationType();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime60.minusDays((int) 'a');
        org.joda.time.DateTime dateTime64 = dateTime60.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay65 = dateTime64.toYearMonthDay();
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology66.getZone();
        org.joda.time.DurationField durationField69 = chronology66.days();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.dayOfYear();
        boolean boolean72 = durationFieldType58.isSupported(chronology66);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTime dateTime74 = dateTime43.withChronology(chronology66);
        int int75 = dateTime43.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime74", (dateTime3.compareTo(dateTime74) == 0) == dateTime3.equals(dateTime74));
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0855");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime5.withHourOfDay(16);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(1970L);
        org.joda.time.DateTime dateTime12 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTime dateTime14 = dateTime5.withCenturyOfEra(999);
        org.joda.time.DateTime dateTime16 = dateTime5.plusSeconds(14);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime18 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        long long24 = property22.remainder();
        java.util.Locale locale25 = null;
        int int26 = property22.getMaximumTextLength(locale25);
        java.util.Locale locale30 = new java.util.Locale("36000097", "millisOfSecond", "US");
        int int31 = property22.getMaximumShortTextLength(locale30);
        org.joda.time.DateTime dateTime32 = property22.roundHalfCeilingCopy();
        java.util.GregorianCalendar gregorianCalendar33 = dateTime32.toGregorianCalendar();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime35.minusDays((int) 'a');
        org.joda.time.DateTime dateTime39 = dateTime35.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime47.toYearMonthDay();
        org.joda.time.Chronology chronology49 = yearMonthDay48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology49.getZone();
        org.joda.time.DurationField durationField52 = chronology49.months();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType40.getField(chronology49);
        org.joda.time.DurationField durationField54 = chronology49.centuries();
        long long59 = chronology49.getDateTimeMillis(292278993, (int) (short) 1, 8, 36000089);
        org.joda.time.DateTimeField dateTimeField60 = chronology49.dayOfWeek();
        org.joda.time.DurationField durationField61 = chronology49.months();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime32.toMutableDateTime(chronology49);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((java.lang.Object) dateTime19, chronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime62", (dateTime1.compareTo(mutableDateTime62) == 0) == dateTime1.equals(mutableDateTime62));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0856");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        org.joda.time.DateTime.Property property30 = dateTime29.year();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology33.halfdays();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        calendar37.setTimeInMillis(100L);
        boolean boolean40 = calendar37.isWeekDateSupported();
        calendar37.roll(2, false);
        calendar37.setTimeInMillis(0L);
        java.util.TimeZone timeZone46 = calendar37.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int50 = dateTimeZone48.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        long long63 = dateTimeZone48.getMillisKeepLocal(dateTimeZone61, (long) 2);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 8, dateTimeZone48);
        org.joda.time.Chronology chronology65 = chronology33.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfDay();
        org.joda.time.DateTime dateTime68 = dateTime29.withChronology(chronology65);
        org.joda.time.DateTimeField dateTimeField69 = chronology65.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0857");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime7.minus((-251999990L));
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.Chronology chronology32 = chronology18.withZone(dateTimeZone31);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 32770, false);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime10.toMutableDateTime(dateTimeZone31);
        long long39 = dateTimeZone31.convertLocalToUTC(292260012L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime36", (dateTime10.compareTo(mutableDateTime36) == 0) == dateTime10.equals(mutableDateTime36));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0858");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.DateTime dateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(7);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime35 = dateTime31.withYear(1);
        int int36 = dateTime35.getMonthOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMonths((int) 'x');
        org.joda.time.DateTime.Property property40 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime41 = property40.getDateTime();
        int int42 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 36000249, dateTimeZone29);
        org.joda.time.DateTime dateTime44 = dateTime26.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime46 = dateTime26.minus((-58318531199879L));
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset((long) 70);
        java.lang.String str61 = dateTimeZone57.getShortName(1L);
        long long65 = dateTimeZone57.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property68 = dateTime67.minuteOfHour();
        org.joda.time.DateTime dateTime70 = dateTime67.minusDays((int) 'a');
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes(3);
        org.joda.time.DateTime dateTime76 = dateTime73.withDurationAdded((long) 19, 10);
        org.joda.time.LocalDateTime localDateTime77 = dateTime73.toLocalDateTime();
        boolean boolean78 = dateTimeZone57.isLocalDateTimeGap(localDateTime77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((java.lang.Object) dateTime46, dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime44", (dateTime21.compareTo(dateTime44) == 0) == dateTime21.equals(dateTime44));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0859");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) 70);
        java.lang.String str14 = dateTimeZone10.getShortName(1L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        java.lang.String str23 = property21.getAsString();
        org.joda.time.DateTime dateTime25 = property21.addToCopy(86399999);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays((int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(3);
        int int36 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime dateTime38 = dateTime33.plusYears(11);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, 3);
        int int42 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime44.minusDays((int) 'a');
        org.joda.time.DateTime dateTime48 = dateTime44.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.Chronology chronology50 = yearMonthDay49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology50.getZone();
        long long54 = dateTimeZone52.convertUTCToLocal((long) 'x');
        int int56 = dateTimeZone52.getStandardOffset((long) 97);
        java.util.TimeZone timeZone57 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str62 = dateTimeZone58.getShortName((-1680047639000L));
        long long64 = dateTimeZone52.getMillisKeepLocal(dateTimeZone58, 5760139680L);
        long long67 = dateTimeZone52.convertLocalToUTC(209L, true);
        java.lang.String str69 = dateTimeZone52.getName((-227109901304530L));
        org.joda.time.format.DateTimePrinter dateTimePrinter70 = null;
        org.joda.time.format.DateTimeParser dateTimeParser71 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter70, dateTimeParser71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear(5);
        boolean boolean75 = dateTimeZone52.equals((java.lang.Object) dateTimeFormatter74);
        long long77 = dateTimeZone52.convertUTCToLocal(1405440L);
        long long79 = dateTimeZone52.convertUTCToLocal((-3155673599985L));
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime25.toMutableDateTime(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime60 and dateTime80", (dateTime60.compareTo(dateTime80) == 0) == dateTime60.equals(dateTime80));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0860");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime4 = dateTime1.plusHours(39);
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTimeISO();
        int int6 = dateTime1.getMinuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime1.withDayOfYear(22);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusDays((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.Chronology chronology16 = yearMonthDay15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology16.getZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.Chronology chronology30 = chronology16.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology30.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.halfdayOfDay();
        org.joda.time.Chronology chronology35 = chronology30.withUTC();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        long long48 = dateTimeZone46.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property53 = dateTime50.weekyear();
        org.joda.time.DateTime dateTime55 = property53.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime57 = dateTime55.withHourOfDay(6);
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        int int59 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime58);
        long long62 = dateTimeZone46.adjustOffset(121L, true);
        org.joda.time.Chronology chronology63 = chronology35.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTime dateTime65 = dateTime8.toDateTime(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime65", (dateTime8.compareTo(dateTime65) == 0) == dateTime8.equals(dateTime65));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0861");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime3 = dateTime1.minus(10L);
        org.joda.time.DateTime.Property property4 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime5 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime7.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime7.plus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime.Property property15 = dateTime13.millisOfSecond();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        int int21 = dateTime19.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.plus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime19.minusMillis(15);
        org.joda.time.DateTime dateTime27 = dateTime25.plus((long) 121);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime27.plusMonths((-1));
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds((-292275054));
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        long long34 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime36 = dateTime32.withMillis(0L);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime38.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.Chronology chronology44 = yearMonthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.Chronology chronology58 = chronology44.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfWeek();
        org.joda.time.DurationField durationField60 = chronology58.weekyears();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.monthOfYear();
        org.joda.time.DurationField durationField62 = chronology58.weekyears();
        org.joda.time.DateTimeField dateTimeField63 = chronology58.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime36.toMutableDateTime(chronology58);
        boolean boolean65 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime64", (dateTime7.compareTo(mutableDateTime64) == 0) == dateTime7.equals(mutableDateTime64));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0862");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds(11);
        org.joda.time.LocalDateTime localDateTime33 = dateTime32.toLocalDateTime();
        org.joda.time.DateTime dateTime35 = dateTime32.minusYears(4);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'x', (int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime37.toMutableDateTime(dateTimeZone40);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        calendar43.setTimeInMillis(100L);
        boolean boolean46 = calendar43.isWeekDateSupported();
        calendar43.roll(2, false);
        calendar43.setTimeInMillis(0L);
        java.util.TimeZone timeZone52 = calendar43.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int56 = dateTimeZone54.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone57 = dateTimeZone54.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone59.getID();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 586, dateTimeZone59);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        int int74 = dateTimeZone72.getOffset((long) 70);
        java.lang.String str76 = dateTimeZone72.getShortName(1L);
        long long80 = dateTimeZone72.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property83 = dateTime82.minuteOfHour();
        org.joda.time.DateTime dateTime85 = dateTime82.minusDays((int) 'a');
        org.joda.time.DateTime dateTime86 = dateTime82.toDateTime();
        org.joda.time.DateTime dateTime88 = dateTime86.minusMinutes(3);
        org.joda.time.DateTime dateTime91 = dateTime88.withDurationAdded((long) 19, 10);
        org.joda.time.LocalDateTime localDateTime92 = dateTime88.toLocalDateTime();
        boolean boolean93 = dateTimeZone72.isLocalDateTimeGap(localDateTime92);
        boolean boolean94 = dateTimeZone59.isLocalDateTimeGap(localDateTime92);
        boolean boolean95 = dateTimeZone40.isLocalDateTimeGap(localDateTime92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and mutableDateTime41", (dateTime35.compareTo(mutableDateTime41) == 0) == dateTime35.equals(mutableDateTime41));
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0863");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        java.lang.String str30 = dateTime29.toString();
        int int31 = dateTime29.getMinuteOfDay();
        boolean boolean33 = dateTime29.isBefore(1644572735347L);
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime29.toYearMonthDay();
        org.joda.time.DateTime dateTime36 = dateTime29.minusMillis(8155156);
        org.joda.time.DateTime.Property property37 = dateTime36.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0864");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology2 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime5.minusDays((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology11.getZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.Chronology chronology25 = chronology11.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = chronology2.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property31 = dateTime28.weekyear();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime41 = dateTime36.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant42 = dateTime41.toInstant();
        int int43 = dateTime41.getMinuteOfDay();
        int int44 = property34.compareTo((org.joda.time.ReadableInstant) dateTime41);
        int int45 = dateTime41.getWeekyear();
        org.joda.time.DateTime dateTime47 = dateTime41.plusDays(720);
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime41.toYearMonthDay();
        int[] intArray50 = chronology26.get((org.joda.time.ReadablePartial) yearMonthDay48, (long) 18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and instant42", (dateTime41.compareTo(instant42) == 0) == dateTime41.equals(instant42));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0865");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(8, 0, 4);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(1, 86399999, 0);
        java.util.Calendar.Builder builder12 = builder0.setDate(0, (int) (byte) 10, 36000107);
        java.util.Calendar.Builder builder16 = builder12.setDate((int) (short) 1, 58620000, 20);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = dateTimeField25.getAsText(32770, locale27);
        java.lang.String str32 = dateTimeField25.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 100, chronology34);
        int int36 = localTime35.getMillisOfSecond();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 100, chronology38);
        boolean boolean40 = localTime35.isAfter((org.joda.time.ReadablePartial) localTime39);
        int int41 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localTime35);
        java.lang.String str42 = dateTimeField25.getName();
        java.util.Date date48 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromDateFields(date48);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale51.getISO3Country();
        java.lang.String str53 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localTime49, (int) 'a', locale51);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale51.getDisplayLanguage(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale58.getDisplayCountry(locale61);
        java.lang.String str63 = locale57.getDisplayVariant(locale58);
        java.lang.String str64 = locale56.getDisplayScript(locale58);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale58);
        java.lang.String str66 = locale54.getDisplayName(locale58);
        java.util.Calendar.Builder builder67 = builder17.setLocale(locale58);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance();
        calendar68.setTimeInMillis(100L);
        boolean boolean71 = calendar68.isWeekDateSupported();
        calendar68.roll(2, false);
        calendar68.setTimeInMillis(0L);
        java.util.TimeZone timeZone77 = calendar68.getTimeZone();
        java.util.Calendar.Builder builder78 = builder17.setTimeZone(timeZone77);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance();
        calendar79.setTimeInMillis(100L);
        boolean boolean82 = calendar79.isWeekDateSupported();
        calendar79.roll(2, false);
        calendar79.setTimeInMillis(0L);
        java.util.TimeZone timeZone88 = calendar79.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forTimeZone(timeZone88);
        java.util.TimeZone timeZone90 = dateTimeZone89.toTimeZone();
        java.util.Calendar.Builder builder91 = builder78.setTimeZone(timeZone90);
        java.util.Calendar.Builder builder92 = builder16.setTimeZone(timeZone90);
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone90);
        org.joda.time.DateTimeZone dateTimeZone94 = org.joda.time.DateTimeZone.forTimeZone(timeZone90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar65 and calendar93", (calendar65.compareTo(calendar93) == 0) == calendar65.equals(calendar93));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0866");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.era();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime16.year();
        java.lang.String str22 = property21.getName();
        java.lang.String str23 = property21.getAsString();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays(0);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        int int31 = dateTime30.getMillisOfSecond();
        int int32 = property21.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        int int38 = dateTime36.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.withDurationAdded(readableDuration39, 32770);
        int int42 = property21.getDifference((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property44 = dateTime43.year();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property47 = dateTime46.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime46.minusDays((int) 'a');
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime50.toYearMonthDay();
        org.joda.time.Chronology chronology52 = yearMonthDay51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology52.getZone();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        calendar55.setTimeInMillis(100L);
        boolean boolean58 = calendar55.isWeekDateSupported();
        calendar55.roll(2, false);
        calendar55.setTimeInMillis(0L);
        java.util.TimeZone timeZone64 = calendar55.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.Chronology chronology66 = chronology52.withZone(dateTimeZone65);
        long long69 = dateTimeZone65.convertLocalToUTC((long) 32770, false);
        int int71 = dateTimeZone65.getOffset((long) 161);
        org.joda.time.DateTime dateTime72 = dateTime43.toDateTime(dateTimeZone65);
        org.joda.time.Chronology chronology73 = chronology8.withZone(dateTimeZone65);
        org.joda.time.DurationField durationField74 = chronology73.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime72", (dateTime43.compareTo(dateTime72) == 0) == dateTime43.equals(dateTime72));
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0867");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTime dateTime12 = dateTime6.minusYears((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.halfdays();
        org.joda.time.DurationField durationField21 = durationFieldType15.getField(chronology18);
        java.lang.String str22 = durationFieldType15.toString();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays((int) 'a');
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int30 = dateTime28.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        org.joda.time.DurationField durationField41 = chronology38.months();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType29.getField(chronology38);
        org.joda.time.DurationField durationField43 = chronology38.centuries();
        long long48 = chronology38.getDateTimeMillis(292278993, (int) (short) 1, 8, 36000089);
        org.joda.time.DurationField durationField49 = durationFieldType15.getField(chronology38);
        org.joda.time.DateTime dateTime51 = dateTime14.withFieldAdded(durationFieldType15, (int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField21 and durationField49", (durationField21.compareTo(durationField49) == 0) == durationField21.equals(durationField49));
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0868");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property14 = dateTime11.weekyear();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.minus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZone(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime25 = dateTime22.withField(dateTimeFieldType23, 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime27.minusDays((int) 'a');
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        org.joda.time.Chronology chronology33 = yearMonthDay32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField35 = chronology33.eras();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType23.getField(chronology33);
        long long39 = dateTimeField37.roundHalfEven((long) (short) 10);
        java.lang.String str41 = dateTimeField37.getAsText((long) 292269054);
        int int42 = dateTime9.get(dateTimeField37);
        org.joda.time.DurationField durationField43 = dateTimeField37.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField43, and durationField35", !(durationField35.compareTo(durationField43) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField43.compareTo(durationField35))));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0869");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology12);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = dateTimeField15.getAsText(32770, locale17);
        java.lang.String str22 = dateTimeField15.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        int int26 = localTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 100, chronology28);
        boolean boolean30 = localTime25.isAfter((org.joda.time.ReadablePartial) localTime29);
        int int31 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str32 = dateTimeField15.getName();
        java.util.Date date38 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date38);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localTime39, (int) 'a', locale41);
        java.lang.String str44 = property6.getAsText(locale41);
        org.joda.time.LocalTime localTime46 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime47 = property6.roundCeilingCopy();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        java.lang.String str49 = calendar48.getCalendarType();
        java.time.Instant instant50 = calendar48.toInstant();
        int int51 = calendar48.getWeekYear();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromCalendarFields(calendar48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localTime52.getFieldTypes();
        org.joda.time.DateTime dateTime54 = localTime52.toDateTimeToday();
        int int55 = property6.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime localTime57 = localTime52.minusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property58 = localTime52.hourOfDay();
        int int59 = property58.get();
        org.joda.time.LocalTime localTime60 = property58.withMinimumValue();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        int int63 = dateTime62.getEra();
        org.joda.time.DateTime dateTime64 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime66 = dateTime62.plusSeconds(6);
        org.joda.time.DateTime dateTime67 = dateTime66.withLaterOffsetAtOverlap();
        boolean boolean68 = localTime60.equals((java.lang.Object) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        org.joda.time.LocalTime.Property property71 = localTime60.property(dateTimeFieldType69);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.clockhourOfHalfday();
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (byte) 0);
        int int79 = dateTime78.getEra();
        org.joda.time.DateTime dateTime81 = dateTime78.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property82 = dateTime81.monthOfYear();
        boolean boolean83 = localTime76.equals((java.lang.Object) dateTime81);
        org.joda.time.LocalTime localTime85 = localTime76.withMillisOfDay(4);
        int[] intArray87 = chronology74.get((org.joda.time.ReadablePartial) localTime76, 9223371986234400089L);
        org.joda.time.DurationField durationField88 = chronology74.halfdays();
        org.joda.time.DateTimeField dateTimeField89 = chronology74.centuryOfEra();
        boolean boolean90 = dateTimeFieldType69.isSupported(chronology74);
        org.joda.time.DurationField durationField91 = chronology74.millis();
        org.joda.time.LocalTime localTime92 = org.joda.time.LocalTime.now(chronology74);
        org.joda.time.DurationField durationField93 = chronology74.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField93, durationField88, and durationField91", !(durationField93.compareTo(durationField88) == 0) || (Math.signum(durationField93.compareTo(durationField91)) == Math.signum(durationField88.compareTo(durationField91))));
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0870");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime1.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(6);
        boolean boolean18 = dateTime17.isEqualNow();
        boolean boolean19 = dateTime17.isEqualNow();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property63 = dateTime62.secondOfMinute();
        boolean boolean64 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime66 = dateTime62.minusSeconds(38);
        int int67 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime62);
        int int68 = dateTime1.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime62", (dateTime1.compareTo(dateTime62) == 0) == dateTime1.equals(dateTime62));
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0871");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology8);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = dateTimeField11.getAsText(32770, locale13);
        java.lang.String str18 = dateTimeField11.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 100, chronology20);
        int int22 = localTime21.getMillisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 100, chronology24);
        boolean boolean26 = localTime21.isAfter((org.joda.time.ReadablePartial) localTime25);
        int int27 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localTime21);
        java.lang.String str28 = dateTimeField11.getName();
        java.util.Date date34 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromDateFields(date34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localTime35, (int) 'a', locale37);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale37.getDisplayLanguage(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.lang.String str45 = locale44.getISO3Country();
        java.lang.String str46 = locale44.toLanguageTag();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale44.getDisplayCountry(locale47);
        java.lang.String str49 = locale43.getDisplayVariant(locale44);
        java.lang.String str50 = locale42.getDisplayScript(locale44);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale44);
        java.lang.String str52 = locale40.getDisplayName(locale44);
        java.util.Calendar.Builder builder53 = builder3.setLocale(locale44);
        java.util.Locale.setDefault(category0, locale44);
        java.util.Locale locale55 = java.util.Locale.getDefault(category0);
        java.util.Locale locale56 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance();
        calendar57.setTimeInMillis(100L);
        boolean boolean60 = calendar57.isWeekDateSupported();
        calendar57.roll(2, false);
        calendar57.setTimeInMillis(0L);
        java.util.TimeZone timeZone66 = calendar57.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = locale71.toLanguageTag();
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale71.getDisplayCountry(locale74);
        java.lang.String str76 = locale70.getDisplayVariant(locale71);
        java.lang.String str77 = locale69.getDisplayScript(locale71);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone66, locale69);
        java.util.Locale.Category category79 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale80 = java.util.Locale.getDefault(category79);
        java.lang.String str81 = locale69.getDisplayName(locale80);
        java.util.Locale.setDefault(category0, locale80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar78", (calendar51.compareTo(calendar78) == 0) == calendar51.equals(calendar78));
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0872");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime4 = dateTime2.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime2.withYear(1);
        int int7 = dateTime6.getMonthOfYear();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter17.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime6.withChronology(chronology25);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) 512, chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime30", (dateTime6.compareTo(dateTime30) == 0) == dateTime6.equals(dateTime30));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0873");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        int int3 = dateTime1.getYearOfCentury();
        int int4 = dateTime1.getSecondOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withCenturyOfEra(99);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        org.joda.time.DurationField durationField18 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfWeek();
        org.joda.time.DurationField durationField22 = chronology15.hours();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology15.getZone();
        org.joda.time.DateTime dateTime24 = dateTime6.withChronology(chronology15);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear(5);
        org.joda.time.Chronology chronology30 = dateTimeFormatter27.getChronology();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property47 = dateTime46.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime46.minusDays((int) 'a');
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMonths((int) ' ');
        boolean boolean56 = dateTime49.isBefore((org.joda.time.ReadableInstant) dateTime53);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        calendar58.setTimeInMillis(100L);
        boolean boolean61 = calendar58.isWeekDateSupported();
        calendar58.roll(2, false);
        calendar58.setTimeInMillis(0L);
        java.util.TimeZone timeZone67 = calendar58.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int71 = dateTimeZone69.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance();
        calendar72.setTimeInMillis(100L);
        boolean boolean75 = calendar72.isWeekDateSupported();
        calendar72.roll(2, false);
        calendar72.setTimeInMillis(0L);
        java.util.TimeZone timeZone81 = calendar72.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        long long84 = dateTimeZone69.getMillisKeepLocal(dateTimeZone82, (long) 2);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) 8, dateTimeZone69);
        java.lang.String str86 = dateTimeZone69.getID();
        org.joda.time.DateTime dateTime87 = dateTime53.toDateTime(dateTimeZone69);
        long long89 = dateTimeZone42.getMillisKeepLocal(dateTimeZone69, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter27.withZone(dateTimeZone69);
        org.joda.time.Chronology chronology91 = chronology15.withZone(dateTimeZone69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime24", (dateTime6.compareTo(dateTime24) == 0) == dateTime6.equals(dateTime24));
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0874");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property14 = dateTime11.weekyear();
        int int15 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime11.plusWeeks(121);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property19 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays(0);
        org.joda.time.DateTime.Property property25 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime21.plus((-49881509L));
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        int int31 = localTime30.getMillisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        boolean boolean35 = localTime30.isAfter((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology37 = null;
        boolean boolean38 = dateTimeFieldType36.isSupported(chronology37);
        int int39 = localTime30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology40 = localTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.yearOfCentury();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DateTime dateTime45 = dateTime27.toDateTime(chronology40);
        int int46 = dateTime27.getWeekOfWeekyear();
        boolean boolean47 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property48 = dateTime9.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime45", (dateTime27.compareTo(dateTime45) == 0) == dateTime27.equals(dateTime45));
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0875");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.era();
        org.joda.time.DurationField durationField26 = chronology21.years();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField26", (durationField23.compareTo(durationField26) == 0) == durationField23.equals(durationField26));
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0876");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.DateTime dateTime11 = dateTime5.minusMinutes(99);
        org.joda.time.Instant instant12 = dateTime5.toInstant();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology16.halfdays();
        org.joda.time.DurationField durationField19 = durationFieldType13.getField(chronology16);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology16.add(readablePeriod20, (long) 86340000, (int) (short) -1);
        org.joda.time.DurationField durationField24 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField25 = chronology16.millisOfDay();
        long long28 = dateTimeField25.addWrapField(48L, 8);
        int int29 = dateTime5.get(dateTimeField25);
        long long31 = dateTimeField25.remainder((long) 50400000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant12", (dateTime5.compareTo(instant12) == 0) == dateTime5.equals(instant12));
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0877");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        int int40 = dateTime6.getMinuteOfDay();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int54 = dateTimeZone52.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        calendar55.setTimeInMillis(100L);
        boolean boolean58 = calendar55.isWeekDateSupported();
        calendar55.roll(2, false);
        calendar55.setTimeInMillis(0L);
        java.util.TimeZone timeZone64 = calendar55.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        long long67 = dateTimeZone52.getMillisKeepLocal(dateTimeZone65, (long) 2);
        org.joda.time.DateTime dateTime68 = dateTime6.toDateTime(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str71 = dateTimeZone70.getID();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(dateTimeZone70);
        boolean boolean74 = dateTime6.equals((java.lang.Object) localTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime39", (dateTime6.compareTo(dateTime39) == 0) == dateTime6.equals(dateTime39));
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0878");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(0, (int) (short) 0);
        java.util.Calendar.Builder builder7 = builder3.setWeekDate(0, 121, 86);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("852");
        java.util.Calendar.Builder builder10 = builder7.setLocale(locale9);
        java.util.Calendar.Builder builder14 = builder7.setTimeOfDay((-16), 970, 292275055);
        java.util.Calendar.Builder builder18 = builder14.setDate(50400000, 587852, 96);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 1970);
        long long27 = dateTimeZone21.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 52, dateTimeZone21);
        java.util.TimeZone timeZone29 = dateTimeZone21.toTimeZone();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.lang.String str32 = locale30.getDisplayScript();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone29, locale30);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone29);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone29);
        java.util.Calendar.Builder builder36 = builder14.setTimeZone(timeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar34", (calendar33.compareTo(calendar34) == 0) == calendar33.equals(calendar34));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0879");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.withChronology(chronology15);
        org.joda.time.DateTime.Property property18 = dateTime6.secondOfMinute();
        org.joda.time.DurationField durationField19 = property18.getLeapDurationField();
        org.joda.time.DateTime dateTime20 = property18.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0880");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.plus((-49881509L));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 100, chronology9);
        int int11 = localTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 100, chronology13);
        boolean boolean15 = localTime10.isAfter((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        int int19 = localTime10.indexOf(dateTimeFieldType16);
        org.joda.time.Chronology chronology20 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.era();
        org.joda.time.DurationField durationField22 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.yearOfCentury();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DateTime dateTime25 = dateTime7.toDateTime(chronology20);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime7.withDurationAdded(readableDuration26, (-36002075));
        int int29 = dateTime7.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime7", (dateTime25.compareTo(dateTime7) == 0) == dateTime25.equals(dateTime7));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0881");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField11.getType();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfDay();
        java.lang.String str22 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        org.joda.time.DurationField durationField25 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.weekyear();
        org.joda.time.DurationField durationField27 = chronology20.centuries();
        java.lang.String str28 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology20.era();
        org.joda.time.DurationField durationField31 = chronology20.weekyears();
        boolean boolean32 = dateTimeFieldType12.isSupported(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField25 and durationField31", (durationField25.compareTo(durationField31) == 0) == durationField25.equals(durationField31));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0882");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusHours((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime3.withMillisOfDay(1);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes((int) 'a');
        org.joda.time.DateTime.Property property17 = dateTime16.weekOfWeekyear();
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        int int19 = property18.getMinimumValueOverall();
        int int20 = property18.getMinimumValueOverall();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone31.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(6);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        int int44 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property45 = dateTime43.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfSecond();
        java.util.Locale locale54 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale54.getCountry();
        java.lang.String str57 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localTime52, locale54);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromCalendarFields(calendar58);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.fromCalendarFields(calendar58);
        int int61 = calendar58.getWeeksInWeekYear();
        calendar58.setMinimalDaysInFirstWeek(2);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) calendar58);
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.fromCalendarFields(calendar58);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime67.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property70 = dateTime67.weekyear();
        org.joda.time.DateTime dateTime72 = property70.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime74 = dateTime72.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.DateTime dateTime76 = dateTime72.minus(readablePeriod75);
        int int77 = dateTime76.getMonthOfYear();
        org.joda.time.DateTime dateTime78 = dateTime76.toDateTimeISO();
        org.joda.time.DateTime.Property property79 = dateTime76.minuteOfHour();
        org.joda.time.DateTime dateTime80 = property79.roundHalfCeilingCopy();
        boolean boolean81 = localTime65.equals((java.lang.Object) dateTime80);
        java.util.Locale locale85 = new java.util.Locale("millisOfSecond", "35", "millisOfSecond");
        java.lang.String str86 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localTime65, locale85);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(locale85);
        java.lang.String str88 = locale85.getDisplayVariant();
        java.lang.String str89 = property18.getAsShortText(locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar58 and calendar87", (calendar58.compareTo(calendar87) == 0) == calendar58.equals(calendar87));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0883");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readablePeriod8);
        int int10 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withEra((int) (short) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime17.era();
        org.joda.time.DateTime dateTime24 = dateTime17.plusSeconds(32772);
        int int25 = dateTime17.getWeekyear();
        org.joda.time.DateTime.Property property26 = dateTime17.minuteOfDay();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        int int32 = dateTime30.getDayOfWeek();
        boolean boolean34 = dateTime30.isBefore((long) 15);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime36.minusDays((int) 'a');
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology42.getZone();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.Chronology chronology56 = chronology42.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology42.dayOfWeek();
        org.joda.time.DateTime dateTime58 = dateTime30.withChronology(chronology42);
        long long59 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfHour();
        org.joda.time.DateTime dateTime68 = dateTime65.minusDays((int) 'a');
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay70 = dateTime69.toYearMonthDay();
        org.joda.time.Chronology chronology71 = yearMonthDay70.getChronology();
        org.joda.time.DurationField durationField72 = durationFieldType63.getField(chronology71);
        org.joda.time.DateTime dateTime73 = dateTime62.toDateTime(chronology71);
        int int74 = dateTime58.compareTo((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean75 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime62 and dateTime73", (dateTime62.compareTo(dateTime73) == 0) == dateTime62.equals(dateTime73));
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0884");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMinutes(2);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        int int11 = dateTime10.getEra();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes(1);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        int int24 = localTime22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        int int28 = localTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        boolean boolean32 = localTime27.isAfter((org.joda.time.ReadablePartial) localTime31);
        int int33 = localTime22.compareTo((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.DateTime dateTime34 = dateTime16.withFields((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime16.plus(readablePeriod35);
        int int37 = dateTime16.getDayOfWeek();
        org.joda.time.DateTime dateTime39 = dateTime16.minus(32770L);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readablePeriod40);
        boolean boolean42 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setTimeInMillis(100L);
        boolean boolean48 = calendar45.isWeekDateSupported();
        calendar45.roll(2, false);
        calendar45.setTimeInMillis(0L);
        java.util.TimeZone timeZone54 = calendar45.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int58 = dateTimeZone56.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance();
        calendar59.setTimeInMillis(100L);
        boolean boolean62 = calendar59.isWeekDateSupported();
        calendar59.roll(2, false);
        calendar59.setTimeInMillis(0L);
        java.util.TimeZone timeZone68 = calendar59.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        long long71 = dateTimeZone56.getMillisKeepLocal(dateTimeZone69, (long) 2);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 8, dateTimeZone56);
        org.joda.time.LocalTime localTime73 = org.joda.time.LocalTime.now(dateTimeZone56);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((long) 10, dateTimeZone56);
        java.lang.String str75 = dateTimeZone56.getID();
        long long77 = dateTimeZone56.nextTransition(10L);
        int int79 = dateTimeZone56.getStandardOffset(259200000L);
        org.joda.time.DateTime dateTime80 = dateTime41.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime82 = dateTime41.plusSeconds(73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime80", (dateTime41.compareTo(dateTime80) == 0) == dateTime41.equals(dateTime80));
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0885");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime3.plusHours((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime3.withMillisOfDay(1);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        int int18 = dateTime17.getEra();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusMinutes(1);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(0);
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 2);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfHour();
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DateTime dateTime30 = dateTime14.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfDay();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DurationField durationField34 = chronology27.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.year();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology40);
        org.joda.time.LocalTime.Property property42 = localTime41.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        int int47 = localTime46.getMillisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 100, chronology49);
        boolean boolean51 = localTime46.isAfter((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology53 = null;
        boolean boolean54 = dateTimeFieldType52.isSupported(chronology53);
        int int55 = localTime46.indexOf(dateTimeFieldType52);
        int int56 = localTime43.indexOf(dateTimeFieldType52);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology61);
        org.joda.time.LocalTime.Property property63 = localTime62.millisOfSecond();
        org.joda.time.LocalTime localTime64 = property63.withMaximumValue();
        org.joda.time.LocalTime localTime65 = property63.getLocalTime();
        org.joda.time.LocalTime.Property property66 = localTime65.millisOfDay();
        org.joda.time.LocalTime localTime68 = property66.addCopy(2);
        org.joda.time.LocalTime localTime69 = localTime43.withFields((org.joda.time.ReadablePartial) localTime68);
        long long71 = chronology27.set((org.joda.time.ReadablePartial) localTime69, (long) 1977);
        org.joda.time.DurationField durationField72 = chronology27.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField72, durationField28, and durationField29", !(durationField72.compareTo(durationField28) == 0) || (Math.signum(durationField72.compareTo(durationField29)) == Math.signum(durationField28.compareTo(durationField29))));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0886");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.halfdayOfDay();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime26", (dateTime18.compareTo(dateTime26) == 0) == dateTime18.equals(dateTime26));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0887");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 2);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology12);
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean20 = localTime18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalTime localTime22 = localTime18.plusMillis(52);
        org.joda.time.LocalTime localTime24 = localTime18.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime27 = localTime24.withPeriodAdded(readablePeriod25, 292278993);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime34 = dateTime29.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.LocalTime localTime35 = dateTime29.toLocalTime();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        calendar36.setTimeInMillis(100L);
        boolean boolean39 = calendar36.isWeekDateSupported();
        calendar36.roll(2, false);
        calendar36.setTimeInMillis(0L);
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.setTimeInMillis(100L);
        boolean boolean53 = calendar50.isWeekDateSupported();
        calendar50.roll(2, false);
        calendar50.setTimeInMillis(0L);
        java.util.TimeZone timeZone59 = calendar50.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        long long62 = dateTimeZone47.getMillisKeepLocal(dateTimeZone60, (long) 2);
        boolean boolean63 = dateTimeZone60.isFixed();
        long long66 = dateTimeZone60.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now(dateTimeZone60);
        org.joda.time.LocalTime localTime68 = localTime35.withFields((org.joda.time.ReadablePartial) localTime67);
        org.joda.time.LocalTime localTime69 = localTime27.withFields((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean71 = localTime69.isSupported(dateTimeFieldType70);
        int[] intArray73 = chronology12.get((org.joda.time.ReadablePartial) localTime69, 345600000L);
        org.joda.time.DateTimeField dateTimeField74 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField75 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField76 = chronology12.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField76, durationField13, and durationField15", !(durationField76.compareTo(durationField13) == 0) || (Math.signum(durationField76.compareTo(durationField15)) == Math.signum(durationField13.compareTo(durationField15))));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0888");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        int int15 = dateTime12.getEra();
        int int16 = dateTime12.getMinuteOfDay();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        calendar17.setTimeInMillis(100L);
        boolean boolean20 = calendar17.isWeekDateSupported();
        calendar17.roll(2, false);
        calendar17.setTimeInMillis(0L);
        java.util.TimeZone timeZone26 = calendar17.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset((long) 70);
        java.lang.String str31 = dateTimeZone27.getShortName(1L);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        int int37 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime36.hourOfDay();
        long long39 = property38.remainder();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 100, chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean45 = localTime43.isSupported(dateTimeFieldType44);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromCalendarFields(calendar46);
        int int48 = localTime43.compareTo((org.joda.time.ReadablePartial) localTime47);
        org.joda.time.DateTime dateTime49 = localTime43.toDateTimeToday();
        org.joda.time.LocalTime localTime51 = localTime43.withMillisOfDay(9);
        org.joda.time.LocalTime localTime53 = localTime51.plusMinutes(86340000);
        org.joda.time.LocalTime.Property property54 = localTime53.millisOfSecond();
        java.util.Locale locale55 = null;
        int int56 = property54.getMaximumShortTextLength(locale55);
        org.joda.time.LocalTime localTime57 = property54.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime62 = dateTime60.minus(10L);
        org.joda.time.DateTime.Property property63 = dateTime60.minuteOfDay();
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale65.getISO3Country();
        java.lang.String str67 = locale65.toLanguageTag();
        java.util.Locale locale68 = java.util.Locale.ITALY;
        java.lang.String str69 = locale65.getDisplayCountry(locale68);
        java.lang.String str70 = locale64.getDisplayVariant(locale65);
        java.lang.String str71 = locale64.getVariant();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str73 = locale64.getDisplayCountry(locale72);
        java.lang.String str74 = property63.getAsText(locale64);
        java.lang.String str75 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localTime57, 13, locale64);
        org.joda.time.LocalTime localTime77 = org.joda.time.LocalTime.fromMillisOfDay(25198739224743421L);
        org.joda.time.Chronology chronology78 = localTime77.getChronology();
        boolean boolean79 = localTime57.equals((java.lang.Object) chronology78);
        org.joda.time.DurationField durationField80 = chronology78.millis();
        org.joda.time.DateTime dateTime81 = dateTime12.withChronology(chronology78);
        org.joda.time.DateTime dateTime83 = dateTime12.minusMonths(36000);
        int int84 = dateTime83.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime81", (dateTime8.compareTo(dateTime81) == 0) == dateTime8.equals(dateTime81));
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0889");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int19 = dateTimeZone17.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime14.withZone(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime14.plus(readableDuration21);
        int int23 = dateTime22.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime20", (dateTime22.compareTo(dateTime20) == 0) == dateTime22.equals(dateTime20));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0890");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(3);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.minus((-251999990L));
        boolean boolean24 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getWeekOfWeekyear();
        int int26 = dateTime23.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.minus(readableDuration27);
        boolean boolean30 = dateTime28.isBefore((long) (-292275054));
        org.joda.time.DateTime dateTime32 = dateTime28.plusDays(28);
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime35 = dateTime32.minusMillis(271);
        int int36 = dateTime35.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant33", (dateTime32.compareTo(instant33) == 0) == dateTime32.equals(instant33));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0891");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTimeZone7.getStandardOffset((long) 60000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0892");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        int int16 = dateTime14.getMinuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property18 = dateTime14.yearOfCentury();
        org.joda.time.Chronology chronology19 = dateTime14.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant15", (dateTime14.compareTo(instant15) == 0) == dateTime14.equals(instant15));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0893");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale1.getDisplayLanguage(locale3);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 0);
        int int14 = dateTime13.getEra();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.minusMinutes(1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        boolean boolean20 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfDay();
        int int22 = dateTime19.getEra();
        int int23 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTime.Property property24 = dateTime19.hourOfDay();
        org.joda.time.DateTime.Property property25 = dateTime19.year();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        int int28 = dateTime27.getEra();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime31 = dateTime27.minusMinutes(1);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.DateTime dateTime33 = property32.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight34 = dateTime33.toDateMidnight();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology39);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = dateTimeField42.getAsText(32770, locale44);
        int int49 = dateTimeField42.getMaximumValue((long) 0);
        int int50 = dateTime33.get(dateTimeField42);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = dateTimeField42.getAsText(1967, locale52);
        int int54 = property25.getMaximumShortTextLength(locale52);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        calendar55.setTimeInMillis(100L);
        boolean boolean58 = calendar55.isWeekDateSupported();
        calendar55.roll(2, false);
        calendar55.setTimeInMillis(0L);
        java.util.TimeZone timeZone64 = calendar55.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        java.util.Locale locale67 = java.util.Locale.US;
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone66, locale67);
        java.lang.String str69 = locale67.getScript();
        java.lang.String str70 = locale52.getDisplayName(locale67);
        java.lang.String str71 = locale3.getDisplayName(locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar68", (calendar6.compareTo(calendar68) == 0) == calendar6.equals(calendar68));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0894");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology78);
        org.joda.time.LocalTime.Property property80 = localTime79.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField81 = property80.getField();
        java.util.Locale locale83 = java.util.Locale.KOREA;
        java.util.Locale locale84 = java.util.Locale.FRENCH;
        java.lang.String str85 = locale83.getDisplayName(locale84);
        java.lang.String str86 = dateTimeField81.getAsText(32770, locale83);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone71, locale83);
        java.util.Calendar.Builder builder88 = builder0.setTimeZone(timeZone71);
        java.util.Locale locale92 = new java.util.Locale("36000097", "millisOfSecond", "US");
        java.util.Calendar.Builder builder93 = builder88.setLocale(locale92);
        java.util.Calendar.Builder builder95 = builder93.setLenient(false);
        java.util.Calendar calendar96 = builder95.build();
        java.util.Calendar calendar97 = builder95.build();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar96", (calendar51.compareTo(calendar96) == 0) == calendar51.equals(calendar96));
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0895");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        int int3 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        int int9 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(5);
        boolean boolean17 = dateTimeFormatter14.isPrinter();
        boolean boolean18 = dateTime11.equals((java.lang.Object) dateTimeFormatter14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 491);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.Chronology chronology32 = yearMonthDay31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology32.getZone();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.Chronology chronology46 = chronology32.withZone(dateTimeZone45);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 32770, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter24.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime52.minusDays((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        org.joda.time.Chronology chronology58 = yearMonthDay57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology58.getZone();
        org.joda.time.DurationField durationField62 = chronology58.centuries();
        long long66 = chronology58.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter50.withChronology(chronology58);
        org.joda.time.DateTime dateTime69 = dateTime1.toDateTime(chronology58);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property72 = dateTime71.minuteOfHour();
        org.joda.time.DateTime dateTime74 = dateTime71.minusDays((int) 'a');
        org.joda.time.DateTime dateTime75 = dateTime71.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay76 = dateTime75.toYearMonthDay();
        org.joda.time.Chronology chronology77 = yearMonthDay76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = chronology77.getZone();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance();
        calendar80.setTimeInMillis(100L);
        boolean boolean83 = calendar80.isWeekDateSupported();
        calendar80.roll(2, false);
        calendar80.setTimeInMillis(0L);
        java.util.TimeZone timeZone89 = calendar80.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forTimeZone(timeZone89);
        org.joda.time.Chronology chronology91 = chronology77.withZone(dateTimeZone90);
        org.joda.time.DateTimeField dateTimeField92 = chronology91.era();
        org.joda.time.DateTime dateTime93 = dateTime69.toDateTime(chronology91);
        org.joda.time.LocalTime localTime94 = org.joda.time.LocalTime.now(chronology91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime69", (dateTime1.compareTo(dateTime69) == 0) == dateTime1.equals(dateTime69));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0896");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime8.withPeriodAdded(readablePeriod9, 292278993);
        org.joda.time.DateTime dateTime12 = localTime8.toDateTimeToday();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        int int17 = localTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 100, chronology19);
        boolean boolean21 = localTime16.isAfter((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        int int25 = localTime16.indexOf(dateTimeFieldType22);
        org.joda.time.Chronology chronology26 = localTime16.getChronology();
        long long30 = chronology26.add((long) 19, (long) 97, 3);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0, chronology26);
        boolean boolean32 = localTime8.equals((java.lang.Object) chronology26);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int48 = dateTimeZone46.getOffsetFromLocal((long) 0);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 999, dateTimeZone46);
        java.lang.String str50 = dateTimeZone46.getID();
        long long53 = dateTimeZone46.convertLocalToUTC((long) 14, false);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(86399999L, dateTimeZone46);
        boolean boolean55 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime56 = localTime8.toDateTimeToday(dateTimeZone46);
        int int58 = dateTimeZone46.getStandardOffset(227209483901580000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime56", (dateTime12.compareTo(dateTime56) == 0) == dateTime12.equals(dateTime56));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0897");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.withDurationAdded(readableDuration5, 139680);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property12 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) (short) 0);
        int int15 = property12.get();
        org.joda.time.DateTime dateTime16 = property12.roundCeilingCopy();
        int int17 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime16);
        java.util.Date date18 = dateTime16.toDate();
        boolean boolean19 = dateTime16.isAfterNow();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.setTimeInMillis(100L);
        boolean boolean23 = calendar20.isWeekDateSupported();
        calendar20.roll(2, false);
        calendar20.setTimeInMillis(0L);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset((long) 70);
        java.lang.String str34 = dateTimeZone30.getShortName(1L);
        long long36 = dateTimeZone30.convertUTCToLocal((long) 1970);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone30);
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str41 = locale39.getExtension('x');
        java.lang.String str42 = dateTimeZone30.getShortName((long) 69, locale39);
        org.joda.time.DateTime dateTime43 = dateTime16.withZoneRetainFields(dateTimeZone30);
        int int45 = dateTimeZone30.getOffset(4L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime43", (dateTime16.compareTo(dateTime43) == 0) == dateTime16.equals(dateTime43));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0898");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.LocalDateTime localDateTime16 = dateTime12.toLocalDateTime();
        org.joda.time.DateTime.Property property17 = dateTime12.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setTimeInMillis(100L);
        boolean boolean27 = calendar24.isWeekDateSupported();
        calendar24.roll(2, false);
        calendar24.setTimeInMillis(0L);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset((long) 70);
        java.lang.String str38 = dateTimeZone34.getShortName(1L);
        long long42 = dateTimeZone34.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime43 = dateTime22.withZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime22.toMutableDateTime();
        int int45 = property17.getDifference((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property46 = dateTime22.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime43", (dateTime22.compareTo(dateTime43) == 0) == dateTime22.equals(dateTime43));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0899");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime2.withMillisOfDay(9);
        org.joda.time.LocalTime.Property property11 = localTime2.secondOfMinute();
        org.joda.time.LocalTime.Property property12 = localTime2.hourOfDay();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        java.lang.String str14 = calendar13.getCalendarType();
        java.time.Instant instant15 = calendar13.toInstant();
        int int16 = calendar13.getWeekYear();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar13);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime dateTime20 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded((-86399956L), 30000100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime21", (dateTime8.compareTo(dateTime21) == 0) == dateTime8.equals(dateTime21));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0900");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType10.isSupported(chronology12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        java.lang.String str15 = calendar14.getCalendarType();
        java.time.Instant instant16 = calendar14.toInstant();
        int int17 = calendar14.getWeekYear();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType10.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.DurationField durationField25 = chronology19.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0901");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 100);
        int int14 = dateTimeZone10.getOffset((long) 97);
        int int16 = dateTimeZone10.getOffsetFromLocal(0L);
        long long18 = dateTimeZone10.previousTransition((long) 35178345);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        int int26 = dateTime25.getEra();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.DateTime dateTime31 = property30.roundHalfCeilingCopy();
        boolean boolean32 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime31.millisOfDay();
        int int34 = dateTime31.getEra();
        int int35 = dateTime31.getMinuteOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime37.minusDays((int) 'a');
        org.joda.time.DateTime dateTime41 = dateTime37.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.joda.time.Chronology chronology43 = yearMonthDay42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology43.getZone();
        org.joda.time.DurationField durationField46 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.centuryOfEra();
        org.joda.time.DateTime dateTime49 = dateTime31.withChronology(chronology43);
        org.joda.time.DateTime dateTime51 = dateTime49.plusDays(73);
        int int52 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime49);
        long long54 = dateTimeZone10.previousTransition((-251920800L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime49", (dateTime1.compareTo(dateTime49) == 0) == dateTime1.equals(dateTime49));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0902");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withDurationAdded(readableDuration6, 32770);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 100, chronology10);
        int int12 = localTime11.getMillisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 100, chronology14);
        boolean boolean16 = localTime11.isAfter((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = dateTimeFieldType17.isSupported(chronology18);
        int int20 = localTime11.indexOf(dateTimeFieldType17);
        org.joda.time.Chronology chronology21 = localTime11.getChronology();
        long long25 = chronology21.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime3.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime27", (dateTime3.compareTo(mutableDateTime27) == 0) == dateTime3.equals(mutableDateTime27));
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0903");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        int int19 = dateTime18.getEra();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMinutes(1);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths(0);
        int int25 = dateTime22.getYearOfEra();
        boolean boolean26 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime22);
        int int27 = dateTime22.getEra();
        org.joda.time.DateTime dateTime29 = dateTime22.minus((long) 9);
        int int30 = dateTime29.getDayOfWeek();
        boolean boolean31 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = dateTime3.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.centuries();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField33 and durationField35", Math.signum(durationField33.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField33)));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0904");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime3.toGregorianCalendar();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.Chronology chronology21 = yearMonthDay20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter13.withChronology(chronology21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        calendar25.setTimeInMillis(100L);
        boolean boolean28 = calendar25.isWeekDateSupported();
        calendar25.roll(2, false);
        calendar25.setTimeInMillis(0L);
        java.util.TimeZone timeZone34 = calendar25.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int38 = dateTimeZone36.getStandardOffset((-1L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter24.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime41.minusDays((int) 'a');
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Chronology chronology47 = yearMonthDay46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology47.getZone();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        calendar50.setTimeInMillis(100L);
        boolean boolean53 = calendar50.isWeekDateSupported();
        calendar50.roll(2, false);
        calendar50.setTimeInMillis(0L);
        java.util.TimeZone timeZone59 = calendar50.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.Chronology chronology61 = chronology47.withZone(dateTimeZone60);
        long long64 = dateTimeZone60.convertLocalToUTC((long) 32770, false);
        boolean boolean66 = dateTimeZone60.isStandardOffset((long) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter24.withZone(dateTimeZone60);
        java.util.TimeZone timeZone68 = dateTimeZone60.toTimeZone();
        gregorianCalendar6.setTimeZone(timeZone68);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance();
        java.lang.String str71 = calendar70.getCalendarType();
        calendar70.roll((int) (short) 0, 4);
        calendar70.setFirstDayOfWeek((-1));
        boolean boolean77 = calendar70.isWeekDateSupported();
        int int79 = calendar70.getGreatestMinimum(6);
        calendar70.setMinimalDaysInFirstWeek(30);
        java.util.TimeZone timeZone82 = calendar70.getTimeZone();
        gregorianCalendar6.setTimeZone(timeZone82);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone82);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar70 and calendar84", (calendar70.compareTo(calendar84) == 0) == calendar70.equals(calendar84));
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0905");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getCountry();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        calendar4.add(14, 52);
        calendar4.set(5, (int) 'a', 14);
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = dateTimeField20.getAsText(32770, locale22);
        java.lang.String str27 = dateTimeField20.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 100, chronology29);
        int int31 = localTime30.getMillisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        boolean boolean35 = localTime30.isAfter((org.joda.time.ReadablePartial) localTime34);
        int int36 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localTime30);
        java.lang.String str37 = dateTimeField20.getName();
        java.util.Date date43 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromDateFields(date43);
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.lang.String str47 = locale46.getISO3Country();
        java.lang.String str48 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localTime44, (int) 'a', locale46);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale46.getDisplayLanguage(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale53.toLanguageTag();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale53.getDisplayCountry(locale56);
        java.lang.String str58 = locale52.getDisplayVariant(locale53);
        java.lang.String str59 = locale51.getDisplayScript(locale53);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale53);
        java.lang.String str61 = locale49.getDisplayName(locale53);
        java.util.Calendar.Builder builder62 = builder12.setLocale(locale53);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance();
        calendar63.setTimeInMillis(100L);
        boolean boolean66 = calendar63.isWeekDateSupported();
        calendar63.roll(2, false);
        calendar63.setTimeInMillis(0L);
        java.util.TimeZone timeZone72 = calendar63.getTimeZone();
        java.util.Calendar.Builder builder73 = builder12.setTimeZone(timeZone72);
        java.util.Calendar calendar74 = builder73.build();
        java.time.Instant instant75 = calendar74.toInstant();
        org.joda.time.format.DateTimePrinter dateTimePrinter76 = null;
        org.joda.time.format.DateTimeParser dateTimeParser77 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter76, dateTimeParser77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter78.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter80.withPivotYear((int) (byte) 0);
        boolean boolean83 = calendar74.after((java.lang.Object) dateTimeFormatter82);
        int int84 = calendar74.getFirstDayOfWeek();
        int int85 = calendar74.getFirstDayOfWeek();
        int int86 = calendar74.getMinimalDaysInFirstWeek();
        int int87 = calendar74.getWeeksInWeekYear();
        java.util.Date date88 = calendar74.getTime();
        date88.setYear(311);
        calendar4.setTime(date88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar63 and calendar74", (calendar63.compareTo(calendar74) == 0) == calendar63.equals(calendar74));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0906");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        boolean boolean66 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int67 = dateTimeFormatter2.getPivotYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime62", (dateTime21.compareTo(dateTime62) == 0) == dateTime21.equals(dateTime62));
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0907");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2L);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime21 = property19.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(6);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime28 = dateTime1.withMillis((long) 99);
        org.joda.time.DateTime dateTime30 = dateTime1.plusWeeks(3);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.Chronology chronology39 = yearMonthDay38.getChronology();
        org.joda.time.DurationField durationField40 = durationFieldType31.getField(chronology39);
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.minuteOfHour();
        org.joda.time.DurationField durationField43 = chronology39.halfdays();
        org.joda.time.DurationField durationField44 = chronology39.millis();
        org.joda.time.DurationField durationField45 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.dayOfWeek();
        org.joda.time.DateTime dateTime47 = dateTime1.withChronology(chronology39);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours(6);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime47", (dateTime1.compareTo(dateTime47) == 0) == dateTime1.equals(dateTime47));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0908");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.minusDays((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime3.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.Chronology chronology9 = yearMonthDay8.getChronology();
        org.joda.time.DurationField durationField10 = durationFieldType1.getField(chronology9);
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.yearOfEra();
        org.joda.time.DurationField durationField17 = chronology11.weekyears();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField17", (durationField10.compareTo(durationField17) == 0) == durationField10.equals(durationField17));
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0909");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        int int10 = dateTime9.getEra();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes(1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        int int18 = dateTime15.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime15.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime21 = yearMonthDay6.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        java.util.Locale locale23 = new java.util.Locale("hours");
        java.lang.String str24 = locale23.getLanguage();
        java.util.Calendar calendar25 = dateTime20.toCalendar(locale23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime20.plus(readablePeriod26);
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withPivotYear(5);
        boolean boolean33 = dateTimeFormatter30.isPrinter();
        org.joda.time.Chronology chronology34 = dateTimeFormatter30.getChronology();
        boolean boolean35 = dateTimeFormatter30.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter30.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeFormatter36.getZone();
        org.joda.time.DateTime dateTime38 = dateTime27.toDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime38", (dateTime20.compareTo(dateTime38) == 0) == dateTime20.equals(dateTime38));
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0910");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(0);
        int int28 = dateTime25.getYearOfCentury();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime25.toTimeOfDay();
        java.lang.Object obj30 = null;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        java.lang.String str32 = calendar31.getCalendarType();
        java.time.Instant instant33 = calendar31.toInstant();
        int int34 = calendar31.getWeekYear();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromCalendarFields(calendar31);
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj30, chronology36);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime25.toMutableDateTime(chronology36);
        org.joda.time.DateTime dateTime41 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime41.minus((long) 1980);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and mutableDateTime40", (dateTime41.compareTo(mutableDateTime40) == 0) == dateTime41.equals(mutableDateTime40));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0911");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar.Builder builder63 = builder61.setInstant(1980L);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        calendar64.setTimeInMillis(100L);
        boolean boolean67 = calendar64.isWeekDateSupported();
        calendar64.roll(2, false);
        calendar64.setTimeInMillis(0L);
        java.util.TimeZone timeZone73 = calendar64.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        java.util.TimeZone timeZone75 = dateTimeZone74.toTimeZone();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone75);
        java.util.Calendar.Builder builder77 = builder63.setTimeZone(timeZone75);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology82);
        org.joda.time.LocalTime.Property property84 = localTime83.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField85 = property84.getField();
        java.lang.String str87 = dateTimeField85.getAsShortText((long) 121);
        java.util.Locale locale89 = java.util.Locale.ROOT;
        java.lang.String str90 = dateTimeField85.getAsShortText((long) (byte) 100, locale89);
        java.util.Calendar.Builder builder91 = builder63.setLocale(locale89);
        java.util.Calendar.Builder builder95 = builder91.setWeekDate(35135652, (-57575313), 79215);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar76", (calendar48.compareTo(calendar76) == 0) == calendar48.equals(calendar76));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0912");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronology();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter2.getParser();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        calendar12.setTimeInMillis(100L);
        boolean boolean15 = calendar12.isWeekDateSupported();
        calendar12.roll(2, false);
        calendar12.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = calendar12.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int25 = dateTimeZone23.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZone(dateTimeZone27);
        boolean boolean30 = dateTimeFormatter29.isOffsetParsed();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        int int34 = localTime33.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        boolean boolean38 = localTime33.isAfter((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType39.isSupported(chronology40);
        int int42 = localTime33.indexOf(dateTimeFieldType39);
        org.joda.time.Chronology chronology43 = localTime33.getChronology();
        long long47 = chronology43.add((long) 19, (long) 97, 3);
        org.joda.time.DateTimeField dateTimeField48 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology43.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter29.withChronology(chronology43);
        org.joda.time.DurationField durationField52 = chronology43.weeks();
        org.joda.time.DateTimeField dateTimeField53 = chronology43.yearOfCentury();
        org.joda.time.DurationField durationField54 = chronology43.eras();
        org.joda.time.DurationField durationField55 = chronology43.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField52 and durationField54", Math.signum(durationField52.compareTo(durationField54)) == -Math.signum(durationField54.compareTo(durationField52)));
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0913");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 1970);
        long long7 = dateTimeZone1.convertLocalToUTC(10L, false, (long) 3);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 121, dateTimeZone20);
        int int37 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime36);
        java.util.Date date38 = dateTime36.toDate();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        int int42 = localTime41.getMillisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 100, chronology44);
        boolean boolean46 = localTime41.isAfter((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology48 = null;
        boolean boolean49 = dateTimeFieldType47.isSupported(chronology48);
        int int50 = localTime41.indexOf(dateTimeFieldType47);
        org.joda.time.DateTime.Property property51 = dateTime36.property(dateTimeFieldType47);
        org.joda.time.DateTime dateTime53 = dateTime36.withSecondOfMinute((int) (short) 10);
        org.joda.time.DateTime dateTime54 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime56.minusDays((int) 'a');
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime();
        org.joda.time.DateTime.Property property61 = dateTime56.year();
        java.lang.String str62 = property61.getName();
        int int63 = property61.getMinimumValue();
        org.joda.time.DateTime dateTime64 = property61.getDateTime();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.plus(readableDuration65);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime66.getZone();
        org.joda.time.DateTime dateTime68 = dateTime53.withZoneRetainFields(dateTimeZone67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and dateTime56", (dateTime54.compareTo(dateTime56) == 0) == dateTime54.equals(dateTime56));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0914");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        calendar1.setTimeInMillis(100L);
        boolean boolean4 = calendar1.isWeekDateSupported();
        calendar1.roll(2, false);
        calendar1.setTimeInMillis(0L);
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        calendar15.setTimeInMillis(100L);
        boolean boolean18 = calendar15.isWeekDateSupported();
        calendar15.roll(2, false);
        calendar15.setTimeInMillis(0L);
        java.util.TimeZone timeZone24 = calendar15.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, (long) 2);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 8, dateTimeZone12);
        java.lang.String str29 = dateTimeZone12.getID();
        java.lang.String str31 = dateTimeZone12.getShortName((long) 19);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.setTimeInMillis(100L);
        boolean boolean41 = calendar38.isWeekDateSupported();
        calendar38.roll(2, false);
        calendar38.setTimeInMillis(0L);
        java.util.TimeZone timeZone47 = calendar38.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset((long) 70);
        java.lang.String str52 = dateTimeZone48.getShortName(1L);
        long long56 = dateTimeZone48.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime57 = dateTime36.withZoneRetainFields(dateTimeZone48);
        boolean boolean58 = dateTimeZone12.equals((java.lang.Object) dateTimeZone48);
        java.util.TimeZone timeZone59 = dateTimeZone12.toTimeZone();
        boolean boolean61 = dateTimeZone12.isStandardOffset((long) (-36002075));
        int int63 = dateTimeZone12.getOffset(4665601320L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime57", (dateTime36.compareTo(dateTime57) == 0) == dateTime36.equals(dateTime57));
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0915");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime15 = dateTime12.withField(dateTimeFieldType13, 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((int) 'a');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        boolean boolean20 = dateTime19.isAfterNow();
        java.util.Date date27 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        date27.setYear(0);
        int int30 = date27.getSeconds();
        java.util.Date date36 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        date36.setMonth((int) ' ');
        java.util.Date date44 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date44);
        boolean boolean46 = date36.before(date44);
        int int47 = date44.getTimezoneOffset();
        java.util.Date date54 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        boolean boolean55 = date44.after(date54);
        date54.setMonth(5);
        date54.setDate(57600000);
        java.time.Instant instant60 = date54.toInstant();
        java.util.Date date61 = java.util.Date.from(instant60);
        long long62 = date61.getTime();
        boolean boolean63 = date27.after(date61);
        boolean boolean64 = dateTime19.equals((java.lang.Object) date27);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime69 = dateTime68.toDateTimeISO();
        int int70 = dateTime68.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime68.plus(readableDuration71);
        org.joda.time.DateTime dateTime74 = dateTime68.minusMillis(15);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str78 = dateTimeZone76.getNameKey((long) 1970);
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime74.toMutableDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime80 = dateTime19.toDateTime(dateTimeZone76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime74 and mutableDateTime79", (dateTime74.compareTo(mutableDateTime79) == 0) == dateTime74.equals(mutableDateTime79));
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0916");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.era();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str20 = dateTimeZone18.getName((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.lang.String str23 = dateTimeZone18.getNameKey((-58318531199879L));
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks(0);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMinutes(1);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale36.getDisplayCountry(locale39);
        java.lang.String str41 = locale35.getDisplayVariant(locale36);
        java.lang.String str42 = locale34.getDisplayScript(locale36);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale36);
        java.lang.String str44 = dateTime28.toString("-1", locale36);
        org.joda.time.DateTime dateTime46 = dateTime28.plus((long) 139680);
        int int47 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone48);
        long long52 = dateTimeZone18.getMillisKeepLocal(dateTimeZone48, 121L);
        org.joda.time.Chronology chronology53 = chronology8.withZone(dateTimeZone48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime25", (dateTime2.compareTo(dateTime25) == 0) == dateTime2.equals(dateTime25));
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0917");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime21.withMillis((-3108336231231000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime24", (dateTime21.compareTo(dateTime24) == 0) == dateTime21.equals(dateTime24));
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0918");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 2);
        int int10 = dateTime7.getHourOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Chronology chronology18 = yearMonthDay17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfYear();
        long long25 = chronology18.add(100L, (long) 53, 0);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField27 = chronology18.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime26", (dateTime5.compareTo(dateTime26) == 0) == dateTime5.equals(dateTime26));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0919");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(14);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localTime11.getFieldTypes();
        org.joda.time.Chronology chronology13 = localTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime5.withChronology(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(53);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusMinutes(1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.DateTime dateTime25 = property24.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        int int33 = localTime31.size();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 100, chronology35);
        int int37 = localTime36.getMillisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 100, chronology39);
        boolean boolean41 = localTime36.isAfter((org.joda.time.ReadablePartial) localTime40);
        int int42 = localTime31.compareTo((org.joda.time.ReadablePartial) localTime40);
        org.joda.time.DateTime dateTime43 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.Chronology chronology44 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.millisOfDay();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((java.lang.Object) 36000097L, chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.secondOfDay();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(chronology44);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime16.toMutableDateTime(chronology44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime14", (dateTime5.compareTo(dateTime14) == 0) == dateTime5.equals(dateTime14));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0920");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays(0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = dateTime2.withZone(dateTimeZone6);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = dateTimeField16.getAsText(32770, locale18);
        org.joda.time.DurationField durationField22 = dateTimeField16.getLeapDurationField();
        int int23 = dateTime2.get(dateTimeField16);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(5);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        calendar30.setTimeInMillis(100L);
        boolean boolean33 = calendar30.isWeekDateSupported();
        calendar30.roll(2, false);
        calendar30.setTimeInMillis(0L);
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int43 = dateTimeZone41.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        calendar44.setTimeInMillis(100L);
        boolean boolean47 = calendar44.isWeekDateSupported();
        calendar44.roll(2, false);
        calendar44.setTimeInMillis(0L);
        java.util.TimeZone timeZone53 = calendar44.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        long long56 = dateTimeZone41.getMillisKeepLocal(dateTimeZone54, (long) 2);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 8, dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter26.withZone(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime2.toMutableDateTime(dateTimeZone41);
        long long62 = dateTimeZone41.convertLocalToUTC((-36000094L), true);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 35158814, dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime59", (dateTime2.compareTo(mutableDateTime59) == 0) == dateTime2.equals(mutableDateTime59));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0921");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset((long) 70);
        java.lang.String str20 = dateTimeZone16.getShortName(1L);
        long long24 = dateTimeZone16.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime25 = dateTime4.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMillis(11);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays((int) 'a');
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.Chronology chronology37 = yearMonthDay36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.centuryOfEra();
        org.joda.time.DateTime dateTime42 = dateTime27.toDateTime(chronology37);
        org.joda.time.DateTime.Property property43 = dateTime27.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime42", (dateTime27.compareTo(dateTime42) == 0) == dateTime27.equals(dateTime42));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0922");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getNameKey((long) (byte) 100);
        boolean boolean4 = dateTimeZone0.isStandardOffset((long) (short) 10);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime10 = dateTime8.toLocalDateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        int int13 = dateTime12.getEra();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes(1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        int int20 = dateTime19.getEra();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime19.minusMinutes(1);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(0);
        int int26 = dateTime23.getYearOfEra();
        boolean boolean27 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime28 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        int int29 = dateTime16.getYearOfCentury();
        int int30 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant31 = dateTime16.toInstant();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMonths((int) ' ');
        boolean boolean43 = dateTime36.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property44 = dateTime36.dayOfMonth();
        int int45 = dateTime36.getDayOfYear();
        org.joda.time.DateTime.Property property46 = dateTime36.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime36.getZone();
        long long50 = dateTimeZone47.convertLocalToUTC((-86399947L), false);
        boolean boolean51 = dateTimeZone47.isFixed();
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        int int54 = dateTimeZone47.getOffsetFromLocal((long) 82800);
        int int56 = dateTimeZone47.getStandardOffset(662696013335640951L);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) dateTime16, dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant31", (dateTime23.compareTo(instant31) == 0) == dateTime23.equals(instant31));
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0923");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis(2022);
        org.joda.time.DateTime dateTime17 = dateTime13.withDayOfYear(41);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(35409439);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime13", (dateTime3.compareTo(dateTime13) == 0) == dateTime3.equals(dateTime13));
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0924");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(3);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime10 = dateTime7.minus((-251999990L));
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology26);
        boolean boolean29 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime31 = dateTime17.plusYears(1980);
        org.joda.time.LocalDateTime localDateTime32 = dateTime31.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant18", (dateTime17.compareTo(instant18) == 0) == dateTime17.equals(instant18));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0925");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.setMinimalDaysInFirstWeek((int) (short) -1);
        int int5 = calendar0.getActualMinimum((int) (short) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology10);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = dateTimeField13.getAsText(32770, locale15);
        java.lang.String str20 = dateTimeField13.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 100, chronology22);
        int int24 = localTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        boolean boolean28 = localTime23.isAfter((org.joda.time.ReadablePartial) localTime27);
        int int29 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromCalendarFields(calendar30);
        int int32 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime31);
        java.lang.String str33 = localTime31.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str38 = dateTimeZone36.getNameKey((long) 1970);
        long long42 = dateTimeZone36.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 52, dateTimeZone36);
        java.util.TimeZone timeZone44 = dateTimeZone36.toTimeZone();
        boolean boolean45 = localTime31.equals((java.lang.Object) timeZone44);
        calendar0.setTimeZone(timeZone44);
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property52 = dateTime49.weekyear();
        org.joda.time.DateTime dateTime54 = property52.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime55 = property52.roundCeilingCopy();
        long long56 = property52.remainder();
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572560844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=40,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category60 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale61 = java.util.Locale.getDefault(category60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale61);
        java.lang.String str63 = locale59.getDisplayLanguage(locale61);
        org.joda.time.DateTime dateTime64 = property52.setCopy("2239", locale61);
        java.lang.String str65 = property52.getAsShortText();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getDisplayName();
        int int68 = property52.getMaximumShortTextLength(locale66);
        java.util.Locale.setDefault(category47, locale66);
        java.lang.String str70 = locale66.getISO3Language();
        java.util.Locale.setDefault(locale66);
        java.lang.String str72 = locale66.getDisplayVariant();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone44, locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar30", (calendar0.compareTo(calendar30) == 0) == calendar0.equals(calendar30));
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0926");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(dateTimeZone13);
        java.lang.String str32 = dateTimeZone13.getName((long) 2022);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillisOfSecond(600);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.minus(readablePeriod36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.DateTime dateTime42 = dateTime33.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((-36000094L), dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime42", (dateTime33.compareTo(dateTime42) == 0) == dateTime33.equals(dateTime42));
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0927");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfWeek();
        org.joda.time.DateTime dateTime7 = dateTime1.plus((-49881509L));
        org.joda.time.DateTime dateTime10 = dateTime1.withDurationAdded((long) 6, 100);
        org.joda.time.DateTime dateTime12 = dateTime1.plusMillis(1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime14.year();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        calendar27.setTimeInMillis(100L);
        boolean boolean30 = calendar27.isWeekDateSupported();
        calendar27.roll(2, false);
        calendar27.setTimeInMillis(0L);
        java.util.TimeZone timeZone36 = calendar27.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int40 = dateTimeZone38.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        long long53 = dateTimeZone38.getMillisKeepLocal(dateTimeZone51, (long) 2);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone38);
        org.joda.time.DateTime dateTime55 = dateTime14.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime56 = dateTime1.toDateTime(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime55", (dateTime1.compareTo(dateTime55) == 0) == dateTime1.equals(dateTime55));
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0928");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        int int3 = dateTime1.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, 0);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTime(dateTimeZone6);
        int int9 = dateTimeZone6.getOffsetFromLocal((long) (byte) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime7", (dateTime1.compareTo(dateTime7) == 0) == dateTime1.equals(dateTime7));
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0929");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        calendar9.setTimeInMillis(100L);
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.roll(2, false);
        calendar9.setTimeInMillis(0L);
        java.util.TimeZone timeZone18 = calendar9.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        calendar23.setTimeInMillis(100L);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.roll(2, false);
        calendar23.setTimeInMillis(0L);
        java.util.TimeZone timeZone32 = calendar23.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        long long35 = dateTimeZone20.getMillisKeepLocal(dateTimeZone33, (long) 2);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 8, dateTimeZone20);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 10, dateTimeZone20);
        org.joda.time.DateTime dateTime39 = dateTime6.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime41 = dateTime39.withHourOfDay(0);
        boolean boolean43 = dateTime41.isEqual((-251999891L));
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.toDateTime(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime41", (dateTime1.compareTo(dateTime41) == 0) == dateTime1.equals(dateTime41));
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0930");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField14 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.era();
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField17, and durationField14", !(durationField14.compareTo(durationField17) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField17.compareTo(durationField14))));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0931");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.lang.String str1 = calendar0.getCalendarType();
        java.time.Instant instant2 = calendar0.toInstant();
        int int3 = calendar0.getWeekYear();
        calendar0.setFirstDayOfWeek((int) '#');
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.roll((int) (short) 10, (int) (byte) 10);
        calendar6.setLenient(true);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        calendar0.setTime(date13);
        int int15 = date13.getHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar6", (calendar0.compareTo(calendar6) == 0) == calendar0.equals(calendar6));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0932");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.yearOfEra();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        java.lang.String str15 = calendar14.getCalendarType();
        calendar14.roll((int) (short) 0, 4);
        calendar14.setFirstDayOfWeek((-1));
        boolean boolean21 = calendar14.isWeekDateSupported();
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Map<java.lang.String, java.lang.Integer> strMap26 = calendar14.getDisplayNames((int) (short) 1, 0, locale25);
        java.lang.String str27 = dateTimeField12.getAsText(208123143258850000L, locale25);
        int int29 = dateTimeField12.get(345599995L);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        calendar31.setTimeInMillis(100L);
        boolean boolean34 = calendar31.isWeekDateSupported();
        calendar31.roll(2, false);
        calendar31.setTimeInMillis(0L);
        java.util.TimeZone timeZone40 = calendar31.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone45 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder47.setExtension('u', "deu");
        java.util.Locale.Builder builder52 = builder50.setRegion("");
        java.util.Locale.Builder builder53 = builder52.clearExtensions();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property56 = dateTime55.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime55.minusDays((int) 'a');
        org.joda.time.DateTime dateTime59 = dateTime55.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay60 = dateTime59.toYearMonthDay();
        org.joda.time.Chronology chronology61 = yearMonthDay60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = chronology61.getZone();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        calendar64.setTimeInMillis(100L);
        boolean boolean67 = calendar64.isWeekDateSupported();
        calendar64.roll(2, false);
        calendar64.setTimeInMillis(0L);
        java.util.TimeZone timeZone73 = calendar64.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.Chronology chronology75 = chronology61.withZone(dateTimeZone74);
        java.util.Locale.Category category77 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale78 = java.util.Locale.getDefault(category77);
        java.util.Locale locale79 = java.util.Locale.getDefault(category77);
        java.lang.String str80 = dateTimeZone74.getName(10L, locale79);
        java.util.Locale.Builder builder81 = builder52.setLocale(locale79);
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone45, locale79);
        java.lang.String str83 = dateTimeField12.getAsShortText(28083086, locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar82", (calendar14.compareTo(calendar82) == 0) == calendar14.equals(calendar82));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0933");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean9 = dateTime5.isSupported(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime5.minus(0L);
        org.joda.time.Instant instant12 = dateTime5.toInstant();
        org.joda.time.DateTime dateTime14 = dateTime5.plusSeconds(5);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(1);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths(0);
        org.joda.time.DateTime dateTime24 = dateTime22.minus((long) 2);
        int int25 = dateTime22.getHourOfDay();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime29 = dateTime22.plusHours(25200999);
        org.joda.time.DateTime dateTime31 = dateTime29.minusYears(97);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        boolean boolean33 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant12", (dateTime5.compareTo(instant12) == 0) == dateTime5.equals(instant12));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0934");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        int int13 = property4.getDifference((org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime12.getMillisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(999);
        org.joda.time.DateTime dateTime17 = dateTime12.withTimeAtStartOfDay();
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.Chronology chronology27 = yearMonthDay26.getChronology();
        org.joda.time.DurationField durationField28 = durationFieldType19.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime17.withChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime30", (dateTime17.compareTo(dateTime30) == 0) == dateTime17.equals(dateTime30));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0935");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.plus(readablePeriod8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        int int15 = dateTime14.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime13", (dateTime3.compareTo(dateTime13) == 0) == dateTime3.equals(dateTime13));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0936");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime(dateTimeZone7);
        int int10 = dateTime1.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime9", (dateTime3.compareTo(dateTime9) == 0) == dateTime3.equals(dateTime9));
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0937");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = builder61.build();
        java.util.Calendar.Builder builder66 = builder61.setDate(18, 0, 985);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar62", (calendar51.compareTo(calendar62) == 0) == calendar51.equals(calendar62));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0938");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 8, dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = dateTime3.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMillis((int) 'u');
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 0);
        int int48 = dateTime47.getEra();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes(1);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.DateTime dateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = dateTime53.toString(dateTimeFormatter54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean57 = dateTime53.isSupported(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getDurationType();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime60.minusDays((int) 'a');
        org.joda.time.DateTime dateTime64 = dateTime60.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay65 = dateTime64.toYearMonthDay();
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology66.getZone();
        org.joda.time.DurationField durationField69 = chronology66.days();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.dayOfYear();
        boolean boolean72 = durationFieldType58.isSupported(chronology66);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.DateTime dateTime74 = dateTime43.withChronology(chronology66);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        long long78 = chronology66.add(readablePeriod75, (long) (-25201), (-25201));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime43", (dateTime3.compareTo(dateTime43) == 0) == dateTime3.equals(dateTime43));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0939");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime6 = dateTime3.minusMinutes(1981);
        org.joda.time.DateTime.Property property7 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        int int13 = dateTime11.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime11.plus(readablePeriod16);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime17.withZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime3.toMutableDateTime(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime21", (dateTime3.compareTo(dateTime21) == 0) == dateTime3.equals(dateTime21));
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0940");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        boolean boolean9 = dateTime8.isEqualNow();
        boolean boolean10 = dateTime8.isEqualNow();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime12.minusDays((int) 'a');
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) ' ');
        boolean boolean22 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setTimeInMillis(100L);
        boolean boolean27 = calendar24.isWeekDateSupported();
        calendar24.roll(2, false);
        calendar24.setTimeInMillis(0L);
        java.util.TimeZone timeZone33 = calendar24.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int37 = dateTimeZone35.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.setTimeInMillis(100L);
        boolean boolean41 = calendar38.isWeekDateSupported();
        calendar38.roll(2, false);
        calendar38.setTimeInMillis(0L);
        java.util.TimeZone timeZone47 = calendar38.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        long long50 = dateTimeZone35.getMillisKeepLocal(dateTimeZone48, (long) 2);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 8, dateTimeZone35);
        java.lang.String str52 = dateTimeZone35.getID();
        org.joda.time.DateTime dateTime53 = dateTime19.toDateTime(dateTimeZone35);
        org.joda.time.DateTime.Property property54 = dateTime53.secondOfMinute();
        boolean boolean55 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = dateTime53.minusSeconds(38);
        org.joda.time.DateTime dateTime59 = dateTime57.minusSeconds((int) '4');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime53", (dateTime1.compareTo(dateTime53) == 0) == dateTime1.equals(dateTime53));
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0941");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.era();
        org.joda.time.DateTime dateTime8 = dateTime1.plusSeconds(32772);
        int int9 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property10 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        int int16 = dateTime14.getDayOfWeek();
        boolean boolean18 = dateTime14.isBefore((long) 15);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology26.getZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        calendar29.setTimeInMillis(100L);
        boolean boolean32 = calendar29.isWeekDateSupported();
        calendar29.roll(2, false);
        calendar29.setTimeInMillis(0L);
        java.util.TimeZone timeZone38 = calendar29.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.Chronology chronology40 = chronology26.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology26.dayOfWeek();
        org.joda.time.DateTime dateTime42 = dateTime14.withChronology(chronology26);
        long long43 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime49.minusDays((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay54 = dateTime53.toYearMonthDay();
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.DurationField durationField56 = durationFieldType47.getField(chronology55);
        org.joda.time.DateTime dateTime57 = dateTime46.toDateTime(chronology55);
        int int58 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime60 = dateTime42.minusDays(35409439);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime57", (dateTime46.compareTo(dateTime57) == 0) == dateTime46.equals(dateTime57));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0942");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset((long) 70);
        java.lang.String str28 = dateTimeZone24.getShortName(1L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime33 = dateTime12.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime34 = dateTime7.withZoneRetainFields(dateTimeZone24);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) 70);
        java.lang.String str49 = dateTimeZone45.getShortName(1L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime51.minusDays((int) 'a');
        int int55 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.plusYears(100);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime60.minusDays((int) 'a');
        org.joda.time.DateTime dateTime64 = dateTime60.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay65 = dateTime64.toYearMonthDay();
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.secondOfDay();
        java.lang.String str68 = chronology66.toString();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.monthOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.year();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology66.getZone();
        boolean boolean72 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime73 = dateTime58.withZone(dateTimeZone71);
        org.joda.time.DateTime.Property property74 = dateTime73.secondOfMinute();
        int int75 = property74.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime58 and dateTime73", (dateTime58.compareTo(dateTime73) == 0) == dateTime58.equals(dateTime73));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0943");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        calendar0.roll(0, 13);
        calendar0.setTimeInMillis((long) 10);
        calendar0.clear();
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = dateTimeField17.getAsText(32770, locale19);
        java.lang.String str24 = dateTimeField17.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 100, chronology26);
        int int28 = localTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 100, chronology30);
        boolean boolean32 = localTime27.isAfter((org.joda.time.ReadablePartial) localTime31);
        int int33 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime27);
        java.lang.String str34 = dateTimeField17.getName();
        java.util.Date date40 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromDateFields(date40);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale43.getISO3Country();
        java.lang.String str45 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localTime41, (int) 'a', locale43);
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.lang.String str47 = locale43.getDisplayLanguage(locale46);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = locale50.toLanguageTag();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale50.getDisplayCountry(locale53);
        java.lang.String str55 = locale49.getDisplayVariant(locale50);
        java.lang.String str56 = locale48.getDisplayScript(locale50);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale50);
        java.lang.String str58 = locale46.getDisplayName(locale50);
        java.util.Calendar.Builder builder59 = builder9.setLocale(locale50);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance();
        calendar60.setTimeInMillis(100L);
        boolean boolean63 = calendar60.isWeekDateSupported();
        calendar60.roll(2, false);
        calendar60.setTimeInMillis(0L);
        java.util.TimeZone timeZone69 = calendar60.getTimeZone();
        java.util.Calendar.Builder builder70 = builder9.setTimeZone(timeZone69);
        java.util.Calendar calendar71 = builder70.build();
        java.time.Instant instant72 = calendar71.toInstant();
        org.joda.time.format.DateTimePrinter dateTimePrinter73 = null;
        org.joda.time.format.DateTimeParser dateTimeParser74 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter73, dateTimeParser74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter75.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter77.withPivotYear((int) (byte) 0);
        boolean boolean80 = calendar71.after((java.lang.Object) dateTimeFormatter79);
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.fromCalendarFields(calendar71);
        long long82 = calendar71.getTimeInMillis();
        java.util.TimeZone timeZone83 = calendar71.getTimeZone();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone83);
        int int85 = calendar0.compareTo(calendar84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar60 and calendar71", (calendar60.compareTo(calendar71) == 0) == calendar60.equals(calendar71));
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0944");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DurationField durationField12 = chronology7.years();
        org.joda.time.DurationField durationField13 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField15 = chronology7.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField12, and durationField13", !(durationField15.compareTo(durationField12) == 0) || (Math.signum(durationField15.compareTo(durationField13)) == Math.signum(durationField12.compareTo(durationField13))));
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0945");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 100, chronology6);
        int int8 = localTime7.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 100, chronology10);
        boolean boolean12 = localTime7.isAfter((org.joda.time.ReadablePartial) localTime11);
        int int13 = property2.compareTo((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) ' ');
        boolean boolean25 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property26 = dateTime18.dayOfMonth();
        int int27 = property2.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays((int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(3);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.joda.time.DateTime dateTime38 = dateTime35.minus((-251999990L));
        int int39 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime18.plus((long) 20);
        org.joda.time.DateTime dateTime43 = dateTime18.minusMonths(5);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime18.plus(readableDuration44);
        org.joda.time.DateTime dateTime46 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime46.plusHours(83820000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and dateTime49", (dateTime46.compareTo(dateTime49) == 0) == dateTime46.equals(dateTime49));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0946");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        int int6 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        int int17 = dateTime16.getEra();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        boolean boolean23 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime dateTime28 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = dateTime26.minusMinutes(1);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean34 = dateTime30.isSupported(dateTimeFieldType33);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime30.toGregorianCalendar();
        int int36 = property24.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime37 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime38 = property24.roundFloorCopy();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property43 = dateTime40.weekyear();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((long) (short) 0);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance();
        calendar48.setTimeInMillis(100L);
        boolean boolean51 = calendar48.isWeekDateSupported();
        calendar48.roll(2, false);
        calendar48.setTimeInMillis(0L);
        java.util.TimeZone timeZone57 = calendar48.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int61 = dateTimeZone59.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        long long74 = dateTimeZone59.getMillisKeepLocal(dateTimeZone72, (long) 2);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 8, dateTimeZone59);
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.now(dateTimeZone59);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) 10, dateTimeZone59);
        org.joda.time.DateTime dateTime78 = dateTime45.withZone(dateTimeZone59);
        int int79 = property24.getDifference((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime81 = dateTime78.withMillisOfSecond(44);
        int int82 = property9.getDifference((org.joda.time.ReadableInstant) dateTime81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime78", (dateTime1.compareTo(dateTime78) == 0) == dateTime1.equals(dateTime78));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0947");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Date date54 = new java.util.Date((int) '4', 86399999, 4);
        java.util.Calendar.Builder builder55 = builder50.setInstant(date54);
        java.util.Calendar calendar56 = builder55.build();
        java.util.Calendar.Builder builder60 = builder55.setWeekDate((int) (byte) 10, 62220, 52);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology65);
        org.joda.time.LocalTime.Property property67 = localTime66.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = property67.getField();
        org.joda.time.LocalTime localTime69 = property67.getLocalTime();
        org.joda.time.LocalTime localTime70 = property67.roundCeilingCopy();
        org.joda.time.LocalTime localTime72 = property67.addCopy(6);
        org.joda.time.LocalTime.Property property73 = localTime72.hourOfDay();
        org.joda.time.DateTime dateTime74 = localTime72.toDateTimeToday();
        org.joda.time.LocalTime.Property property75 = localTime72.secondOfMinute();
        int[] intArray76 = localTime72.getValues();
        java.util.Calendar.Builder builder77 = builder55.setFields(intArray76);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance();
        calendar78.setTimeInMillis(100L);
        boolean boolean81 = calendar78.isWeekDateSupported();
        calendar78.roll(2, false);
        calendar78.setTimeInMillis(0L);
        java.util.TimeZone timeZone87 = calendar78.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forTimeZone(timeZone87);
        int int91 = dateTimeZone89.getOffsetFromLocal((long) 0);
        java.util.TimeZone timeZone92 = dateTimeZone89.toTimeZone();
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone92);
        java.util.Locale locale97 = new java.util.Locale("31 Dec 1969 23:59:00 GMT", "java.util.GregorianCalendar[time=1644572567540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=47,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]", "08.03.4707 17:29:00");
        java.util.Calendar calendar98 = java.util.Calendar.getInstance(timeZone92, locale97);
        java.util.Calendar.Builder builder99 = builder55.setTimeZone(timeZone92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar93", (calendar48.compareTo(calendar93) == 0) == calendar48.equals(calendar93));
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0948");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.plusSeconds(6);
        int int6 = dateTime1.getWeekyear();
        java.util.Date date7 = dateTime1.toDate();
        org.joda.time.DateTime dateTime9 = dateTime1.minusHours(96);
        java.lang.String str11 = dateTime1.toString("10.06.1902 03:10:06");
        org.joda.time.DateTime dateTime13 = dateTime1.minusMinutes(41);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime17.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime17.toGregorianCalendar();
        org.joda.time.DateTime dateTime22 = dateTime17.plus(1970L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime13.toDateTime(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime25", (dateTime22.compareTo(dateTime25) == 0) == dateTime22.equals(dateTime25));
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0949");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 10);
        org.joda.time.DateTime.Property property9 = dateTime6.millisOfSecond();
        org.joda.time.DateTime dateTime11 = dateTime6.minusYears(71);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str18 = dateTimeZone16.getNameKey((long) 1970);
        long long22 = dateTimeZone16.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 52, dateTimeZone16);
        java.util.Date date27 = new java.util.Date((int) '4', 86399999, 4);
        int int28 = date27.getSeconds();
        date27.setMinutes(13);
        boolean boolean31 = dateTimeZone16.equals((java.lang.Object) date27);
        int int33 = dateTimeZone16.getStandardOffset(20L);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 71819990, dateTimeZone16);
        org.joda.time.DateTime dateTime35 = dateTime11.withZone(dateTimeZone16);
        int int37 = dateTimeZone16.getOffsetFromLocal((long) 50400000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime35", (dateTime11.compareTo(dateTime35) == 0) == dateTime11.equals(dateTime35));
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0950");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.centuries();
        long long15 = chronology7.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology7.getZone();
        org.joda.time.DurationField durationField18 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology7.era();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        calendar20.setTimeInMillis(100L);
        boolean boolean23 = calendar20.isWeekDateSupported();
        calendar20.roll(2, false);
        calendar20.setTimeInMillis(0L);
        java.util.TimeZone timeZone29 = calendar20.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int33 = dateTimeZone31.getOffsetFromLocal((long) 0);
        long long36 = dateTimeZone31.convertLocalToUTC((long) 2000, false);
        org.joda.time.Chronology chronology37 = chronology7.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.DurationField durationField39 = chronology37.centuries();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField39", (durationField11.compareTo(durationField39) == 0) == durationField11.equals(durationField39));
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0951");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        long long24 = dateTimeZone20.convertLocalToUTC((long) 32770, false);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) 14);
        java.util.TimeZone timeZone27 = dateTimeZone20.toTimeZone();
        java.util.Locale locale30 = new java.util.Locale("Fri Feb 11 09:46:20 UTC 2022", "00:00:00.161");
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone27, locale30);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale33.getISO3Country();
        java.lang.String str36 = locale33.getVariant();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = locale39.toLanguageTag();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale39.getDisplayCountry(locale42);
        java.lang.String str44 = locale38.getDisplayVariant(locale39);
        java.lang.String str45 = locale37.getDisplayScript(locale39);
        java.lang.String str46 = locale37.getISO3Language();
        java.util.Locale locale47 = locale37.stripExtensions();
        java.util.Locale.setDefault(locale47);
        java.lang.String str49 = locale33.getDisplayLanguage(locale47);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone27, locale33);
        java.lang.String str51 = locale33.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar50", (calendar31.compareTo(calendar50) == 0) == calendar31.equals(calendar50));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0952");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField13 = chronology7.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField13, and durationField9", !(durationField9.compareTo(durationField13) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField13.compareTo(durationField9))));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0953");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        int int3 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekyear();
        int int9 = dateTime5.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime5.plusWeeks(121);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(5);
        boolean boolean17 = dateTimeFormatter14.isPrinter();
        boolean boolean18 = dateTime11.equals((java.lang.Object) dateTimeFormatter14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 491);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.Chronology chronology32 = yearMonthDay31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology32.getZone();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        calendar35.setTimeInMillis(100L);
        boolean boolean38 = calendar35.isWeekDateSupported();
        calendar35.roll(2, false);
        calendar35.setTimeInMillis(0L);
        java.util.TimeZone timeZone44 = calendar35.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.Chronology chronology46 = chronology32.withZone(dateTimeZone45);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 32770, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter24.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime52.minusDays((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        org.joda.time.Chronology chronology58 = yearMonthDay57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.secondOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology58.getZone();
        org.joda.time.DurationField durationField62 = chronology58.centuries();
        long long66 = chronology58.add((-50399903L), (long) 86399, 6);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter50.withChronology(chronology58);
        org.joda.time.DateTime dateTime69 = dateTime1.toDateTime(chronology58);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property72 = dateTime71.minuteOfHour();
        org.joda.time.DateTime dateTime74 = dateTime71.minusDays((int) 'a');
        org.joda.time.DateTime dateTime75 = dateTime71.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay76 = dateTime75.toYearMonthDay();
        org.joda.time.Chronology chronology77 = yearMonthDay76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = chronology77.getZone();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance();
        calendar80.setTimeInMillis(100L);
        boolean boolean83 = calendar80.isWeekDateSupported();
        calendar80.roll(2, false);
        calendar80.setTimeInMillis(0L);
        java.util.TimeZone timeZone89 = calendar80.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forTimeZone(timeZone89);
        org.joda.time.Chronology chronology91 = chronology77.withZone(dateTimeZone90);
        org.joda.time.DateTimeField dateTimeField92 = chronology91.era();
        org.joda.time.DateTime dateTime93 = dateTime69.toDateTime(chronology91);
        org.joda.time.DurationField durationField94 = chronology91.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime93", (dateTime1.compareTo(dateTime93) == 0) == dateTime1.equals(dateTime93));
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0954");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getCountry();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        int int5 = calendar4.getMinimalDaysInFirstWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(5);
        boolean boolean11 = dateTimeFormatter8.isPrinter();
        org.joda.time.Chronology chronology12 = dateTimeFormatter8.getChronology();
        boolean boolean13 = dateTimeFormatter8.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter8.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter8.withDefaultYear(0);
        boolean boolean19 = calendar4.after((java.lang.Object) dateTimeFormatter18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology24);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = dateTimeField27.getAsText(32770, locale29);
        java.lang.String str34 = dateTimeField27.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        int int38 = localTime37.getMillisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 100, chronology40);
        boolean boolean42 = localTime37.isAfter((org.joda.time.ReadablePartial) localTime41);
        int int43 = dateTimeField27.getMaximumValue((org.joda.time.ReadablePartial) localTime37);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromCalendarFields(calendar44);
        int int46 = dateTimeField27.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.DateTime dateTime47 = localTime45.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.withPeriodAdded(readablePeriod48, 36000097);
        org.joda.time.DateTime dateTime52 = dateTime50.plusYears(0);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths(269);
        boolean boolean55 = calendar4.after((java.lang.Object) dateTime52);
        org.joda.time.DateTime dateTime57 = dateTime52.plusHours(50400052);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar44", (calendar4.compareTo(calendar44) == 0) == calendar4.equals(calendar44));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0955");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime14.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        int int21 = dateTime19.getMinuteOfDay();
        int int22 = property12.compareTo((org.joda.time.ReadableInstant) dateTime19);
        int int23 = dateTime19.getWeekyear();
        int int24 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime25 = dateTime1.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant20", (dateTime19.compareTo(instant20) == 0) == dateTime19.equals(instant20));
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0956");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 10);
        int int16 = property6.getDifference((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusDays((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.Chronology chronology25 = yearMonthDay24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology25.getZone();
        boolean boolean28 = dateTimeFieldType17.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology25);
        int int32 = property6.getDifference((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 6);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.yearOfCentury();
        org.joda.time.DateTime dateTime38 = dateTime31.withChronology(chronology35);
        org.joda.time.DateTime dateTime39 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime41 = dateTime39.minusDays((-25201));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime39", (dateTime31.compareTo(dateTime39) == 0) == dateTime31.equals(dateTime39));
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0957");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.Chronology chronology8 = yearMonthDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        calendar11.setTimeInMillis(100L);
        boolean boolean14 = calendar11.isWeekDateSupported();
        calendar11.roll(2, false);
        calendar11.setTimeInMillis(0L);
        java.util.TimeZone timeZone20 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = chronology22.weeks();
        org.joda.time.DurationField durationField27 = chronology22.eras();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(587991L, chronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField26 and durationField27", Math.signum(durationField26.compareTo(durationField27)) == -Math.signum(durationField27.compareTo(durationField26)));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis(52);
        org.joda.time.LocalTime localTime8 = localTime2.minusSeconds((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime11 = localTime8.withPeriodAdded(readablePeriod9, 292278993);
        org.joda.time.DateTime dateTime12 = localTime8.toDateTimeToday();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 100, chronology15);
        int int17 = localTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 100, chronology19);
        boolean boolean21 = localTime16.isAfter((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        int int25 = localTime16.indexOf(dateTimeFieldType22);
        org.joda.time.Chronology chronology26 = localTime16.getChronology();
        long long30 = chronology26.add((long) 19, (long) 97, 3);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0, chronology26);
        boolean boolean32 = localTime8.equals((java.lang.Object) chronology26);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        int int35 = dateTime34.getEra();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes(1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology45);
        org.joda.time.LocalTime.Property property47 = localTime46.millisOfSecond();
        int int48 = localTime46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 100, chronology50);
        int int52 = localTime51.getMillisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) 100, chronology54);
        boolean boolean56 = localTime51.isAfter((org.joda.time.ReadablePartial) localTime55);
        int int57 = localTime46.compareTo((org.joda.time.ReadablePartial) localTime55);
        org.joda.time.DateTime dateTime58 = dateTime40.withFields((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime40.plus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str62 = dateTimeFieldType61.getName();
        boolean boolean63 = dateTime40.isSupported(dateTimeFieldType61);
        boolean boolean64 = localTime8.isSupported(dateTimeFieldType61);
        java.lang.String str65 = dateTimeFieldType61.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime34", (dateTime31.compareTo(dateTime34) == 0) == dateTime31.equals(dateTime34));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0959");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        int int7 = localTime5.size();
        org.joda.time.LocalTime localTime9 = localTime5.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime5.minusMillis((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime15.withYear(1);
        int int20 = dateTime19.getMonthOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology28);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        int int31 = localTime29.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int33 = localTime29.get(dateTimeFieldType32);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology38);
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfSecond();
        int int41 = localTime39.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int43 = localTime39.get(dateTimeFieldType42);
        int int44 = localTime29.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.Chronology chronology45 = localTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime23.toMutableDateTime(chronology45);
        org.joda.time.DurationField durationField49 = chronology45.years();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime48", (dateTime23.compareTo(mutableDateTime48) == 0) == dateTime23.equals(mutableDateTime48));
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0960");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0961");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime5 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 0);
        int int8 = dateTime7.getEra();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMinutes(1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(1);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths(0);
        int int21 = dateTime18.getYearOfEra();
        boolean boolean22 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(8, (int) (byte) 10, (int) (short) 10, (int) (short) 1, 3, 4, (int) (short) 1, dateTimeZone44);
        int int62 = dateTimeZone44.getOffsetFromLocal((long) 14);
        java.lang.String str63 = dateTimeZone44.getID();
        java.lang.String str64 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime65 = dateTime25.withZoneRetainFields(dateTimeZone44);
        int int67 = dateTimeZone44.getStandardOffset(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime65", (dateTime3.compareTo(dateTime65) == 0) == dateTime3.equals(dateTime65));
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0962");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        int int4 = calendar0.getActualMaximum(0);
        java.util.Date date5 = calendar0.getTime();
        int int6 = date5.getTimezoneOffset();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.roll((int) (short) 0, 4);
        calendar7.setFirstDayOfWeek((-1));
        boolean boolean14 = calendar7.isWeekDateSupported();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.util.Map<java.lang.String, java.lang.Integer> strMap19 = calendar7.getDisplayNames((int) (short) 1, 0, locale18);
        java.util.TimeZone timeZone20 = calendar7.getTimeZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 0);
        int int23 = dateTime22.getEra();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes(1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.DateTime dateTime28 = property27.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight29 = dateTime28.toDateMidnight();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology34);
        org.joda.time.LocalTime.Property property36 = localTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = dateTimeField37.getAsText(32770, locale39);
        int int44 = dateTimeField37.getMaximumValue((long) 0);
        int int45 = dateTime28.get(dateTimeField37);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = dateTimeField37.getAsText(1967, locale47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology53);
        org.joda.time.LocalTime.Property property55 = localTime54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        long long58 = dateTimeField56.roundFloor((long) (short) 100);
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category59, locale60);
        int int62 = dateTimeField56.getMaximumTextLength(locale60);
        java.util.Locale locale63 = locale60.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale47.getDisplayLanguage(locale63);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone20, locale47);
        boolean boolean68 = date5.equals((java.lang.Object) timeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar67", (calendar7.compareTo(calendar67) == 0) == calendar7.equals(calendar67));
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0963");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        int int3 = dateTime2.getEra();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusMinutes(1);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(0);
        org.joda.time.DateTime dateTime10 = dateTime8.minus((long) 2);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        org.joda.time.Chronology chronology12 = dateTime8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(946L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField13 and durationField16", Math.signum(durationField13.compareTo(durationField16)) == -Math.signum(durationField16.compareTo(durationField13)));
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0964");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(5);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        calendar6.setTimeInMillis(100L);
        boolean boolean9 = calendar6.isWeekDateSupported();
        calendar6.roll(2, false);
        calendar6.setTimeInMillis(0L);
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) 0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMonths((int) ' ');
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int46 = dateTimeZone44.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        calendar47.setTimeInMillis(100L);
        boolean boolean50 = calendar47.isWeekDateSupported();
        calendar47.roll(2, false);
        calendar47.setTimeInMillis(0L);
        java.util.TimeZone timeZone56 = calendar47.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        long long59 = dateTimeZone44.getMillisKeepLocal(dateTimeZone57, (long) 2);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 8, dateTimeZone44);
        java.lang.String str61 = dateTimeZone44.getID();
        org.joda.time.DateTime dateTime62 = dateTime28.toDateTime(dateTimeZone44);
        long long64 = dateTimeZone17.getMillisKeepLocal(dateTimeZone44, (long) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.format.DateTimePrinter dateTimePrinter66 = dateTimeFormatter2.getPrinter();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime62", (dateTime21.compareTo(dateTime62) == 0) == dateTime21.equals(dateTime62));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0965");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 100, (int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMinutes(2);
        long long9 = dateTime8.getMillis();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = localTime15.size();
        org.joda.time.LocalTime localTime19 = localTime15.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime21 = localTime15.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 100, chronology23);
        int int25 = localTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        boolean boolean29 = localTime24.isAfter((org.joda.time.ReadablePartial) localTime28);
        boolean boolean30 = localTime21.isEqual((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        int int39 = localTime38.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        boolean boolean43 = localTime38.isAfter((org.joda.time.ReadablePartial) localTime42);
        int int44 = property33.compareTo((org.joda.time.ReadablePartial) localTime38);
        java.lang.String str45 = localTime38.toString();
        boolean boolean46 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        int int49 = dateTime48.getEra();
        org.joda.time.DateTime dateTime50 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime52 = dateTime48.minusMinutes(1);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readablePeriod55);
        org.joda.time.DateTime dateTime57 = localTime38.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime59 = dateTime57.withCenturyOfEra(985);
        org.joda.time.DateTime dateTime61 = dateTime57.plus((long) 18);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours(16);
        org.joda.time.DateTime dateTime64 = dateTime61.withZoneRetainFields(dateTimeZone63);
        java.lang.String str65 = dateTimeZone63.getID();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime8.toMutableDateTime(dateTimeZone63);
        java.lang.String str67 = dateTimeZone63.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime66", (dateTime8.compareTo(mutableDateTime66) == 0) == dateTime8.equals(mutableDateTime66));
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0966");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime5 = dateTime2.minusDays((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime2.toDateTime();
        org.joda.time.DateTime.Property property7 = dateTime2.era();
        org.joda.time.DateTime.Property property8 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readablePeriod10);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        org.joda.time.Chronology chronology20 = yearMonthDay19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfDay();
        java.lang.String str22 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        org.joda.time.DurationField durationField25 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.weekyear();
        org.joda.time.DurationField durationField27 = chronology20.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.weekyear();
        org.joda.time.Chronology chronology29 = chronology20.withUTC();
        org.joda.time.DateTime dateTime30 = dateTime9.toDateTime(chronology29);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(40269054L, chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime30", (dateTime9.compareTo(dateTime30) == 0) == dateTime9.equals(dateTime30));
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0967");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays(0);
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime1.toYearMonthDay();
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.Chronology chronology15 = yearMonthDay14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        java.lang.String str17 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology15);
        org.joda.time.DateTime dateTime26 = dateTime1.withDurationAdded((long) 737, 36000156);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime23", (dateTime1.compareTo(dateTime23) == 0) == dateTime1.equals(dateTime23));
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0968");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 121);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int19 = dateTimeZone17.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime14.withZone(dateTimeZone17);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone31.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(6);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        int int44 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime43);
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.lang.String str47 = locale46.getISO3Country();
        java.lang.String str48 = locale46.toLanguageTag();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology53);
        org.joda.time.LocalTime.Property property55 = localTime54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        java.lang.String str58 = dateTimeField56.getAsShortText((long) 121);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = dateTimeField56.getAsShortText((-1), locale60);
        java.lang.String str62 = locale46.getDisplayLanguage(locale60);
        java.lang.String str63 = dateTimeZone31.getShortName((long) '#', locale46);
        int int65 = dateTimeZone31.getOffset((long) 32769);
        long long67 = dateTimeZone17.getMillisKeepLocal(dateTimeZone31, 1343862167807021000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime20", (dateTime14.compareTo(dateTime20) == 0) == dateTime14.equals(dateTime20));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0969");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.withYear(1);
        int int6 = dateTime5.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths((int) 'x');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime18.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime29 = dateTime5.withChronology(chronology24);
        java.lang.String str30 = dateTime29.toString();
        int int31 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTime dateTime32 = dateTime29.withTimeAtStartOfDay();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        calendar33.setTimeInMillis(100L);
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.roll(2, false);
        calendar33.setTimeInMillis(0L);
        java.util.TimeZone timeZone42 = calendar33.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.toLanguageTag();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale47.getDisplayCountry(locale50);
        java.lang.String str52 = locale46.getDisplayVariant(locale47);
        java.lang.String str53 = locale45.getDisplayScript(locale47);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone42, locale45);
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone42, locale55);
        java.util.Calendar calendar57 = dateTime32.toCalendar(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime29", (dateTime5.compareTo(dateTime29) == 0) == dateTime5.equals(dateTime29));
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0970");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime10.plusSeconds(96);
        org.joda.time.DateTime dateTime17 = dateTime10.withHourOfDay((int) (byte) 10);
        boolean boolean19 = dateTime10.isBefore((long) 2);
        org.joda.time.DateTime dateTime22 = dateTime10.withDurationAdded((-2177452800009L), 17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int26 = dateTimeZone24.getOffset((long) (short) 100);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone24.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTime dateTime30 = dateTime10.toDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime31 = dateTime10.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime30", (dateTime10.compareTo(dateTime30) == 0) == dateTime10.equals(dateTime30));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0971");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.withHourOfDay(6);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.getCountry();
        java.lang.String str36 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localTime31, locale33);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromCalendarFields(calendar37);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromCalendarFields(calendar37);
        int int40 = calendar37.getWeeksInWeekYear();
        calendar37.setMinimalDaysInFirstWeek(2);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) calendar37);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromCalendarFields(calendar37);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property49 = dateTime46.weekyear();
        org.joda.time.DateTime dateTime51 = property49.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime53 = dateTime51.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime51.minus(readablePeriod54);
        int int56 = dateTime55.getMonthOfYear();
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTimeISO();
        org.joda.time.DateTime.Property property58 = dateTime55.minuteOfHour();
        org.joda.time.DateTime dateTime59 = property58.roundHalfCeilingCopy();
        boolean boolean60 = localTime44.equals((java.lang.Object) dateTime59);
        java.util.Locale locale64 = new java.util.Locale("millisOfSecond", "35", "millisOfSecond");
        java.lang.String str65 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localTime44, locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale64);
        java.lang.String str67 = locale64.getDisplayVariant();
        java.lang.Object obj68 = locale64.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar66", (calendar37.compareTo(calendar66) == 0) == calendar37.equals(calendar66));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0972");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(1920000L, 32000);
        org.joda.time.DateTime dateTime18 = dateTime12.withMillisOfSecond(36);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusDays((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.secondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime18.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime32", (dateTime18.compareTo(dateTime32) == 0) == dateTime18.equals(dateTime32));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0973");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime3 = dateTime1.minus(10L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 0);
        int int6 = dateTime5.getEra();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(1);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = dateTime11.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean15 = dateTime11.isSupported(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getDurationType();
        int int17 = dateTime3.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime19 = dateTime3.withMillisOfDay(1967);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime21.minusDays((int) 'a');
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int27 = dateTime25.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays((int) 'a');
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime33.toYearMonthDay();
        org.joda.time.Chronology chronology35 = yearMonthDay34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology35.getZone();
        org.joda.time.DurationField durationField38 = chronology35.months();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType26.getField(chronology35);
        java.lang.String str40 = dateTimeFieldType26.getName();
        boolean boolean41 = dateTime3.isSupported(dateTimeFieldType26);
        org.joda.time.DateTime dateTime42 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime44.minusDays((int) 'a');
        org.joda.time.DateTime dateTime48 = dateTime44.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        org.joda.time.Chronology chronology50 = yearMonthDay49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology50.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology50.getZone();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime3.toMutableDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime55", (dateTime3.compareTo(mutableDateTime55) == 0) == dateTime3.equals(mutableDateTime55));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0974");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.plus(readableDuration3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 100, chronology7);
        int int9 = localTime8.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 100, chronology11);
        boolean boolean13 = localTime8.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        int int17 = localTime8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DurationField durationField20 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfCentury();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime4.toDateTime(chronology18);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime24.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0975");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.minusDays((int) 'a');
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        int int22 = property13.getDifference((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DurationField durationField23 = property13.getDurationField();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property28 = dateTime25.weekyear();
        org.joda.time.DateTime dateTime30 = property28.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime32 = dateTime30.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.minus(readablePeriod33);
        int int35 = dateTime34.getMonthOfYear();
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTimeISO();
        int int37 = property13.getDifference((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime36);
        java.util.GregorianCalendar gregorianCalendar39 = dateTime36.toGregorianCalendar();
        int int40 = gregorianCalendar39.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 0);
        int int44 = dateTime43.getEra();
        org.joda.time.DateTime dateTime46 = dateTime43.plusMinutes((int) ' ');
        org.joda.time.DateTime.Property property47 = dateTime46.monthOfYear();
        boolean boolean48 = localTime41.equals((java.lang.Object) dateTime46);
        int int49 = dateTime46.getMonthOfYear();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.plusDays(14);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = localTime61.getFieldTypes();
        org.joda.time.Chronology chronology63 = localTime61.getChronology();
        org.joda.time.DateTime dateTime64 = dateTime55.withChronology(chronology63);
        int int65 = dateTime55.getSecondOfDay();
        int int66 = dateTime55.getMillisOfDay();
        boolean boolean67 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean68 = gregorianCalendar39.equals((java.lang.Object) boolean67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime64", (dateTime55.compareTo(dateTime64) == 0) == dateTime55.equals(dateTime64));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0976");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withYear(292269054);
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfYear();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((long) 53);
        org.joda.time.DateTime.Property property9 = dateTime8.weekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = dateTimeField17.getAsText(32770, locale19);
        org.joda.time.DurationField durationField23 = dateTimeField17.getLeapDurationField();
        java.lang.String str25 = dateTimeField17.getAsText((long) 36000107);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology30);
        org.joda.time.LocalTime.Property property32 = localTime31.millisOfSecond();
        int int33 = localTime31.size();
        org.joda.time.LocalTime.Property property34 = localTime31.minuteOfHour();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale37.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale37.getDisplayCountry(locale40);
        java.lang.String str42 = locale36.getDisplayVariant(locale37);
        java.lang.String str43 = locale35.getDisplayScript(locale37);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = locale44.getDisplayCountry();
        java.lang.String str48 = locale35.getDisplayLanguage(locale44);
        java.lang.String str49 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localTime31, locale44);
        java.util.Calendar calendar50 = dateTime8.toCalendar(locale44);
        org.joda.time.DateTime dateTime52 = dateTime8.withWeekOfWeekyear(48);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(71);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = dateTime53.withZone(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime52 and dateTime57", (dateTime52.compareTo(dateTime57) == 0) == dateTime52.equals(dateTime57));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0977");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        calendar10.setTimeInMillis(100L);
        boolean boolean13 = calendar10.isWeekDateSupported();
        calendar10.roll(2, false);
        calendar10.setTimeInMillis(0L);
        java.util.TimeZone timeZone19 = calendar10.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone20);
        long long24 = dateTimeZone20.convertLocalToUTC((long) 32770, false);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) 14);
        java.util.TimeZone timeZone27 = dateTimeZone20.toTimeZone();
        java.util.Locale locale30 = new java.util.Locale("Fri Feb 11 09:46:20 UTC 2022", "00:00:00.161");
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone27, locale30);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale33.getISO3Country();
        java.lang.String str36 = locale33.getVariant();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = locale39.toLanguageTag();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale39.getDisplayCountry(locale42);
        java.lang.String str44 = locale38.getDisplayVariant(locale39);
        java.lang.String str45 = locale37.getDisplayScript(locale39);
        java.lang.String str46 = locale37.getISO3Language();
        java.util.Locale locale47 = locale37.stripExtensions();
        java.util.Locale.setDefault(locale47);
        java.lang.String str49 = locale33.getDisplayLanguage(locale47);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone27, locale33);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar50", (calendar31.compareTo(calendar50) == 0) == calendar31.equals(calendar50));
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0978");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 100, chronology5);
        boolean boolean7 = localTime2.isAfter((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.Chronology chronology8 = localTime6.getChronology();
        int int9 = localTime6.getMinuteOfHour();
        org.joda.time.Chronology chronology10 = localTime6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyear();
        org.joda.time.Chronology chronology13 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology13.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField15, and durationField11", !(durationField11.compareTo(durationField15) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField15.compareTo(durationField11))));
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0979");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) 'a');
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology7 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DurationField durationField12 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        org.joda.time.DurationField durationField14 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.yearOfEra();
        org.joda.time.DurationField durationField16 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.secondOfMinute();
        org.joda.time.DurationField durationField18 = chronology7.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField12, and durationField14", !(durationField18.compareTo(durationField12) == 0) || (Math.signum(durationField18.compareTo(durationField14)) == Math.signum(durationField12.compareTo(durationField14))));
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0980");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime1.minus(17L);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(86);
        java.lang.Object obj12 = null;
        boolean boolean13 = dateTime11.equals(obj12);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology18);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        int int21 = localTime19.size();
        org.joda.time.LocalTime localTime23 = localTime19.minusMinutes((int) ' ');
        org.joda.time.LocalTime localTime25 = localTime19.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 100, chronology27);
        int int29 = localTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 100, chronology31);
        boolean boolean33 = localTime28.isAfter((org.joda.time.ReadablePartial) localTime32);
        boolean boolean34 = localTime25.isEqual((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime39 = property37.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 100, chronology41);
        int int43 = localTime42.getMillisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100, chronology45);
        boolean boolean47 = localTime42.isAfter((org.joda.time.ReadablePartial) localTime46);
        int int48 = property37.compareTo((org.joda.time.ReadablePartial) localTime42);
        java.lang.String str49 = localTime42.toString();
        boolean boolean50 = localTime32.isAfter((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (byte) 0);
        int int53 = dateTime52.getEra();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime56 = dateTime52.minusMinutes(1);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfYear();
        org.joda.time.DateTime dateTime58 = property57.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.minus(readablePeriod59);
        org.joda.time.DateTime dateTime61 = localTime42.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime63 = dateTime61.withCenturyOfEra(985);
        org.joda.time.DateTime dateTime65 = dateTime61.plus((long) 18);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property68 = dateTime67.minuteOfHour();
        org.joda.time.DateTime dateTime70 = dateTime67.minusDays((int) 'a');
        org.joda.time.DateTime dateTime71 = dateTime70.toDateTime();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance();
        calendar72.setTimeInMillis(100L);
        boolean boolean75 = calendar72.isWeekDateSupported();
        calendar72.roll(2, false);
        calendar72.setTimeInMillis(0L);
        java.util.TimeZone timeZone81 = calendar72.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        int int84 = dateTimeZone82.getOffset((long) 70);
        java.lang.String str86 = dateTimeZone82.getShortName(1L);
        long long90 = dateTimeZone82.convertLocalToUTC((long) (short) 0, false, 1970L);
        org.joda.time.DateTime dateTime91 = dateTime70.withZoneRetainFields(dateTimeZone82);
        org.joda.time.DateTime dateTime92 = dateTime61.toDateTime(dateTimeZone82);
        org.joda.time.DateTime dateTime93 = dateTime11.withZoneRetainFields(dateTimeZone82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime61 and dateTime92", (dateTime61.compareTo(dateTime92) == 0) == dateTime61.equals(dateTime92));
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0981");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        int int8 = dateTime7.getMillisOfSecond();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.minus(readablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZone(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime24 = dateTime21.withField(dateTimeFieldType22, 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime21.withPeriodAdded(readablePeriod25, (int) (short) 1);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 0);
        int int30 = dateTime29.getEra();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.minusMinutes(1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.DateTime dateTime35 = property34.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        org.joda.time.DateTime dateTime39 = dateTime35.withYearOfEra(11);
        int int40 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime45 = dateTime42.minusDays((int) 'a');
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime46.toYearMonthDay();
        org.joda.time.Chronology chronology48 = yearMonthDay47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology48.getZone();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.Chronology chronology62 = chronology48.withZone(dateTimeZone61);
        org.joda.time.DurationField durationField63 = chronology62.seconds();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.secondOfDay();
        org.joda.time.DateTime dateTime66 = dateTime21.toDateTime(chronology62);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime69 = dateTime66.withFieldAdded(durationFieldType67, 991);
        org.joda.time.DateTime dateTime71 = dateTime7.withFieldAdded(durationFieldType67, 32770);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime66", (dateTime1.compareTo(dateTime66) == 0) == dateTime1.equals(dateTime66));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0982");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = dateTimeField8.getAsText(32770, locale10);
        java.lang.String str15 = dateTimeField8.getAsText((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 100, chronology17);
        int int19 = localTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 100, chronology21);
        boolean boolean23 = localTime18.isAfter((org.joda.time.ReadablePartial) localTime22);
        int int24 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        java.lang.String str25 = dateTimeField8.getName();
        java.util.Date date31 = new java.util.Date(0, (int) (short) 1, (int) ' ', (int) (byte) -1, 17);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date31);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime32, (int) 'a', locale34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale40.getDisplayVariant(locale41);
        java.lang.String str47 = locale39.getDisplayScript(locale41);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale41);
        java.lang.String str49 = locale37.getDisplayName(locale41);
        java.util.Calendar.Builder builder50 = builder0.setLocale(locale41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        calendar51.setTimeInMillis(100L);
        boolean boolean54 = calendar51.isWeekDateSupported();
        calendar51.roll(2, false);
        calendar51.setTimeInMillis(0L);
        java.util.TimeZone timeZone60 = calendar51.getTimeZone();
        java.util.Calendar.Builder builder61 = builder0.setTimeZone(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        calendar62.setTimeInMillis(100L);
        boolean boolean65 = calendar62.isWeekDateSupported();
        calendar62.roll(2, false);
        calendar62.setTimeInMillis(0L);
        java.util.TimeZone timeZone71 = calendar62.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        java.util.Calendar.Builder builder74 = builder61.setTimeZone(timeZone73);
        java.util.Calendar.Builder builder76 = builder74.setLenient(false);
        java.util.Calendar calendar77 = builder76.build();
        java.util.Date date84 = new java.util.Date(0, (int) '#', (int) (short) 10, 2, 70, 6);
        int int85 = date84.getDay();
        date84.setTime((-292275054L));
        date84.setYear(277);
        int int90 = date84.getSeconds();
        java.util.Calendar.Builder builder91 = builder76.setInstant(date84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar77", (calendar51.compareTo(calendar77) == 0) == calendar51.equals(calendar77));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0983");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        int int15 = dateTime13.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.plus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime13.minusMillis(15);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) 121);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMonths((-1));
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds((-292275054));
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        long long28 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis(0L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime32.minusDays((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology38.getZone();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        calendar41.setTimeInMillis(100L);
        boolean boolean44 = calendar41.isWeekDateSupported();
        calendar41.roll(2, false);
        calendar41.setTimeInMillis(0L);
        java.util.TimeZone timeZone50 = calendar41.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.Chronology chronology52 = chronology38.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfWeek();
        org.joda.time.DurationField durationField54 = chronology52.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.monthOfYear();
        org.joda.time.DurationField durationField56 = chronology52.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime30.toMutableDateTime(chronology52);
        org.joda.time.DurationField durationField59 = chronology52.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime58", (dateTime1.compareTo(mutableDateTime58) == 0) == dateTime1.equals(mutableDateTime58));
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0984");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime1.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime1.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology14);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = dateTimeField17.getAsText(32770, locale19);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology27);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        int int30 = localTime28.size();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 100, chronology32);
        int int34 = localTime33.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 100, chronology36);
        boolean boolean38 = localTime33.isAfter((org.joda.time.ReadablePartial) localTime37);
        int int39 = localTime28.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology44);
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfSecond();
        int int47 = localTime45.size();
        int[] intArray48 = localTime45.getValues();
        int int49 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime37, intArray48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalTime localTime51 = localTime37.minus(readablePeriod50);
        int int52 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime54.minusDays((int) 'a');
        org.joda.time.DateTime dateTime58 = dateTime54.toDateTime();
        org.joda.time.DateTime.Property property59 = dateTime54.era();
        org.joda.time.DateTime.Property property60 = dateTime54.weekOfWeekyear();
        org.joda.time.DateTime dateTime61 = property60.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.plus(readablePeriod62);
        org.joda.time.DateTime.Property property64 = dateTime61.dayOfWeek();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (byte) 0);
        int int67 = dateTime66.getEra();
        org.joda.time.DateTime dateTime68 = dateTime66.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime70 = dateTime66.minusMinutes(1);
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfYear();
        org.joda.time.DateTime dateTime72 = property71.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = null;
        java.lang.String str74 = dateTime72.toString(dateTimeFormatter73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean76 = dateTime72.isSupported(dateTimeFieldType75);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType75.getDurationType();
        org.joda.time.DateTime dateTime79 = dateTime61.withFieldAdded(durationFieldType77, 17);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.DateTime dateTime81 = dateTime61.plus(readablePeriod80);
        org.joda.time.Instant instant82 = dateTime81.toInstant();
        org.joda.time.DateTime dateTime83 = localTime37.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime81 and instant82", (dateTime81.compareTo(instant82) == 0) == dateTime81.equals(instant82));
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0985");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 100, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localTime2.isSupported(dateTimeFieldType3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        int int7 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime2.withMillisOfDay(9);
        org.joda.time.LocalTime.Property property11 = localTime2.secondOfMinute();
        org.joda.time.LocalTime.Property property12 = localTime2.hourOfDay();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        java.lang.String str14 = calendar13.getCalendarType();
        java.time.Instant instant15 = calendar13.toInstant();
        int int16 = calendar13.getWeekYear();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar13);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTime dateTime20 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime19.plusSeconds(1644573600);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(14);
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime31 = dateTime26.withYearOfCentury(14);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean36 = localTime34.isSupported(dateTimeFieldType35);
        boolean boolean37 = dateTime31.isSupported(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.DateTime dateTime40 = dateTime19.withFieldAdded(durationFieldType38, 587);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime20", (dateTime8.compareTo(dateTime20) == 0) == dateTime8.equals(dateTime20));
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0986");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusMillis(15);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 1970);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime9.toMutableDateTime(dateTimeZone11);
        int int16 = dateTimeZone11.getOffsetFromLocal(481034585640000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime14", (dateTime9.compareTo(mutableDateTime14) == 0) == dateTime9.equals(mutableDateTime14));
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0987");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType10.isSupported(chronology12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        java.lang.String str15 = calendar14.getCalendarType();
        java.time.Instant instant16 = calendar14.toInstant();
        int int17 = calendar14.getWeekYear();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType10.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.monthOfYear();
        org.joda.time.DurationField durationField26 = chronology19.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField26, and durationField22", !(durationField22.compareTo(durationField26) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField26.compareTo(durationField22))));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0988");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMinutes(1);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(0);
        int int15 = dateTime12.getYearOfEra();
        boolean boolean16 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime12);
        int int17 = dateTime12.getEra();
        org.joda.time.DateTime dateTime19 = dateTime12.minus((long) 9);
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        calendar21.setTimeInMillis(100L);
        boolean boolean24 = calendar21.isWeekDateSupported();
        calendar21.roll(2, false);
        calendar21.setTimeInMillis(0L);
        java.util.TimeZone timeZone30 = calendar21.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long33 = dateTimeZone31.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime42 = dateTime40.withHourOfDay(6);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        int int44 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.minus(readablePeriod45);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 0);
        int int49 = dateTime48.getEra();
        org.joda.time.DateTime dateTime50 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime52 = dateTime48.minusMinutes(1);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.DateTime dateTime54 = property53.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = dateTime54.toString(dateTimeFormatter55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean58 = dateTime54.isSupported(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType57.getDurationType();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime64 = dateTime61.minusDays((int) 'a');
        org.joda.time.DateTime dateTime65 = dateTime61.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay66 = dateTime65.toYearMonthDay();
        org.joda.time.Chronology chronology67 = yearMonthDay66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology67.getZone();
        org.joda.time.DurationField durationField70 = chronology67.days();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.dayOfYear();
        boolean boolean73 = durationFieldType59.isSupported(chronology67);
        long long77 = chronology67.add((-1581379253000L), (long) 'u', (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField78 = chronology67.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime43.toMutableDateTime(chronology67);
        org.joda.time.DateTime dateTime80 = dateTime19.withChronology(chronology67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and mutableDateTime79", (dateTime42.compareTo(mutableDateTime79) == 0) == dateTime42.equals(mutableDateTime79));
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0989");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        int int4 = dateTime3.getDayOfYear();
        int int5 = dateTime3.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight6 = dateTime3.toDateMidnight();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology11);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property13.withMaximumValue();
        int int16 = localTime14.getValue(0);
        java.lang.String str17 = localTime14.toString();
        org.joda.time.LocalTime.Property property18 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime20 = property18.addCopy(58619991L);
        org.joda.time.DateTime dateTime21 = dateTime3.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        int int27 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime23.plusWeeks(121);
        int int30 = dateTime23.getMillisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withPivotYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withPivotYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter37.withZoneUTC();
        java.lang.Integer int39 = dateTimeFormatter38.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withDefaultYear(11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 30);
        boolean boolean44 = dateTimeFormatter43.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeFormatter43.getZone();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime23.toMutableDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime21.withZoneRetainFields(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime46", (dateTime1.compareTo(mutableDateTime46) == 0) == dateTime1.equals(mutableDateTime46));
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0990");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 6);
        org.joda.time.DateTime dateTime3 = dateTime1.minus(10L);
        org.joda.time.DateTime.Property property4 = dateTime1.millisOfDay();
        org.joda.time.DateTime.Property property5 = dateTime1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTime(dateTimeZone7);
        boolean boolean10 = dateTimeZone7.isStandardOffset(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime8", (dateTime1.compareTo(dateTime8) == 0) == dateTime1.equals(dateTime8));
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0991");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, (long) 2);
        boolean boolean27 = dateTimeZone24.isFixed();
        long long30 = dateTimeZone24.adjustOffset((long) 139680, false);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime39 = dateTime35.plusMonths((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime35.plus(readableDuration40);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology49);
        org.joda.time.LocalTime.Property property51 = localTime50.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        long long54 = dateTimeField52.roundFloor((long) (short) 100);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(category55, locale56);
        int int58 = dateTimeField52.getMaximumTextLength(locale56);
        java.lang.String str59 = dateTimeField43.getAsShortText(36000097, locale56);
        java.lang.String str60 = dateTimeZone24.getShortName(86L, locale56);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime65 = dateTime64.toDateTimeISO();
        int int66 = dateTime64.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime64.plus(readableDuration67);
        org.joda.time.DateTime dateTime70 = dateTime64.minusMillis(15);
        org.joda.time.DateTime dateTime72 = dateTime70.plus((long) 121);
        org.joda.time.DateTime.Property property73 = dateTime72.dayOfMonth();
        org.joda.time.DateTime dateTime75 = dateTime72.plusMonths((-1));
        org.joda.time.DateTime.Property property76 = dateTime75.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours(16);
        int int80 = dateTimeZone78.getOffset((long) (short) 100);
        org.joda.time.DateTime dateTime81 = dateTime75.withZone(dateTimeZone78);
        org.joda.time.DateTime.Property property82 = dateTime75.minuteOfHour();
        int int83 = dateTime75.getMillisOfSecond();
        org.joda.time.DateTime dateTime85 = dateTime75.minusMonths(540);
        int int86 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime75 and dateTime81", (dateTime75.compareTo(dateTime81) == 0) == dateTime75.equals(dateTime81));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0992");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        calendar2.setTimeInMillis(100L);
        boolean boolean5 = calendar2.isWeekDateSupported();
        calendar2.roll(2, false);
        calendar2.setTimeInMillis(0L);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = dateTimeZone13.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        calendar16.setTimeInMillis(100L);
        boolean boolean19 = calendar16.isWeekDateSupported();
        calendar16.roll(2, false);
        calendar16.setTimeInMillis(0L);
        java.util.TimeZone timeZone25 = calendar16.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone26, (long) 2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 8, dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime29.withYearOfEra(14);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int40 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime45 = dateTime42.minusDays((int) 'a');
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime46.toYearMonthDay();
        org.joda.time.Chronology chronology48 = yearMonthDay47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology48.getZone();
        org.joda.time.DurationField durationField51 = chronology48.months();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType39.getField(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.millisOfDay();
        org.joda.time.DateTime dateTime56 = dateTime32.withChronology(chronology48);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) 32770, chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime56", (dateTime32.compareTo(dateTime56) == 0) == dateTime32.equals(dateTime56));
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0993");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setTimeInMillis(100L);
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.roll(2, false);
        calendar0.setTimeInMillis(0L);
        java.util.TimeZone timeZone9 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone11, locale12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11);
        calendar14.set(292275055, 28026832, 63120000);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setTimeInMillis(100L);
        boolean boolean22 = calendar19.isWeekDateSupported();
        calendar19.roll(2, false);
        calendar19.setTimeInMillis(0L);
        java.util.TimeZone timeZone28 = calendar19.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone28);
        calendar14.setTimeZone(timeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar30", (calendar13.compareTo(calendar30) == 0) == calendar13.equals(calendar30));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0994");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime1.withDurationAdded(139680L, (-1));
        org.joda.time.DateTime dateTime10 = dateTime8.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(56);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays((int) 'a');
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime20.toYearMonthDay();
        org.joda.time.Chronology chronology22 = yearMonthDay21.getChronology();
        org.joda.time.DurationField durationField23 = durationFieldType14.getField(chronology22);
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTime dateTime25 = dateTime10.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology31);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        int int34 = localTime32.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int36 = localTime32.get(dateTimeFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = localTime32.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology43);
        org.joda.time.LocalTime.Property property45 = localTime44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        java.lang.String str48 = dateTimeField46.getAsShortText((long) 121);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = dateTimeField46.getAsShortText((long) (byte) 100, locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.getISO3Country();
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale54.getDisplayCountry(locale57);
        java.lang.String str59 = locale53.getDisplayVariant(locale54);
        java.lang.String str60 = locale52.getDisplayScript(locale54);
        java.lang.String str61 = locale52.getISO3Language();
        java.lang.String str62 = locale52.getISO3Country();
        java.lang.String str63 = locale50.getDisplayLanguage(locale52);
        java.lang.String str64 = locale52.getLanguage();
        java.lang.String str65 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localTime32, locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime25", (dateTime10.compareTo(dateTime25) == 0) == dateTime10.equals(dateTime25));
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0995");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.minusMinutes(1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology14);
        boolean boolean19 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime5.plus(readablePeriod20);
        int int22 = dateTime5.getMinuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime5.minusHours(86);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime26.minusDays((int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.Chronology chronology40 = yearMonthDay39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology40.getZone();
        org.joda.time.DurationField durationField43 = chronology40.months();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType31.getField(chronology40);
        org.joda.time.DurationField durationField45 = chronology40.centuries();
        long long50 = chronology40.getDateTimeMillis(292278993, (int) (short) 1, 8, 36000089);
        org.joda.time.DateTimeField dateTimeField51 = chronology40.weekOfWeekyear();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime53 = dateTime24.withChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField54 = chronology40.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime53", (dateTime24.compareTo(dateTime53) == 0) == dateTime24.equals(dateTime53));
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0996");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(70);
        java.lang.String str4 = dateTimeZone2.getNameKey((long) 1970);
        long long8 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 52, dateTimeZone2);
        long long12 = dateTimeZone2.adjustOffset((long) 86399, false);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        int int15 = dateTime14.getEra();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        int int17 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 0);
        int int26 = dateTime25.getEra();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes(1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.DateTime dateTime31 = property30.roundHalfCeilingCopy();
        boolean boolean32 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime20.plusHours(6);
        org.joda.time.DateTime dateTime36 = dateTime20.minus((-1L));
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.DateTime dateTime39 = property37.roundCeilingCopy();
        org.joda.time.DateTime dateTime41 = dateTime39.withMillis((long) 11);
        int int42 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTime dateTime43 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime44 = dateTime39.toLocalDateTime();
        boolean boolean45 = dateTimeZone2.isLocalDateTimeGap(localDateTime44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime20", (dateTime14.compareTo(dateTime20) == 0) == dateTime14.equals(dateTime20));
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0997");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime6.withHourOfDay(6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) 'a');
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(3);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.minus((-251999990L));
        boolean boolean24 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getWeekOfWeekyear();
        int int26 = dateTime23.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.minus(readableDuration27);
        boolean boolean30 = dateTime28.isBefore((long) (-292275054));
        org.joda.time.DateTime dateTime32 = dateTime28.plusDays(28);
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime35 = dateTime32.minusMillis(271);
        org.joda.time.DateTime dateTime37 = dateTime35.plusDays(528);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and instant33", (dateTime32.compareTo(instant33) == 0) == dateTime32.equals(instant33));
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0998");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) ' ');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTimeISO();
        int int5 = dateTime3.getDayOfWeek();
        boolean boolean7 = dateTime3.isBefore((long) 15);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(5);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        calendar14.setTimeInMillis(100L);
        boolean boolean17 = calendar14.isWeekDateSupported();
        calendar14.roll(2, false);
        calendar14.setTimeInMillis(0L);
        java.util.TimeZone timeZone23 = calendar14.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        calendar28.setTimeInMillis(100L);
        boolean boolean31 = calendar28.isWeekDateSupported();
        calendar28.roll(2, false);
        calendar28.setTimeInMillis(0L);
        java.util.TimeZone timeZone37 = calendar28.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 8, dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter10.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime43 = dateTime3.withZone(dateTimeZone25);
        int int44 = dateTime43.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.withDurationAdded(readableDuration45, 0);
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekOfWeekyear(7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime47", (dateTime3.compareTo(dateTime47) == 0) == dateTime3.equals(dateTime47));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0999");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(2);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(4);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.LocalTime localTime16 = localTime13.withSecondOfMinute(23);
        org.joda.time.LocalTime localTime18 = localTime16.withSecondOfMinute((int) (short) 0);
        org.joda.time.DateTime dateTime19 = localTime18.toDateTimeToday();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(152);
        org.joda.time.DateTime dateTime22 = dateTime19.withZone(dateTimeZone21);
        java.lang.String str24 = dateTimeZone21.getShortName((long) (-4883030));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime22", (dateTime19.compareTo(dateTime22) == 0) == dateTime19.equals(dateTime22));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test1000");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 10, 0, (int) (short) 0, (int) 'a', chronology4);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime8 = property6.getLocalTime();
        org.joda.time.LocalTime localTime10 = property6.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime12 = property6.addWrapFieldToCopy(8);
        org.joda.time.LocalTime localTime13 = property6.getLocalTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 0);
        int int16 = dateTime15.getEra();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes(1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        int int24 = dateTime21.getDayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime21.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withPeriodAdded(readablePeriod29, 17);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 100, chronology33);
        int int35 = localTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 100, chronology37);
        boolean boolean39 = localTime34.isAfter((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = dateTimeFieldType40.isSupported(chronology41);
        int int43 = localTime34.indexOf(dateTimeFieldType40);
        org.joda.time.Chronology chronology44 = localTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.minuteOfHour();
        org.joda.time.DateTime dateTime46 = dateTime31.toDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime48 = dateTime31.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and dateTime46", (dateTime48.compareTo(dateTime46) == 0) == dateTime48.equals(dateTime46));
    }
}

